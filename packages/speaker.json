{"name":"speaker","description":"Output PCM audio data to the speakers","keywords":["pcm","audio","sound","music","output","speaker","headphone","alsa","coreaudio","openal","sdl","portaudio","jack","oss","pulse","mpg123"],"license":"MIT","version":"0.3.0","repository":"https://github.com/TooTallNate/node-speaker","homepage":"https://github.com/TooTallNate/node-speaker","main":"./index.js","scripts":{"test":"node-gyp rebuild --mpg123-backend=dummy && mocha --reporter spec","install":"node-gyp rebuild"},"dependencies":{"bindings":"^1.2.1","debug":"^2.2.0","nan":"^2.2.0","readable-stream":"^2.0.5"},"devDependencies":{"mocha":"^2.1.0"},"gypfile":true,"gitHead":"d191f24ab8fdb1276b22acb24f83c5d520e5ad26","versions":[{"number":"0.0.1","date":"2012-10-24T18:09:53.546Z"},{"number":"0.0.2","date":"2012-10-26T03:06:35.794Z"},{"number":"0.0.3","date":"2012-11-03T21:38:20.817Z"},{"number":"0.0.4","date":"2012-11-04T19:44:31.056Z"},{"number":"0.0.5","date":"2012-11-17T06:39:10.832Z"},{"number":"0.0.6","date":"2012-12-15T20:10:57.210Z"},{"number":"0.0.7","date":"2013-01-15T01:58:29.464Z"},{"number":"0.0.8","date":"2013-02-12T17:13:56.312Z"},{"number":"0.0.9","date":"2013-03-07T07:56:55.146Z"},{"number":"0.0.10","date":"2013-05-09T03:51:49.621Z"},{"number":"0.1.0","date":"2014-04-17T19:34:22.767Z"},{"number":"0.1.1","date":"2014-05-27T18:00:53.062Z"},{"number":"0.1.2","date":"2014-06-02T21:29:08.783Z"},{"number":"0.1.3","date":"2014-06-16T00:11:17.330Z"},{"number":"0.2.0","date":"2014-06-22T20:20:30.275Z"},{"number":"0.2.1","date":"2014-07-07T21:21:45.951Z"},{"number":"0.2.2","date":"2015-01-13T18:59:25.211Z"},{"number":"0.2.3","date":"2015-02-20T18:28:26.963Z"},{"number":"0.2.4","date":"2015-02-20T18:33:29.477Z"},{"number":"0.2.5","date":"2015-04-15T19:32:27.331Z"},{"number":"0.2.6","date":"2015-09-24T23:22:22.704Z"},{"number":"0.3.0","date":"2016-04-10T02:02:08.627Z"}],"readme":"node-speaker\n============\n### Output [PCM audio][pcm] data to the speakers\n[![Build Status](https://secure.travis-ci.org/TooTallNate/node-speaker.svg)](https://travis-ci.org/TooTallNate/node-speaker)\n[![Build Status](https://ci.appveyor.com/api/projects/status/wix7wml3v55670kw?svg=true)](https://ci.appveyor.com/project/TooTallNate/node-speaker)\n\n\nA Writable stream instance that accepts [PCM audio][pcm] data and outputs it\nto the speakers. The output is backed by `mpg123`'s audio output modules, which\nin turn use any number of audio backends commonly found on Operating Systems\nthese days.\n\n\nInstallation\n------------\n\nSimply compile and install `node-speaker` using `npm`:\n\n``` bash\n$ npm install speaker\n```\n\nOn Debian/Ubuntu, the [ALSA][alsa] backend is selected by default, so be sure\nto have the `alsa.h` header file in place:\n\n``` bash\n$ sudo apt-get install libasound2-dev\n```\n\n\nExample\n-------\n\nHere's an example of piping `stdin` to the speaker, which should be 2 channel,\n16-bit audio at 44,100 samples per second (a.k.a CD quality audio).\n\n``` javascript\nvar Speaker = require('speaker');\n\n// Create the Speaker instance\nvar speaker = new Speaker({\n  channels: 2,          // 2 channels\n  bitDepth: 16,         // 16-bit samples\n  sampleRate: 44100     // 44,100 Hz sample rate\n});\n\n// PCM data from stdin gets piped into the speaker\nprocess.stdin.pipe(speaker);\n```\n\n\nAPI\n---\n\n`require('speaker')` directly returns the `Speaker` constructor. It is the only\ninterface exported by `node-speaker`.\n\n### new Speaker([ format ]) -> Speaker instance;\n\nCreates a new `Speaker` instance, which is a writable stream that you can pipe\nPCM audio data to. The optional `format` object may contain any of the `Writable`\nbase class options, as well as any of these PCM formatting options:\n\n  * `channels` - The number of audio channels. PCM data must be interleaved. Defaults to `2`.\n  * `bitDepth` - The number of bits per sample. Defaults to `16` (16-bit).\n  * `sampleRate` - The number of samples per second per channel. Defaults to `44100`.\n  * `signed` - Boolean specifying if the samples are signed or unsigned. Defaults to `true` when bit depth is 8-bit, `false` otherwise.\n  * `float` - Boolean specifying if the samples are floating-point values. Defaults to `false`.\n  * `samplesPerFrame` - The number of samples to send to the audio backend at a time. You likely don't need to mess with this value. Defaults to `1024`.\n\n#### \"open\" event\n\nFired when the backend `open()` call has completed. This happens once the first\n`write()` call happens on the speaker instance.\n\n#### \"flush\" event\n\nFired after the speaker instance has had `end()` called, and after the audio data\nhas been flushed to the speakers.\n\n#### \"close\" event\n\nFired after the \"flush\" event, after the backend `close()` call has completed.\nThis speaker instance is essentially finished after this point.\n\n\nAudio Backend Selection\n-----------------------\n\n`node-speaker` is backed by `mpg123`'s \"output modules\", which in turn use one of\nmany popular audio backends like ALSA, OSS, SDL, and lots more. The default\nbackends for each operating system are described in the table below:\n\n| **Operating System** | **Audio Backend** | **Description**\n|:---------------------|:------------------|:----------------------------------\n| Linux                | `alsa`            | Output audio using [Advanced Linux Sound Architecture (ALSA)][alsa].\n| Mac OS X             | `coreaudio`       | Output audio using Mac OS X's CoreAudio.\n| Windows              | `win32`           | Audio output for Windows (winmm).\n| Solaris              | `sun`             | Audio output for Sun Audio.\n\nTo manually override the default backend, pass the `--mpg123-backend` switch to\n`npm`/`node-gyp`:\n\n``` bash\n$ npm install speaker --mpg123-backend=openal\n```\n\n[pcm]: http://en.wikipedia.org/wiki/Pulse-code_modulation\n[alsa]: http://www.alsa-project.org/\n","starsCount":16,"created":"2012-10-24T18:09:52.772Z","modified":"2017-05-29T18:22:39.080Z","lastPublisher":{"name":"tootallnate","email":"nathan@tootallnate.net"},"owners":[{"name":"linusu","email":"linus@folkdatorn.se"},{"name":"tootallnate","email":"nathan@tootallnate.net"}],"other":{"_attachments":{},"_from":".","_id":"speaker","_nodeVersion":"4.4.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/speaker-0.3.0.tgz_1460253726170_0.7878933397587389"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_npmVersion":"2.14.20","_rev":"6-0b450ab7065d4a064bb5059b7baf9028","_shasum":"36e0ee37e74fb88f7ead9ac9b1f1517b9b82d253","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"bugs":{"url":"https://github.com/TooTallNate/node-speaker/issues"},"directories":{},"dist-tags":{"latest":"0.3.0"},"dist":{"shasum":"36e0ee37e74fb88f7ead9ac9b1f1517b9b82d253","tarball":"http://registry.npmjs.org/speaker/-/speaker-0.3.0.tgz"},"maintainers":[{"name":"linusu","email":"linus@folkdatorn.se"},{"name":"tootallnate","email":"nathan@tootallnate.net"}],"readmeFilename":"README.md","time":{"modified":"2017-05-29T18:22:39.080Z","created":"2012-10-24T18:09:52.772Z","0.0.1":"2012-10-24T18:09:53.546Z","0.0.2":"2012-10-26T03:06:35.794Z","0.0.3":"2012-11-03T21:38:20.817Z","0.0.4":"2012-11-04T19:44:31.056Z","0.0.5":"2012-11-17T06:39:10.832Z","0.0.6":"2012-12-15T20:10:57.210Z","0.0.7":"2013-01-15T01:58:29.464Z","0.0.8":"2013-02-12T17:13:56.312Z","0.0.9":"2013-03-07T07:56:55.146Z","0.0.10":"2013-05-09T03:51:49.621Z","0.1.0":"2014-04-17T19:34:22.767Z","0.1.1":"2014-05-27T18:00:53.062Z","0.1.2":"2014-06-02T21:29:08.783Z","0.1.3":"2014-06-16T00:11:17.330Z","0.2.0":"2014-06-22T20:20:30.275Z","0.2.1":"2014-07-07T21:21:45.951Z","0.2.2":"2015-01-13T18:59:25.211Z","0.2.3":"2015-02-20T18:28:26.963Z","0.2.4":"2015-02-20T18:33:29.477Z","0.2.5":"2015-04-15T19:32:27.331Z","0.2.6":"2015-09-24T23:22:22.704Z","0.3.0":"2016-04-10T02:02:08.627Z"},"users":{"jimstr":true,"rchk":true,"runningtalus":true,"emersion":true,"heck":true,"zoomyzoom":true,"augustohp":true,"goliatone":true,"vaju":true,"marlongrape":true,"butterkekstorte":true,"suissa":true,"edmundo096":true,"laggingreflex":true,"heartnett":true,"django_wong":true}}}