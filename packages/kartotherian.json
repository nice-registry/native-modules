{"name":"kartotherian","version":"0.0.30","description":"Renders map tiles","main":"./app.js","scripts":{"start":"service-runner","test":"mocha","docker-start":"service-runner docker-start","docker-test":"service-runner docker-test","coverage":"istanbul cover _mocha -- -R spec"},"repository":"https://github.com/kartotherian/kartotherian","keywords":["REST","API","service template","MediaWiki"],"license":"Apache-2.0","publishConfig":{"access":"public"},"homepage":"https://github.com/kartotherian/kartotherian","kartotherian":{"registerSourceLibs":["tilelive-bridge","tilelive-vector","@kartotherian/autogen","@kartotherian/babel","@kartotherian/cassandra","@kartotherian/demultiplexer","@kartotherian/layermixer","@kartotherian/overzoom","@kartotherian/postgres","@kartotherian/substantial","@kartotherian/tilelive-http","tilejson"],"requestHandlers":["@kartotherian/maki","@kartotherian/snapshot"]},"dependencies":{"bluebird":"^3.5.0","body-parser":"^1.17.1","bunyan":"^1.8.9","cassandra-uuid":"^0.0.2","compression":"^1.6.2","domino":"^1.0.28","express":"^4.15.2","js-yaml":"^3.8.2","preq":"^0.5.2","service-runner":"^2.2.5","node-pre-gyp":"^0.6.34","mapnik":"~3.5.0","tilelive":"~5.12.2","tilelive-bridge":"~2.3.1","tilelive-vector":"~3.9.4","tilejson":"^1.0.3","@kartotherian/core":"^0.0.21","@kartotherian/server":"^0.0.13","@kartotherian/autogen":"^0.0.10","@kartotherian/babel":"^0.0.6","@kartotherian/cassandra":"^0.0.12","@kartotherian/postgres":"^0.0.10","@kartotherian/demultiplexer":"^0.0.10","@kartotherian/layermixer":"^0.0.8","@kartotherian/overzoom":"^0.0.10","@kartotherian/substantial":"^0.0.8","@kartotherian/tilelive-http":"^0.12.1","@kartotherian/osm-bright-source":"^0.0.4","@kartotherian/osm-bright-style":"^2.1.3","@kartotherian/geoshapes":"^0.0.13","@kartotherian/maki":"^0.0.8","@kartotherian/snapshot":"^0.3.4","bunyan-prettystream":"*"},"optionalDependencies":{"bunyan-prettystream":"*"},"devDependencies":{"extend":"^3.0.0","istanbul":"^0.4.5","mocha":"^3.2.0","mocha-jshint":"^2.3.1","mocha-lcov-reporter":"^1.3.0","swagger-router":"^0.5.6"},"deploy":{"node":"6.9.1","target":"debian","dependencies":{"_all":["libcairo2-dev","libgif-dev","libpango1.0-dev"],"ubuntu":["libjpeg62-dev"],"debian":["libjpeg62-turbo-dev"]}},"gitHead":"1cc8a74733843005314154571bb4898beba484bc","versions":[{"number":"0.0.27","date":"2017-03-25T06:54:39.967Z"},{"number":"0.0.28","date":"2017-03-25T23:34:23.484Z"},{"number":"0.0.29","date":"2017-03-25T23:47:31.420Z"},{"number":"0.0.30","date":"2017-03-26T07:41:53.899Z"}],"readme":"# Maps Tile service for Wikipedia\n\nThis code is cross-hosted at [gerrit](https://git.wikimedia.org/summary/maps%2Fkartotherian)\n\nMaps nodejs server for vector-based tiles and snapshots, designed for Wikipedia and other sites. It ties together a number of [MapBox](https://github.com/mapbox) components for vector and raster rendering based on [Mapnik 3](https://github.com/mapnik/mapnik), and uses [service runner](https://github.com/wikimedia/service-runner) for scalability, performance monitoring and stability.\n\n### Serving tiles\nKartotherian can serve vector and raster tiles in multiple formats and optional scaling:\n\n    http://.../{source}/{zoom}/{x}/{y}[@{scale}x].{format}\n\n* The sources are configured with the\n[source config file](https://github.com/kartotherian/core). Sources configuration supports different methods of tile storage, such as Cassandra or files, generation from postgress db, overzoom to extract the tile from lower zooms if missing, layer extraction, mixing multiple sources together, etc.\n* Optional scalling can render larger images for high resolution screens (only those enabled in the source, e.g. `[1.5, 2]`)\n* Supported formats include PNG ang JPEG, SVG, PBF vectors, and JSON (with `nogeo` and `summary` debug options)\n\n### Static map images\nKartotherian supports static image generation. Users may request a PNG or a JPEG snapshot image of any size, scaling, and zoom level:\n\n    http://.../img/{source},{zoom},{lat},{lon},{width}x{height}[@{scale}x].{format}\n\n    # image centered at 42,-3.14, at zoom level 4, size 800x600\n    http://.../img/osm-intl,4,42,-3.14,800x600.png\n\n    # the same but for higher DPI device with 1.5 scaling\n    http://.../img/osm-intl,4,42,-3.14,800x600@1.5x.png\n\n### Info data\nKartotherian can be used as a source of the PBF data for Mapbox studio. See info about style editing in  [osm-bright-source](https://github.com/kartotherian/osm-bright.tm2/blob/master/README.md). The info data is available at `http://.../{style}/pbfinfo.json` for pbf source, and `http://.../{style}/info.json` for the styled image source.\n\n### Markers\nKartotherian can generate marker images by wrapping any of the [maki icons](https://www.mapbox.com/maki/) with a pushpin image, in any color. The URL schema is matched to the one used by the [mapbox.js](https://github.com/mapbox/mapbox.js).\n\n    http://.../v4/marker/pin-l-cafe+de00ff@2x.png\n    http://.../v4/marker/ {base} - {size:s|m|l} [-{letter-or-digit-or-icon-name}] + {color} [@2x] .png\n\nAt this point, only \"pin\" is supported for the base. The color is a 3 digit or 6 digit hex number. Optional scaling can only be 2x. Beyond the pre-defined maki icons, you may give a number (0-99), a single letter (a-z), or nothing.\n\n## Very quick start\n\n```\ngit clone https://github.com/kartotherian/kartotherian.git  # Clone the repository\ncd kartotherian\n```\n\nEdit `package.json`\n* **Add** these lines to the `dependencies` section:\n```\n    \"tilejson\": \"*\",\n    \"@kartotherian/tilelive-http\": \"^0.12.1\",\n```\n* **Add** this line to the `registerSourceLibs` section:\n```\n    \"@kartotherian/tilelive-http\",\n```\n* **Remove** `kartotherian-geoshapes` line from `requestHandlers` section.\n\n```\nnpm install\nnode server.js -c config.external.yaml\n```\n\nBrowse to http://localhost:6533/\nThe set up inside [`sources.external.yaml`](sources.external.yaml) does not use any storage or caching, so it will not be suitable for production. You will need to to set up your own local database as described in [osm-bright.tm2source](https://github.com/kartotherian/osm-bright.tm2source), which is installed in `node_modules/osm-bright-source`, and configure additional source chains and setup a proper storage to make this into a production system.\n\n\n## Configuration\nInside the `conf` key:\n* `sources` - (required) Either a set of subkeys, a filename, or a list of file names.  See [core](https://github.com/kartotherian/core) on how to configure the sources.\n* `variables` (optional) - specify a set of variables (string key-value pairs) to be used inside sources, or it could be a filename or a list of filenames/objects.\n* `defaultHeaders` (optional, object) - a set of extra headers that will be sent to the user unless the source provides its own. (public requests only)\n* `headers` (optional, object) - a set of extra headers that will be sent to the user instead of the headers returned by the source. (public requests only)\nFor the rest of the configuration parameters, see [service runner](https://github.com/wikimedia/service-runner) config info.\n\n## Components\nKartotherian platform consists of a number of elements, some of which conform to the general specifications established\nby [MapBox](https://github.com/mapbox), and therefor can reuse components that confirm to the same specification.\nAlso, see [Tilerator](https://github.com/kartotherian/tilerator), an optional stand-alone service to pre-generate tiles.\nTilerator is separate from Kartotherian, but it reuses most of the same components.\n\n### Components by Wikimedia Foundation\n* [kartotherian-core](https://github.com/kartotherian/core) - Loads and configures tile sources, and provides some common utility functions\n* [kartotherian-server](https://github.com/kartotherian/server) - Handles user requests for tiles and source info, as well as registers additional data type handlers like maki markers and image snapshots.\n* [kartotherian-maki](https://github.com/kartotherian/maki) - Request handler for maki markers - generates PNG marker images that can be used from geojson.\n* [kartotherian-snapshot](https://github.com/kartotherian/snapshot) - Request handler for static images by combining multiple tiles into one snapshot image of a requested size.\n\n#### Tile sources\n* [kartotherian-autogen](https://github.com/kartotherian/autogen) - Tile source that checks \"storage\" source for a tile, and if not found, gets it from the \"generator\" source and saves it into the \"storage\"\n* [kartotherian-cassandra](https://github.com/kartotherian/cassandra) - Tile source that stores tiles in the Cassandra database\n* [kartotherian-demultiplexer](https://github.com/kartotherian/demultiplexer) - Tile source that combines multiple sources by zoom level\n* [kartotherian-layermixer](https://github.com/kartotherian/layermixer) - Tile source capable of mixing different vector layers from multiple tile sources\n* [kartotherian-overzoom](https://github.com/kartotherian/overzoom) - Tile source that will zoom out if the requested tile does not exist, and extracts the needed portion from the lower-zoom tile it finds.\n* [kartotherian-postgres](https://github.com/kartotherian/postgres) - Tile source that stores tiles in the Postgres database\n* [kartotherian-substantial](https://github.com/kartotherian/substantial) - Tile source that filters out tiles that are not significant - e.g. nothing but water or land.\n\n#### Data and Styling\n* [osm-bright-source](https://github.com/kartotherian/osm-bright.tm2source) - SQL queries used by the `tilelive-bridge` to generate a vector tile from Postgres Database\n* [osm-bright-style](https://github.com/kartotherian/osm-bright.tm2) - Style used by the `tilelive-vector` to convert vector tiles into images.\n* [osm-bright-fonts](https://github.com/kartotherian/osm-bright.fonts) - Fonts used by the `osm-bright-style`.\n\n\n### Components by MapBox\n* [tilelive](https://github.com/mapbox/tilelive) - ties together various tile sources, both vector and raster\n* [tilelive-bridge](https://github.com/mapbox/tilelive-bridge) - generates vector tiles from SQL\n* [tilelive-vector](https://github.com/mapbox/tilelive-vector) - converts vector tiles to raster tiles\n* [abaculus](https://github.com/mapbox/abaculus) - generates raster images of any location and size from a tile source\n\n### Other Relevant Components\n* [mapnik](https://github.com/mapnik/node-mapnik) - Tile rendering library for node\n* [leaflet](https://github.com/Leaflet/Leaflet) - JavaScript library for mobile-friendly interactive maps\n\n## In depth step-by-step:\n\nThis documentation assumes that you are going to use [osm-bright.tm2](https://github.com/kartotherian/osm-bright.tm2) and [osm-bright.tm2source](https://github.com/kartotherian/osm-bright.tm2source) for a map style.\n\n### Install dependencies\n\nKartotherian requires nodejs and npm. On Ubuntu these can be installed with\n```\nsudo apt-get install git unzip curl build-essential sqlite3 nodejs-legacy npm\n```\n\n### Get Kartotherian code\n\n```\ngit clone https://github.com/kartotherian/kartotherian.git  # Clone the repository\ncd kartotherian\nnpm install                                                 # install npm dependencies\n```\n\n### Source\n\nSet up osm-bright.tm2source as described in [its documentation.](https://github.com/kartotherian/osm-bright.tm2source#install).\n\nosm-bright.tm2source is installed in `node_modules/osm-bright-source`\n\n### Edit Kartotherian configuration - config.yaml\n```\n# 0 - one instance, 1+ - multi-instance with autorestart, ncpu - multi-instance, one per CPU\nnum_workers: 0\n\n# Host port\nport: 6533\n\n# Comment out this line to listen to the web\n# interface: localhost\n\n# Place all variables (e.g. passwords) here - either as a filename, or as sub-items.\nvariables:\n\n# Place all sources you want to serve here - either as a filename, or as sub-items.\n# See sources.prod.yaml for examples\nsources: sources.yaml\n```\n\n### Configure Kartotherian\nUse one of the config files, or update them, and make a link config.yaml to it.\n\n### Add Varnish caching layer (optional)\nMight require caching headers added to the source/config.\n```\n# From https://www.varnish-cache.org/installation/debian\nsudo -Hi\napt-get install apt-transport-https\ncurl https://repo.varnish-cache.org/GPG-key.txt | apt-key add -\necho \"deb https://repo.varnish-cache.org/debian/ jessie varnish-4.0\" >> /etc/apt/sources.list.d/varnish-cache.list\napt-get update\napt-get install varnish\n\nvi /etc/varnish/default.vcl\n```\nChange default backend to:\n```\nbackend default {\n    .host = \"localhost\";\n    .port = \"6533\";\n}\n```\nAdd this to vcl_deliver (to track hits/misses):\n```\nif (obj.hits > 0) {\n    set resp.http.X-Cache = \"HIT\";\n} else {\n    set resp.http.X-Cache = \"MISS\";\n}\n```\nEdit /etc/systemd/system/varnish.service - set proper listening port (80) and cache size:\n```\nExecStart=/usr/sbin/varnishd -a :80 -T localhost:6082 -f /etc/varnish/default.vcl -S /etc/varnish/secret -s malloc,4g\n```\nIn bash:\n```\nsystemctl daemon-reload  # because we changed the .service file\nsystemctl restart varnish.service\nsystemctl status varnish.service  # check the service started with the right params\nvarnishstat  # monitor varnish performance\n```\n\n### Run Karthotherian:\n```\nnpm start\n```\nIn browser, navigate to `http://localhost:6533/`.\n\n### Troubleshooting\n\nIn a lot of cases when there is an issue with node it helps to recreate the\n`node_modules` directory:\n```\nrm -r node_modules\nnpm install\n```\n","created":"2017-03-25T06:54:39.967Z","modified":"2017-03-26T07:41:54.869Z","lastPublisher":{"name":"nyurik","email":"yuriastrakhan@gmail.com"},"owners":[{"name":"nyurik","email":"yuriastrakhan@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"kartotherian","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/kartotherian-0.0.30.tgz_1490514111776_0.8098286127205938"},"_npmUser":{"name":"nyurik","email":"yuriastrakhan@gmail.com"},"_npmVersion":"4.4.4","_rev":"7-6c9f371eaf04da2d58e0963d906ad614","_shasum":"75a6c48566eb0ccb7e22046ba4db1d2e6d7fd6a2","author":{"name":"Yuri Astrakhan","email":"YuriAstrakhan@gmail.com"},"bugs":{"url":"https://phabricator.wikimedia.org/tag/maps/"},"contributors":[{"name":"Max Semenik","email":"msemenik@wikimedia.org"}],"directories":{},"dist-tags":{"latest":"0.0.30"},"dist":{"shasum":"75a6c48566eb0ccb7e22046ba4db1d2e6d7fd6a2","tarball":"https://registry.npmjs.org/kartotherian/-/kartotherian-0.0.30.tgz"},"maintainers":[{"name":"nyurik","email":"yuriastrakhan@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-26T07:41:54.869Z","created":"2017-03-25T06:54:39.967Z","0.0.27":"2017-03-25T06:54:39.967Z","0.0.28":"2017-03-25T23:34:23.484Z","0.0.29":"2017-03-25T23:47:31.420Z","0.0.30":"2017-03-26T07:41:53.899Z"}}}