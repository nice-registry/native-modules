{"name":"annoy","version":"1.0.10","description":"Node bindings for Annoy, an efficient Approximate Nearest Neighbors implementation written in C++.","main":"index.js","gypfile":true,"scripts":{"test":"make test","install":"node-gyp rebuild"},"repository":"https://github.com/jimkang/annoy-node","keywords":["annoy","approximate","nearest","neighbor","search","vector","machine learning"],"license":"MIT","homepage":"https://github.com/jimkang/annoy-node","devDependencies":{"assert-no-error":"^1.0.0","d3-queue":"^3.0.3","eslint":"^3.7.0","level":"^1.5.0","level-sublevel":"^6.6.1","ndjson":"^1.4.3","tape":"^4.6.0","through2":"^2.0.1"},"dependencies":{"bindings":"^1.2.1","nan":"^2.4.0"},"gitHead":"76a6602bb312b3f59e5c24f2a018fa131204d8df","versions":[{"number":"1.0.0","date":"2016-09-30T18:23:20.198Z"},{"number":"1.0.1","date":"2016-10-05T01:34:57.248Z"},{"number":"1.0.2","date":"2016-10-05T01:37:32.849Z"},{"number":"1.0.3","date":"2016-10-05T13:42:23.876Z"},{"number":"1.0.4","date":"2016-10-07T13:49:12.780Z"},{"number":"1.0.5","date":"2016-10-08T02:12:33.290Z"},{"number":"1.0.6","date":"2016-10-08T17:13:56.192Z"},{"number":"1.0.7","date":"2016-10-08T18:57:29.087Z"},{"number":"1.0.8","date":"2016-10-08T19:04:52.360Z"},{"number":"1.0.10","date":"2016-11-01T01:07:42.228Z"}],"readme":"annoy-node\n==================\n\n[![Build Status](https://travis-ci.org/jimkang/annoy-node.svg?branch=master)](https://travis-ci.org/jimkang/annoy-node)\n\nNode bindings for [Annoy](https://github.com/spotify/annoy), an efficient Approximate Nearest Neighbors implementation written in C++.\n\nStatus: Tests pass, including one that loads 3 million vectors, but API coverage is not complete. Run on OS X and Linux with Node 6.3 and 4.6. Not tried on Windows yet.\n\nAll of the [Python API](https://github.com/spotify/annoy#full-python-api) methods are implemented. The names are camel cased, JavaScript-style.\n\n  - `addItem`\n  - `build`\n  - `save`\n  - `load`\n  - `unload`\n  - `getItem`\n  - `getNNsByVector`\n  - `getNNsByItem`\n  - `getNItems`\n  - `getDistance`\n\nThere are a few minor differences in behavior:\n\n- If you set the \"include distances\" param (the fourth param) when calling `getNNsByVector` and `getNNsByItem`, rather than returning a 2D array containing the neighbors and distances, it will return an object with the properties `neighbors` and `distances`, each of which is an array.\n- `get_item_vector` in with the Python API is just called `getItem` here.\n\nInstallation\n------------\n\nOn Linux, if you don't already have Python 2.7 and g++ 4.8, you need to install them. Here's how you do it on Ubuntu:\n\n    (sudo) apt-get install python2.7\n    (sudo) apt-get install g++-4.8\n    npm config set python /path/to/executable/python2.7\n\nThen, symlink g++ somewhere it can be found:\n\n    ln -s /usr/bin/g++-4.8 /usr/local/bin/g++\n\nOn OS X, they should already be there.\n\nThen:\n\n    npm install annoy\n\nUsage\n-----\n\n    var Annoy = require('annoy-node');\n    var annoyIndex1 = new Annoy(10, 'Angular');\n\n    annoyIndex1.addItem(0, [-5.0, -4.5, -3.2, -2.8, -2.1, -1.5, -0.34, 0, 3.7, 6]);\n    annoyIndex1.addItem(1, [5.0, 4.5, 3.2, 2.8, 2.1, 1.5, 0.34, 0, -3.7, -6]);\n    annoyIndex1.addItem(2, [0, 0, 0, 0, 0, -1, -1, -0.2, 0.1, 0.8]);\n    annoyIndex1.build();\n    annoyIndex1.save(annoyPath);\n\n    read();\n\n    function read() {\n      var annoyIndex2 = new Annoy(10, 'Angular');\n\n      if (annoyIndex2.load(annoyPath)) {\n        var v1 = annoyIndex2.getItem(0);\n        var v2 = annoyIndex2.getItem(1);\n        console.log('Gotten vectors:', v1, v2);\n\n          for (var i = 0; i < v1.length; ++i) {\n            sum.push(v1[i] + v2[i]);\n          }\n\n          var neighbors = obj2.getNNsByVector(sum, 10, -1, false);\n          console.log('Nearest neighbors to sum', neighbors);\n\n          var neighborsAndDistances = obj2.getNNsByVector(sum, 10, -1, true);\n          console.log('Nearest neighbors to sum with distances', neighborsAndDistances);\n      }\n    }\n\nDevelopment\n------------\n\n    npm install -g node-gyp\n    node-gyp rebuild\n\nTests\n-----\n\nRun tests with `make test`.\n\nYou can also run tests individually:\n\n- This is a short baseline test: `node tests/smalltest.js` \n- This is a test that uses 70K 200-dimension vectors: `node tests/basictests.js` \n\nThere is also a `big-test` target that is not a dependency of the `test` target. It loads about 3 million 300-dimension vectors. It takes about six minutes to run on good-for-2016 hardware. Before you can run it, you need to download [GoogleNews-vectors-negative300.bin](https://drive.google.com/file/d/0B7XkCwpI5KDYNlNUTTlSS21pQmM/edit?usp=sharing) to `tests/data`.\n\nLicense\n-------\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 Jim Kang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n","starsCount":1,"created":"2016-09-30T18:23:20.198Z","modified":"2016-11-02T02:39:36.839Z","lastPublisher":{"name":"jimkang","email":"jimkang@gmail.com"},"owners":[{"name":"jimkang","email":"jimkang@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"annoy","_nodeVersion":"6.3.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/annoy-1.0.10.tgz_1477962461683_0.8806064657401294"},"_npmUser":{"name":"jimkang","email":"jimkang@gmail.com"},"_npmVersion":"3.10.3","_rev":"3-c1b662d49f94e4099a16becff94439c0","_shasum":"db4ad14b104d0b684962fa5f7a4831150e53b59a","author":{"name":"Jim Kang"},"bugs":{"url":"https://github.com/jimkang/annoy-node/issues"},"directories":{},"dist-tags":{"latest":"1.0.10"},"dist":{"shasum":"db4ad14b104d0b684962fa5f7a4831150e53b59a","tarball":"http://registry.npmjs.org/annoy/-/annoy-1.0.10.tgz"},"maintainers":[{"name":"jimkang","email":"jimkang@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-02T02:39:36.839Z","created":"2016-09-30T18:23:20.198Z","1.0.0":"2016-09-30T18:23:20.198Z","1.0.1":"2016-10-05T01:34:57.248Z","1.0.2":"2016-10-05T01:37:32.849Z","1.0.3":"2016-10-05T13:42:23.876Z","1.0.4":"2016-10-07T13:49:12.780Z","1.0.5":"2016-10-08T02:12:33.290Z","1.0.6":"2016-10-08T17:13:56.192Z","1.0.7":"2016-10-08T18:57:29.087Z","1.0.8":"2016-10-08T19:04:52.360Z","1.0.10":"2016-11-01T01:07:42.228Z"},"users":{"esperluette":true}}}