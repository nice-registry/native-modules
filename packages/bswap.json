{"name":"bswap","version":"1.2.0","description":"fast byte swapping","main":"bswap.js","scripts":{"test":"mocha test/*.js","install":"node-gyp rebuild"},"repository":"https://github.com/zbjornson/node-bswap","keywords":["byte","swap","bswap","hton","ntoh","endian","little endian","big endian","shuffle bytes"],"license":"MIT","homepage":"https://github.com/zbjornson/node-bswap#readme","dependencies":{"nan":"^2.4.0"},"devDependencies":{"chai":"^3.5.0","mocha":"^2.5.3"},"browser":{"./build/Release/bswap":false},"gypfile":true,"gitHead":"8c813223c3a0af5dbaa891b20500a5c516cb5f41","versions":[{"number":"1.0.0","date":"2016-06-03T02:23:32.133Z"},{"number":"1.1.0","date":"2016-07-13T21:14:37.436Z"},{"number":"1.1.1","date":"2016-07-21T19:50:57.252Z"},{"number":"1.1.2","date":"2016-07-22T02:53:11.403Z"},{"number":"1.1.3","date":"2016-07-30T01:48:33.764Z"},{"number":"1.1.4","date":"2016-09-23T21:48:20.956Z"},{"number":"1.1.5","date":"2016-09-26T23:16:08.355Z"},{"number":"1.1.6","date":"2016-09-27T00:02:29.891Z"},{"number":"1.2.0","date":"2017-04-13T22:01:25.567Z"}],"readme":"[![CircleCI](https://circleci.com/gh/zbjornson/node-bswap.svg?style=svg)](https://circleci.com/gh/zbjornson/node-bswap)\n[![Build status](https://ci.appveyor.com/api/projects/status/ddnemfveens34b12/branch/master?svg=true)](https://ci.appveyor.com/project/zbjornson/node-bswap/branch/master)\n\n\n# node-bswap\n\nA function to quickly swap bytes (a.k.a. reverse the byte ordering, change\nendianness) of typed arrays in-place for node.js and browsers. Works with all\nof the typed array types. For node.js 4.x and later, this also works on\nBuffers if you construct a TypedArray view on the underlying array buffer (see below).\n\nInstall:\n```\n$ npm install bswap\n```\n\nUse (node.js):\n```js\n> var bswap = require(\"bswap\");\n> var x = new Uint16Array([1, 2, 3, 4, 5, 6, 7, 8]);\n> bswap(x);\n> x\nUint16Array [ 256, 512, 768, 1024, 1280, 1536, 1792, 2048 ]\n\n// With buffers:\n> var b = Buffer.alloc(128);\n// This constructs a \"view\" on the same memory; it does not allocate new memory:\n> var ui32 = new Uint32Array(b.buffer, b.byteOffset, b.byteLength / Uint32Array.BYTES_PER_ELEMENT);\n> bswap(ui32);\n```\n\nUse (browser):\n```html\n<script src=\"bswap.js\" />\n<script type=\"text/javascript\">\n  var x = new Uint16Array([1, 2, 3, 4, 5, 6, 7, 8]);\n  bswap(x);\n  console.log(x); // [ 256, 512, 768, 1024, 1280, 1536, 1792, 2048 ]\n</script>\n```\n\nIn node.js when native code and an x86 processor is available, this library uses\nx86 SIMD instructions ([PSHUFB (SSSE3) and VPSHUFB (AVX2)](http://www.felixcloutier.com/x86/PSHUFB.html)),\nwhich allow processing multiple array elements simultaneously for maximum speed.\n\nNative code requires:\n* MSVC 2015 or later\n* Clang 3.4.x or later\n* GCC 4.8.x or later\n* ICC 16 or later\n\nIn the browser or when native code is unavailable, this library falls back to\na fast, pure javascript implementation. The javascript implementation is also\nalways explicitly available:\n\n```js\n> var bswap = require(\"bswap\").js; // Use javascript implementation explicitly\n```\n\n## Benchmarks\n\nShowing elements processed per second for varying array sizes.\n\n##### Windows + Microsoft Visual Studio\nRun on an Intel i7-6700K 4.0 GHz processor; compiled with MSVC 2015; node.js v6.9.1.\n\n```\n$ node benchmark/benchmark.js\n16 bit types (Uint16Array, Int16Array)\narray size    bswap.native        bswap.js  Native:JS            node  network-byte-o   endian-toggle\n         1       9,623,128      11,744,194       0.82      10,321,414       1,722,619       5,007,272\n        10      92,939,729     105,099,791       0.88      97,937,560      16,434,764      39,068,393\n       100     836,706,259     478,135,777       1.75     531,663,161     117,835,015     122,989,862\n      1000   7,103,465,043     780,571,487       9.10   4,125,276,485     348,755,856     158,190,387\n     10000  30,311,532,432     870,230,276      34.83  14,508,789,926     416,698,205     174,576,092\n\n32 bits types (Uint32Array, Int32Array, Float32Array)\narray size    bswap.native        bswap.js  Native:JS            node  network-byte-o   endian-toggle\n         1       8,424,850      11,766,511       0.72      10,246,743       1,788,284       4,747,687\n        10      80,099,734      99,091,399       0.81      89,075,993      16,762,539      34,038,929\n       100     778,506,169     392,606,447       1.98     490,808,650      96,666,526      83,384,793\n      1000   5,755,961,382     584,114,433       9.85   3,396,910,232     257,698,664     106,384,258\n     10000  13,990,895,416     649,662,228      21.54   7,111,943,703     308,314,686     120,570,771\n\n64 bit types (Float64Array)\narray size    bswap.native        bswap.js  Native:JS            node  network-byte-o   endian-toggle\n         1       8,247,345      10,953,469       0.75       8,553,544                       4,615,601\n        10      78,144,438      89,228,121       0.88      69,683,579                      26,828,479\n       100     741,464,085     309,504,200       2.40     449,366,982                      56,739,112\n      1000   4,541,352,325     430,736,326      10.54   2,389,748,759                      67,823,257\n     10000   7,972,476,354     433,632,544      18.39   3,877,818,734                      71,182,283\n```\n\n##### Linux + GCC\nRun on an Intel Xeon (Haswell) 2.3 GHz processor; compiled with gcc 5.4; node.js 6.10.0\n\n```\n$ node benchmark/benchmark.js\n16 bit types (Uint16Array, Int16Array)\narray size    bswap.native        bswap.js  Native:JS            node  network-byte-o   endian-toggle\n         1       7,165,478       7,312,635       0.98       6,484,115       1,335,542       2,768,400\n        10      68,776,049      63,314,781       1.09      59,665,460      12,773,941      22,364,736\n       100     688,617,555     309,237,407       2.23     274,180,440      80,521,009      71,115,057\n      1000   5,188,942,005     536,719,907       9.67   1,062,689,936     214,415,320      95,796,719\n     10000  19,275,597,207     599,452,514      32.16   1,585,267,860     327,547,954     104,935,171\n\n32 bits types (Uint32Array, Int32Array, Float32Array)\narray size    bswap.native        bswap.js  Native:JS            node  network-byte-o   endian-toggle\n         1       6,422,036       6,937,930       0.93       6,394,318       1,346,763       2,762,375\n        10      62,386,195      59,012,938       1.06      55,481,606      13,121,369      18,696,615\n       100     596,551,383     252,945,128       2.36     290,599,325      63,995,412      51,085,414\n      1000   4,029,053,228     422,846,152       9.53   1,244,689,635     165,566,848      67,920,636\n     10000   6,033,072,610     448,254,354      13.46   1,879,609,356     237,455,933      74,017,061\n\n64 bit types (Float64Array)\narray size    bswap.native        bswap.js  Native:JS            node  network-byte-o   endian-toggle\n         1       6,107,068       6,880,232       0.89       5,507,570                       2,642,804\n        10      59,792,589      55,598,979       1.08      45,608,568                      16,137,452\n       100     517,743,147     196,702,625       2.63     266,074,952                      34,681,753\n      1000   2,683,745,928     286,584,407       9.36   1,087,181,187                      40,301,519\n     10000   3,227,705,828     296,483,220      10.89   1,555,902,990                      43,150,733\n```\n\nNote that there's an inflection point between the penalty for crossing into C++ and the\nperformance gain from using native code (around 32 elements in the Windows benchmark, or 2 elements\nin the Linux benchmark). If you want to explicitly use the javascript implementation, e.g. because\nyou're processing small arrays, it is available as `bswap.js(arr)`.\n\n## Other libraries\n\n| Library | Operand | In-Place | 64-bit Type Support | Browser | Speed (vs bswap)* |\n| --- | --- | --- | --- | --- | --- |\n| bswap (this) | TypedArray | yes | yes | yes | 1.00 |\n| node [`buffer.swap16/32/64`](https://nodejs.org/api/buffer.html#buffer_buf_swap16) | Buffer | yes | since 6.3.0 | no | 0.14 |\n| [endian-toggle](https://github.com/substack/endian-toggle) | Buffer | no | yes | no | 0.03 |\n| [network-byte-order](https://github.com/mattcg/network-byte-order) | Number/\\[Octet\\] | no | no | yes | 0.009 |\n\n\\* Higher is better. For 16-bit types, 10k-element arrays.\n\n* **Node.js's built-in [buffer.swap16|32|64](https://nodejs.org/api/buffer.html#buffer_buf_swap16)\nmethods** (16/32 added in v5.10.0; 64 added by me in 6.3.0). Operates in-place. No browser support.\nSlower except for small arrays (where it uses the JS implementation).\n\n  In 6.3.0 I added some optimizations to node.js's implementation. The optimizations are effective\n  on Windows, but GCC does not do the same automatic vectorization that MSVC does, nor does node's\n  default build config enable all SSE/AVX instructions. This library's build config enables those\n  extensions and uses builtins that are not worth attempting to support on all of the architectures\n  that node.js needs to support. -- That is to say, this library is faster, but is only supported on\n  x86.\n\n```js\nBuffer.from(typedArray.buffer).swap16()\n```\n\n* **[endian-toggle](https://github.com/substack/endian-toggle)**. Simple usage, operates\non a node.js buffer, handles any byte size, returns a new buffer (does not operate\nin-place), slow.\n\n```js\n> var x = new Uint16Array([2048])\n> toggle(Buffer.from(x.buffer), x.BYTES_PER_ELEMENT * 8)\n<Buffer d2 04 09 07>\n```\n\n* **[network-byte-order](https://github.com/mattcg/network-byte-order)** has a different\nsyntax: it operates on a single value at a time (i.e. needs to be looped to operate\non an array) and has separate hton and ntoh methods, which do effectively the same\nthing but have different syntaxes. It can operate on strings, but it cannot swap\n64-bit types.\n\n```js\n// Using hton\n> var b = [];\n> nbo.htons(b, 0, 2048);\n> b\n[8, 0]\n\n// bswap:\n> var x = new Uint16Array([2048])\n> bswap(x)\n> new Uint8Array(x.buffer, x.byteOffset, 2) // inspect underlying ArrayBuffer\nUint8Array [ 8, 0 ]\n\n// or using ntoh\n> var x = new Uint16Array([2048])\n> nbo.ntohs(new Uint8Array(x.buffer, x.byteOffset, 2), 0)\n8\n> var z = new Uint16Array([8])\n> new Uint8Array(z.buffer, z.byteOffset, 2)\nUint8Array [ 8, 0 ]\n```\n","created":"2016-06-03T02:23:32.133Z","modified":"2017-04-13T22:01:25.567Z","lastPublisher":{"name":"zbjornson","email":"zbbjornson@gmail.com"},"owners":[{"name":"zbjornson","email":"zbbjornson@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"bswap","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/bswap-1.2.0.tgz_1492120885328_0.48355919145978987"},"_npmUser":{"name":"zbjornson","email":"zbbjornson@gmail.com"},"_npmVersion":"3.10.5","_rev":"2-59c8724d6f2560622897b82c1fb44793","_shasum":"82075529fe78cb27c41a678bdd2cffac4cb8608c","author":{"name":"Zach Bjornson","email":"zbbjornson@gmail.com"},"bugs":{"url":"https://github.com/zbjornson/node-bswap/issues"},"directories":{},"dist-tags":{"latest":"1.2.0"},"dist":{"shasum":"82075529fe78cb27c41a678bdd2cffac4cb8608c","tarball":"https://registry.npmjs.org/bswap/-/bswap-1.2.0.tgz"},"maintainers":[{"name":"zbjornson","email":"zbbjornson@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-13T22:01:25.567Z","created":"2016-06-03T02:23:32.133Z","1.0.0":"2016-06-03T02:23:32.133Z","1.1.0":"2016-07-13T21:14:37.436Z","1.1.1":"2016-07-21T19:50:57.252Z","1.1.2":"2016-07-22T02:53:11.403Z","1.1.3":"2016-07-30T01:48:33.764Z","1.1.4":"2016-09-23T21:48:20.956Z","1.1.5":"2016-09-26T23:16:08.355Z","1.1.6":"2016-09-27T00:02:29.891Z","1.2.0":"2017-04-13T22:01:25.567Z"}}}