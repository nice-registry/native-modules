{"name":"ifx_db","description":"IBM Informix bindings for node","version":"6.0.0","main":"lib/odbc.js","homepage":"https://github.com/ifxdb/node-ifx_db","repository":"https://github.com/ifxdb/node-ifx_db","engines":{"node":">=0.8.0"},"scripts":{"install":"node installer/IfxDriverInstall.js","test":"cd test && node SampleApp1.js norun"},"dependencies":{"bindings":"~1.3.0","nan":"~2.6.0","unzip":"~0.1.11","fstream":"~1.0.11"},"keywords":["node","odbc","IBM","Informix","driver"],"license":"MIT","gitHead":"2ce74651cf1cec5eabfc5bd27b719152b76d2bfc","versions":[{"number":"1.0.0","date":"2015-08-19T14:39:17.795Z"},{"number":"1.0.1","date":"2015-10-27T16:38:50.563Z"},{"number":"4.0.2","date":"2016-05-26T00:44:31.843Z"},{"number":"4.0.3","date":"2016-05-26T00:52:15.739Z"},{"number":"4.0.4","date":"2016-10-07T19:23:13.054Z"},{"number":"6.0.0","date":"2017-08-24T04:51:18.116Z"}],"readme":"## Informix native Node.js driver\r\n------------------------------------\r\nInformix native Node.js driver is a high performance driver with asynchronous/synchronous interface for node.js database applications working with Informix. Feel free to make contribution to help community. \r\n\r\n\r\n## install\r\n----------\r\nThe driver has a prebuilt binary for 64bit version of Linux and Windows (soon ARM too), all other platform you may perform a local build. The current version of Informix native node driver (ifx_db@6.0.6) is being compiled with Node.js v6.11.x LTS libraries. The driver is expected to work node.js version 6x.   \r\n**FYI**: Informix Client SDK 410 xC2 or above is needed the driver to connect to the database.\r\n\r\n```bash\r\nnpm install ifx_db\r\n```\r\n\r\n### FYI: \r\n* [Node.js breaking changes between v4 LTS and v6 LTS](https://github.com/nodejs/node/wiki/Breaking-changes-between-v4-LTS-and-v6-LTS)\r\n* [Node.js community wiki](https://github.com/nodejs/node/wiki)\r\n\r\n\r\n\r\n\r\n## Local Linux Build (or any non Windows platforms)\r\n--------------------\r\n**FYI:** make sure bit architecture matches for all binary components  \r\nIf you are using 64bit nodejs make sure you are using 64bit Informix Client-SDK as well.\r\n\r\n### Prerequisite :\r\n* Git  \r\n* NodeJS\r\n* NPM\r\n* Python     (2.7.x (3.x is not supported yet))\r\n* Node-gyp   (npm install -g node-gyp)\r\n* NAN        (npm install -g nan)\r\n* Informix Client SDK 410 xC2 or above\r\n\r\n\r\n```bash  \r\n# Complile time environment setting  \r\nexport CSDK_HOME=/work/informix  \r\nexport PATH=/work/nodejs/bin:$PATH  \r\n\r\n# Runtime environment setting  \r\nexport INFORMIXDIR=${CSDK_HOME}  \r\nexport LD_LIBRARY_PATH=${INFORMIXDIR}/lib/esql:${INFORMIXDIR}/lib/cli  \r\n```\r\n\r\n### Fire the build \r\n```bash \r\ngit clone https://github.com/ifxdb/node-ifx_db.git\r\n\r\ncd node-ifx_db\r\nnpm update\r\n\r\nrm -rf ./build  \r\nnode-gyp configure -v  \r\nnode-gyp build -v \r\n```\r\n\r\n#### check the build output, if all right then the driver binary is    \r\n```bash\r\n./build/Release/ifx_node_bind.node\r\n```\r\n\r\n### Quick Test \r\n```bash\r\ncd ..\r\n#rm -rf node_modules\r\nmkdir  node_modules\r\ncd     node_modules\r\nln -s  ../node-ifx_db ./ifx_db\r\ncd ..\r\ncp node-ifx_db/SampleApp1.js .\r\n\r\n# edit connection informaton and then run\r\nnode SampleApp1.js\r\n```\r\n\r\n\r\n## Windows Build\r\n* Build Nodejs from its source \r\n* Build Informix Nodejs driver \r\n\r\nFYI: make sure bit architecture matches for all binary components  \r\nIf you are using 64bit nodejs make sure you are using 64bit Informix Client-SDK as well.  \r\n\r\n\r\n### Prerequisite :\r\n* Git  \r\n* NodeJS\r\n* NPM\r\n* Python     (2.7.x (3.x is not supported yet))\r\n* Node-gyp   (npm install -g node-gyp)\r\n* NAN        (npm install -g nan)\r\n* Informix Client SDK 410 xC2 or above\r\n\r\n\r\n### Build NodeJS from its source\r\n##### Why do we build nodejs from its source? \r\nThe **node.lib** is needed for compiling native addon, this library will get build if we build nodejs from its source.  \r\nFYI: The node.lib can also be obtained either from Node-gyp, it is up to you to choose one of the approach.  \r\n\r\n\r\n### Open VS 2015 x64 cmd\r\n```bat\r\n# Say you have extracted NodeJS sourct at **C:\\njs\\Src6112**\r\ncd C:\\njs\\Src6112\r\n\r\nSET NODE_SRC=C:\\njs\\Src6112\r\nvcbuild.bat nosign release x64\r\n\r\nFYI:\r\nvcbuild.bat nosign release x64 : Build in release mode in 64-bit computers\r\nvcbuild.bat nosign debug x64   : Build in debug mode for 64-bit computers\r\nvcbuild.bat nosign release     : Build in release mode in 32-bit computers\r\nvcbuild.bat clean              : Clean Project\r\n```\r\n\r\n\r\n### Build the Informix nodejs driver \r\n\r\n#### clone the driver source code\r\n```bat\r\ncd C:\\work\r\ngit clone https://github.com/ifxdb/node-ifx_db.git\r\ncd C:\\work\\node-ifx_db\r\n```\r\n\r\n#### Set env for the build \r\n* **c:\\Informix** is the location where Informix CSDK installed \r\n* **C:\\njs\\Src6112** is the nodejs source that you have completed the build \r\n``` bat\r\n#Open VS 2015 x64 cmd\r\n\r\n#Switch NodeJS to picket from the newly build location\r\nSET PATH=C:\\njs\\Src6112\\Debug;C:\\njs\\Src6112\\deps\\npm\\bin\\node-gyp-bin;%PATH%\r\nor (depens on your nodejs build)\r\nSET PATH=C:\\njs\\Src6112\\Release;C:\\njs\\Src6112\\deps\\npm\\bin\\node-gyp-bin;%PATH%\r\n\r\nSET CSDK_HOME=c:\\Informix\r\nSET NODE_SRC=C:\\njs\\Src6112\r\n```\r\n\r\n#### Fire the driver build \r\n```bat\r\ncd C:\\work\\node-ifx_db\r\nnode-gyp configure\r\nnode-gyp build\r\n\r\n#FYI: \r\nnode-gyp build  --debug\r\nnode-gyp build  --release\r\n\r\nAlternative build: you may use the Visual Studio 2015 Solution to build from source\r\nC:\\work\\node-ifx_db\\IfxNodeJsVS2015.sln\r\n```\r\n\r\n### Driver binaries\r\n```\r\nIf no build error then the driver binaries will be at \r\nC:\\work\\node-ifx_db\\build\\Debug\r\n```\r\n\r\n#### [FYI: node-gyp build helps](https://github.com/nodejs/node-gyp)\r\n| **Command**   | **Description**\r\n|:--------------|:---------------------------------------------------------------\r\n| `help`        | Shows the help dialog\r\n| `build`       | Invokes `make`/`msbuild.exe` and builds the native addon\r\n| `clean`       | Removes the `build` directory if it exists\r\n| `configure`   | Generates project build files for the current platform\r\n| `rebuild`     | Runs `clean`, `configure` and `build` all in a row\r\n| `install`     | Installs node header files for the given version\r\n| `list`        | Lists the currently installed node header versions\r\n| `remove`      | Removes the node header files for the given version\r\n\r\n\r\n## Connection String\r\n-----------------\r\n\r\n```javascript\r\nvar dbobj = require('ifx_db');\r\nvar ConnectionString = \"SERVER=<IDS ServerName>;DATABASE=<dbname>;HOST=<myhost>;PROTOCOL=<Protocol>;SERVICE=<IDS SQLI Port#>;UID=<UserName>;PWD=<password>;\";\r\n//Eg: \"SERVER=ids1;DATABASE=mydb1;HOST=BlueGene.ibm.com;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\"\r\n```\r\n\r\n\r\n\r\n## Example\r\n-------\r\n\r\n```javascript\r\n\r\nvar dbobj = require('ifx_db');\r\n\r\nfunction DirExec( conn, ErrIgn, sql )\r\n{\r\n\ttry\r\n\t{\r\n\t\tvar result = conn.querySync( sql );\r\n\t\tconsole.log( sql  );\r\n\t}\r\n    catch (e) \r\n\t{\r\n\t\tconsole.log( \"--- \" + sql  );\r\n\t\tif( ErrIgn != 1 )\r\n\t\t{\r\n\t\t\tconsole.log(e);\r\n\t\t\tconsole.log();\r\n\t\t}\r\n    }\r\n}\r\n\r\nfunction DoSomeWork(err, conn)\r\n{\r\n    if (err) \r\n\t{\r\n        return console.log(err);\r\n    }\r\n\t\r\n\tDirExec( conn, 1, \"drop table t1\" );\r\n\tDirExec( conn, 0, \"create table t1 ( c1 int, c2 char(20) ) \" );\r\n\tDirExec( conn, 0, \"insert into t1 values( 1, 'val-1' )\" );\r\n\tDirExec( conn, 0, \"insert into t1 values( 2, 'val-2' )\" );\r\n\tDirExec( conn, 0, \"insert into t1 values( 3, 'val-3' )\" );\r\n\tDirExec( conn, 0, \"insert into t1 values( 4, 'val-4' )\" );\r\n\tDirExec( conn, 0, \"insert into t1 values( 5, 'val-5' )\" );\r\n  \r\n  console.log(\" --- SELECT * FROM t1 ------ \" );\r\n  // blocks until the query is completed and all data has been acquired\r\n  var rows = conn.querySync( \"SELECT * FROM t1\" );\r\n  console.log();\r\n  console.log(rows);\r\n};\r\n\r\n\r\nvar MyAsynchronousTask = function (err, conn)\r\n{\r\n\tDoSomeWork(err, conn);\r\n\tconn.close();\r\n}\r\n\r\nfunction ifx_db_Open(ConStr) \r\n{\r\n\tconsole.log(\" --- MyAsynchronousTask Starting.....\" );\r\n\tdbobj.open( ConStr, MyAsynchronousTask );\r\n\tconsole.log(\" --- Check the sequence printed!\" );\r\n}\r\n\r\nfunction ifx_db_OpenSync(ConStr) \r\n{\r\n\tconsole.log(\" --- Executing ifx_db.openSync() ....\" );\r\n\tvar conn;\r\n\ttry \r\n\t{\r\n\t  conn = dbobj.openSync(ConStr);\r\n\t}\r\n\tcatch(e) \r\n\t{\r\n\t  console.log(e);\r\n\t  return;\r\n\t}\r\n\t\r\n\tDoSomeWork(0, conn);\r\n\t\r\n\ttry \r\n\t{\r\n\t    conn.closeSync();\r\n\t}\r\n\tcatch(e) \r\n\t{\r\n\t  console.log(e);\r\n\t}\r\n\tconsole.log(\" --- End ifx_db.openSync()\" );\r\n}\r\n\r\nfunction main_func()\r\n{\r\n\t//  Make sure the port is IDS SQLI port.\r\n\tvar ConnectionString = \"SERVER=ids1;DATABASE=mydb1;HOST=BlueGene.ibm.com;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\t\t\r\n\t//Synchronous Execution \r\n\tifx_db_OpenSync(ConnectionString);\r\n\t\r\n\t//Asynchronous Execution\r\n\tifx_db_Open(ConnectionString);\r\n}\r\n\r\nmain_func();\r\n\r\n```\r\n\r\n\r\n\r\nDiscussion Forums\r\n-----------------\r\nTo start a discussion or need help you can post a topic on http://stackoverflow.com/questions/tagged/informix\r\n\r\napi\r\n---\r\n\r\n### Database\r\n\r\nThe simple api is based on instances of the `Database` class. You may get an \r\ninstance in one of the following ways:\r\n\r\n```javascript\r\nrequire(\"ifx_db\").open(connectionString, function (err, conn){\r\n  //conn is already open now if err is falsy\r\n});\r\n```\r\n\r\nor by using the helper function:\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\")();\r\n``` \r\n\r\nor by creating an instance with the constructor function:\r\n\r\n```javascript\r\nvar Database = require(\"ifx_db\").Database\r\n  , ibmdb = new Database();\r\n```\r\n\r\n#### .open(connectionString, [options,] callback)\r\n\r\nOpen a connection to a database.\r\n\r\n* **connectionString** - The connection string for your database\r\n* **options** - _OPTIONAL_ - Object type. Can be used to avoid multiple \r\n    loading of native ODBC library for each call of `.open`.\r\n* **callback** - `callback (err, conn)`\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\");\r\n\r\nibmdb.open(connectionString, function (err, connection) {\r\n    if (err) \r\n    {\r\n      console.log(err);\r\n      return;\r\n    }\r\n    connection.query(\"select 1 from mytab1\", function (err1, rows) \r\n    {\r\n      if (err1) console.log(err1);\r\n      else console.log(rows);\r\n      connection.close(function(err2) \r\n      { \r\n        if(err2) console.log(err2);\r\n      });\r\n    });\r\n};\r\n\r\n```\r\n\r\n#### .openSync(connectionString)\r\n\r\nSynchronously open a connection to a database.\r\n\r\n* **connectionString** - The connection string for your database\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\"),\r\n\tconnString = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\ntry {\r\n\tvar conn = ibmdb.openSync(connString);\r\n\tconn.query(\"select * from customers fetch first 10 rows only\", function (err, rows, moreResultSets) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t} else {\r\n\t\t  console.log(rows);\r\n\t\t}\r\n\t\tconn.close();\t\r\n\t});\r\n} catch (e) {\r\n\tconsole.log(e.message);\r\n}\r\n```\r\n\r\n#### .query(sqlQuery [, bindingParameters], callback)\r\n\r\nIssue an asynchronous SQL query to the database which is currently open.\r\n\r\n* **sqlQuery** - The SQL query to be executed.\r\n* **bindingParameters** - _OPTIONAL_ - An array of values that will be bound to\r\n    any '?' characters in `sqlQuery`.\r\n* **callback** - `callback (err, rows, moreResultSets)`\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\"),\r\n   cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\nibmdb.open(cn, function (err, conn) {\r\n\tif (err) {\r\n\t\treturn console.log(err);\r\n\t}\r\n\r\n\t//we now have an open connection to the database\r\n\t//so lets get some data\r\n\tconn.query(\"select * from customers fetch first 10 rows only\", function (err, rows, moreResultSets) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t} else {\r\n\t\t\r\n\t\t  console.log(rows);\r\n\t\t}\r\n\r\n\t\t//if moreResultSets is truthy, then this callback function will be called\r\n\t\t//again with the next set of rows.\r\n\t});\r\n});\r\n```\r\n\r\n#### .querySync(sqlQuery [, bindingParameters])\r\n\r\nSynchronously issue a SQL query to the database that is currently open.\r\n\r\n* **sqlQuery** - The SQL query to be executed.\r\n* **bindingParameters** - _OPTIONAL_ - An array of values that will be bound to\r\n    any '?' characters in `sqlQuery`.\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\"),\r\n   cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\nibmdb.open(cn, function(err, conn){\r\n\r\n    //blocks until the query is completed and all data has been acquired\r\n    var rows = conn.querySync(\"select * from customers fetch first 10 rows only\");\r\n\r\n    console.log(rows);\r\n})\r\n```\r\n\r\n#### .close(callback)\r\n\r\nClose the currently opened database.\r\n\r\n* **callback** - `callback (err)`\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\"),\r\n   cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\nibmdb.open(cn, function (err, conn) {\r\n\tif (err) {\r\n\t\treturn console.log(err);\r\n\t}\r\n\t\r\n\t//we now have an open connection to the database\r\n\t\r\n\tconn.close(function (err) {\r\n\t\tconsole.log(\"the database connection is now closed\");\r\n\t});\r\n});\r\n```\r\n\r\n#### .closeSync()\r\n\r\nSynchronously close the currently opened database.\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\")(),\r\n   cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\n//Blocks until the connection is open\r\nvar conn = ibmdb.openSync(cn);\r\n\r\n//Blocks until the connection is closed\r\nconn.closeSync();\r\n```\r\n\r\n#### .prepare(sql, callback)\r\n\r\nPrepare a statement for execution.\r\n\r\n* **sql** - SQL string to prepare\r\n* **callback** - `callback (err, stmt)`\r\n\r\nReturns a `Statement` object via the callback\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\"),\r\n   cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\nibmdb.open(cn,function(err,conn){\r\n  conn.prepare(\"insert into hits (col1, col2) VALUES (?, ?)\", function (err, stmt) {\r\n    if (err) {\r\n      //could not prepare for some reason\r\n      console.log(err);\r\n      return conn.closeSync();\r\n    }\r\n\r\n    //Bind and Execute the statment asynchronously\r\n    stmt.execute(['something', 42], function (err, result) {\r\n      if( err ) console.log(err);  \r\n      else result.closeSync();\r\n\r\n      //Close the connection\r\n\t  conn.close(function(err){}));\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n#### .prepareSync(sql)\r\n\r\nSynchronously prepare a statement for execution.\r\n\r\n* **sql** - SQL string to prepare\r\n\r\nReturns a `Statement` object\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\"),\r\n   cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\nibmdb.open(cn,function(err,conn){\r\n  var stmt = conn.prepareSync(\"insert into hits (col1, col2) VALUES (?, ?)\");\r\n\r\n  //Bind and Execute the statment asynchronously\r\n  stmt.execute(['something', 42], function (err, result) {\r\n    result.closeSync();\r\n\r\n    //Close the connection\r\n\tconn.close(function(err){}));\r\n  });\r\n});\r\n```\r\n\r\n#### .beginTransaction(callback)\r\n\r\nBegin a transaction\r\n\r\n* **callback** - `callback (err)`\r\n\r\n#### .beginTransactionSync()\r\n\r\nSynchronously begin a transaction\r\n\r\n#### .commitTransaction(callback)\r\n\r\nCommit a transaction\r\n\r\n* **callback** - `callback (err)`\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\"),\r\n   cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\nibmdb.open(cn, function(err,conn) {\r\n\r\n  conn.beginTransaction(function (err) {\r\n    if (err) {\r\n      //could not begin a transaction for some reason.\r\n      console.log(err);\r\n      return conn.closeSync();\r\n    }\r\n\r\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\r\n\r\n    conn.commitTransaction(function (err) {\r\n      if (err) {\r\n        //error during commit\r\n        console.log(err);\r\n        return conn.closeSync();\r\n      }\r\n\r\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\r\n\r\n     //Close the connection\r\n     conn.closeSync();\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n#### .commitTransactionSync()\r\n\r\nSynchronously commit a transaction\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\"),\r\n   cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\nibmdb.open(cn, function(err,conn) {\r\n\r\n  conn.beginTransaction(function (err) {\r\n    if (err) {\r\n      //could not begin a transaction for some reason.\r\n      console.log(err);\r\n      return conn.closeSync();\r\n    }\r\n\r\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\r\n\r\n    conn.commitTransactionSync();\r\n\r\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\r\n\r\n     //Close the connection\r\n    conn.closeSync();\r\n  });\r\n});\r\n```\r\n\r\n#### .rollbackTransaction(callback)\r\n\r\nRollback a transaction\r\n\r\n* **callback** - `callback (err)`\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\"),\r\n   cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\nibmdb.open(cn, function(err,conn) {\r\n\r\n  conn.beginTransaction(function (err) {\r\n    if (err) {\r\n      //could not begin a transaction for some reason.\r\n      console.log(err);\r\n      return conn.closeSync();\r\n    }\r\n\r\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\r\n\r\n    conn.rollbackTransaction(function (err) {\r\n      if (err) {\r\n        //error during rollback\r\n        console.log(err);\r\n        return conn.closeSync();\r\n      }\r\n\r\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\r\n\r\n     //Close the connection\r\n     conn.closeSync();\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n#### .rollbackTransactionSync()\r\n\r\nSynchronously rollback a transaction\r\n\r\n```javascript\r\nvar ibmdb = require(\"ifx_db\")\r\n   cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\nibmdb.open(cn, function(err,conn) {\r\n\r\n  conn.beginTransaction(function (err) {\r\n    if (err) {\r\n      //could not begin a transaction for some reason.\r\n      console.log(err);\r\n      return conn.closeSync();\r\n    }\r\n\r\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\r\n\r\n    conn.rollbackTransactionSync();\r\n\r\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\r\n\r\n     //Close the connection\r\n    conn.closeSync();\r\n  });\r\n});\r\n```\r\n\r\n----------\r\n\r\n### Pool\r\n\r\nRudimentary support, rework in progress...... \r\n\r\n\r\n#### .open(connectionString, callback)\r\n\r\nGet a `Database` instance which is already connected to `connectionString`\r\n\r\n* **connectionString** - The connection string for your database\r\n* **callback** - `callback (err, db)`\r\n\r\n```javascript\r\nvar Pool = require(\"ifx_db\").Pool\r\n\t, pool = new Pool()\r\n    , cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\npool.open(cn, function (err, db) {\r\n\tif (err) {\r\n\t\treturn console.log(err);\r\n\t}\r\n\r\n\t//db is now an open database connection and can be used like normal\r\n\t//if we run some queries with db.query(...) and then call db.close();\r\n\t//a connection to `cn` will be re-opened silently behind the scense\r\n\t//and will be ready the next time we do `pool.open(cn)`\r\n});\r\n```\r\n\r\n#### .close(callback)\r\n\r\nClose all connections in the `Pool` instance\r\n\r\n* **callback** - `callback (err)`\r\n\r\n```javascript\r\nvar Pool = require(\"ifx_db\").Pool\r\n\t, pool = new Pool()\r\n    , cn = \"SERVER=ids1;DATABASE=mydb1;HOST=9.25.140.10;PROTOCOL=onsoctcp;SERVICE=5550;UID=user1;PWD=xyz;\";\r\n\r\npool.open(cn, function (err, db) {\r\n\tif (err) {\r\n\t\treturn console.log(err);\r\n\t}\r\n\r\n\t//db is now an open database connection and can be used like normal\r\n\t//but all we will do now is close the whole pool\r\n\t\r\n\tpool.close(function () {\r\n\t\tconsole.log(\"all connections in the pool are closed\");\r\n\t});\r\n});\r\n```\r\n\r\ncontributors\r\n------\r\n* IBM\r\n* Sathyanesh Krishnan (msatyan@gmail.com)\r\n* Dan VerWeire (dverweire@gmail.com)\r\n* Lee Smith (notwink@gmail.com)\r\n* Bruno Bigras\r\n* Christian Ensel\r\n* Yorick\r\n* Joachim Kainz\r\n* Oleg Efimov\r\n* paulhendrix\r\n\r\n\r\nlicense\r\n-------\r\nCopyright (c) 2015 Sathyanesh Krishnan <msatyan@gmail.com>\r\n\r\nCopyright (c) 2014 IBM Corporation <opendev@us.ibm.com>\r\n\r\nCopyright (c) 2013 Dan VerWeire <dverweire@gmail.com>\r\n\r\nCopyright (c) 2010 Lee Smith <notwink@gmail.com>\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","starsCount":1,"created":"2015-08-19T14:39:17.795Z","modified":"2017-08-24T04:51:18.116Z","lastPublisher":{"name":"ifxdb","email":"ifmxdb@gmail.com"},"owners":[{"name":"ifxdb","email":"ifmxdb@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"ifx_db","_nodeVersion":"6.8.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ifx_db-6.0.0.tgz_1503550276269_0.7148370072245598"},"_npmUser":{"name":"ifxdb","email":"ifmxdb@gmail.com"},"_npmVersion":"3.10.8","_rev":"2-30083f96f01fe74ce06ea9567359704e","_shasum":"22b4c5a728012ed177ce297e8d93b5cbd924b72c","author":{"name":"Sathyanesh Krishnan"},"bugs":{"url":"https://github.com/ifxdb/node-ifx_db/issues"},"contributors":[{"name":"IBM Informix"},{"name":"Sathyanesh Krishnan"}],"directories":{"example":"examples","test":"test"},"dist-tags":{"latest":"6.0.0"},"dist":{"shasum":"22b4c5a728012ed177ce297e8d93b5cbd924b72c","tarball":"https://registry.npmjs.org/ifx_db/-/ifx_db-6.0.0.tgz"},"maintainers":[{"name":"ifxdb","email":"ifmxdb@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-24T04:51:18.116Z","created":"2015-08-19T14:39:17.795Z","1.0.0":"2015-08-19T14:39:17.795Z","1.0.1":"2015-10-27T16:38:50.563Z","4.0.2":"2016-05-26T00:44:31.843Z","4.0.3":"2016-05-26T00:52:15.739Z","4.0.4":"2016-10-07T19:23:13.054Z","6.0.0":"2017-08-24T04:51:18.116Z"},"users":{"jiahongwei":true}}}