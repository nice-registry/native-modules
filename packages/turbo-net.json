{"name":"turbo-net","version":"0.0.2","main":"index.js","description":"Experimental TCP library","dependencies":{"nan":"^2.5.1","node-gyp-build":"^3.0.0","unordered-set":"^2.0.0"},"devDependencies":{"prettier-bytes":"^1.0.3","speedometer":"^1.0.0","standard":"^8.0.0"},"scripts":{"test":"standard","install":"node-gyp-build"},"repository":"https://github.com/mafintosh/turbo-net","license":"MIT","homepage":"https://github.com/mafintosh/turbo-net","gitHead":"fbd54f77453420ebfa317fecd8dbab1aefd76838","versions":[{"number":"0.0.0","date":"2017-02-09T15:28:56.224Z"},{"number":"0.0.1","date":"2017-02-09T15:32:21.056Z"},{"number":"0.0.2","date":"2017-02-09T18:27:28.089Z"}],"readme":"# turbo-net\n\nExperimental TCP library for Node.js.\nFocuses on performance and low memory footprint by allowing easy reuse of buffers while still being easy to use.\n\n## CURRENT STATUS: WIP AND UNSTABLE\n\n## Usage\n\n``` js\nvar net = require('turbo-net')\n\nvar server = net.createServer(function (socket) {\n  var buffer = new Buffer(65536) // allocate a buffer\n\n  socket.read(buffer, function onread (err, data) {\n    if (err) return console.log('error!', err)\n    if (!data) return socket.end()\n    console.log('data:', data.toString())\n    socket.read(buffer, onread)\n  })\n})\n\nserver.listen(10000, function () {\n  console.log('Server is listening on port 10000')\n})\n```\n\nTry running the example echo server in `./example/server.js`\nand the client `./example/client.js`.\n\nThe client will write data as fast as possible to the server and print out the throughput\nBoth the client and server are reusing buffers, keeping the memory usage flat.\n\nOn my laptop this gets `~1.4GB/s` with 16MB ram used.\n\n## API\n\n#### `var server = net.createServer([onconnection])`\n\nCreate a new server. Optionally you can pass a onconnection handler.\n\n#### `server.listen([port], [onlistening])`\n\nListen on a port. If port is omitted or is 0 a random port will be chosen.\n\n#### `server.on('connection', socket)`\n\nEmitted when a new socket connects\n\n#### `server.on('listening')`\n\nEmitted when the server is listening\n\n#### `server.connections`\n\nAn array of all connections the server currently has (order not guaranteed).\n\n#### `var socket = net.connect(port, [host])`\n\nConnect to a server.\n\n#### `socket.read([buffer], callback)`\n\nRead data. Optionally you can pass in a buffer to read the data into.\nThe callback is always called and will contain an error if the read failed.\nIf no more data is available the callback will be called with `(null, null)`\notherwise `(null, data)` where data is the data read.\n\n#### `socket.write(buffer, [callback])`\n\nWrite data. Callback is called when the write completed and is guaranteed to be\ncalled.\n\n#### `socket.end([callback])`\n\nEnd the socket. Waits for all pending data to be flushed and then destroys it and calls the\ncallback.\n\n#### `socket.destroy([err], [callback])\n\nDestroy the socket. Optionally pass an error that is passed to pending callbacks.\nIf a read/write error occurs the socket is automatically destroyed but this method is\nsafe to call more than once.\n\n#### `socket.on('close')`\n\nEmitted when a destroy has been completed and the socket is fully closed\n\n#### `socket.on('end')`\n\nEmitted when a read returned `null` signalling no more data.\n\n#### `socket.on('finish')`\n\nEmitted when end has been called and all pending writes flushed.\n\n#### `socket.on('connect')`\n\nEmitted when a socket is fully connected.\n","created":"2017-02-09T15:28:56.224Z","modified":"2017-02-09T18:27:28.089Z","lastPublisher":{"name":"mafintosh","email":"mathiasbuus@gmail.com"},"owners":[{"name":"mafintosh","email":"mathiasbuus@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"turbo-net","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/turbo-net-0.0.2.tgz_1486664846184_0.27283532125875354"},"_npmUser":{"name":"mafintosh","email":"mathiasbuus@gmail.com"},"_npmVersion":"3.10.10","_rev":"3-130af41ad50aa0f69d7ab1662d56c7f7","_shasum":"8a8750ac9dbef57d2fd4b7f5146e58658f40c791","author":{"name":"Mathias Buus","url":"@mafintosh"},"bugs":{"url":"https://github.com/mafintosh/turbo-net/issues"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"8a8750ac9dbef57d2fd4b7f5146e58658f40c791","tarball":"https://registry.npmjs.org/turbo-net/-/turbo-net-0.0.2.tgz"},"maintainers":[{"name":"mafintosh","email":"mathiasbuus@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-09T18:27:28.089Z","created":"2017-02-09T15:28:56.224Z","0.0.0":"2017-02-09T15:28:56.224Z","0.0.1":"2017-02-09T15:32:21.056Z","0.0.2":"2017-02-09T18:27:28.089Z"}}}