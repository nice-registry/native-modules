{"name":"bluetooth-serial-port","version":"2.1.4","description":"Bluetooth serial port communication for Node.js","keywords":["bluetooth","serial port","rfcomm","linux","os x","windows"],"homepage":"https://github.com/eelcocramer/node-bluetooth-serial-port","repository":"https://github.com/eelcocramer/node-bluetooth-serial-port","main":"./lib/bluetooth-serial-port.js","types":"./lib/bluetooth-serial-port.d.ts","os":["darwin","linux","win32"],"dependencies":{"bindings":"1.2.x","nan":"latest","@types/node":"^7.0.10"},"optionalDependencies":{"@types/node":"^7.0.10"},"engines":{"node":">= 0.12.x","npm":">= 1.1.x"},"scripts":{"install":"node-gyp configure build","install-debug":"node-gyp configure build --debug"},"license":"BSD-2-Clause","gitHead":"ee1a138d0936c5b0aa8700fbb3344d3e0597d066","versions":[{"number":"0.1.0","date":"2012-10-31T15:22:25.099Z"},{"number":"0.1.1","date":"2012-11-01T10:50:36.737Z"},{"number":"0.1.3","date":"2012-11-29T14:32:56.388Z"},{"number":"0.1.4","date":"2012-11-29T15:13:03.206Z"},{"number":"0.1.5","date":"2013-01-07T08:54:54.135Z"},{"number":"0.1.6","date":"2013-01-08T08:11:52.513Z"},{"number":"0.1.7","date":"2013-03-25T08:49:33.491Z"},{"number":"0.1.8","date":"2013-03-26T15:24:15.185Z"},{"number":"0.1.9","date":"2013-04-10T14:14:26.974Z"},{"number":"0.1.10","date":"2013-04-22T10:05:29.704Z"},{"number":"0.1.11","date":"2013-04-23T11:43:24.445Z"},{"number":"0.1.12","date":"2013-05-08T08:30:44.890Z"},{"number":"0.2.0","date":"2013-06-05T09:48:25.488Z"},{"number":"0.2.1","date":"2013-06-05T11:11:27.242Z"},{"number":"1.0.0","date":"2013-07-11T14:53:35.010Z"},{"number":"1.0.1","date":"2013-07-11T14:57:58.346Z"},{"number":"1.0.2","date":"2013-08-20T11:22:30.530Z"},{"number":"1.0.3","date":"2013-09-02T11:11:20.522Z"},{"number":"1.0.4","date":"2013-10-03T09:11:27.286Z"},{"number":"1.0.5","date":"2013-10-16T18:26:35.781Z"},{"number":"1.1.0","date":"2014-04-24T06:42:10.564Z"},{"number":"1.1.1","date":"2014-04-24T06:48:29.782Z"},{"number":"1.1.2","date":"2014-04-24T06:56:20.821Z"},{"number":"1.1.3","date":"2014-06-02T13:34:49.314Z"},{"number":"1.1.4","date":"2014-06-05T06:20:52.813Z"},{"number":"1.2.0","date":"2014-12-30T18:52:17.271Z"},{"number":"1.2.1","date":"2015-01-22T19:35:10.068Z"},{"number":"1.2.2","date":"2015-02-19T12:31:47.797Z"},{"number":"1.2.3","date":"2015-05-12T07:00:08.697Z"},{"number":"1.2.4","date":"2015-07-02T11:50:02.933Z"},{"number":"1.2.5","date":"2015-09-28T09:21:05.681Z"},{"number":"1.2.6","date":"2015-11-02T15:47:54.574Z"},{"number":"1.3.0","date":"2016-09-12T13:59:55.739Z"},{"number":"1.3.1","date":"2016-09-13T06:44:23.505Z"},{"number":"2.0.0","date":"2016-09-27T08:00:21.539Z"},{"number":"2.1.0","date":"2016-10-13T09:29:26.683Z"},{"number":"2.1.1","date":"2016-12-01T12:45:19.661Z"},{"number":"2.1.2","date":"2017-03-20T18:00:29.328Z"},{"number":"2.1.3","date":"2017-07-12T07:43:58.027Z"},{"number":"2.1.4","date":"2017-07-13T13:47:28.795Z"}],"readme":"# Bluetooth serial port communication for Node.js\n\n[![Build Status](https://travis-ci.org/eelcocramer/node-bluetooth-serial-port.svg)](https://travis-ci.org/eelcocramer/node-bluetooth-serial-port)\n[![Build status](https://ci.appveyor.com/api/projects/status/4p1r3ddoid98qc7k?svg=true)](https://ci.appveyor.com/project/eelcocramer/node-bluetooth-serial-port)\n\nThis node module lets you communicate over Bluetooth serial port with devices using Node.js. The goal is have an easy to use API. This module is great for communicating with Bluetooth enabled Arduino devices.\n\nIf you have any problems make sure to [checkout the FAQ](https://github.com/eelcocramer/node-bluetooth-serial-port/issues?q=label%3AFAQ).\n\n## New in this release\n\n* Removes erroneous print statement\n* Adds `on` to the TypeScript declaration file\n\n## New in 2.1.3\n\n* Implements `listPairedDevices` on Windows\n* Fixes a memory leak that occurs when trying to reconnect to a device repeatedly\n* Adds support for TypeScript\n* Removes support for node v0.10, v0.12 and iojs\n* Adds support for node v7\n\n## Pre-requests on Linux\n\n* Needs Bluetooth development packages to build\n\n`apt-get install build-essential libbluetooth-dev`\n\n### Note on RFCOMM Server Sockets\nAs the initial implementation of the RFCOMM server sockets is based on BlueZ4, in order to work with SDP we need to change the bluetoothd service configuration file by modifing the systemd unit file: bluetooth.service:\n\n(Debian based distro)\n\n`sudo vim /lib/systemd/system/bluetooth.service`\n\n(RedHat based distro)\n\n`sudo vim /usr/lib/systemd/system/bluetooth.service`\n\nand adding the --compat flag to the ExecStart value:\n\n`ExecStart=/usr/lib/bluetooth/bluetoothd `**`--compat`**\n\nFinally, restart the service:\n\n`systemctl daemon-reload\nsystemctl restart bluetooth`\n\n## Pre-request on macOS\n\n* Needs Xcode and Xcode command line tools installed.\n\n## Pre-request on Windows\n\n* Needs Visual Studio (Visual C++) and its command line tools installed.\n* Needs Python 2.x installed and accessible from the command line path.\n\n## Install\n\n`npm install bluetooth-serial-port`\n\n## Test build Linux using docker\n\n`docker build -t bluetooth-serial-port .`\n\n# Documentation\n\n## Basic client usage\n\n```javascript\n\nvar btSerial = new (require('bluetooth-serial-port')).BluetoothSerialPort();\n\nbtSerial.on('found', function(address, name) {\n\tbtSerial.findSerialPortChannel(address, function(channel) {\n\t\tbtSerial.connect(address, channel, function() {\n\t\t\tconsole.log('connected');\n\n\t\t\tbtSerial.write(new Buffer('my data', 'utf-8'), function(err, bytesWritten) {\n\t\t\t\tif (err) console.log(err);\n\t\t\t});\n\n\t\t\tbtSerial.on('data', function(buffer) {\n\t\t\t\tconsole.log(buffer.toString('utf-8'));\n\t\t\t});\n\t\t}, function () {\n\t\t\tconsole.log('cannot connect');\n\t\t});\n\n\t\t// close the connection when you're ready\n\t\tbtSerial.close();\n\t}, function() {\n\t\tconsole.log('found nothing');\n\t});\n});\n\nbtSerial.inquire();\n\n```\n\n## Basic server usage (only on Linux)\n\n```javascript\nvar server = new(require('bluetooth-serial-port')).BluetoothSerialPortServer();\n\nvar CHANNEL = 10; // My service channel. Defaults to 1 if omitted.\nvar UUID = '38e851bc-7144-44b4-9cd8-80549c6f2912'; // My own service UUID. Defaults to '1101' if omitted\n\nserver.listen(function (clientAddress) {\n    console.log('Client: ' + clientAddress + ' connected!');\n    server.on('data', function(buffer) {\n        console.log('Received data from client: ' + buffer);\n\n        // ...\n\n        console.log('Sending data to the client');\n        server.write(new Buffer('...'), function (err, bytesWritten) {\n            if (err) {\n                console.log('Error!');\n            } else {\n                console.log('Send ' + bytesWritten + ' to the client!');\n            }\n        });\n    });\n}, function(error){\n\tconsole.error(\"Something wrong happened!:\" + error);\n}, {uuid: UUID, channel: CHANNEL} );\n```\n\n## API\n\n### BluetoothSerialPort\n\n#### Event: ('data', buffer)\n\nEmitted when data is read from the serial port connection.\n\n* buffer - the data that was read into a [Buffer](http://nodejs.org/api/buffer.html) object.\n\n### Event: ('closed')\n\nEmitted when a connection was closed either by the user (i.e. calling `close` or remotely).\n\n#### Event: ('failure', err)\n\nEmitted when reading from the serial port connection results in an error. The connection is closed.\n\n* err - an [Error object](http://docs.nodejitsu.com/articles/errors/what-is-the-error-object) describing the failure.\n\n#### Event: ('found', address, name)\n\nEmitted when a bluetooth device was found.\n\n* address - the address of the device\n* name - the name of the device (or the address if the name is unavailable)\n\n#### Event: ('finished')\n\nEmitted when the device inquiry execution did finish.\n\n#### BluetoothSerialPort.inquire()\n\nStarts searching for bluetooth devices. When a device is found a 'found' event will be emitted.\n\n#### BluetoothSerialPort.inquireSync()\n\nStarts searching synchronously for bluetooth devices. When a device is found a 'found' event will be emitted.\n\n#### BluetoothSerialPort.findSerialPortChannel(address, callback[, errorCallback])\n\nChecks if a device has a serial port service running and if it is found it passes the channel id to use for the RFCOMM connection.\n\n* callback(channel) - called when finished looking for a serial port on the device.\n* errorCallback - called the search finished but no serial port channel was found on the device.\nConnects to a remote bluetooth device.\n\n* bluetoothAddress - the address of the remote Bluetooth device.\n* channel - the channel to connect to.\n* [successCallback] - called when a connection has been established.\n* [errorCallback(err)] - called when the connection attempt results in an error. The parameter is an [Error object](http://docs.nodejitsu.com/articles/errors/what-is-the-error-object).\n\n#### BluetoothSerialPort.close()\n\nCloses the connection.\n\n#### BluetoothSerialPort.isOpen()\n\nCheck whether the connection is open or not.\n\n#### BluetoothSerialPort.write(buffer, callback)\n\nWrites a [Buffer](http://nodejs.org/api/buffer.html) to the serial port connection.\n\n* buffer - the [Buffer](http://nodejs.org/api/buffer.html) to be written.\n* callback(err, bytesWritten) - is called when the write action has been completed. When the `err` parameter is set an error has occured, in that case `err` is an [Error object](http://docs.nodejitsu.com/articles/errors/what-is-the-error-object). When `err` is not set the write action was successful and `bytesWritten` contains the amount of bytes that is written to the connection.\n\n#### BluetoothSerialPort.listPairedDevices(callback)\n\n__NOT AVAILABLE ON LINUX__\n\nLists the devices that are currently paired with the host.\n\n* callback(pairedDevices) - is called when the paired devices object has been populated. See the [pull request](https://github.com/eelcocramer/node-bluetooth-serial-port/pull/30) for more information on the `pairedDevices` object.\n\n### BluetoothSerialPortServer\n\n#### BluetoothSerialPortServer.listen(callback[, errorCallback, options])\n\nListens for an incoming bluetooth connection. It will automatically advertise the server via SDP\n\n* callback(address) - is called when a new client is connecting.\n* errorCallback(err) - is called when an error occurs.\n* options - An object with these properties:\n  * uuid - [String] The UUID of the server. If omitted the default value will be 1101 (corresponding to Serial Port Profile UUID). Can be a 16 bit or 32 bit UUID.\n  * channel - [Number] The RFCOMM channel the server is listening on, in the range of 1-30. If omitted the default value will be 1.\n\n    Example:\n    `var options = {\n\t    uuid: 'ffffffff-ffff-ffff-ffff-fffffffffff1',\n\t    channel: 10\n     }`\n\n#### BluetoothSerialPortServer.write(buffer, callback)\n\nWrites data from a buffer to a connection.\n\n* buffer - the buffer to send over the connection.\n* callback(err, len) - called when the data is send or an error did occur. `error` contains the error is appropriated. `len` has the number of bytes that were written to the connection.\n\n#### BluetoothSerialPortServer.close()\n\nStops the server\n\n#### BluetoothSerialPortServer.isOpen()\n\nChecks is a server is listening or not.\n\n#### Event: ('data', buffer)\n\nEmitted when data is read from the serial port connection.\n\n* buffer - the data that was read into a [Buffer](http://nodejs.org/api/buffer.html) object.\n\n### Event: ('closed')\n\nEmitted when a connection was closed either by the user (i.e. calling `close` or remotely).\n\n#### Event: ('failure', err)\n\nEmitted when reading from the serial port connection results in an error. The connection is closed.\n\n* err - an [Error object](http://docs.nodejitsu.com/articles/errors/what-is-the-error-object) describing the failure.\n\n## Typescript support\n\nThe type script declaration file is bundled with this module so you can use it without needing to `npm install @types/bluetooth-serial-port`\n\n```typescript\nimport btSerial = require(\"bluetooth-serial-port\");\n\nbtSerial.findSerialPortChannel(address: string, (channel: number) => {\n    btSerial.connect(address: string, channel: number, () => {\n        btSerial.write(new Buffer(\"yes\"), (err) => {\n\t    if (err) {\n                console.error(err);\n            }\n        });\n    }, (err?: Error) => {\n            if (err) {\n                console.error(err);\n            }\n        });\n        btSerial.on(\"data\", (buffer: Buffer) => console.log(buffer.toString(\"ascii\")));\n}, () => {\n        console.error(\"Cannot find channel!\");\n});\n```\n\n## LICENSE\n\nThis module is available under a [FreeBSD license](http://opensource.org/licenses/BSD-2-Clause), see the [LICENSE file](https://github.com/eelcocramer/node-bluetooth-serial-port/blob/master/LICENSE.md) for details.\n","starsCount":10,"created":"2012-10-31T15:22:22.132Z","modified":"2017-07-13T13:47:28.795Z","lastPublisher":{"name":"eelco","email":"eelco@hailendal.org"},"owners":[{"name":"eelco","email":"eelco@hailendal.org"},{"name":"langholz","email":"langholz@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"bluetooth-serial-port","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/bluetooth-serial-port-2.1.4.tgz_1499953647029_0.781665550544858"},"_npmUser":{"name":"eelco","email":"eelco@hailendal.org"},"_npmVersion":"3.10.10","_rev":"8-51445f881e01f47880fad715d1a857d8","_shasum":"24322580516d5b92fb7c8583d92b5bc184b41201","author":{"name":"Eelco Cramer","email":"eelco@hailendal.org"},"bugs":{"url":"https://github.com/eelcocramer/node-bluetooth-serial-port/issues"},"contributors":[{"name":"Eric Smekens"},{"name":"Juho Vepsäläinen"},{"name":"Elmar Langholz"},{"name":"Donald Ness"},{"name":"Joost Verdoorn"},{"name":"Max Metral"},{"name":"Thomas Wickham"},{"name":"Adrián Estrada"},{"name":"Juan Gomez"},{"name":"Eric Lundby"},{"name":"Kevin Clarens"}],"directories":{"lib":"./lib"},"dist-tags":{"latest":"2.1.4"},"dist":{"shasum":"24322580516d5b92fb7c8583d92b5bc184b41201","tarball":"https://registry.npmjs.org/bluetooth-serial-port/-/bluetooth-serial-port-2.1.4.tgz"},"maintainers":[{"name":"eelco","email":"eelco@hailendal.org"},{"name":"langholz","email":"langholz@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-13T13:47:28.795Z","created":"2012-10-31T15:22:22.132Z","0.1.0":"2012-10-31T15:22:25.099Z","0.1.1":"2012-11-01T10:50:36.737Z","0.1.3":"2012-11-29T14:32:56.388Z","0.1.4":"2012-11-29T15:13:03.206Z","0.1.5":"2013-01-07T08:54:54.135Z","0.1.6":"2013-01-08T08:11:52.513Z","0.1.7":"2013-03-25T08:49:33.491Z","0.1.8":"2013-03-26T15:24:15.185Z","0.1.9":"2013-04-10T14:14:26.974Z","0.1.10":"2013-04-22T10:05:29.704Z","0.1.11":"2013-04-23T11:43:24.445Z","0.1.12":"2013-05-08T08:30:44.890Z","0.2.0":"2013-06-05T09:48:25.488Z","0.2.1":"2013-06-05T11:11:27.242Z","1.0.0":"2013-07-11T14:53:35.010Z","1.0.1":"2013-07-11T14:57:58.346Z","1.0.2":"2013-08-20T11:22:30.530Z","1.0.3":"2013-09-02T11:11:20.522Z","1.0.4":"2013-10-03T09:11:27.286Z","1.0.5":"2013-10-16T18:26:35.781Z","1.1.0":"2014-04-24T06:42:10.564Z","1.1.1":"2014-04-24T06:48:29.782Z","1.1.2":"2014-04-24T06:56:20.821Z","1.1.3":"2014-06-02T13:34:49.314Z","1.1.4":"2014-06-05T06:20:52.813Z","1.2.0":"2014-12-30T18:52:17.271Z","1.2.1":"2015-01-22T19:35:10.068Z","1.2.2":"2015-02-19T12:31:47.797Z","1.2.3":"2015-05-12T07:00:08.697Z","1.2.4":"2015-07-02T11:50:02.933Z","1.2.5":"2015-09-28T09:21:05.681Z","1.2.6":"2015-11-02T15:47:54.574Z","1.3.0":"2016-09-12T13:59:55.739Z","1.3.1":"2016-09-13T06:44:23.505Z","2.0.0":"2016-09-27T08:00:21.539Z","2.1.0":"2016-10-13T09:29:26.683Z","2.1.1":"2016-12-01T12:45:19.661Z","2.1.2":"2017-03-20T18:00:29.328Z","2.1.3":"2017-07-12T07:43:58.027Z","2.1.4":"2017-07-13T13:47:28.795Z"},"users":{"gazzwi86":true,"nmante":true,"paulhayes":true,"eelco":true,"akarsh":true,"superjudge":true,"haywire":true,"yunnysunny":true,"faraoman":true,"cain.chu":true}}}