{"name":"socket-activation","version":"3.0.2","description":"Native socket activation for launchd, systemd et al.","keywords":["launch_activate_socket","launchd","systemd","socket activation"],"license":"Apache-2.0","repository":"https://github.com/sorccu/node-socket-activation","main":"./index","scripts":{"install":"node ./prebuilt-bindings install","prebuilt-bindings":"node ./prebuilt-bindings"},"dependencies":{"bindings":"^1.2.1","nan":"^2.4.0","prebuilt-bindings":"^1.0.3"},"gitHead":"13ad506730bc7d4e35fa601092689144d80c2935","homepage":"https://github.com/sorccu/node-socket-activation#readme","versions":[{"number":"1.0.0","date":"2016-10-27T16:48:22.335Z"},{"number":"1.1.0","date":"2016-10-27T17:27:02.500Z"},{"number":"2.0.0","date":"2016-10-28T16:07:50.636Z"},{"number":"3.0.0","date":"2016-11-07T05:45:54.493Z"},{"number":"3.0.1","date":"2016-11-07T06:06:58.340Z"},{"number":"3.0.2","date":"2017-06-18T11:56:33.964Z"}],"readme":"# node-socket-activation\n\n[![npm](https://img.shields.io/npm/v/socket-activation.svg)](https://www.npmjs.com/package/socket-activation)\n\n**node-socket-activation** is a [socket activation](http://0pointer.de/blog/projects/socket-activation.html) library for [Node.js](https://nodejs.org/).\n\n## Supported systems\n\n| Service management framework    | OS                      | Supported?          |\n|---------------------------------|-------------------------|---------------------|\n| [launchd][launchd-sockets]      | macOS 10.9 or later     | :thumbsup: :bowtie: |\n| [systemd][systemd-socket]       | Compatible Linux distro | :thumbsup: :bowtie: |\n\n[launchd-sockets]: https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html#//apple_ref/doc/uid/10000172i-SW7-SW4\n[systemd-socket]: https://www.freedesktop.org/software/systemd/man/systemd.socket.html\n\n## Installation\n\nUsing [yarn](https://yarnpkg.com/):\n\n```sh\nyarn add socket-activation\n```\n\nUsing [npm](https://www.npmjs.com/):\n\n```sh\nnpm install --save socket-activation\n```\n\n## Usage\n\n### How your app should look like\n\n#### `app.js`\n\n```javascript\nconst net = require('net')\n\nconst sockets = require('socket-activation')\n\n// There may be more than one fd, e.g. if you select the \"IPv4v6\"\n// SockFamily which listens to both IPv4 and IPv6. Up to you to\n// decide if you want to error out or setup multiple servers as\n// follows.\nfor (const fd of sockets.collect('app')) {\n  const server = net.createServer(conn => {\n    conn.end('hello!\\n')\n  })\n\n  server.on('error', err => {\n    throw err\n  })\n\n  server.listen({ fd }, () => {\n    const addr = server.address()\n    console.log('Listening on', addr)\n  })\n}\n```\n\nSee the [examples](examples/) directory for more examples incl. supporting both socket activation and direct execution.\n\n### Launchd configuration\n\nNormally you'd put this in `~/Library/LaunchAgents`.\n\n#### `org.example.app.plist`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>Label</key>\n        <string>org.example.app</string>\n        <key>ProgramArguments</key>\n        <array>\n            <string>/usr/local/bin/node</string>\n            <string>ABSOLUTE_PATH_TO_YOUR_JS_FILE</string>\n        </array>\n        <key>Sockets</key>\n        <dict>\n            <key>app</key>\n            <array>\n                <dict>\n                    <key>SockFamily</key>\n                    <string>IPv4</string>\n                    <key>SockServiceName</key>\n                    <string>3000</string>\n                </dict>\n            </array>\n        </dict>\n        <key>StandardErrorPath</key>\n        <string>/tmp/org.example.app.err</string>\n        <key>StandardOutPath</key>\n        <string>/tmp/org.example.app.out</string>\n    </dict>\n</plist>\n```\n\nThere's no need to set `RunAtLoad`, launchd will start your app on the first request.\n\nEnable and start listening by running:\n\n```sh\nlaunchctl load ~/Library/LaunchAgents/org.example.app.plist\n```\n\n### Systemd configuration\n\nNormally you'd put these in `/etc/systemd/system`.\n\n#### `app.service`\n\n```systemd\n[Unit]\nRefuseManualStart=true\n\n[Service]\nRestart=always\nExecStart=/usr/local/bin/node ABSOLUTE_PATH_TO_YOUR_JS_FILE\n```\n\n#### `app.socket`\n\n```systemd\n[Socket]\nListenStream=127.0.0.1:3000\nNoDelay=true\nFileDescriptorName=app\n\n[Install]\nWantedBy=sockets.target\n```\n\nEnable and start listening by running:\n\n```sh\nsystemctl enable app.socket\nsystemctl start app.socket\n```\n\nThere's no need to enable the service, systemd will start it on the first request.\n\n## API\n\n### `.collect(String name) â†’ [Number]`\n\nReturns the list of fds the system has managed for us. This operation consumes the list and can therefore only be performed once per launch. Subsequent calls *with the same `name`* throw an `Error`. It's your responsibility not to do that.\n\nThe `name` is case sensitive and must match the name of the socket. Under systemd, the setting is [FileDescriptorName=](https://www.freedesktop.org/software/systemd/man/systemd.socket.html#FileDescriptorName=). Under launchd, the `<key>...</key>` of the socket definition defines the name.\n\nNote that the method returns an `Array` of fds. For example, there may be more than one fd if you select the \"IPv4v6\" SockFamily in launchd.plist which listens to both IPv4 and IPv6, or if several [ListenStream](https://www.freedesktop.org/software/systemd/man/systemd.socket.html#ListenStream=) are given in [systemd.socket](https://www.freedesktop.org/software/systemd/man/systemd.socket.html). Up to you to decide if you want to error out when given multiple fds or setup multiple listeners.\n\nThe API is the same for all supported service managers.\n\nThis method throws an `Error` if:\n\n* The process was not launched by the service management framework (or with `launchd`, if there's no matching socket).\n    - Error `.code` is `'ESRCH'`\n* There is no matching socket.\n    - Error `.code` is `'ENOENT'`\n* The fd list has already been collected previously.\n    - Error `.code` is `'EALREADY'`\n* An internal system error occurred.\n\n## License\n\nSee [LICENSE](LICENSE).\n","created":"2016-10-27T16:48:22.335Z","modified":"2017-06-18T11:56:33.964Z","lastPublisher":{"name":"sorccu","email":"simo@shoqolate.com"},"owners":[{"name":"sorccu","email":"simo@shoqolate.com"}],"other":{"_attachments":{},"_id":"socket-activation","_nodeVersion":"8.1.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/socket-activation-3.0.2.tgz_1497786993807_0.1668503067921847"},"_npmUser":{"name":"sorccu","email":"simo@shoqolate.com"},"_npmVersion":"5.0.3","_rev":"6-c81243e0d156e871421a0b6c895c5c84","bugs":{"url":"https://github.com/sorccu/node-socket-activation/issues"},"directories":{},"dist-tags":{"latest":"3.0.2"},"dist":{"integrity":"sha512-iZhtKcxlis2REkHlJZ+ce20qftlJ/svT42dV/bIdMpdoKdwCifgX5HN+xsEuxCIAmCUt+46s7QhBmFPf2MMrRQ==","shasum":"62493946f7f668f7c4752cd34aa563e7de8eda59","tarball":"https://registry.npmjs.org/socket-activation/-/socket-activation-3.0.2.tgz"},"maintainers":[{"name":"sorccu","email":"simo@shoqolate.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-18T11:56:33.964Z","created":"2016-10-27T16:48:22.335Z","1.0.0":"2016-10-27T16:48:22.335Z","1.1.0":"2016-10-27T17:27:02.500Z","2.0.0":"2016-10-28T16:07:50.636Z","3.0.0":"2016-11-07T05:45:54.493Z","3.0.1":"2016-11-07T06:06:58.340Z","3.0.2":"2017-06-18T11:56:33.964Z"}}}