{"name":"sparkey","version":"0.1.0","description":"Sparkey binding","main":"index.js","scripts":{"test":"make test","install":"node-gyp rebuild"},"keywords":["sparkey"],"license":"MIT","dependencies":{"bindings":"~1.1.1","nan":"~0.8.0"},"gypfile":true,"devDependencies":{"mocha":"~1.18.2"},"repository":"https://github.com/stephenmathieson/node-sparkey","homepage":"https://github.com/stephenmathieson/node-sparkey","versions":[{"number":"0.0.0","date":"2014-03-21T23:35:32.559Z"},{"number":"0.1.0","date":"2014-05-21T13:37:08.071Z"}],"readme":"\n# sparkey\n\n  Node binding for [Sparkey](https://github.com/spotify/sparkey).\n\n## API\n\n### sparkey.LogReader(path)\n\n  Create a `LogReader` for `path`.\n\n#### LogReader#open(fn)\n\n  Open the `LogReader`, invoking `fn(err)`.\n\n#### LogReader#openSync()\n\n  Synchronously open the `LogReader`.\n\n#### LogReader#close(fn)\n\n  Close the `LogReader`, invoking `fn(err)`.\n\n#### LogReader#closeSync()\n\n  Synchronously close the `LogReader`.\n\n#### LogReader#iterator()\n\n  Create and return a `LogIterator`.\n\n#### LogIterator#next(fn)\n\n  Get the next `key` and `value` pair in the log.  Invokes `fn(err, key, value)` or `fn(err, null, null)` if no keys remain.\n\n#### LogIterator#end()\n\n  End/destroy the `LogIterator`.\n\n### sparkey.LogWriter(path)\n\n  Create a `LogWriter` for `path`.  If no log exists at `path`, it will be created.\n\n#### LogWriter#open(fn)\n\n  Open the `LogWriter`, invoking `fn(err)`.\n\n#### LogWriter#openSync()\n\n  Synchronously open the `LogWriter`.\n\n#### LogWriter#append(fn)\n\n  Open the `LogWriter` for appending, invoking `fn(err)`.\n\n  Will error if the log does not exist.\n\n#### LogWriter#appendSync()\n\n  Synchronously open the `LogWriter` for append.\n\n  Will throw if the log does not exist.\n\n#### LogWriter#close(fn)\n\n  Close the `LogWriter`, invoking `fn(err)`.\n\n#### LogWriter#closeSync()\n\n  Synchronously close the `LogWriter`.\n\n#### LogWriter#put(key, value, fn)\n\n  Put `key = value`, invoking `fn(err)`.\n\n#### LogWriter#putSync(key, value)\n\n  Synchronously put `key = value`.\n\n### sparkey.hash(log, hash, fn)\n\n  Convert the given `log` to a `hash`, invoking `fn(err)`.\n\n### sparkey.hashSync(log, hash)\n\n  Synchronously convert the given `log` to a `hash`.\n\n## License\n\n  MIT\n","created":"2014-03-21T23:35:32.559Z","modified":"2014-05-21T13:37:08.071Z","lastPublisher":{"name":"stephenmathieson","email":"me@stephenmathieson.com"},"owners":[{"name":"stephenmathieson","email":"me@stephenmathieson.com"}],"other":{"_attachments":{},"_from":".","_id":"sparkey","_npmUser":{"name":"stephenmathieson","email":"me@stephenmathieson.com"},"_npmVersion":"1.4.9","_rev":"1-886b7a4fb669228969bdae5205eab801","_shasum":"2167ddae1b9c8250b1376998e66bd940cbdd122c","author":{"name":"Stephen Mathieson"},"bugs":{"url":"https://github.com/stephenmathieson/node-sparkey/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"2167ddae1b9c8250b1376998e66bd940cbdd122c","tarball":"http://registry.npmjs.org/sparkey/-/sparkey-0.1.0.tgz"},"maintainers":[{"name":"stephenmathieson","email":"me@stephenmathieson.com"}],"readmeFilename":"Readme.md","time":{"modified":"2014-05-21T13:37:08.071Z","created":"2014-03-21T23:35:32.559Z","0.0.0":"2014-03-21T23:35:32.559Z","0.1.0":"2014-05-21T13:37:08.071Z"}}}