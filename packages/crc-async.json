{"name":"crc-async","version":"1.0.0","description":"Perform CRC operations asynchronously","main":"index.js","keywords":["crc","async"],"repository":"https://github.com/slushie/node-crc-async","license":"MIT","dependencies":{"bindings":"^1.2.1","nan":"^2.2.0"},"devDependencies":{"chai":"^3.5.0","mocha":"^2.4.5"},"scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"717ba81f5b7b2f58984aaa581b1c3b07e3990a72","homepage":"https://github.com/slushie/node-crc-async#readme","versions":[{"number":"1.0.0","date":"2016-03-31T17:27:27.241Z"}],"readme":"# crc-async\n\nPerform CRC calculations asynchronously\n\n## Introduction\n\nThis module implements the CRC-32 function as a C++ addon for node.js.\nIt is designed for speed and provides both synchronous and asynchronous\nmethods to compute the CRC.\n\n## Example\n\n```js\nvar crcAsync = require('crc-async');\nvar data = new Buffer(...);\n\n// callback-based API: one-off\n\ncrcAsync.crc(data, function(err, crc) {\n  console.log('CRC-32: 0x%s', crc.toString(16));\n});\n\n// callback-based API: iterative\n\nvar initial = crcAsync.preCondition();\n\ncrcAsync.crc(chunk, initial, function(err, crc) {\n  crc = crcAsync.postCondition(crc);\n  console.log('CRC-32: 0x%s', crc.toString(16));\n});\n\n// one-off computation\n\nvar crc = crcAsync.computeCrc(data);\nconsole.log('CRC-32: 0x%s', crc.toString(16));\n\n// iterative computation\n\nvar crc = crcAsync.preCondition();\ncrc = crcAsync.updateCrc(crc, chunk1);\ncrc = crcAsync.updateCrc(crc, chunk2);\ncrc = crcAsync.updateCrc(crc, chunk3);\n// etc...\n\n```\n\n## Implementation\n\nCRC-32 is used predominantly in `.zip` files; its use has been superseded by\nthe CRC-32C algorithm in new applications. However, the ZIP format is a rather\nold application and must continue to use the CRC-32 algorithm.\n\nThis module provides the classic CRC-32 algorithm, as well as some helper\nmethods to facilitate `.zip` file generation.\n\nNotably, the ZIP specification calls for pre- and post-conditioning of the \nCRC register. The initial value for CRC computations should be all ones and\nthe final value should be the one's complement of the CRC-32 output.\n\nThis module performs pre- and post-conditioning of the CRC values automatically\nwithin the `computeCrc()` method and when calling `crc()` without an initial \nvalue. However, methods designed to be used iteratively cannot automatically \nperform these operations. It is necessary to call `preCondition()` to retrieve \nthe initial value and `postCondition(output)` to retrieve the final value.\n\n## Acknowledgements \n\nThe CRC-32 routines are taken directly from the [7-Zip SDK](http://www.7-zip.org/sdk.html).\n\nThe ZIP format is documented in [the ZIP APPNOTE](https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT).\n\n## License\n\n`crc-async` is Copyright 2016 Josh Leder.\n\nThis software is released under the MIT License. See the `LICENSE` file for the \ncomplete text of the license.\n","created":"2016-03-31T17:27:27.241Z","modified":"2016-03-31T17:27:27.241Z","lastPublisher":{"name":"slushie","email":"slushie@gmail.com"},"owners":[{"name":"slushie","email":"slushie@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"crc-async","_nodeVersion":"0.12.7","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/crc-async-1.0.0.tgz_1459445246237_0.19011462992057204"},"_npmUser":{"name":"slushie","email":"slushie@gmail.com"},"_npmVersion":"2.12.1","_rev":"1-c6eaf7a7c73245714cb0b2039036da18","_shasum":"a66dd999a90d7c015a03688508e463ae313247c8","author":{"name":"Josh Leder","email":"slushie@gmail.com"},"bugs":{"url":"https://github.com/slushie/node-crc-async/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"a66dd999a90d7c015a03688508e463ae313247c8","tarball":"http://registry.npmjs.org/crc-async/-/crc-async-1.0.0.tgz"},"maintainers":[{"name":"slushie","email":"slushie@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-03-31T17:27:27.241Z","created":"2016-03-31T17:27:27.241Z","1.0.0":"2016-03-31T17:27:27.241Z"}}}