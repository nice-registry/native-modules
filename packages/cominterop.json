{"name":"cominterop","version":"0.1.1","description":"COM interop layer for Node.JS","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","install":"node-gyp rebuild"},"repository":"https://github.com/Rantanen/node-cominterop","keywords":["COM","interop","typelib"],"license":"ISC","homepage":"https://github.com/Rantanen/node-cominterop#readme","dependencies":{"bindings":"^1.2.1","nan":"^2.3.3"},"gypfile":true,"gitHead":"08def17f0094f3b6234587ade91bdf9cd74e0a9b","versions":[{"number":"0.1.0","date":"2016-09-06T22:14:18.099Z"},{"number":"0.1.1","date":"2016-09-06T23:08:37.196Z"}],"readme":"# Node.js COM interop\r\n### Creates runtime proxy classes for a type library.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install cominterop\r\n```\r\n\r\n**Only compatible with Windows (which goes to most typelibs too anyway).**\r\n\r\n## Usage\r\n\r\n```\r\nlet cominterop = require( 'cominterop' );\r\nlet lib = cominterop.load( 'path/to/typelib.dll' );\r\n\r\n// Normal constructors.\r\nlet obj = new lib.MyClass();\r\n\r\n// propget/propput methods mapped to JavaScript getters/setters.\r\nlet value = obj.Value;\r\n\r\n// Objects have a hidden .Async property which exposes a promise interface.\r\nobj.Async.GetItem()\r\n    .then( item => {\r\n        console.log( item.Value );\r\n    } );\r\n```\r\n\r\n## Caveats\r\n\r\n- Pointer return values won't work maintain identity: `obj.Member !== obj.Member`,\r\n  when `Member` is non-primitive.\r\n- Support for several data types missing. `SAFE_ARRAY` the biggest one.\r\n- Only getters supported for indexed properties: `arr[ 0 ]`.\r\n- Uses `IDispatch` for method invocation.\r\n- My current test libraries are limited to [M-Files API](https://www.m-files.com/api/documentation/latest/index.html).\r\n  Other libraries may be completely incompatible without me knowing about it.\r\n\r\n## Future plans\r\n\r\n- Track pointers and return same references for equal pointer values.\r\n- Add compatibility option to `load()` for mangling the member names for lower\r\n  case. The upper case method names will confuse linters that expect these to\r\n  be constructors.\r\n\r\n## Performance\r\n\r\nPreprocessing the type library should help a bit with the major performance\r\nissues of going with raw IDispatch.\r\n\r\nHowever there are still a lot of dynamic lookups happening - especially in\r\nparameter resolution. And the method invocations are done over IDispatch (with\r\nall the VARIANTing) instead of using direct COM vtables and other internals.\r\n","created":"2016-09-06T22:14:18.099Z","modified":"2016-09-06T23:08:37.196Z","lastPublisher":{"name":"rantanen","email":"jubjub@jubjubnest.net"},"owners":[{"name":"rantanen","email":"jubjub@jubjubnest.net"}],"other":{"_attachments":{},"_from":".","_id":"cominterop","_nodeVersion":"6.0.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/cominterop-0.1.1.tgz_1473203316199_0.7049155682325363"},"_npmUser":{"name":"rantanen","email":"jubjub@jubjubnest.net"},"_npmVersion":"3.8.6","_rev":"1-e2b20f9642c3a26ccfe254ae391df4d9","_shasum":"df8e64c350b96efd9137738577862c84ee57c033","author":{"name":"Mikko Rantanen"},"bugs":{"url":"https://github.com/Rantanen/node-cominterop/issues"},"directories":{},"dist-tags":{"latest":"0.1.1"},"dist":{"shasum":"df8e64c350b96efd9137738577862c84ee57c033","tarball":"http://registry.npmjs.org/cominterop/-/cominterop-0.1.1.tgz"},"maintainers":[{"name":"rantanen","email":"jubjub@jubjubnest.net"}],"readmeFilename":"README.md","time":{"modified":"2016-09-06T23:08:37.196Z","created":"2016-09-06T22:14:18.099Z","0.1.0":"2016-09-06T22:14:18.099Z","0.1.1":"2016-09-06T23:08:37.196Z"}}}