{"name":"@bielorusov/pcsclite","version":"0.4.17","description":"Bindings over PC/SC to access Smart Cards","keywords":["nfc","pcsc","pcsclite","smartcards"],"homepage":"https://github.com/bielorusov/node-pcsclite#readme","license":"ISC","main":"lib/pcsclite.js","repository":"https://github.com/bielorusov/node-pcsclite","scripts":{"install":"node-gyp rebuild","test":"mocha"},"dependencies":{"bindings":"^1.2.1","nan":"^2.5.1"},"devDependencies":{"mocha":"^3.2.0","should":"^11.1.2","sinon":"^1.17.7"},"gypfile":true,"gitHead":"7c676da9a2ffbdc33c9cbd8fb32a552802f87f32","versions":[{"number":"0.4.17","date":"2017-04-09T20:39:30.508Z"}],"readme":"# node-pcsclite\n\n[![npm](https://img.shields.io/npm/v/@bielorusov/pcsclite.svg?maxAge=2592000)](https://www.npmjs.com/package/@bielorusov/pcsclite)\n[![node-pcsclite channel on discord](https://img.shields.io/badge/discord-join%20chat-61dafb.svg)](https://discord.gg/bg3yazg)\n\nBindings over pcsclite to access Smart Cards. It works in **Linux**, **macOS** and **Windows**.\n\n> **Looking for library to work easy with NFC tags?**  \ntake a look at [nfc-pcsc](https://github.com/bielorusov/nfc-pcsc) which offers easy to use high level API for detecting / reading and writing NFC tags and cards\n\n\n## Content\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n- [Example](#example)\n- [Behavior on different OS](#behavior-on-different-os)\n- [API](#api)\n  - [Class: PCSCLite](#class-pcsclite)\n    - [Event:  'error'](#event--error)\n    - [Event:  'reader'](#event--reader)\n    - [pcsclite.close()](#pcscliteclose)\n  - [Class: CardReader](#class-cardreader)\n    - [Event:  'error'](#event--error-1)\n    - [Event:  'end'](#event--end)\n    - [Event:  'status'](#event--status)\n    - [reader.connect([options], callback)](#readerconnectoptions-callback)\n    - [reader.disconnect(disposition, callback)](#readerdisconnectdisposition-callback)\n    - [reader.transmit(input, res_len, protocol, callback)](#readertransmitinput-res_len-protocol-callback)\n    - [reader.control(input, control_code, res_len, callback)](#readercontrolinput-control_code-res_len-callback)\n    - [reader.close()](#readerclose)\n- [FAQ](#faq)\n  - [Can I use this library in my Electron app?](#can-i-use-this-library-in-my-electron-app)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n## Installation\n\nIn order to install the package you need to **have installed in the system the\npcsclite libraries**.\n\nIn **macOS** and **Windows** you **don't have to install** anything.\n\n> For example, in Debian/Ubuntu:\n> ```bash\n> apt-get install libpcsclite1 libpcsclite-dev\n> ```\n> To run any code you will also need to have installed the pcsc daemon:\n> ```bash\n> apt-get install pcscd\n> ```\n\nOnce you have all needed libraries, you can install using npm:\n\n```bash\nnpm install @bielorusov/pcsclite --save\n```\n\n## Example\n\n```javascript\nconst pcsclite = require('pcsclite');\n\nconst pcsc = pcsclite();\n\npcsc.on('reader', function(reader) {\n\n    console.log('New reader detected', reader.name);\n\n    reader.on('error', function(err) {\n        console.log('Error(', this.name, '):', err.message);\n    });\n\n    reader.on('status', function(status) {\n        console.log('Status(', this.name, '):', status);\n        /* check what has changed */\n        const changes = this.state ^ status.state;\n        if (changes) {\n            if ((changes & this.SCARD_STATE_EMPTY) && (status.state & this.SCARD_STATE_EMPTY)) {\n                console.log(\"card removed\");/* card removed */\n                reader.disconnect(reader.SCARD_LEAVE_CARD, function(err) {\n                    if (err) {\n                        console.log(err);\n                    } else {\n                        console.log('Disconnected');\n                    }\n                });\n            } else if ((changes & this.SCARD_STATE_PRESENT) && (status.state & this.SCARD_STATE_PRESENT)) {\n                console.log(\"card inserted\");/* card inserted */\n                reader.connect({ share_mode : this.SCARD_SHARE_SHARED }, function(err, protocol) {\n                    if (err) {\n                        console.log(err);\n                    } else {\n                        console.log('Protocol(', reader.name, '):', protocol);\n                        reader.transmit(new Buffer([0x00, 0xB0, 0x00, 0x00, 0x20]), 40, protocol, function(err, data) {\n                            if (err) {\n                                console.log(err);\n                            } else {\n                                console.log('Data received', data);\n                                reader.close();\n                                pcsc.close();\n                            }\n                        });\n                    }\n                });\n            }\n        }\n    });\n\n    reader.on('end', function() {\n        console.log('Reader',  this.name, 'removed');\n    });\n});\n\npcsc.on('error', function(err) {\n    console.log('PCSC error', err.message);\n});\n```\n\n## Behavior on different OS\n\nTODO document\n\n\n## API\n\n### Class: PCSCLite\n\nThe PCSCLite object is an EventEmitter that notifies the existence of Card Readers.\n\n#### Event:  'error'\n\n* *err* `Error Object`. The error.\n\n#### Event:  'reader'\n\n* *reader* `CardReader`. A CardReader object associated to the card reader detected\n\nEmitted whenever a new card reader is detected.\n\n#### pcsclite.close()\n\nIt frees the resources associated with this PCSCLite instance. At a low level it calls [`SCardCancel`](https://pcsclite.alioth.debian.org/api/group__API.html#gaacbbc0c6d6c0cbbeb4f4debf6fbeeee6) so it stops watching for new readers.\n\n\n### Class: CardReader\n\nThe CardReader object is an EventEmitter that allows to manipulate a card reader.\n\n#### Event:  'error'\n\n* *err* `Error Object`. The error.\n\n#### Event:  'end'\n\nEmitted when the card reader has been removed.\n\n#### Event:  'status'\n\n* *status* `Object`.\n    * *state* The current status of the card reader as returned by [`SCardGetStatusChange`](https://pcsclite.alioth.debian.org/api/group__API.html#ga33247d5d1257d59e55647c3bb717db24)\n    * *atr* ATR of the card inserted (if any)\n\nEmitted whenever the status of the reader changes.\n\n#### reader.connect([options], callback)\n\n* *options* `Object` Optional\n    * *share_mode* `Number` Shared mode. Defaults to `SCARD_SHARE_EXCLUSIVE`\n    * *protocol* `Number` Preferred protocol. Defaults to `SCARD_PROTOCOL_T0 | SCARD_PROTOCOL_T1`\n* *callback* `Function` called when connection operation ends\n    * *error* `Error`\n    * *protocol* `Number` Established protocol to this connection.\n\nWrapper around [`SCardConnect`](https://pcsclite.alioth.debian.org/api/group__API.html#ga4e515829752e0a8dbc4d630696a8d6a5).\nEstablishes a connection to the reader.\n\n#### reader.disconnect(disposition, callback)\n\n* *disposition* `Number`. Reader function to execute. Defaults to `SCARD_UNPOWER_CARD`\n* *callback* `Function` called when disconnection operation ends\n    * *error* `Error`\n\nWrapper around [`SCardDisconnect`](https://pcsclite.alioth.debian.org/api/group__API.html#ga4be198045c73ec0deb79e66c0ca1738a).\nTerminates a connection to the reader.\n\n#### reader.transmit(input, res_len, protocol, callback)\n\n* *input* `Buffer` input data to be transmitted\n* *res_len* `Number`. Max. expected length of the response\n* *protocol* `Number`. Protocol to be used in the transmission\n* *callback* `Function` called when transmit operation ends\n    * *error* `Error`\n    * *output* `Buffer`\n\nWrapper around [`SCardTransmit`](https://pcsclite.alioth.debian.org/api/group__API.html#ga9a2d77242a271310269065e64633ab99).\nSends an APDU to the smart card contained in the reader connected to.\n\n#### reader.control(input, control_code, res_len, callback)\n\n* *input* `Buffer` input data to be transmitted\n* *control_code* `Number`. Control code for the operation\n* *res_len* `Number`. Max. expected length of the response\n* *callback* `Function` called when control operation ends\n    * *error* `Error`\n    * *output* `Buffer`\n\nWrapper around [`SCardControl`](https://pcsclite.alioth.debian.org/api/group__API.html#gac3454d4657110fd7f753b2d3d8f4e32f).\nSends a command directly to the IFD Handler (reader driver) to be processed by the reader.\n\n#### reader.close()\n\nIt frees the resources associated with this CardReader instance.\nAt a low level it calls [`SCardCancel`](https://pcsclite.alioth.debian.org/api/group__API.html#gaacbbc0c6d6c0cbbeb4f4debf6fbeeee6) so it stops watching for the reader status changes.\n\n\n## FAQ\n\n### Can I use this library in my [Electron](https://electron.atom.io/) app?\n\n**Yes, you can!** It works well.\n\nBut please read carefully [Using Native Node Modules](https://electron.atom.io/docs/tutorial/using-native-node-modules/) guide in Electron documentation to fully understand the problematic.\n\n**Note**, that because of Node Native Modules, you must build your app on target platform (you must run Windows build on Windows machine, etc.).  \nYou can use CI/CD server to build your app for certain platforms.  \nFor Windows, I recommend you to use [AppVeyor](https://appveyor.com/).  \nFor macOS and Linux build, there are plenty of services to choose from, for example [CircleCI](https://circleci.com/), [Travis CI](https://travis-ci.com/) [CodeShip](https://codeship.com/).\n\n## License\n\n[ISC](/LICENSE.md)\n","created":"2017-04-09T20:39:30.508Z","modified":"2017-04-15T23:12:17.730Z","lastPublisher":{"name":"bielorusov","email":"d.belorusov@gmail.com"},"owners":[{"name":"bielorusov","email":"d.belorusov@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"@bielorusov/pcsclite","_nodeVersion":"0.12.4","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pcsclite-0.4.17.tgz_1491770369736_0.0405266429297626"},"_npmUser":{"name":"bielorusov","email":"d.belorusov@gmail.com"},"_npmVersion":"2.10.1","_rev":"2-6581d6aaacecd597afd94f65183a3c2d","_shasum":"a3b75daee12f8ddd49b65c8adf98b3d894be82ac","author":{"name":"Santiago Gimeno","email":"santiago.gimeno@gmail.com","url":"https://github.com/santigimeno"},"bugs":{"url":"https://github.com/bielorusov/node-pcsclite/issues"},"contributors":[{"name":"Martin Endler","url":"https://github.com/bielorusov"}],"directories":{"test":"test"},"dist-tags":{"latest":"0.4.17"},"dist":{"shasum":"a3b75daee12f8ddd49b65c8adf98b3d894be82ac","tarball":"https://registry.npmjs.org/@bielorusov/pcsclite/-/pcsclite-0.4.17.tgz"},"maintainers":[{"name":"bielorusov","email":"d.belorusov@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-15T23:12:17.730Z","created":"2017-04-09T20:39:30.508Z","0.4.17":"2017-04-09T20:39:30.508Z"}}}