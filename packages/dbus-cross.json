{"name":"dbus-cross","version":"1.0.1","description":"A D-Bus binding for Node","license":"MIT","repository":"https://github.com/Shouqun/node-dbus","engines":{"node":">= 0.12.0"},"main":"./lib/dbus","scripts":{"install":"node-gyp configure build","test":"tap test/**/*.test.js"},"dependencies":{"nan":"^2.1.0"},"devDependencies":{"tap":"^10.0.2"},"gitHead":"6b68525434ba0ac6c89449dd5138e7f970060ec7","homepage":"https://github.com/Shouqun/node-dbus#readme","versions":[{"number":"1.0.1","date":"2017-04-05T15:16:25.068Z"}],"readme":"# node-dbus  \nnode-dbus is a D-Bus binding for Node.js.\n\n[![Build Status](https://travis-ci.org/Shouqun/node-dbus.svg?branch=master)](https://travis-ci.org/Shouqun/node-dbus)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](#license)\n\n## Installation\n\n```bash\n$ npm install dbus\n```\n\n## How To Build\nTo build, do: `node-gyp configure build` or `npm install`.\n\n## Migrating to version 1.0\n\nThe API changed between version 0.2.21 and version 1.0.0. See\n[migrating][migrating] for information on how to migrate your application to\nthe new API.\n\n## Dependencies\n\n### General\n\n**Node-gyp**  \n`$ npm install -g node-gyp`  \n[https://www.npmjs.com/package/node-gyp](https://www.npmjs.com/package/node-gyp)\n\n**libdbus**  \n`$ sudo apt-get install libdbus-1-dev`  \nor equivalent for your system\n\n**glib2.0**  \n`$ sudo apt-get install libglib2.0-dev`  \nor equivalent for your system\n\n### MacOS with MacPorts/HomeBrew\n\n**Node-gyp**  \n`$ npm install -g node-gyp`  \n[https://www.npmjs.com/package/node-gyp](https://www.npmjs.com/package/node-gyp)\n\n**libdbus**  \nMacPorts: `$ sudo port install pkg-config dbus`\nHomeBrew: `$ sudo brew install pkg-config dbus`\n\n**glib2.0**  \nMacPorts: `$ sudo port install glib2`\nHomeBrew: `$ sudo brew install glib`\n\n## Getting Started\nBest way to get started is by looking at the examples. After the build:\n\n1. Navigate to `path/to/dbus/examples` folder\n1. Run `node service.js &`\n1. Run  `node hello.js`\n\nWork your way through other examples to explore supported functionality.\n\n## Note on systems without X11\nIf no X server is running, the module fails when attempting to obtain a D-Bus\nconnection at `DBus.getBus()`. This can be remedied by setting two environment\nvariables manually (the actual bus address might be different):\n\n\tprocess.env.DISPLAY = ':0';\n\tprocess.env.DBUS_SESSION_BUS_ADDRESS = 'unix:path=/run/dbus/system_bus_socket';\n\n\n## API\n\n\n### DBus\n\nThe root object of this module.\n\n#### `DBus.getBus(busName)`\n\n* busName `<string>`\n\nConnect to a bus. `busName` must be either `\"system\"` to connect to the system\nbus or `\"session\"` to connect to the session bus.\n\nReturns a `Bus`.\n\n```\nvar bus = DBus.getBus('session');\n```\n\n#### `DBus.registerService(busName, serviceName)`\n\n* busName `<string>`\n* serviceName `<string>`\n\nRegister a service on a specific bus. This allows the caller to create a DBus\nservice.\n\n`busName` must be either `\"system\"` to create the service on the system bus, or\n`\"session\"` to create the service on the session bus. _Note: the system bus\noften has security requirements that need to be met before the service can be\nregistered._\n\nReturns a `Service`.\n\n```\nvar service = DBus.registerService('session', 'com.example.Library');\n```\n\n#### *DEPRECATED* `new DBus()`\n\nCreate a new DBus instance.\n\n```\nvar DBus = require('dbus')\nvar dbus = new DBus()\n```\n\n#### *DEPRECATED* `DBus.prototype.getBus(busName)`\n\nUse `DBus.getBus(busName)`.\n\n#### *DEPRECATED* `DBus.prototype.registerService(busName, serviceName)`\n\nUse `DBus.registerService(busName, serviceName)`\n\n\n### Bus\n\nAn active connection to one of DBus' buses.\n\n#### `Bus.prototype.getInterface(serviceName, objectPath, interfaceName, callback)`\n\n* serviceName `<string>` - The well-known name of the service that owns the object.\n* objectPath `<string>` - The path of the object.\n* interfaceName `<string>` - Which of the object's interfaces to retrieve.\n* callback `<function>`\n\nGet an existing object's interface from a well-known service.\n\nOnce retrieved, `callback` will be called with either an error or with an\n`Interface`.\n\n```\nbus.getInterface('com.example.Library', '/com/example/Library/authors/DAdams', 'com.example.Library.Author1', function(err, interface) {\n    if (err) {\n        ...\n    }\n\n    // Do something with the interface\n});\n```\n\n#### `Bus.prototype.disconnect()`\n\nDisconnect from DBus. This disconnection makes it so that Node isn't kept\nrunning based on this active connection. It also makes this bus, and all of its\nchildren (interfaces that have been retrieved, etc.) unusable.\n\n\n### Interface\n\n#### `Interface.prototype.getProperty(propertyName, callback)`\n\n* propertyName `<string>` - The name of the property to get.\n* callback `<function>`\n\nGet the value of a property.\n\nOnce retrieved `callback` will be called with either an error or with the value\nof the property.\n\n```\ninterface.getProperty('Name', function(err, name) {\n});\n```\n\n#### `Interface.prototype.setProperty(propertyName, value, callback)`\n\n* propertyName `<string>` - The name of the property to get.\n* value `<any>` - The value of the property to set.\n* callback `<function>`\n\nSet the value of a property.\n\nOnce set `callback` will be called with either an error or nothing.\n\n```\ninterface.setProperty('Name', 'Douglas Adams', function(err) {\n});\n```\n\n#### `Interface.prototype.getProperties(callback)`\n\n* callback `<function>`\n\nGet the value of all of the properties of the interface.\n\nOnce retrieved `callback` will be called with either an error or with an object\nwhere the keys are the names of the properties, and the values are the values\nof those properties.\n\n```\ninterface.getProperties(function(err, properties) {\n    console.log(properties.Name);\n});\n```\n\n#### `Interface.prototype[methodName](...args, [options], callback)`\n\n* methodName `<string>` - The name of the method on the interface to call.\n* ...args `<any>` - The arguments that must be passed to the method.\n* options `<object>` - The options that can be set. This is optional.\n  * options.timeout `<number>` - The number of milliseconds to wait before the\n    request is timed out. This defaults to `-1`: don't time out.\n* callback `<function>`\n\nCall a method on the interface.\n\nOnce executed, `callback` will be called with either an error or with the\nresult of the method call.\n\n```\ninterface.AddBook(\"The Hitchhiker's Guide to the Galaxy\", { timeout: 1000 }, function(err, result) {\n})\n```\n\n\n### Service\n\nA dbus service created by the application.\n\n#### `Service.prototype.createObject(objectPath)`\n\n* objectPath `<string>` - The path of the object. E.g., `/com/example/ObjectName`\n\nCreate an object that is exposed over DBus.\n\nReturns a `ServiceObject`.\n\n```\nvar object = service.createObject('/com/example/Library/authors/DAdams');\n```\n\n#### `Service.prototype.removeObject(object)`\n\n* object `<ServiceObject>` - the service object that has been created\n\nRemove (or unexpose) an object that has been created.\n\n```\nservice.removeObject(object);\n```\n\n#### `Service.prototype.disconnect()`\n\nDisconnect from DBus. This disconnection makes it so that Node isn't kept\nrunning based on this active connection. It also disconnects all of the objects\ncreated by this service. \n\n\n### ServiceObject\n\nAn object that is exposed over DBus.\n\n#### `ServiceObject.prototype.createInterface(interfaceName)`\n\n* interfaceName `<string>` - The name of the interface.\n\nCreate an interface on an object.\n\nReturns a `ServiceInterface`.\n\n```\nvar interface = object.createInterface('com.example.Library.Author1');\n```\n\n\n### ServiceInterface\n\nAn interface for an object that is exposed over DBus.\n\n#### `ServiceInterface.prototype.addMethod(method, opts, handler)`\n\n* method `<string>` - The name of the method\n* opts `<object>` - Options for the method\n  * opts.in - The signature for parameters\n  * opts.out - The signature for what the method returns\n* handler `<function>` - The method handler\n\nAdd a method that can be called over DBus.\n\n```\ninterface.addMethod('AddBook', {\n\tin: [DBus.Define(String), DBus.Define(Number)],\n\tout: [DBus.Define(Number)]\n}, function(name, quality, callback) {\n\tdoSomeAsyncOperation(name, quality, function(err, result) {\n\t\tif (err) {\n\t\t\treturn callback(err);\n\t\t}\n\n\t\tcallback(result);\n\t});\n});\n```\n\n#### `ServiceInterface.prototype.addProperty(name, opts)`\n\n* name `<string>` - The name of the property\n* opts `<object>`\n  * opts.type - The type of the property\n  * opts.getter - The function to retrieve the value\n  * opts.setter - The function to set the value (optional)\n\nAdd a property that can be get, and/or optionally set, over DBus.\n\n```\ninterface.addProperty('BooksWritten', {\n  type: DBus.Define(Number),\n  getter: function(callback) {\n    getNumberOfBooksForAuthor(function(err, bookCount) {\n      if(err) {\n        return callback(err);\n      }\n      callback(bookCount);\n    });\n  }\n}\n\nvar name = 'Douglas Adams';\ninterface.addProperty('Name', {\n  type: Dbus.Define(String),\n  getter: function(callback) {\n    callback(name);\n  }\n  setter: function(value, done) {\n    name = value;\n    done();\n  }\n}\n```\n\n#### `ServiceInterface.prototype.addSignal(name, opts)`\n\n* name `<string>` - The name of the signal\n* opts `<object>`\n  * types\n\nCreate a DBus signal.\n\n```\ninterface.addSignal('bookCreated', {\n  types: [DBus.Define(Object)]\n});\n```\n\n#### `ServiceInterface.prototype.emitSignal(name, ...values)`\n\n* name `<string>` - The name of the signal\n* values `<any>` - The values to emit\n\nEmit a signal\n\n```\ninterface.emit('bookCreated', { name: \"The Hitchhiker's Guide to the Galaxy\" })\n```\n\n#### `ServiceInterface.prototype.update()`\n\nSave interface updates after making changes. After changes to the interface are\nmade (via `addMethod`, `addProperty`, and `addSignal`), `update` must be called\nto ensure that other DBus clients can see the changes that were made.\n\n\n### DBus.Error\n\nA DBus-specific error\n\n#### `new DBus.Error(name, message)`\n\n* name `<string>` - A valid DBus Error name, according to the [specification][spec]\n* message `<string>` - A human readable message\n\nCreate a new error. The name must be a valid error name.\n\n```\nthrow new DBus.Error('com.example.Library.Error.BookExistsError', 'The book already exists');\n```\n\n#### `dbusError.dbusName`\n\nThe DBus Error name of the error. When a DBus.Error is created, its message is\nset to the human-readable error message. The `dbusName` property is set to the\nname (according to the DBus Spec).\n\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2013\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[spec]: https://dbus.freedesktop.org/doc/dbus-specification.html\n[migrating]: MIGRATING.md\n","created":"2017-04-05T15:16:25.068Z","modified":"2017-04-05T15:16:25.068Z","lastPublisher":{"name":"kol-93","email":"kol_93@ukr.net"},"owners":[{"name":"kol-93","email":"kol_93@ukr.net"}],"other":{"_attachments":{},"_from":".","_id":"dbus-cross","_nodeVersion":"7.7.3","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/dbus-cross-1.0.1.tgz_1491405382800_0.42138328473083675"},"_npmUser":{"name":"kol-93","email":"kol_93@ukr.net"},"_npmVersion":"4.4.4","_rev":"1-69be4cfc865dad5d430f2ac6155f18dc","_shasum":"178b8aeed44d405c08a8fcdcf572e77758e7449c","author":{"name":"Shouqun Liu","email":"liushouqun@gmail.com"},"bugs":{"url":"https://github.com/Shouqun/node-dbus/issues"},"contributors":[{"name":"Fred Chien","email":"cfsghost@gmail.com"},{"name":"Bryan Burgers","email":"bryan@burgers.io"}],"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"178b8aeed44d405c08a8fcdcf572e77758e7449c","tarball":"https://registry.npmjs.org/dbus-cross/-/dbus-cross-1.0.1.tgz"},"maintainers":[{"name":"kol-93","email":"kol_93@ukr.net"}],"readmeFilename":"README.md","time":{"modified":"2017-04-05T15:16:25.068Z","created":"2017-04-05T15:16:25.068Z","1.0.1":"2017-04-05T15:16:25.068Z"}}}