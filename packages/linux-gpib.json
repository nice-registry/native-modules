{"name":"linux-gpib","version":"1.1.0","description":"Linux GPIB bindings","main":"index.js","repository":"https://github.com/jue89/node-linux-gpib","license":"MIT","dependencies":{"json-gate":"^0.8.23","nan":"^2.4.0"},"scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"a3b90b30afc268a6af7f804ffd50e2fb8a756cc0","homepage":"https://github.com/jue89/node-linux-gpib#readme","versions":[{"number":"1.0.0","date":"2016-11-14T17:19:29.377Z"},{"number":"1.1.0","date":"2016-11-29T17:24:52.588Z"}],"readme":"# Linux GPIB\n\nThe brand new General Purpose Interface Bus (GPIB, IEC-625-Bus), introduced by Hewlet-Packard in the late 1960s, can be accessed via [linux-gpib](http://linux-gpib.sourceforge.net/). This module offers native bindings to the very fundamental read and write methods (```ibrd()``` and ```ibwrt()```). So if you want to access your lab bench devices using JavaScript, this module will be your solution.\n\n## Example\n\n``` javascript\nconst GPIB = require( 'linux-gpib' );\n\n// Connect to GPIB interface available at /dev/gpib0\nconst gpib = GPIB( 0 );\n\n// And finally connect to your GPIB device with primary address 20\nlet specAnalyser = gpib.connect( { pad: 20 } );\n\n// In this example its a Rohde & Schwarz FSP specturm analyser. We want to fetch\n// the points recorded on TRACE1. So we transmit the command accordingly the\n// user's manual.\nspecAnalyser.query( 'trac1? trace1' ).then( ( response ) => {\n\n\t// The data is transmitted as a string separated by commas. Convert them\n\t// into floats.\n\tlet data = [];\n\tresponse.split(',').forEach( ( v ) => data.push( parseFloat( v ) ) );\n\treturn data;\n\n} ).then( ( data ) => {\n\n\t// Output data\n\tconsole.log( data );\n\n\t// Disconenct from device\n\treturn specAnalyser.disconnect();\n\n} ).catch( ( err ) => {\n\n\t// Something went wrong!\n\tconsole.error( err.message );\n\n} );\n```\n\n## API\n\nThe native bindings can be accessed as follows. The API documentation refers to GPIB.\n``` javascript\nconst GPIB = require( 'linux-gpib' );\n```\n\n### GPIB\n\n``` javascript\nconst gpib = GPIB( minor );\n```\n\nConnects to a GPIB adapter available at ```/dev/gpib[minor]``` and returns an instance of GPIB.\n\n### Class: GPIB\n\n#### Method: connect\n\n``` javascript\nconst dev = gpib.connect( device );\n```\n\nConnects to the device described in ```device``` and returns an instance of Device.\n\n```device``` has the following properties:\n * ```pad```: Primary GPIB address of the device.\n * ```sad```: (optional) Secondary GPIB address.\n * ```timeout```: (optional) Timeout for I/O operations. Possible values: \"TNONE\", \"T10us\", \"T30us\", \"T100us\", \"T300us\", \"T1ms\", \"T3ms\", \"T10ms\", \"T30ms\", \"T100ms\", \"T300ms\", \"T1s\", \"T3s\", \"T10s\", \"T30s\", \"T100s\", \"T300s\", \"T1000s\". Default: \"T300ms\".\n * ```send_eoi```: (optional) Assert EOI line with last transmitted byte. Default: true.\n * ```eos```: (optional) end-of-string mode. Default: 0x0.\n\n#### Method: disconnectAll\n\n``` javascript\ngpib.disconnectAll().then( ... );\n```\n\nDisconnects from all connected devices. Returns a promise.\n\n### Class: Device\n\n#### Method: write\n\n``` javascript\ndev.write( data ).then( ... );\n```\n\nSends data to the connected device. Returns a promise. If ```data``` is a string, it is just transmitted. If ```data``` is an array, each item is successively transmitted, starting with the first item.\n\n#### Method: read\n\n``` javascript\ndev.read().then( ... );\n```\n\nReads data from the connected device. Returns a promise that will be resolved with the recieved data.\n\n#### Method: query\n\n``` javascript\ndev.query( data ).then( ... );\n```\n\nFristly writes data to and then reads data from the connected device. Returns a promise that will be resolved with the recieved data.\n\n#### Method: disconnect\n\n``` javascript\ndev.disconnect( goToLocalMode ).then( ... );\n```\n\nDisconencts from device. Returns a promise. If ```goToLocalMode``` is true (default), it will bring the device back to local mode before disconnecting.\n\n\n## Requirements\n\nBeside a GPIB-capbale measurement instrument you need a GPIB interface that is compatibile with linux-gpib. Furthermore linux-gpib must be installed and the GPIB-device must be fully configured. (Some of them need a firmware downloaded onto the device before beeing used. Google is your friend!)\n\nNode.js must be available in version 4 or later.\n","created":"2016-11-14T17:19:29.377Z","modified":"2016-11-29T17:24:52.588Z","lastPublisher":{"name":"jue89","email":"me@jue.yt"},"owners":[{"name":"jue89","email":"me@jue.yt"}],"other":{"_attachments":{},"_from":".","_id":"linux-gpib","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/linux-gpib-1.1.0.tgz_1480440292076_0.14127816003747284"},"_npmUser":{"name":"jue89","email":"me@jue.yt"},"_npmVersion":"3.10.8","_rev":"2-3315204b4e64e4fe359c058463a72a0d","_shasum":"1d8dde9e86b8ed559df06c0e3b019c2e3fcc1a0f","author":{"name":"Jue","email":"me@jue.yt"},"bugs":{"url":"https://github.com/jue89/node-linux-gpib/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"1d8dde9e86b8ed559df06c0e3b019c2e3fcc1a0f","tarball":"http://registry.npmjs.org/linux-gpib/-/linux-gpib-1.1.0.tgz"},"maintainers":[{"name":"jue89","email":"me@jue.yt"}],"readmeFilename":"README.md","time":{"modified":"2016-11-29T17:24:52.588Z","created":"2016-11-14T17:19:29.377Z","1.0.0":"2016-11-14T17:19:29.377Z","1.1.0":"2016-11-29T17:24:52.588Z"}}}