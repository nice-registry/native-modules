{"name":"berkeleydb","version":"0.2.1","description":"Node.js bindings for Berkeley DB 6.x (based on dbstore by Lee Iverson)","homepage":"http://github.com/genehallman/node-berkeleydb","repository":"https://github.com/genehallman/node-berkeleydb","engines":{"node":">= 0.8.0"},"main":"index.js","private":false,"gypfile":true,"scripts":{"install":"make config all","test":"node ./test/test_dbstore.js"},"dependencies":{"bindings":"1.x.x","nan":"^2.6.2"},"gitHead":"e23a08e2e4781d1a60844f61e49176d05a6bcc36","versions":[{"number":"0.0.1","date":"2017-04-25T09:18:52.770Z"},{"number":"0.0.2","date":"2017-04-25T10:11:29.150Z"},{"number":"0.1.0","date":"2017-04-26T02:54:12.521Z"},{"number":"0.1.1","date":"2017-04-28T04:40:54.561Z"},{"number":"0.2.0","date":"2017-04-30T00:44:32.971Z"},{"number":"0.2.1","date":"2017-05-01T01:10:22.611Z"}],"readme":"# node-berkeleydb\n\nNodejs bindings for Berkeley DB 6.x\n\nBased on the initial work [dbstore](https://github.com/leei/node-dbstore) by Lee Iverson.\n\n## Installation\n\n  `npm install berkeleydb`\n\n## Usage\n\n  `var bdb = require(\"berkeleydb\");`\n\nAll calls are synchronous, since berkeleydb itself is synchronous.\n\n### DB\n\nRepresents a Berkeley DB database object. Provides a simple `put`/`get`/`del` synchronous interface.\n\n```node\nvar bdb = require(\"berkeleydb\");\n\nvar db = new bdb.Db(); // create a new Db object\ndbenv.open(\"filename.db\");\n\nvar key = \"foo\";\nvar val = \"bar\";\n\n// data access\ndb.put(key, val); // put\nvar out1 = db.get(key) // get\ndb.del(key); // del\nvar out2 = db.get(key); // get deleted key\n\nassert(out1.toString() === val);\nassert(out2.toString() === \"\");\n\n// delete all keys\ndb.truncate();\n\ndb.close()\n```\n\n* `new bdb.Db([dbenv])` - Creates a new Db instance.\n  - param: `[dbenv]` - `[bdb.DbEnv]` - Optional, but needed if you wish to use transactions.\n  - returns `[bdb.Db]` - A new Db instance.\n* `open(filename)` - Opens a local db file. Will create file if it doesn't exist.\n  - param: `filename` - `[String]` - The filename of the db to load, relative to the process.cwd.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n* `close()` - Closes a database file. This is neccessary before shutdown to avoid data corruption.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n* `get(key, [opts])` - Gets a value from the db.\n  - param: `key` - `[String]` - The key of the value to get.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[Buffer|String|Object]` - The data stored at the key - `\"\"` if the key doesn't exist, a `String` is returned if `opts.encoding` is set, an `Object` if `opts.json` is set to `true`, otherwise as a `Buffer`.\n* `put(key, val, [opts])` - Stores or updates a value at the given key.\n  - param: `key` - `[String]` - The key to store/update.\n  - param: `val` - `[Buffer|String|Object]` - The value to store.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n* `del(key, [opts])` - Deletes a key.\n  - param: `key` - `[String]` - The key to delete.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n* `truncate()` - Deletes all keys in the db.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n\n#### Options object\n\nThe following options are available for the `put`/`get`/`del` methods:\n\n* `opts.json` - `[Boolean]` - Store or retrieve value as a json object. Uses JSON.stringify/JSON.parse on value.\n* `opts.encoding` - `[String]` - If specified, the buffer will be encoded/decoded as the specified format and stored/returned as a String.\n* `opts.txn` - `[bdb.DbTxn]` - Apply the operation to the given transaction. This will not perform the operation until the transaction is commited.\n\n```node\n// get/put support 'json' as an option\nvar opts = { json: true };\nvar put_data = { test: \"json1\", n: 1 };\ndb.put(\"json\", put_data, opts)\nvar data = db.get(\"json\", opts);\n\nassert(typeof data == 'object');\nassert(data.test == put_data.test);\nassert(data.n == put_data.n);\n\n\n// get/put support 'json' as an option\nvar opts = { encoding: 'hex' };\nvar enc_str = \"4f4ca1\";\ndb.put(\"hex\", enc_str, opts)\nvar out = db.get(\"hex\", opts);\n\nassert(enc_str == out);\n```\n\n### DB_ENV\n\nA DbEnv enables logging, transactions and other berkeley db features, and instead of using a single file, it can store multiple files (dbs) in a directory, along with meta data.\n\n```node\nvar dbenv = new bdb.DbEnv();\nconsole.log(\"open env\", dbenv.open(\"db\"));\n\n// Pass the dbenv into the db constructor\nvar db = new bdb.Db(dbenv);\ndbenv.open(\"filename.db\");\n\n...\n\n// make sure to close the db first\ndb.close();\ndbenv.close();\n```\n\n* `new bdb.DbEnv()` - Creates a new DbEnv instance.\n  - returns `[bdb.DbEnv]` - A new DbEnv instance.\n* `open(dirname)` - Opens a local db env directory. The folder must exist before execution, but may be empty uninitialized.\n  - param: `dirname` - `[String]` - The path of the db directory to use, relative to the process.cwd.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n* `close()` - Closes a database dir. This is neccessary before shutdown to avoid data corruption, but after `Db.close()`.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n\n### DB_TXN\n\nTransactions provides ACID-ity to the db operations. See [Berkeley Db Transaction Documentation](http://docs.oracle.com/cd/E17076_05/html/gsg_txn/C/index.html) for full explanation.\n\n```node\n  // pass DbEnv into DbTxn constructor\n  var txn = new bdb.DbTxn(dbenv);\n  var txn2 = new bdb.DbTxn(dbenv);\n  // pass txn into options\n  var opts = { \"txn\": txn };\n  var opts2 = { \"txn\": txn2 };\n\n\n  // commit\n  db.put(\"1\", \"one\", opts);\n  db.put(\"2\", \"two\", opts);\n  db.put(\"3\", \"three\", opts);\n  txn.commit();\n  var out1 = db.get(\"1\");\n  var out2 = db.get(\"2\");\n  var out3 = db.get(\"3\");\n\n  assert(\"one\" == out1);\n  assert(\"two\" == out2);\n  assert(\"three\" == out3);\n\n\n  // abort\n  db.put(\"4\", \"four\", opts2);\n  db.put(\"5\", \"five\", opts2);\n  db.put(\"6\", \"six\", opts2);\n  txn2.abort();\n  var out4 = db.get(\"4\");\n  var out5 = db.get(\"5\");\n  var out6 = db.get(\"6\");\n\n  assert(\"\" == out4);\n  assert(\"\" == out5);\n  assert(\"\" == out6);\n```\n\n* `new bdb.DbTxn([dbenv])` - Creates a new Db instance.\n  - param: `[dbenv]` - `[bdb.DbEnv]` - The env to acquire a txn from.\n  - returns `[bdb.DbTxn]` - A new DbTxn instance.\n* `commit()` - Commits the operations associated to the transaction, with appropriate locking.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n* `abort()` - Aborts the transaction.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n\n### DBCursor\n\nRepresents a Berkeley DBCursor database object. Allows moving the cursor to a given record, fetching the current record and enumerate over all keys, forward or backward.\n\n```js\n// create the cursor, pass in the Db, and a new DbTxn if the Db is in an env\nvar txn = new bdb.DbTxn(dbenv);\nvar cursor = new bdb.DbCursor(db txn);\n\n// put some sample data in the db\ndb.put(\"1\", \"one\");\ndb.put(\"2\", \"two\");\ndb.put(\"3\", \"three\");\ndb.put(\"4\", \"four\");\n\n// get and move the cursor to the next element (starts at first, if not set)\nvar res = cursor.next();\nassert(res.key == \"1\");\nassert(res.value.toString() == \"one\");\n\n// get and move the cursor to the last element\nres = cursor.last();\nassert(res.key == \"4\");\nassert(res.value.toString() == \"four\");\n\n// get and move the cursor to the prev element\nres = cursor.prev();\nassert(res.key == \"3\");\nassert(res.value.toString() == \"three\");\n\n// get and move the cursor to element with key = \"2\"\nres = cursor.set(\"2\");\nassert(res.key == \"2\");\nassert(res.value.toString() == \"two\");\n\n// put a value at the current element\nres = cursor.put(\"twotwo\");\nassert(res == 0);\n\n// get the current element, dont move\nres = cursor.current();\nassert(res.key == \"2\");\nassert(res.value.toString() == \"twotwo\");\n\n// get and move the cursor to the first element\nres = cursor.first();\nassert(res.key == \"1\");\nassert(res.value.toString() == \"one\");\n\n// before the first element isnull\nres = cursor.prev();\nassert(res.key == null);\nassert(res.value.toString() == \"\");\n\n// after the last element is also null\nres = cursor.last();\nres = cursor.next();\nassert(res.key == null);\nassert(res.value.toString() == \"\");\n\n// iterate over all elements and delete each one\ncursor.first();\ncursor.del();\ncursor.next();\ncursor.del();\ncursor.next();\ncursor.del();\ncursor.next();\ncursor.del();\n\n// deleting removes without moving the cursor position\nres = cursor.current();\nassert(res.key == null);\nassert(res.value.toString() == \"\");\n\ncursor.close();\n```\n\n* `new bdb.DbCursor([db])` - Creates a new DbCursor instance.\n  - param: `[db]` - `[bdb.Db]` - The database to create the cursor in.\n  - returns `[bdb.DbCursor]` - A new DbCursor instance.\n* `close()` - Closes a the cursor. No more data access is allowed.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n* `current([opts])` - Gets the current cursor key and value from the db. Does not move the cursor.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[Object] {key: [String], value: [Buffer|String|Object]}` - The key and value for the current element.\n* `next([opts])` - Gets the next cursor key and value from the db. Moves the cursor to the next element.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[Object] {key: [String], value: [Buffer|String|Object]}` - The key and value for the next element.\n* `prev([opts])` - Gets the previous cursor key and value from the db. Moves the cursor to the previous element.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[Object] {key: [String], value: [Buffer|String|Object]}` - The key and value for the previous element.\n* `first([opts])` - Gets the first cursor key and value from the db. Moves the cursor to the first element.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[Object] {key: [String], value: [Buffer|String|Object]}` - The key and value for the first element.\n* `last([opts])` - Gets the last cursor key and value from the db. Moves the cursor to the last element.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[Object] {key: [String], value: [Buffer|String|Object]}` - The key and value for the last element.\n* `set(key, [opts])` - Moves the element to the key specified and returns the key and value from that position.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[Object] {key: [String], value: [Buffer|String|Object]}` - The key and value for the specified element.\n* `put(val, [opts])` - Stores or updates a value at the current cursor key.\n  - param: `val` - `[Buffer|String|Object]` - The value to store.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n* `del([opts])` - Deletes a key.\n  - param: `[opts]` - `[Object]` - An [options](#options-object) object.\n  - returns `[number]` - 0 if successful, otherwise an error occurred.\n\n## Tests\n\n  `npm test`\n\n## Todo\n* Implement Bulk search operations\n* Implement DB_SEQUENCE\n* Implement DB_LOGC\n\n## Licence\n\nnode-berkeleydb is licensed under an MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n","created":"2017-04-25T09:18:52.770Z","modified":"2017-05-01T01:10:22.611Z","lastPublisher":{"name":"genehallman","email":"genehallman@gmail.com"},"owners":[{"name":"genehallman","email":"genehallman@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"berkeleydb","_nodeVersion":"7.9.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/berkeleydb-0.2.1.tgz_1493601022320_0.8180368209723383"},"_npmUser":{"name":"genehallman","email":"genehallman@gmail.com"},"_npmVersion":"4.2.0","_rev":"6-7f486bc6d29d5ace9a3fa109baf4c091","_shasum":"a58e5b19349a90914faa9c4a84b389e1aafb816b","author":{"name":"Gene Hallman"},"bugs":{"url":"https://github.com/genehallman/node-berkeleydb/issues"},"directories":{},"dist-tags":{"latest":"0.2.1"},"dist":{"shasum":"a58e5b19349a90914faa9c4a84b389e1aafb816b","tarball":"https://registry.npmjs.org/berkeleydb/-/berkeleydb-0.2.1.tgz"},"maintainers":[{"name":"genehallman","email":"genehallman@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-01T01:10:22.611Z","created":"2017-04-25T09:18:52.770Z","0.0.1":"2017-04-25T09:18:52.770Z","0.0.2":"2017-04-25T10:11:29.150Z","0.1.0":"2017-04-26T02:54:12.521Z","0.1.1":"2017-04-28T04:40:54.561Z","0.2.0":"2017-04-30T00:44:32.971Z","0.2.1":"2017-05-01T01:10:22.611Z"}}}