{"name":"argon2","version":"0.16.1","description":"An Argon2 library for Node","main":"index.js","types":"index.d.ts","scripts":{"benchmark":"node benchmark.js","clean":"node-gyp clean","test":"tsc -p . && node test-d.js && standard && nyc --reporter=lcov ava","install":"node-gyp rebuild"},"repository":"https://github.com/ranisalt/node-argon2","keywords":["argon2","crypto","encryption","hashing","password"],"license":"MIT","homepage":"https://github.com/ranisalt/node-argon2#readme","dependencies":{"any-promise":"^1.3.0","bindings":"^1.2.1","nan":"^2.4.0"},"devDependencies":{"@types/node":"^7.0.5","ava":"^0.19.1","babel-plugin-transform-async-to-generator":"^6.16.0","mockery":"^2.0.0","nyc":"^11.0.1","sandra":"^0.2.1","standard":"^10.0.2","typescript":"^2.1.5"},"engines":{"node":">=4.0.0"},"ava":{"files":["test.js"],"babel":"inherit"},"gypfile":true,"gitHead":"72fed64dc752a97613a0a63143b810b35ee69abf","readme":"# node-argon2\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/ranisalt/node-argon2.svg)](https://greenkeeper.io/)\n[![NPM package][npm-image]][npm-url] [![Coverage status][coverage-image]][coverage-url] [![Code Quality][codequality-image]][codequality-url] [![Dependencies][david-dm-image]][david-dm-url] [![Codewake][codewake-image]][codewake-url]\n- Linux: [![Linux build status][travis-image]][travis-url]\n- Windows: [![Windows build status][appveyor-image]][appveyor-url]\n\nBindings to the reference [Argon2](https://github.com/P-H-C/phc-winner-argon2)\nimplementation.\n\n**Want to use it on command line? Instead check\n[node-argon2-cli](https://github.com/ranisalt/node-argon2-cli).**\n\n### Usage\nIt's possible to hash a password using both Argon2i (default) Argon2d and Argon2id, sync\nand async, and to verify if a password matches a hash.\n\nTo hash a password:\n```js\nconst argon2 = require('argon2');\n\nargon2.hash('password').then(hash => {\n  // ...\n}).catch(err => {\n  // ...\n});\n\n// ES7 or TypeScript\n\ntry {\n  const hash = await argon2.hash(\"password\");\n} catch (err) {\n  //...\n}\n```\nYou can choose between Argon2i, Argon2d and Argon2id by passing an object as the third\nargument with the `type` key set to which type you want to use:\n```js\nargon2.hash('password', {\n  type: argon2.argon2d\n}).then(hash => {\n  // ...\n}).catch(err => {\n  // internal failure\n});\n\n// ES7 or TypeScript\n\ntry {\n  const hash = await argon2.hash('password', {\n    type: argon2.argon2d\n  });\n} catch (err) {\n  // internal failure\n}\n```\nThe `type` option is flexible and accepts 0, 1 or 2 for Argon2d, Argon2i and Argon2id respectively.\n\nYou can also get the hash as a raw Node Buffer by passing 'true' to the 'raw' option:\n\n```js\nargon2.hash('password', {\n  raw: true\n}).then(hash => {\n  // ... hash is a Buffer\n}).catch(err => {\n  // internal failure\n});\n\n// ES7 or TypeScript\n\ntry {\n  const hash = await argon2.hash('password', {\n    raw: true\n  });\n} catch (err) {\n  // internal failure\n}\n```\n\nYou can change the Promise with\n[any-promise](https://www.npmjs.com/package/any-promise). Try using Bluebird or\nQ for enhanced functionality.\n\nYou can also modify time, memory and parallelism constraints passing the object\nas the third parameter, with keys `timeCost`, `memoryCost` and `parallelism`,\nrespectively defaulted to 3, 12 (meaning 2^12 KB) and 1 (threads):\n```js\nconst options = {\n  timeCost: 4, memoryCost: 13, parallelism: 2, type: argon2.argon2d\n};\n\nargon2.hash('password', options).then(hash => {\n  // ...\n});\n\n// ES7 or TypeScript\n\nconst hash = await argon2.hash(\"password\", options);\n```\n\nThe default parameters for Argon2 can be accessed with `defaults`:\n```js\nconsole.log(argon2.defaults);\n// => { timeCost: 3, memoryCost: 12, parallelism: 1, type: argon2.argon2i }\n```\n\nTo verify a password:\n```js\nargon2.verify('<big long hash>', 'password').then(match => {\n  if (match) {\n    // password match\n  } else {\n    // password did not match\n  }\n}).catch(err => {\n  // internal failure\n});\n\n// ES7 or TypeScript\n\ntry {\n  if (await argon2.verify(\"<big long hash>\", \"password\")) {\n    // password match\n  } else {\n    // password did not match\n  }\n} catch (err) {\n  // internal failure\n}\n```\nFirst parameter must have been generated by an Argon2 encoded hashing method,\nnot raw.\n\nWhen you hit an internal failure, the message is properly set. If it is not or\nyou do not understand it, feel free to open an issue.\n\n### TypeScript Usage\nA TypeScript type declaration file is published with this module. If you are\nusing TypeScript >= 2.0.0 that means you do not need to install any additional\ntypings in order to get access to the strongly typed interface. Simply use the\nlibrary as mentioned above. This library uses Promises, so make sure you are\ntargeting ES6+, including the es2015.promise lib in your build, or globally\nimporting a Promise typings library.\n\nSome example tsconfig.json compiler options:\n\n```json\n{\n    \"compilerOptions\": {\n        \"lib\": [\"es2015.promise\"]\n    }\n}\n\nor\n\n{\n    \"compilerOptions\": {\n        \"target\": \"es6\"\n    }\n}\n```\n\n```ts\nimport * as argon2 from \"argon2\";\n\nconst hash = await argon2.hash(..);\n```\n\n### Differences from [node-argon2-ffi](https://github.com/cjlarose/argon2-ffi)\nThis library is implemented natively, meaning it is an extension to the node\nengine. Thus, half of the code are C++ bindings, the other half are Javascript\nfunctions. node-argon2-ffi uses ffi, a mechanism to call functions from one\nlanguage in another, and handles the type bindings (e.g. JS Number -> C++ int).\n\nThe interface of both are very similar, notably node-argon2-ffi splits the\nargon2i and argon2d function set, but this module also has the argon2id option. Also, while\nnode-argon2-ffi suggests you promisify `crypto.randomBytes, this library does that internally.\n\nPerformance-wise, the libraries are equal. You can run the same benchmark suite\nif you are curious, but both can perform around 130 hashes/second on an Intel\nCore i5-4460 @ 3.2GHz with default options.\n\n### Before installing\nYou **MUST** have a **node-gyp** global install before proceeding with install,\nalong with GCC >= 4.8 / Clang >= 3.3. On Windows, you must compile under Visual\nStudio 2015 or newer.\n\n**node-argon2** works only and is tested against Node >=4.0.0.\n\n#### OSX\n\nTo install GCC >= 4.8 on OSX, use [homebrew](http://brew.sh/):\n```console\n$ brew install gcc\n```\n\nOnce you've got GCC installed and ready to run, you then need to install\nnode-gyp, you must do this globally:\n```console\n$ npm install -g node-gyp\n```\n\nFinally, once node-gyp is installed and ready to go, you can install this\nlibrary, specifying the GCC or Clang binary to use:\n\n```console\n$ CXX=g++-6 npm install argon2\n```\n\n**NOTE**: If your GCC or Clang binary is named something different than `g++-6`,\nyou'll need to specify that in the command.\n\n# License\nWork licensed under the [MIT License](LICENSE). Please check\n[P-H-C/phc-winner-argon2] (https://github.com/P-H-C/phc-winner-argon2) for\nlicense over Argon2 and the reference implementation.\n\n[npm-image]: https://img.shields.io/npm/v/argon2.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/argon2\n[travis-image]: https://img.shields.io/travis/ranisalt/node-argon2/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ranisalt/node-argon2\n[appveyor-image]: https://img.shields.io/appveyor/ci/ranisalt/node-argon2.svg?style=flat-square\n[appveyor-url]: https://ci.appveyor.com/project/ranisalt/node-argon2\n[coverage-image]: https://img.shields.io/coveralls/ranisalt/node-argon2/master.svg?style=flat-square\n[coverage-url]: https://coveralls.io/github/ranisalt/node-argon2\n[codequality-image]: https://img.shields.io/codacy/15927f4eb15747fd8a537e48a04bd4f6/master.svg?style=flat-square\n[codequality-url]: https://www.codacy.com/app/ranisalt/node-argon2\n[david-dm-image]: https://img.shields.io/david/ranisalt/node-argon2.svg?style=flat-square\n[david-dm-url]: https://david-dm.org/ranisalt/node-argon2\n[codewake-image]: https://www.codewake.com/badges/ask_question_flat_square.svg\n[codewake-url]: https://www.codewake.com/p/node-argon2\n","versions":[{"number":"0.1.0","date":"2015-12-19T13:22:29.336Z"},{"number":"0.1.1","date":"2015-12-19T13:26:27.687Z"},{"number":"0.1.2","date":"2015-12-20T06:50:53.736Z"},{"number":"0.1.2-1","date":"2015-12-20T06:55:28.769Z"},{"number":"0.1.3","date":"2015-12-20T09:06:51.858Z"},{"number":"0.2.0","date":"2015-12-20T14:57:02.239Z"},{"number":"0.2.0-1","date":"2015-12-20T15:53:47.802Z"},{"number":"0.3.0","date":"2015-12-22T06:52:10.414Z"},{"number":"0.4.0","date":"2016-01-08T04:50:24.273Z"},{"number":"0.4.1","date":"2016-01-09T04:42:23.350Z"},{"number":"0.4.2","date":"2016-01-13T18:53:07.200Z"},{"number":"0.5.0","date":"2016-01-14T05:12:53.344Z"},{"number":"0.5.1","date":"2016-01-14T23:27:52.312Z"},{"number":"0.6.0","date":"2016-01-30T22:31:53.199Z"},{"number":"0.7.0","date":"2016-02-01T20:29:08.680Z"},{"number":"0.8.0","date":"2016-02-03T19:54:24.999Z"},{"number":"0.9.0","date":"2016-02-24T05:58:33.328Z"},{"number":"0.10.0","date":"2016-03-07T18:06:06.685Z"},{"number":"0.10.1","date":"2016-03-08T08:45:44.534Z"},{"number":"0.11.0","date":"2016-04-07T15:49:17.220Z"},{"number":"0.11.1","date":"2016-04-24T02:11:09.266Z"},{"number":"0.12.0","date":"2016-06-21T20:18:43.265Z"},{"number":"0.13.0","date":"2016-09-01T23:36:41.545Z"},{"number":"0.14.0","date":"2016-09-10T18:11:16.903Z"},{"number":"0.14.1","date":"2016-09-10T21:00:07.094Z"},{"number":"0.15.0","date":"2017-01-02T18:55:14.162Z"},{"number":"0.16.0","date":"2017-06-01T04:14:28.108Z"},{"number":"0.16.1","date":"2017-06-01T04:18:46.843Z"}],"starsCount":9,"created":"2015-12-19T13:22:29.336Z","modified":"2017-08-10T21:12:53.575Z","lastPublisher":{"name":"ranisalt","email":"ranisalt@gmail.com"},"owners":[{"name":"ranisalt","email":"ranisalt@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"argon2","_nodeVersion":"7.9.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/argon2-0.16.1.tgz_1496290726689_0.5986587179359049"},"_npmUser":{"name":"ranisalt","email":"ranisalt@gmail.com"},"_npmVersion":"4.2.0","_rev":"7-e822ccedba740136559afa18f72f9ff8","_shasum":"fa1ca0f73158b7c78e129a28ff5adb42ed52fb69","author":{"name":"Ranieri Althoff","email":"ranisalt+argon2@gmail.com"},"bugs":{"url":"https://github.com/ranisalt/node-argon2/issues"},"directories":{},"dist-tags":{"latest":"0.16.1"},"dist":{"shasum":"fa1ca0f73158b7c78e129a28ff5adb42ed52fb69","tarball":"https://registry.npmjs.org/argon2/-/argon2-0.16.1.tgz"},"maintainers":[{"name":"ranisalt","email":"ranisalt@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-10T21:12:53.575Z","created":"2015-12-19T13:22:29.336Z","0.1.0":"2015-12-19T13:22:29.336Z","0.1.1":"2015-12-19T13:26:27.687Z","0.1.2":"2015-12-20T06:50:53.736Z","0.1.2-1":"2015-12-20T06:55:28.769Z","0.1.3":"2015-12-20T09:06:51.858Z","0.2.0":"2015-12-20T14:57:02.239Z","0.2.0-1":"2015-12-20T15:53:47.802Z","0.3.0":"2015-12-22T06:52:10.414Z","0.4.0":"2016-01-08T04:50:24.273Z","0.4.1":"2016-01-09T04:42:23.350Z","0.4.2":"2016-01-13T18:53:07.200Z","0.5.0":"2016-01-14T05:12:53.344Z","0.5.1":"2016-01-14T23:27:52.312Z","0.6.0":"2016-01-30T22:31:53.199Z","0.7.0":"2016-02-01T20:29:08.680Z","0.8.0":"2016-02-03T19:54:24.999Z","0.9.0":"2016-02-24T05:58:33.328Z","0.10.0":"2016-03-07T18:06:06.685Z","0.10.1":"2016-03-08T08:45:44.534Z","0.11.0":"2016-04-07T15:49:17.220Z","0.11.1":"2016-04-24T02:11:09.266Z","0.12.0":"2016-06-21T20:18:43.265Z","0.13.0":"2016-09-01T23:36:41.545Z","0.14.0":"2016-09-10T18:11:16.903Z","0.14.1":"2016-09-10T21:00:07.094Z","0.15.0":"2017-01-02T18:55:14.162Z","0.16.0":"2017-06-01T04:14:28.108Z","0.16.1":"2017-06-01T04:18:46.843Z"},"users":{"timdp":true,"sergeyg":true,"mikemimik":true,"ograbek":true,"kontany":true,"hckhanh":true,"tommytroylin":true,"hugovila":true,"shanewholloway":true}}}