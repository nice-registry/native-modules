{"name":"rocksdb-node","description":"RocksDB support for node.js.","version":"1.6.0","homepage":"https://github.com/dberesford/rocksdb-node","repository":"https://github.com/dberesford/rocksdb-node","dependencies":{"nan":"2.6.2"},"devDependencies":{"rimraf":"2.6.1","snazzy":"7.0.0","standard":"10.0.2","tap":"10.3.2"},"optionalDependencies":{},"main":"rocksdb.js","scripts":{"preuninstall":"rm -rf build/*","test":"standard | snazzy && tap test/*.test.js","install":"node-gyp rebuild","build":"node-gyp build"},"gypfile":true,"gitHead":"19d4d2431d6c2a7cf4973b80a172255ce07539ee","versions":[{"number":"0.1.0","date":"2017-04-29T14:25:04.444Z"},{"number":"0.1.1","date":"2017-05-06T07:37:06.078Z"},{"number":"0.2.0","date":"2017-05-07T12:00:25.493Z"},{"number":"1.0.0","date":"2017-05-08T20:31:39.305Z"},{"number":"1.1.0","date":"2017-05-09T20:10:24.294Z"},{"number":"1.2.0","date":"2017-05-14T17:52:52.181Z"},{"number":"1.3.0","date":"2017-05-19T06:14:46.508Z"},{"number":"1.4.0","date":"2017-05-21T16:40:55.960Z"},{"number":"1.5.0","date":"2017-05-21T17:38:25.148Z"},{"number":"1.5.1","date":"2017-05-21T19:58:46.813Z"},{"number":"1.6.0","date":"2017-08-05T07:50:10.975Z"}],"readme":"# RocksDB\n\nNode native binding for RocksDB. Aims to be a full nodejs mapping for https://github.com/facebook/rocksdb/wiki. Developed against RocksDB 5.2.\n\n## Installation\n\nFirst install RocksDB:\n\nMac: `brew install rocksdb`\n\nLinux and other platforms, see RocksDB [install guide](https://github.com/facebook/rocksdb/blob/master/INSTALL.md).\n\nThen npm install rocksdb-node:\n\n`npm i rocksdb-node --save`\n\n## Sample Usage\n\nSync examples:\n\n```javascript\nconst rocksdb = require('rocksdb-node')\nconst db = rocksdb.open({create_if_missing: true}, '/tmp/my-rocks-database')\ndb.put('node', 'rocks')\nconst value = db.get('node')\ndb.del('node')\n\n// both keys and vals as buffers\nconst key = fs.readFileSync('./test/fixtures/beach-thumb.jpg')\nconst val = fs.readFileSync('./test/fixtures/beach.jpg')\ndb.put(key, val)\nconst beach = db.get({buffer: true}, key)\nfs.writeFileSync('/tmp/beach2.jpg', beach)\n```\n\nAsync examples: \n\n```javascript\nconst rocksdb = require('rocksdb-node')\nconst db = rocksdb.open({create_if_missing: true}, '/tmp/my-rocks-database')\ndb.put('node', 'rocks', function(err) {\n  if (err) return console.error(err);\n  db.get('node', function (err, val) {\n    if (err) return console.error(err);\n    console.log(val)\n    db.del('node', function(err){\n      if (err) return console.error(err);      \n    })\n  })\n})\n\n```\n\n## API\n\n'rocksdb-node' currently exports the following functions:\n\n```javascript \n{\n  open,\n  openDBWithTTL,\n  listColumnFamilies\n  destroyDB\n}\n```\n\nThe `open` function opens a database and returns an object that you use to call further functions on the database.\n\n### Open\n\n```javascript\nconst rocksdb = require('rocksdb-node')\nconst db = rocksdb.open({create_if_missing: true}, '/tmp/my-rocks-database')\n```\n\nNote that passing an options object is required, even if it's empty.\n\nAll boolean and int options as defined in [DBOptions](https://github.com/facebook/rocksdb/blob/5.2.fb/include/rocksdb/options.h#L848) are supported, e.g.\n\n```javascript\nconst opts = {\n    create_if_missing: true,\n    error_if_exists: false,\n    create_missing_column_families: false,\n    paranoid_checks: true,\n    use_fsync: false,\n    allow_mmap_reads: false,\n    allow_mmap_writes: false,\n    use_direct_reads: false,\n    allow_fallocate: true,\n    is_fd_close_on_exec: true,\n    advise_random_on_open: true,\n    new_table_reader_for_compaction_inputs: true,\n    use_adaptive_mutex: false,\n    enable_thread_tracking: false,\n    allow_concurrent_memtable_write: true,\n    enable_write_thread_adaptive_yield: true,\n    skip_stats_update_on_db_open: false,\n    allow_2pc: false,\n    fail_if_options_file_error: false,\n    dump_malloc_stats: false,\n    avoid_flush_during_recovery: false,\n    avoid_flush_during_shutdown: false,\n    max_open_files: -1,\n    max_file_opening_threads: 16,\n    max_total_wal_size: 0,\n    base_background_compactions: 1,\n    max_background_compactions: 1,\n    max_subcompactions: 1,\n    max_background_flushes: 1,\n    max_log_file_size: 0,\n    log_file_time_to_roll: 0,\n    keep_log_file_num: 1000,\n    recycle_log_file_num: 0,\n    table_cache_numshardbits: 0,\n    WAL_ttl_seconds: 0,\n    WAL_size_limit_MB: 0,\n    manifest_preallocation_size: 4 * 1024 * 1024,\n    db_write_buffer_size: 0,\n    compaction_readahead_size: 0,\n    random_access_max_buffer_size: 1024 * 1024,\n    writable_file_max_buffer_size: 1024 * 1024,\n    bytes_per_sync: 0,\n    wal_bytes_per_sync: 0,\n    write_thread_max_yield_usec: 100,\n    write_thread_slow_yield_usec: 3\n  }\n  ```\n\n### Open ReadOnly\n\nOpen database for read only. All DB interfaces that modify data, like put/delete, will return error.\n\n```javascript\nconst dbRO = rocksdb.open({readOnly: true}, './myrocks') // myrocks must already exist\n```\n\n#### Put\n\n `db.put(<options>, <column-family>, key, value, <callback>)` where `<options>`, `<column-family>` and `<callback>` are optional. If no callback is passed the method is synchronous.\n\n```javascript\ntry {\n  db.put('foo', 'bar')\n} catch(e)...\n```\n or \n\n ```javascript\ndb.put('foo', 'bar', function(err){...})\n```\n\nThe key and value params for `put` can both be either a string or a buffer.\n\n```javascript\nconst key = fs.readFileSync('./test/fixtures/beach-thumb.jpg')\nconst val = fs.readFileSync('./test/fixtures/beach.jpg')\ndb.put(key, val)\n// or\ndb.put('foo', val)\n// or\ndb.put(key, 'bar')\n```\n\n`put` optionally takes an options object as it's first parameter. All boolean and int options as defined in [WriteOptions](https://github.com/facebook/rocksdb/blob/5.2.fb/include/rocksdb/options.h#L1565) are supported, e.g. \n\n```javascript\nconst writeOpts = {\n  sync: false,\n  disableWAL: false,\n  ignore_missing_column_families: false,\n  no_slowdown: false\n}\ndb.put(writeOpts, 'foo', 'bar')\n```\n\nColumn Families are also supported for put:\n\n```javascript\ndb.createColumnFamily('myFamily')\ndb.put('myFamily', 'foo', 'bar')\n```\n\n#### Get\n\n `db.get(<options>, <column-family>, key, <callback>)` where `<options>`, `<column-family>` and `<callback>` are optional. If no callback is passed the method is synchronous.\n\n```javascript\ntry {\n  const value = db.get('foo')\n} catch(e)...\n```\n or \n\n ```javascript\ndb.get('foo', function(err, value){...})\n```\n\nThe key param for `get` can be either a string or a buffer, and if the value you are expecting to get is a buffer, you must pass the option `buffer:true`, e.g. \n\n```javascript\nconst key = fs.readFileSync('./test/fixtures/beach-thumb.jpg')\nconst valueBuffer = db.get({buffer:true}, key)\n```\n\n`get` optionally takes an options object as it's first parameter. All boolean and int options as defined in [ReadOptions](https://github.com/facebook/rocksdb/blob/5.2.fb/include/rocksdb/options.h#L1444) are supported, e.g. \n\n```javascript\nconst readOpts = {\n  verify_checksums: true,\n  fill_cache: true,\n  tailing: false,\n  managed: false,\n  total_order_seek: false,\n  prefix_same_as_start: false,\n  pin_data: false,\n  background_purge_on_iterator_cleanup: false,\n  readahead_size: 0,\n  ignore_range_deletions: false\n}\nconst bar = db.get(readOpts, 'foo')\n```\n\nColumn Families are also supported for put:\n\n```javascript\ndb.createColumnFamily('myFamily')\ndb.put('myFamily', 'foo', 'bar')\nvar value = db.get('myFamily', 'foo')\n```\n\n#### Delete\n\n`db.del(<options>, <column-family>, key,  <callback>)` where `<options>`, `<column-family>` and `<callback>` are optional. If no callback is passed the method is synchronous.\n\n```javascript\ntry {\n  db.del('foo')\n} catch(e)...\n```\n or \n\n ```javascript\ndb.del('foo', function(err){...})\n```\n\nThe key param for `del` can be either a string or a buffer, e.g. \n\n```javascript\nconst key = fs.readFileSync('./test/fixtures/beach-thumb.jpg')\ndb.del(key)\n```\n\n`del` optionally takes an options object as it's first parameter, it also takes a [WriteOptions](https://github.com/facebook/rocksdb/blob/5.2.fb/include/rocksdb/options.h#L1565) (like `put`), e.g.\n\n```javascript\nconst writeOpts = {\n  sync: false,\n  disableWAL: false,\n  ignore_missing_column_families: false,\n  no_slowdown: false\n}\ndb.del(writeOpts, 'foo')\n```\n\nColumn Families are also supported for del:\n\n```javascript\ndb.createColumnFamily('myFamily')\ndb.put('myFamily', 'foo', 'bar')\ndb.del('myFamily', 'foo')\n```\n\n#### Close \n\n`db.cose()` Closes an open database. Any subsequent usage of the `db` will result in a 'Database is not open' Error thrown.\n\n#### Destroy Database\n\n`rocksdb.destroyDB(path, <options>)` where `<options>` is optional argument. This destroys a database, fully removing it from the file system. Database must already be closed before it can be destroyed.\n\n```javascript\n  const path = os.tmpdir() + '/rocksdbDestroyTest'\n  const db = rocksdb.open({create_if_missing: true}, path)\n  ...\n  ...\n  db.close()\n  rocksdb.destroyDB(path)\n  t.ok(!fs.existsSync(path))\n\n```\n\n#### Iteration\n\nThe Iterator API matches the Rocks [Iterator API](https://github.com/facebook/rocksdb/wiki/Basic-Operations#iteration). Note the Iterator API is synchronous.\n\n```javascript\nconst it = db.newIterator()\nfor (it.seekToFirst(); it.valid(); it.next()) {\n  console.log(it.key(), it.value())\n}\nconst err = it.status()\nif (err) throw err;\n```\n\nThe following Rocks [Iterator API](https://github.com/facebook/rocksdb/blob/master/include/rocksdb/iterator.h#L29) is supported (documentation has been copied from there):\n\n##### db.newIterator()\n\n`db.newIterator(<read-options>, <column-family>)` where <read-options> and  <column-family>optional.\n\nCreates a new Iterator for the current database. Optionally takes [ReadOptions](https://github.com/facebook/rocksdb/blob/5.2.fb/include/rocksdb/options.h#L1444) or a ColumnFamily name.\n\n```javascript\nconst readOpts = {\n  verify_checksums: true\n}\nconst iter = db.newIterator(readOpts)\n```\n\nCan also optionally take a Column Family Name, e.g. \n\n```javascript\ndb.createColumnFamily('foo')\ndb.put('foo', 'hello', 'world')\nconst iter = db.newIterator('foo')\n...\n```\n\n##### iterator.valid()\n\nAn iterator is either positioned at a key/value pair, or not valid. This method returns true iff the iterator is valid.\n\n##### iterator.seekToFirst()\n\nPosition at the first key in the source. The iterator is Valid() after this call iff the source is not empty.\n\n##### iterator.seekToLast()\n\nPosition at the last key in the source. The iterator is Valid() after this call iff the source is not empty.\n\n##### iterator.seek()\n\nPosition at the first key in the source that at or past target. The iterator is Valid() after this call iff the source contains an entry that comes at or past target.\n\n```javascript\ndb.put('1', 'one')\ndb.put('2', 'two')\ndb.put('3', 'three')\n\nconst it = db.newIterator()\nfor (it.seek('2'); it.valid(); it.next()) {\n  console.log(iter.key(), iter.value())    \n}\n```\n\n##### iterator.seekForPrev()\n\nPosition at the last key in the source that at or before target. The iterator is Valid() after this call iff the source contains an entry that comes at or before target.\n\n##### iterator.next()\n\nMoves to the next entry in the source.  After this call, Valid() is true iff the iterator was not positioned at the last entry in the source.\n\n##### iterator.prev()\n\nMoves to the previous entry in the source.  After this call, Valid() is true iff the iterator was not positioned at the first entry in source.\n\n##### iterator.key() \n\nReturn the key for the current entry.  The underlying storage for the returned slice is valid only until the next modification of the iterator.\n\nNote if the key is a buffer, you need to pass the `buffer:true` flag\n\n```javascript\nfor (it.seekToFirst(); it.valid(); it.next()) {\n  const k = it.key({buffer: true})\n  const v = it.value({buffer: true})\n...\n```\n\n##### iterator.value() \n\nReturn the value for the current entry.  The underlying storage for the returned slice is valid only until the next modification of the iterator.\n\nAs with `iterator.key` if the value is a buffer, you need to pass the `buffer:true` flag\n\n##### iterator.status()\n\nIf an error has occurred, return it. A javascript Error object is returned if an error occurred, otherwise null.\n\n```javascript\nconst err = it.status()\nif (err) throw err;\n```\n\n##### db.releaseIterator()\n\n`db.releaseIterator(iterator)`, releases the iterator, this should be called when you are finished iterating.\n\n```javascript\nconst iter = db.newIterator(readOpts)\n...\n...\ndb.releaseIterator(iter)\n```\n\n#### Column Families\n\nThe Column Family API mostly matches the Rocks [Column Families](https://github.com/facebook/rocksdb/wiki/Column-Families), with some additional utility methods. \nOpen, Put, Get, Delete all support Column Families. When a database is opened, it is queried for it's Column Families and all are opened. \n\n##### getColumnFamilies\n\nGet all the Column Families in an open database. \nReturns a javascript array containing all the Column Family names:\n\n```javascript\n\ndb = rocksdb.open({create_if_missing: true}, './myrocks')\nconst families = db.getColumnFamilies(); \nconsole.log(families)\n```\n\n##### createColumnFamily\n\nCreates a new Column Family:\n\n```javascript \ndb.createColumnFamily('myFamily')\ndb.put('myFamily', 'foo', 'bar')\n```\n\n##### dropColumnFamily\n\nDrops a Column Family:\n\n```javascript \ndb.dropColumnFamily('myFamily')\n```\n\n#### Compact Range\n\nSupport for [Compaction](https://github.com/facebook/rocksdb/wiki/Compaction).\n\n`db.compactRange(<compactrange-options>, <column-family>, <from>, <to>, <callback>)` where all parameters are optional, i.e. the following combinations are all possible:\n\n```javascript\ndb.compactRange()\ndb.compactRange(options)\ndb.compactRange(callback)\ndb.compactRange(columnFamily)\ndb.compactRange(from, to)\ndb.compactRange(options, callback)\ndb.compactRange(options, from, to)\ndb.compactRange(columnFamily, from, to)\ndb.compactRange(options, columnFamily, callback)\ndb.compactRange(options, columnFamily, from, to)\ndb.compactRange(options, from, to, callback)\ndb.compactRange(columnFamily, from, to, callback)\ndb.compactRange(options, columnFamily, from, to, callback)\n```\nThe following [options](https://github.com/facebook/rocksdb/blob/3c327ac2d0fd50bbd82fe1f1af5de909dad769e6/include/rocksdb/options.h#L1152) are supported:\n\n```javascript\nconst opts = {\n  // If true, no other compaction will run at the same time as this manual compaction\n  exclusive_manual_compaction: true,\n\n  // If true, compacted files will be moved to the minimum level capable of holding the data or given level (specified non-negative target_level). \n  change_level: false,\n\n  // If change_level is true and target_level have non-negative value, compacted  files will be moved to target_level.\n  target_level: -1,\n\n  // Compaction outputs will be placed in options.db_paths[target_path_id].  Behavior is undefined if target_path_id is out of range.\n  target_path_id: 0\n}\n```\n\nExample usage:\n```javascript\n\n  db.put('foo1', 'bar1')\n  db.put('foo2', 'bar2')\n  db.put('foo3', 'bar3')\n\n  db.compactRange()\n  db.compactRange('foo1', 'foo3')\n  db.compactRange((err) => {\n...\n\n```\n\n### openDBWithTTL\n\nOpens a [DBWithTTL](https://github.com/facebook/rocksdb/wiki/Time-to-Live). This database is a specialized form of the main RocksDB database (returned by `open`), it inherits all the regular RocksDB database functions.\n\n `rocksdb.openDBWithTTL(<options>, <path>, <ttl>)`, where `<ttl>` is measured in seconds. E.g.\n\n```javascript\nconst dbWithTTL = rocksdb.openDBWithTTL({create_if_missing: true}, path, 1)\n```\n\nAll the same options that can be passed to #open() can be passed here. \n\nNote: the TTL passed applies to all Column Families.\n\nExample:\n\n```javascript\n  const db = rocksdb.openDBWithTTL({create_if_missing: true}, path, 1)  // 1 second ttl..\n  db.put('foo', 'bar')\n  console.log(db.get('foo'))\n\n  // sleep for 2 seconds, then foo should be removed (after compact)\n  setTimeout(() => {\n    db.compactRange()\n    console.log(db.get('foo'))\n    db.close()\n  }, 2000);\n```\n\n### List Column Families\n\nIt's also possible to query a database for it's Column Families without opening the database:\n\n```javascript\nconst rocksdb = require('rocksdb-node')\nconst families = rocksdb.listColumnFamilies('./myrocks')\n```\n\nNote `listColumnFamilies` can also take the same options that you can pass to open, e.g. \n\n```javascript\nconst families = rocksdb.listColumnFamilies({paranoid_checks: true}, './myrocks')\n```\n### Batch Updates\n\nSupport for [Batch Updates](https://github.com/facebook/rocksdb/wiki/Basic-Operations#atomic-updates):\n\n```javascript\n  const batch = db.batch()\n  batch.put('k1', 'v1')\n  batch.del('k1')\n  db.write(batch)\n```\nNote that the batch API is synchronous. Column Families are supported:\n\n```javascript\n  db.createColumnFamily('foo')\n  const batch = db.batch()\n  batch.put('foo', 'k1', 'v1')\n  batch.del('foo', 'k1')\n  db.write(batch)\n```\n\nNote also that `WriteOptions` can be passed to `write`, e.g. \n\n```javascript\n  const opts = {\n    sync: false,\n  }\n  const batch = db.batch()\n  batch.put('k2', 'v2')\n  db.write(opts, batch)\n```\n\n#### Snapshots\n\nSupport for [Snapshots](https://github.com/facebook/rocksdb/wiki/Basic-Operations#snapshots). Usage:\n\n```javascript\n  const db = rocksdb.open({create_if_missing: true}, path)\n  db.put('foo', 'bar')\n\n  const readOptions = {}\n  readOptions.snapshot = db.getSnapshot()\n\n  // these will not be part of the iterator\n  db.put('foo2', 'bar2')\n\n  const it = db.newIterator(readOptions)\n\n\n  for (it.seekToFirst(); it.valid(); it.next())\n  ....\n  ....\n\n  db.releaseIterator(it)\n  db.releaseSnapshot(readOptions.snapshot)\n\n```\n\n#### Creating and Ingesting SST Files\n\nSupport for [Creating and Ingesting SST Files](https://github.com/facebook/rocksdb/wiki/Creating-and-Ingesting-SST-files). Usage:\n\n```javascript\n  const db = rocksdb.open({create_if_missing: true}, path)\n\n  const sstFileWriter = db.getSstFileWriter()\n  sstFileWriter.open('/tmp/file1')\n  sstFileWriter.add('a', 'b')\n  ...\n  sstFileWriter.finish()\n\n  db.ingestExternalFile('/tmp/file1')\n  console.log(db.get('a')) // 'b' now exists\n\n```\n","created":"2017-04-29T14:25:04.444Z","modified":"2017-08-05T07:50:10.975Z","lastPublisher":{"name":"damianberesford","email":"dberesford@gmail.com"},"owners":[{"name":"damianberesford","email":"dberesford@gmail.com"}],"other":{"_attachments":{},"_id":"rocksdb-node","_nodeVersion":"6.9.4","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/rocksdb-node-1.6.0.tgz_1501919409012_0.8840379109606147"},"_npmUser":{"name":"damianberesford","email":"dberesford@gmail.com"},"_npmVersion":"5.3.0","_rev":"11-54df1deee32f203e1a2c6adc140c540c","author":{"name":"Damian Beresford","email":"dberesford@gmail.com","url":"twitter.com/dberesford"},"bugs":{"url":"https://github.com/dberesford/rocksdb-node/issues"},"contributors":[{"name":"Damian Beresford","email":"dberesford@gmail.com"}],"directories":{},"dist-tags":{"latest":"1.6.0"},"dist":{"integrity":"sha512-LGDrkFfW7IG3ZT7WSFMPrXvcXM82tkgX5lJdFay419evoif8dFvMToirEvBdcWzGXrte30mqcHEEvNuukc55jA==","shasum":"9e37d53d54387d4d17cca0afa99fce3f3b40a9d2","tarball":"https://registry.npmjs.org/rocksdb-node/-/rocksdb-node-1.6.0.tgz"},"maintainers":[{"name":"damianberesford","email":"dberesford@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-05T07:50:10.975Z","created":"2017-04-29T14:25:04.444Z","0.1.0":"2017-04-29T14:25:04.444Z","0.1.1":"2017-05-06T07:37:06.078Z","0.2.0":"2017-05-07T12:00:25.493Z","1.0.0":"2017-05-08T20:31:39.305Z","1.1.0":"2017-05-09T20:10:24.294Z","1.2.0":"2017-05-14T17:52:52.181Z","1.3.0":"2017-05-19T06:14:46.508Z","1.4.0":"2017-05-21T16:40:55.960Z","1.5.0":"2017-05-21T17:38:25.148Z","1.5.1":"2017-05-21T19:58:46.813Z","1.6.0":"2017-08-05T07:50:10.975Z"}}}