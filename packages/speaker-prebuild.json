{"name":"speaker-prebuild","description":"Output PCM audio data to the speakers","keywords":["pcm","audio","sound","music","output","speaker","headphone","alsa","coreaudio","openal","sdl","portaudio","jack","oss","pulse","mpg123"],"version":"0.1.3","repository":"https://github.com/jkeylu/node-speaker-prebuild","main":"./index.js","scripts":{"install":"node-pre-gyp install --fallback-to-build","test":"node-gyp rebuild --mpg123-backend=dummy && mocha --reporter spec"},"dependencies":{"bindings":"~1.2.0","debug":"~1.0.0","nan":"~1.2.0","node-pre-gyp":"^0.5.16","readable-stream":"1.0"},"devDependencies":{"mocha":"~1.18.0"},"binary":{"module_name":"binding","module_path":"./build/Release/","host":"https://jkeylu.github.io/node-speaker-prebuild"},"gitHead":"21a1cefd156552a011075d1601834609ae21d9a7","homepage":"https://github.com/jkeylu/node-speaker-prebuild","bundleDependencies":["node-pre-gyp"],"versions":[{"number":"0.1.0","date":"2014-05-17T06:10:48.305Z"},{"number":"0.1.2","date":"2014-06-16T01:51:16.450Z"},{"number":"0.1.3","date":"2014-06-16T13:57:28.861Z"}],"readme":"node-speaker\n============\n### Output [PCM audio][pcm] data to the speakers\n[![Build Status](https://secure.travis-ci.org/TooTallNate/node-speaker.svg)](https://travis-ci.org/TooTallNate/node-speaker)\n[![Build Status](https://ci.appveyor.com/api/projects/status/wix7wml3v55670kw)](https://ci.appveyor.com/project/TooTallNate/node-speaker)\n\n\nA Writable stream instance that accepts [PCM audio][pcm] data and outputs it\nto the speakers. The output is backed by `mpg123`'s audio output modules, which\nin turn use any number of audio backends commonly found on Operating Systems\nthese days.\n\n\nInstallation\n------------\n\nSimply compile and install `node-speaker` using `npm`:\n\n``` bash\n$ npm install speaker\n```\n\nOn Debian/Ubuntu, the [ALSA][alsa] backend is selected by default, so be sure\nto have the `alsa.h` header file in place:\n\n``` bash\n$ sudo apt-get install libasound2-dev\n```\n\n\nExample\n-------\n\nHere's an example of piping `stdin` to the speaker, which should be 2 channel,\n16-bit audio at 44,100 samples per second (a.k.a CD quality audio).\n\n``` javascript\nvar Speaker = require('speaker');\n\n// Create the Speaker instance\nvar speaker = new Speaker({\n  channels: 2,          // 2 channels\n  bitDepth: 16,         // 16-bit samples\n  sampleRate: 44100     // 44,100 Hz sample rate\n});\n\n// PCM data from stdin gets piped into the speaker\nprocess.stdin.pipe(speaker);\n```\n\n\nAPI\n---\n\n`require('speaker')` directly returns the `Speaker` constructor. It is the only\ninterface exported by `node-speaker`.\n\n### new Speaker([ format ]) -> Speaker instance;\n\nCreates a new `Speaker` instance, which is a writable stream that you can pipe\nPCM audio data to. The optional `format` object may contain any of the `Writable`\nbase class options, as well as any of these PCM formatting options:\n\n  * `channels` - The number of audio channels. PCM data must be interleaved. Defaults to `2`.\n  * `bitDepth` - The number of bits per sample. Defaults to `16` (16-bit).\n  * `sampleRate` - The number of samples per second per channel. Defaults to `44100`.\n  * `signed` - Boolean specifying if the samples are signed or unsigned. Defaults to `true` when bit depth is 8-bit, `false` otherwise.\n  * `samplesPerFrame` The number of samples to send to the audio backend at a time. You likely don't need to mess with this value. Defaults to `1024`.\n\n#### \"open\" event\n\nFired when the backend `open()` call has completed. This happens once the first\n`write()` call happens on the speaker instance.\n\n#### \"flush\" event\n\nFired after the speaker instance has had `end()` called, and after the audio data\nhas been flushed to the speakers.\n\n#### \"close\" event\n\nFired after the \"flush\" event, after the backend `close()` call has completed.\nThis speaker instance is essentially finished after this point.\n\n\nAudio Backend Selection\n-----------------------\n\n`node-speaker` is backed by `mpg123`'s \"output modules\", which in turn use one of\nmany popular audio backends like ALSA, OSS, SDL, and lots more. The default\nbackends for each operating system are described in the table below:\n\n| **Operating System** | **Audio Backend** | **Description**\n|:---------------------|:------------------|:----------------------------------\n| Linux                | `alsa`            | Output audio using [Advanced Linux Sound Architecture (ALSA)][alsa].\n| Mac OS X             | `coreaudio`       | Output audio using Mac OS X's CoreAudio.\n| Windows              | `win32`           | Audio output for Windows (winmm).\n| Solaris              | `sun`             | Audio output for Sun Audio.\n\nTo manually override the default backend, pass the `--mpg123-backend` switch to\n`npm`/`node-gyp`:\n\n``` bash\n$ npm install speaker --mpg123-backend=openal\n```\n\n[pcm]: http://en.wikipedia.org/wiki/Pulse-code_modulation\n[alsa]: http://www.alsa-project.org/\n","starsCount":2,"created":"2014-05-17T06:10:48.305Z","modified":"2014-06-16T13:57:28.861Z","lastPublisher":{"name":"jkeylu","email":"jkeylu@gmail.com"},"owners":[{"name":"jkeylu","email":"jkeylu@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"speaker-prebuild","_npmUser":{"name":"jkeylu","email":"jkeylu@gmail.com"},"_npmVersion":"1.4.15","_rev":"1-7ef530bf703a2bee7653212ccb24627a","_shasum":"5e2eefa2bff63c79d59c48ae817c02c6e8a5c18a","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"bugs":{"url":"https://github.com/jkeylu/node-speaker-prebuild/issues"},"directories":{},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"5e2eefa2bff63c79d59c48ae817c02c6e8a5c18a","tarball":"http://registry.npmjs.org/speaker-prebuild/-/speaker-prebuild-0.1.3.tgz"},"maintainers":[{"name":"jkeylu","email":"jkeylu@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-06-16T13:57:28.861Z","created":"2014-05-17T06:10:48.305Z","0.1.0":"2014-05-17T06:10:48.305Z","0.1.2":"2014-06-16T01:51:16.450Z","0.1.3":"2014-06-16T13:57:28.861Z"},"users":{"rchk":true,"apfritts":true}}}