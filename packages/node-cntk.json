{"name":"node-cntk","version":"0.0.2","description":"Call CNTK directly from node.js","main":"main.js","dependencies":{"nan":"^2.6.2"},"devDependencies":{"pixel":"0.0.4"},"keywords":["CNTK","Deep Learning"],"os":["win32"],"scripts":{"install":"node-gyp rebuild","build":"node-gyp build","test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/nadavbar/node-cntk","homepage":"https://github.com/nadavbar/node-cntk","license":"MIT","gitHead":"8ccebe34e3e014c88621e3eeaa3f0706265502d4","gypfile":true,"versions":[{"number":"0.0.1","date":"2017-06-22T06:10:01.809Z"},{"number":"0.0.2","date":"2017-06-22T15:46:39.786Z"}],"readme":"## node-cntk : Node.js bindings for CNTK\r\n\r\nThis node.js module provides node.js native bindings for <a href=\"\">CNTK</a>, Microsoft's deep learning library.\r\n\r\nCurrently supports Windows x64. Please note that the module is currently bundled with the required CNTK and CUDA DLL files. (Hence the large package size). The additional DLL files are located under the CNTK/DLL folder.\r\n\r\nA working example of a web app hosting a CNTK model for handwritten digit recognition is available here: https://github.com/nadavbar/node-cntk-mnist-sample\r\n\r\n### What is it good for?\r\n\r\nnode-cntk is currently meant to only support <b>model evaluation</b>. (e.g. test time).\r\n\r\nThat is, you need to first train you model using CNTK's python (or Brain-Script) API, and then consume it in node.js using this module.\r\n\r\n### How to use?\r\n\r\n1. Install by running:\r\n\r\n```\r\nnpm install --save node-cntk\r\n```\r\n\r\nPlease note that currently the npm package also contains the CNTK windows binaries, which means that the download might take some time.  \r\n\r\n2. Require the module and set the default device:\r\n\r\n```javascript\r\nconst cntk = require('node-cntk');\r\n\r\ntry {\r\n    // try to set the default device to GPU with device Id 0\r\n    cntk.setDefaultDeviceSync(cntk.devices.gpu /*, deviceId (default is 0) */);\r\n}\r\ncatch(ex) {\r\n    // failed to set device to GPU, try to set to CPU instead\r\n    cntk.setDefaultDeviceSync(cntk.devices.cpu);\r\n}\r\n```\r\n\r\nNote that for now you can set the device globally, in the future this module will support choosing the device per operation.\r\n\r\n3. Load the model using the <b>loadModel</b> async method:\r\n\r\n```javascript\r\n// Load the model \r\nvar modelPath = path.join(__dirname, 'mnist', 'mnist_conv.cmf');\r\n\r\ncntk.loadModel(modelPath, (err, model) => {\r\n    if (err) {\r\n        console.info('Got error:', err);\r\n        return;\r\n    }\r\n    console.info('Got model!')\r\n\r\n    // do something with the model\r\n    // ...\r\n});\r\n```\r\n\r\n4. Evaluate a sample (or samples) using the loaded model:\r\n\r\n```javascript\r\n// get the data sample\r\nvar dataSample = [...];\r\n\r\n// the input data is a batch of data, e.g. array of arrays/buffers, etc:\r\ninputData = [dataSample]\r\n\r\n// Alternatively, you can also provide a dictionary where each key is the name of the input variable, and the value is the data. // This is useful in case your model have more than input variables. \r\n//inputData = {\r\n//    'input' : [ dataSample ]\r\n//}\r\n\r\n// In case you are interested in a specific output variable, you can explicitly provide a list if output variable names\r\n// that the eval function will get the evaluation for.\r\n// If you don't provide any, the eval function will just return the default model output variables.\r\n\r\n//outputVariables = ['output']\r\n    \r\nmodel.eval(inputData, /* outputVariables, */ (err, res)=>{\r\n    if (err) {\r\n        console.info(err);\r\n        return;\r\n    }\r\n\r\n    // Print the result object.\r\n    // The result object will hold an object with the name of the output variable as key, and for each key \r\n    // the value will be an array with the evaluation result for each data samples \r\n    \r\n    console.info('Eval result:', res);\r\n\r\n    // For the MNIST example, we will have the following output \r\n    // (note that \"output\" is the name of the model's output variable):\r\n    // \r\n    // Eval result: { output:\r\n    // [ [ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 ],\r\n    // [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ] ] }\r\n    //\r\n})\r\n```\r\n\r\nFor a full, working sample of evaluating images of hand written digits using a Convolutional Neural Network model trained on the <a href=\"http://yann.lecun.com/exdb/mnist/\">MNIST dataset</a>, please see <a href=\"https://github.com/nadavbar/node-cntk/blob/master/test/basic.js\">this sample</a>.\r\n\r\n## License\r\n\r\nMIT. See the LICENSE file for more details.\r\n\r\n","created":"2017-06-22T06:10:01.809Z","modified":"2017-06-22T15:46:39.786Z","lastPublisher":{"name":"nadavbar","email":"nadavbar@gmail.com"},"owners":[{"name":"nadavbar","email":"nadavbar@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-cntk","_nodeVersion":"7.9.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-cntk-0.0.2.tgz_1498146390273_0.7895019324496388"},"_npmUser":{"name":"nadavbar","email":"nadavbar@gmail.com"},"_npmVersion":"4.2.0","_rev":"2-6cc992455a2d7de1edbbeb626b1c9d8a","_shasum":"135e282c5a6c986049e9bcac4d38160d88daadb2","author":{"name":"nadavbar","email":"nadavbar@gmail.com"},"bugs":{"url":"https://github.com/nadavbar/node-cntk/issues"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"135e282c5a6c986049e9bcac4d38160d88daadb2","tarball":"https://registry.npmjs.org/node-cntk/-/node-cntk-0.0.2.tgz"},"maintainers":[{"name":"nadavbar","email":"nadavbar@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-22T15:46:39.786Z","created":"2017-06-22T06:10:01.809Z","0.0.1":"2017-06-22T06:10:01.809Z","0.0.2":"2017-06-22T15:46:39.786Z"}}}