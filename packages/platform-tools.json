{"name":"platform-tools","version":"0.3.1","description":"A toolchain to build and compile native dependencies with and for Node.","main":"index.js","scripts":{"test":"tape 'test/async/*.js'","doc":"jsdoc2md lib/platform_tools.js > doc/API.md && node -e \"const fs = require('fs');fs.writeFile('README.md', fs.readFileSync('doc/README.md'));['doc/README.md', 'doc/API.md', 'doc/LICENSE.md'].forEach(function(el){fs.appendFileSync('README.md',fs.readFileSync(el))})\""},"repository":"https://github.com/eljefedelrodeodeljefe/platform-tools","keywords":["compiler","toolchain","linker","c","c++","cpp","native","addons"],"license":"MIT","homepage":"https://github.com/eljefedelrodeodeljefe/platform-tools#readme","devDependencies":{"jsdoc-to-markdown":"^1.3.6","nan":"^2.3.5","tape":"^4.6.0"},"dependencies":{},"gitHead":"379bd601abf2a03db81b53a8bf41b3e7a4e93c50","versions":[{"number":"0.2.0","date":"2016-06-14T14:54:10.703Z"},{"number":"0.2.1","date":"2016-06-16T08:13:44.743Z"},{"number":"0.2.2","date":"2016-06-16T11:43:36.603Z"},{"number":"0.3.0","date":"2016-06-17T12:12:45.634Z"},{"number":"0.3.1","date":"2016-06-20T11:38:58.738Z"}],"readme":"# platform-tools\n\nA toolchain to build and compile native dependencies with and for Node.\n\n[![Build Status](https://travis-ci.org/eljefedelrodeodeljefe/platform-tools.svg?branch=master)](https://travis-ci.org/eljefedelrodeodeljefe/platform-tools) [![Build status](https://ci.appveyor.com/api/projects/status/59q34ua3i457k27x?svg=true)](https://ci.appveyor.com/project/eljefederodeodeljefe/platform-tools) [![Join the chat at https://gitter.im/eljefedelrodeodeljefe/platform-tools](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/eljefedelrodeodeljefe/platform-tools?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![NPM](https://nodei.co/npm-dl/platform-tools.png?months=6&height=2)](https://nodei.co/npm/platform-tools/)\n\n## TL;DR\n\n> Compile C/C++ and native node addons with Node.js. Under the hood this is shelling\nout to `gcc`, `clang` and `cl.exe` in a similar way `make` does. To mitigate `gyp` and\n`autotools` dependencies node users (eventually) could use this.\n\nAssume a file `exit_with_1.c`\n\n```c\nint main(int argc, char const* argv[]) {\n  return 1;\n}\n```\n\nThe below would be an example of emulating with Node.js\n\n```console\ngcc -c exit_with_1\ngcc -o exit_with_1.o\n./exit_with_1\n```\n\n```js\nconst platform_tools = require('platform-tools')\nconst spawn = require('child_process').spawn\n\nlet out = 'exit_with_1'\n// first compile without linking\nplatform_tools.compile('exit_with_1.c', {output: `${out}.o`}, () => {\n  // then link the object file (here an easy case)\n  platform_tools.link(`${out}.o`, {output: out}, () => {\n    // now execute the compiled binary and expect the C-program to end\n    // with code 1\n    const cp = spawn(out, [], {shell: true});\n    cp.on('close', (code) => {\n      assert(code === 1), 'Compiled binary exit_with_1 must exit with code 1')\n    })\n  })\n})\n```\n\n## Implementation Status<a name=\"status\"></a>\n| Method | implemented |\n| --- | --- |\n| .compile(source [,options, cb]) | **yes** |\n| .compileAddon(source [,options, cb]) | **yes** |\n| .link(object [,options, cb]) | **yes** |\n| .config(library [,options, cb]) | **yes** |\n\n\n\n### Overview\n\n(TBD)\n\nAlso this makes it easier for libarary authors and users, since compilation\noutput will either be stored into a user specified location or by default into\nthe current working directories `build/` directory (precisely\n``` `${process.cwd()}/build` ```)\n\n### Technical Overview\n\n**Rquirements:**\n* Node 4.5.0+\n* the default compiler for your system\n\n## Windows Users\n\n> Mote: since this repo wants to purposely increase Windows native addon usabilty\nplease share if you have a hard time. However ue to the Microsoft inherent SDK\nand compiler strategy we need to assume prerequisites of you.\n\n* Windows SDK 10 standalone should be installed and in your %ProgramFiles(x86)%\n* Visual Studio 2015 should be installed and in your %ProgramFiles(x86)%\n\n**For background:** To accomplish unix-like command-line behavior, e.g.\n`gcc source_file.c -o source.exe && ./source.exe` we need to assume the location\nof the most basic C/C++ headers in various locations on your Windows installation.\nThe `cl.exe` binary does not assume any search paths on it's own, if it is not\nrun through Visual Studio. Although that being quite a quirk for embedders and\nlibrary authors, Windows compiler support is as good as Unix'.\n\n## Platform\n\nThis module is currently tested on:\n\n| Platform | 0.10 | 0.12 | 4.0 | 5.0 | 6.0 |\n| --- | --- | --- | --- | ---| ---|---|\n| Mac OS X | - | - | **yes** | **yes**| **yes** |\n| BSDs| - | - | **yes** | **yes**| **yes** |\n| Linux | - | - | **yes** | **yes**  | **yes** |\n| Windows | - | - | **yes** | **yes**  | **yes** |\n\n## Roadmap\n\n* have more complex C/C++ files compile and link fully\n* ~~make native addons build~~\n* make node build\n* make v8 build\n* override values that the lib takes as assumption\n* gyp-file integration (chop-off comments and trailing commas -> then done?)\n* more sophisticated Windows search path fallbacks for not optimal installatons\n\n\n## API\n<a name=\"PlatformTools\"></a>\n\n## PlatformTools\n**Kind**: global class  \n\n* [PlatformTools](#PlatformTools)\n    * [.compile(source, cb)](#PlatformTools+compile) ⇒ <code>Callback</code>\n    * [.link(object, options, cb)](#PlatformTools+link) ⇒ <code>Callback</code>\n    * [.config(lib, cb)](#PlatformTools+config) ⇒ <code>Callback</code>\n    * [.compileAddon(addonSrcFile, options, cb)](#PlatformTools+compileAddon) ⇒ <code>Callback</code>\n\n<a name=\"PlatformTools+compile\"></a>\n\n### platformTools.compile(source, cb) ⇒ <code>Callback</code>\nCompiles a given source code file or array of files to the platforms object\ncode.\n\n**Kind**: instance method of <code>[PlatformTools](#PlatformTools)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| source | <code>String</code> &#124; <code>Array.&lt;String&gt;</code> | Path to source |\n| cb | <code>function</code> | Optional callback for completion |\n\n<a name=\"PlatformTools+link\"></a>\n\n### platformTools.link(object, options, cb) ⇒ <code>Callback</code>\nLinks mutiple objects and libraries to a binary.\n\n**Kind**: instance method of <code>[PlatformTools](#PlatformTools)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| object | <code>String</code> &#124; <code>Array.&lt;String&gt;</code> | Path for name of object code file |\n| options | <code>Object</code> | Options object |\n| cb | <code>function</code> | Optional callback |\n\n<a name=\"PlatformTools+config\"></a>\n\n### platformTools.config(lib, cb) ⇒ <code>Callback</code>\nReturns the necessary libraries to link against, similarly to pkg-config(1).\n\n**Kind**: instance method of <code>[PlatformTools](#PlatformTools)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| lib | <code>String</code> | Library to search dependencies against |\n| cb | <code>function</code> | Optional Callback upon completion |\n\n<a name=\"PlatformTools+compileAddon\"></a>\n\n### platformTools.compileAddon(addonSrcFile, options, cb) ⇒ <code>Callback</code>\nThis method compiles node native addons end-to-end. Motivation behind this\nhigh level approach is past struggles with this technique, and especially\ndifferent behaviors across platforms. Eventually this method should take\ncare of all of the above. If the user has special cases, it is still\npossible to pass instructions via the options object and (item for roadmap)\noverride certain common variables forcefully.\n\n**Kind**: instance method of <code>[PlatformTools](#PlatformTools)</code>  \n**Returns**: <code>Callback</code> - returns optional callback  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| addonSrcFile | <code>String</code> | Path to source file |\n| options | <code>Object</code> | Options object |\n| cb | <code>function</code> |  |\n\n## License\n\nMIT\n","created":"2016-06-14T14:54:10.703Z","modified":"2016-06-20T11:38:58.738Z","lastPublisher":{"name":"eljefederodeodeljefe","email":"devraindance@gmail.com"},"owners":[{"name":"eljefederodeodeljefe","email":"devraindance@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"platform-tools","_nodeVersion":"6.2.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/platform-tools-0.3.1.tgz_1466422736236_0.6393403494730592"},"_npmUser":{"name":"eljefederodeodeljefe","email":"devraindance@gmail.com"},"_npmVersion":"3.8.9","_rev":"1-2501e556581714b71329e742c9450f32","_shasum":"d484c23ceb72c448aed0c62523af4bbe51783345","author":{"name":"Robert Jefe Lindstaedt","email":"robert.lindstaedt@gmail.com"},"bugs":{"url":"https://github.com/eljefedelrodeodeljefe/platform-tools/issues"},"directories":{},"dist-tags":{"latest":"0.3.1"},"dist":{"shasum":"d484c23ceb72c448aed0c62523af4bbe51783345","tarball":"http://registry.npmjs.org/platform-tools/-/platform-tools-0.3.1.tgz"},"maintainers":[{"name":"eljefederodeodeljefe","email":"devraindance@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-06-20T11:38:58.738Z","created":"2016-06-14T14:54:10.703Z","0.2.0":"2016-06-14T14:54:10.703Z","0.2.1":"2016-06-16T08:13:44.743Z","0.2.2":"2016-06-16T11:43:36.603Z","0.3.0":"2016-06-17T12:12:45.634Z","0.3.1":"2016-06-20T11:38:58.738Z"}}}