{"name":"svmq","version":"1.0.6","description":"Native System V message queues in Node.js","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","install":"node-gyp rebuild"},"repository":"https://github.com/jhead/node-svmq","keywords":["system","v","sysv","mq","message","queue","svmq","ipc"],"license":"MIT","gypfile":true,"homepage":"https://github.com/jhead/node-svmq#readme","dependencies":{"nan":"^2.2.0"},"gitHead":"db743683b8d8c1df6a67c30e3d0aa0b05d664b31","versions":[{"number":"1.0.0","date":"2016-03-23T21:30:26.577Z"},{"number":"1.0.1","date":"2016-03-23T21:43:05.100Z"},{"number":"1.0.2","date":"2016-03-23T22:24:01.643Z"},{"number":"1.0.3","date":"2016-11-19T20:18:27.007Z"},{"number":"1.0.4","date":"2016-12-16T18:09:36.056Z"},{"number":"1.0.5","date":"2017-05-04T15:49:17.151Z"},{"number":"1.0.6","date":"2017-05-15T15:10:17.053Z"}],"readme":"# node-svmq\nNative System V IPC message queues in Node.js with bindings and an easy to use abstraction. [System V message queues](http://linux.die.net/man/7/svipc) are more widely implemented on UNIX systems than [POSIX message queues](http://linux.die.net/man/7/mq_overview), and are supported on both Linux and OS X.\n\nThese are FIFO queues. New messages are pushed to the end and old messages are popped off first.\n\n## Why?\nThe keyword here is _IPC_. These queues exist in kernel space; they can be accessed by multiple processes,\nassuming the correct permissions, etc. This provides a portable method for passing messages between\ntwo completely unrelated processes using potentially different languages/runtimes.\n\nFor example, PHP has native support for SysV IPC including message queues. That means you can now easily\nserialize PHP objects to JSON and pass them to Node.js (and vice versa) without messing with pipes,\nsockets, etc. and without having to spawn processes from within Node.js.\n\n## Installation\n`npm install svmq`\n\nNative bindings are written in C/C++ using [NAN](https://github.com/nodejs/nan) and built automatically on install.\n\n## Usage\n\n### Creating or opening a message queue\n```javascript\n// Opens or creates the queue specified by key 31337\nvar queue = require('svmq').open(31337);\n// OR\nvar MessageQueue = require('svmq');\nvar queue = new MessageQueue(31337);\n```\n\n### Listen for new messages\n```javascript\n// Listen for new messages on the queue\n// If the queue already contains messages, they will be popped off first (one at a time).\nqueue.on('data', (data) => {\n  // Data is provided as a Buffer. If you're passing Strings back and forth, be sure to use toString()\n  // However, data does not have to be a String. It can be any type of data in Buffer form.\n  console.log('Message: ' + data.toString());\n});\n```\n\n### Push message onto queue\n```javascript\n// Push a new message to the queue\nqueue.push(new Buffer('TestString1234'), (err) => {\n  // This callback is optional; it is called once the message is placed in the queue.\n  console.log('Message pushed');\n});\n\n// Note that SysV message queues may block under certain circumstances, so you cannot assume that\n// the above message will already be in the queue at this point.\n// Use the callback to know exactly when the message has been pushed to the queue.\n```\n\n### Pop message off queue\n```javascript\n// Pop a message off of the queue\n// Do not use pop() with the 'data' event; use one or the other.\nqueue.pop((err, data) => {\n  if (err) throw err;\n  console.log('Popped message: ' + data.toString());\n});\n```\n\n### Close or dispose of a queue\n```javascript\n// Close the queue immediately\n// Returns true/false, specifying whether or not the queue closed.\n// Can be used with a callback to catch errors on close.\n//\n// Note: this may require escalated privileges on some OSes.\nvar closed = queue.close();\n// OR (closed status will be returned and passed to callback)\nvar closed = queue.close((err, closed) => {\n  if (err) throw err;\n});\n```\n\n### Multiplexing / Two-way communication\nOpening a queue via the same key from two different processes will give both\nprocesses access to the same data structure, but after all, it's still a queue.\nThis means that proper two-way communication needs either two queues or some\nway to multiplex one queue.\n\nFortunately, each message sent to the queue has an associated message type.\nWhen you pop a message off, you ask for message type `0` by default. This tells\nthe system that you want the message from the front of the queue, no matter what\nmessage type it is. If you pass a positive integer greater than zero, the queue\nwill give you the first message that resides in the queue with that message type\nor block until it's available (via callback).\n\nIn other words, you can achieve two-way communication between processes by using\ntwo distinct message types. See the example below.\n\n```javascript\n// Process A\nvar queue = MessageQueue.open(31337);\nqueue.push('Hello from A', { type: 100 });\nqueue.pop({ type: 200 }, (err, data) => {\n  // data == 'Hello from B'\n});\n\n// Process B\nvar queue = MessageQueue.open(31337);\nqueue.push('Hello from B', { type: 200 });\nqueue.pop({ type: 100 }, (err, data) => {\n  // data == 'Hello from A'\n});\n```\n\n_Note: the 'data' event does not support message types yet, so you'll have to\nconstruct your own receiving loop. See the example below._\n\n```javascript\nvar queue = MessageQueue.open(31337);\n\nfunction popMessage() {\n  queue.pop((err, data) => {\n    if (err) throw err;\n\n    // Do something with the data\n    console.log(data.toString());\n\n    setImmediate(popMessage);\n    // Note: pop() only calls back when a message is available in the queue. The\n    // call stays blocked until a process pushes a message to the queue, so this\n    // does not consume excess resources.\n  });\n}\n\npopMessage();\n```\n\n### Access to native bindings\nUsing these is not recommended, but you're more than welcome to mess around with them.\n```javascript\n// Simplified JS bindings to the C syscalls.\n// Blocking calls use a callback as the last parameter.\n//\n// msgget, msgsnd, msgrcv, msgctl\n// See: http://linux.die.net/man/7/svipc\nvar svmq = require('svmq');\nvar msg = svmq.msg;\nvar MSGMAX = svmq.MSGMAX; // max message data size (hardcoded)\n\n// Open/create a queue with key 31337 and flags 950 (0666 | IPC_CREAT)\n// Throws an error on failure\nvar id = msg.get(31337, 950);\n\n// Push a string to the queue\nmsg.snd(id, new Buffer('TestString1234'), 1, (err) => {\n  if (err) throw err;\n});\n\n// Pop message off queue with max buffer size MSGMAX\nvar bufferSize = MSGMAX;\nmsg.rcv(id, MSGMAX, 0, 0, (err, data) => {\n  if (err) throw err;\n  console.log('Received data: ' + data.toString());\n});\n\n// Close/delete a queue\n// Throws an error on failure\nmsg.ctl(id, IPC_RMID);\n","created":"2016-03-23T21:30:26.577Z","modified":"2017-05-15T15:10:17.053Z","lastPublisher":{"name":"jhead","email":"justindhead@gmail.com"},"owners":[{"name":"jhead","email":"justindhead@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"svmq","_nodeVersion":"7.9.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/svmq-1.0.6.tgz_1494861015283_0.97710549691692"},"_npmUser":{"name":"jhead","email":"justindhead@gmail.com"},"_npmVersion":"4.2.0","_rev":"5-00259ae422e3202d49ac758be0ab380c","_shasum":"1643744eb5d286c50c0f4eac0936e843335e2da6","author":{"name":"Justin Head","email":"jhead@jxh.io"},"bugs":{"url":"https://github.com/jhead/node-svmq/issues"},"directories":{},"dist-tags":{"latest":"1.0.6"},"dist":{"shasum":"1643744eb5d286c50c0f4eac0936e843335e2da6","tarball":"https://registry.npmjs.org/svmq/-/svmq-1.0.6.tgz"},"maintainers":[{"name":"jhead","email":"justindhead@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-15T15:10:17.053Z","created":"2016-03-23T21:30:26.577Z","1.0.0":"2016-03-23T21:30:26.577Z","1.0.1":"2016-03-23T21:43:05.100Z","1.0.2":"2016-03-23T22:24:01.643Z","1.0.3":"2016-11-19T20:18:27.007Z","1.0.4":"2016-12-16T18:09:36.056Z","1.0.5":"2017-05-04T15:49:17.151Z","1.0.6":"2017-05-15T15:10:17.053Z"}}}