{"name":"murmurhash-native","description":"MurmurHash (32,64,128)bit native bindings for nodejs","keywords":["murmurhash","murmurhash3","murmurhash128","murmurhash32","murmurhash2","murmurhash64","progressive hash","PMurHash","PMurHash128","hash"],"version":"3.2.1","license":"MIT","homepage":"http://github.com/royaltm/node-murmurhash-native","repository":"https://github.com/royaltm/node-murmurhash-native","scripts":{"install":"node-pre-gyp install --fallback-to-build","test":"tap -C -Rclassic ./test/test*.js","test-gc":"tap -Rspec ./test/persistent/test.gc.*.js -gc","bench":"sh bench/bench.all.sh","rebuild":"node-pre-gyp rebuild"},"binary":{"module_name":"murmurhash","module_path":"./lib/{configuration}/","host":"https://github.com/royaltm/node-murmurhash-native/releases/download/","remote_path":"v{version}"},"main":"index.js","engines":{"node":">=0.10.0"},"dependencies":{"nan":"^2.6.2","node-pre-gyp":"^0.6.34"},"devDependencies":{"bluebird":"^3.5.0","commander":"^2.9.0","murmurhash3js":"^3.0.1","node-pre-gyp-github":"^1.3.1","tap":"^5.8.0"},"gitHead":"da3d63962a8abed6fe52b5092c56ec7f326de354","versions":[{"number":"0.1.0","date":"2015-01-20T01:04:17.151Z"},{"number":"0.1.1","date":"2015-01-22T16:59:27.518Z"},{"number":"0.2.0","date":"2015-01-23T00:47:51.032Z"},{"number":"0.2.1","date":"2015-01-24T01:25:44.356Z"},{"number":"0.3.0","date":"2015-01-31T08:26:19.410Z"},{"number":"0.3.1","date":"2015-06-17T15:41:34.337Z"},{"number":"1.0.0","date":"2015-09-14T21:45:33.243Z"},{"number":"1.0.1","date":"2015-09-20T20:23:12.783Z"},{"number":"1.0.2","date":"2016-05-12T15:25:56.740Z"},{"number":"2.0.0","date":"2016-05-13T06:51:25.706Z"},{"number":"2.1.0","date":"2016-05-14T12:59:34.592Z"},{"number":"3.0.0","date":"2016-05-20T06:19:48.842Z"},{"number":"3.0.1","date":"2016-05-21T07:11:52.052Z"},{"number":"3.0.2","date":"2016-05-21T07:36:23.083Z"},{"number":"3.0.3","date":"2016-05-22T02:44:54.514Z"},{"number":"3.0.4","date":"2016-05-23T02:08:47.175Z"},{"number":"3.1.0","date":"2016-05-26T04:05:11.396Z"},{"number":"3.1.1","date":"2016-06-03T18:21:30.641Z"},{"number":"3.2.0","date":"2016-06-05T09:57:47.683Z"},{"number":"3.2.1","date":"2017-05-22T21:34:00.207Z"}],"readme":"MurmurHash bindings for node\n============================\n\nThis library provides Austin Appleby's non-cryptographic \"MurmurHash\" hashing algorithm functions in a few different flavours.\n\n[![NPM][NPM img]][NPM Status]\n[![Node][Node img]][NPM Status]\n[![Travis][Travis img]][Travis Status]\n[![AppVeyor][AppVeyor img]][AppVeyor Status]\n[![bitHound][bitHound img]][bitHound Status]\n[![License][License img]][License Link]\n\nKey features:\n\n* blocking and asynchronous api interfaces\n* additional MurmurHash3 32 and 128 bit progressive implementations based on [PMurHash][PMurHash]\n* stream wrapper for progressive hasher with [crypto.Hash-like][crypto.Hash] bi-api interface\n* serializable state of the progressive hasher\n* BE or LE byte order variants of hashes\n* promise wrapper\n* prebuilt binaries for most standard system configurations\n\nInstall:\n--------\n\nThere are prebuilt [binaries][releases] available for painless installation on\nsome Linuxes (x64), OS-X (x64) and Windows (x64 and x86) thanks to [node-pre-gyp][node-pre-gyp] and [node-pre-gyp-github][node-pre-gyp-github].\n\n```\nnpm install murmurhash-native\n```\n\nIf the prebuilt release is not available for your system or nodejs version,\nthe compilation from source will kick-in. For more information on building from\nsource please consult [this page][node-gyp-install].\n\nIf for some reason (e.g. an incompatible GLIBC) you might want to force building from source, type:\n\n```\nnpm i murmurhash-native --build-from-source\n```\n\nTo reinstall prebuilt binary (e.g. after switching between major nodejs versions):\n\n```\nnpm rebuild --update-binary\n```\n\nMake a hash:\n------------\n\n```js\nvar murmurHash = require('murmurhash-native').murmurHash\n\nmurmurHash( 'hash me!' ) // 2061152078\nmurmurHash( new Buffer('hash me!') ) // 2061152078\nmurmurHash( 'hash me!', 0x12345789 ) // 1908692277\nmurmurHash( 'hash me!', 0x12345789, 'buffer' ) // <Buffer 71 c4 55 35>\nmurmurHash( 'hash me!', 0x12345789, 'hex' ) // '71c45535'\nvar buf = new Buffer('hash me!____')\nmurmurHash( buf.slice(0,8), 0x12345789, buf, 8 )\n// <Buffer 68 61 73 68 20 6d 65 21 71 c4 55 35>\n\nvar murmurHash128x64 = require('murmurhash-native').murmurHash128x64\nmurmurHash128x64( 'hash me!' ) // 'c43668294e89db0ba5772846e5804467'\n\nvar murmurHash128x86 = require('murmurhash-native').murmurHash128x86\nmurmurHash128x86( 'hash me!' ) // 'c7009299985a5627a9280372a9280372'\n\n// asynchronous\n\nmurmurHash( 'hash me!', function(err, hash) { assert.equal(hash, 2061152078) });\n\n// output byte order (default is BE)\n\nvar murmurHashLE = require('murmurhash-native').LE.murmurHash;\nmurmurHashLE( 'hash me!', 0x12345789, 'buffer' ) // <Buffer 35 55 c4 71>\nmurmurHashLE( 'hash me!', 0x12345789, 'hex' ) // '3555c471'\n```\n\nThese functions are awaiting your command:\n\n* `murmurHash`       - MurmurHash v3 32bit\n* `murmurHash32`     - (an alias of murmurHash)\n* `murmurHash128`    - MurmurHash v3 128bit platform (x64 or x86) optimized \n* `murmurHash128x64` - MurmurHash v3 128bit x64 optimized\n* `murmurHash128x86` - MurmurHash v3 128bit x86 optimized\n* `murmurHash64`     - MurmurHash v2 64bit platform (x64 or x86) optimized\n* `murmurHash64x64`  - MurmurHash v2 64bit x64 optimized\n* `murmurHash64x86`  - MurmurHash v2 64bit x86 optimized\n\nand they share the following signature:\n\n```js\nmurmurHash(data[, callback])\nmurmurHash(data, output[, offset[, length]][, callback])\nmurmurHash(data{String}, encoding|output_type[, callback])\nmurmurHash(data, output_type[, seed][, callback])\nmurmurHash(data, seed[, output[, offset[, length]]][, callback])\nmurmurHash(data, seed[, output_type][, callback])\nmurmurHash(data, encoding, output_type[, callback])\nmurmurHash(data{String}, encoding, output[, offset[, length]][, callback])\nmurmurHash(data{String}, encoding, seed[, output[, offset[, length]]][, callback])\nmurmurHash(data{String}, encoding, seed[, output_type][, callback])\n```\n\n* `@param` `{string|Buffer}` `data` - a byte-string to calculate hash from\n* `@param` `{string}` `encoding` - data string encoding, should be:\n    \"utf8\", \"ucs2\", \"ascii\", \"hex\", \"base64\" or \"binary\";\n    \"binary\" by default\n* `@param` `{Uint32}` `seed` - murmur hash seed, 0 by default\n* `@param` `{Buffer}` `output` - a Buffer object to write hash bytes to;\n    the same object will be returned\n* `@param` `{number}` `offset` - start writing into output at offset byte;\n    negative offset starts from the end of the output buffer\n* `@param` `{number}` `length` - a number of bytes to write from calculated hash;\n    negative length starts from the end of the hash;\n    if absolute value of length is larger than the size of calculated\n    hash, bytes are written only up to the hash size\n* `@param` `{string}` `output_type` - a string indicating return type:\n    - \"number\" - (default) for murmurHash32 an unsigned 32-bit integer,\n               other hashes - hexadecimal string\n    - \"hex\"    - hexadecimal string\n    - \"base64\" - base64 string\n    - \"binary\" - binary string\n    - \"buffer\" - a new Buffer object;\n* `@param` `{Function}` `callback` - optional callback(err, result)\n    if provided the hash will be calculated asynchronously using libuv\n    worker queue, the return value in this instance will be `undefined`\n    and the result will be provided to the callback function;\n    Be carefull as reading and writing by multiple threads to the same\n    memory may render undetermined results\n\n* `@return` `{number|Buffer|String|undefined}`\n\nThe order of bytes written to a Buffer or encoded string depends on\nfunction's endianness.\n\n`data` and `output` arguments might reference the same Buffer object\nor buffers referencing the same memory (views).\n\n\nThere are additional namespaces, each for different variant of function endianness:\n\n* `BE` - big-endian (most significant byte first or network byte order)\n* `LE` - little-endian (least significant byte first)\n* `platform` - compatible with `os.endianness()`\n\nFunctions in the root namespace are big-endian.\n\n\nStreaming and incremental api\n-----------------------------\n\nThe dual-api interface for progressive MurmurHash3 is available as a submodule:\n\n```js\nvar murmur = require('murmurhash-native/stream');\n````\n\nIncremental (a.k.a. progressive) api\n\n```js\nvar hash = murmur.createHash('murmurhash128x86');\nhash.update('hash').digest('hex'); // '0d872bbf2cd001722cd001722cd00172'\nhash.update(' me!').digest('hex'); // 'c7009299985a5627a9280372a9280372'\n\nvar hash = murmur.createHash('murmurhash128x86', {endianness: 'LE'});\nhash.update('hash').digest('hex'); // 'bf2b870d7201d02c7201d02c7201d02c'\nhash.update(' me!').digest('hex'); // '999200c727565a98720328a9720328a9'\n```\n\nStreaming api\n\n```js\nvar hash = murmur.createHash('murmurhash32', {seed: 123, encoding: 'hex', endianness: 'platform'});\nfs.createReadStream('README.md').pipe(hash).pipe(process.stdout);\n```\n\n### Serializable state\n\nThe incremental MurmurHash utilities may be serialized and later deserialized.\nOne may also copy a hasher's internal state onto another.\nThis way the hasher utility can be re-used to calculate a hash of some data\nwith already known prefix.\n\n```js\nvar hash = murmur.createHash('murmurhash128x64').update('hash');\nhash.digest('hex');                   // '4ab2e1e022f63e2e9add75dfcea2dede'\n\nvar backup = murmur.createHash(hash); // create a copy of a hash with the same internal state\nbackup.update(' me!').digest('hex');  // 'c43668294e89db0ba5772846e5804467'\n\nhash.copy(backup)                     // copy hash's state onto the backup\n    .update(' me!').digest('hex');    // 'c43668294e89db0ba5772846e5804467'\n\nvar serial = hash.serialize();        // serialize hash's state\nserial == 'AAAAAAAAAAAAAAAAAAAAAGhzYWgAAAAAAAAAAAAAAFQAAAAEtd3X';\n                                      // restore backup from serialized state\nvar backup = murmur.createHash('murmurhash128x64', {seed: serial});\nbackup.update(' me!').digest('hex');  // 'c43668294e89db0ba5772846e5804467'\n                                      // finally\nhash.update(' me!').digest('hex');    // 'c43668294e89db0ba5772846e5804467'\n```\n\nThe dual-api with streaming is a javascript wrapper over the native module.\nThe native incremental module is directly available at `murmurhash-native/incremental`.\n\nSee [hasher.cc](src/incremental/hasher.cc) for full api description\n(and there's some crazy templating going on there...).\n\n\nPromises\n--------\n\nThe native murmurHash functions run asynchronously if the last argument is a callback.\nThere is however a promisify wrapper:\n\n```js\nvar mm = require('murmurhash-native/promisify')();\nmm.murmurHash32Async( 'hash me!', 0x12345789 )\n      .then(hash => { assert.equal(hash, 1908692277) });\n// Promise { <pending> }\n```\n\nYou may provide your own promise constructor:\n\n```js\nvar bluebird = require('bluebird');\nvar mm = require('murmurhash-native/promisify')(bluebird);\nmm.murmurHash32Async( 'hash me!', 0x12345789 )\n      .then(hash => { assert.equal(hash, 1908692277) });\n// Promise {\n//   _bitField: 0,\n//   _fulfillmentHandler0: undefined,\n//   _rejectionHandler0: undefined,\n//   _promise0: undefined,\n//   _receiver0: undefined }\n```\n\n\nSignificant changes in 3.x\n--------------------------\n\nThe most important change is full platform indifference of rendered output.\nIn 2.x output hash as binary data provided via buffer was endian sensitive.\nStarting with 3.x the data written to output buffer is always MSB (byte) first.\n\nThe \"hex\", \"base64\" and \"binary\" output types has been (re)added, but this time\nwith a sane definition.\n\nSo in this version the following is true on all platforms:\n\n```js\nassert.strictEqual(murmurHash('foo', 'buffer').toString('hex'), murmurHash('foo', 0, 'hex'));\nassert.strictEqual(murmurHash('foo', 'buffer').toString('base64'), murmurHash('foo', 0, 'base64'));\n```\n\n\nSignificant changes in 2.x\n--------------------------\n\nThe 1.x output types were very confusing. E.g. \"hex\" was just an equivalent of\n`murmurHash(data, \"buffer\").toString(\"hex\")` which rendered incorrect hexadecimal\nnumber. So all the string output type encodings: \"utf8\", \"ucs2\", \"ascii\", \"hex\",\n\"base64\" and \"binary\" were completely removed in 2.0 as being simply useless.\n\nThe \"number\" output type has been adapted to all variants in a way more compatible\nwith other murmurhash [implementations][murmurhash3js]. For 32bit hash the return\nvalue is an unsigned 32-bit integer (it was signed integer in 1.x) and for other\nhashes it's a hexadecimal number.\n\nThe \"buffer\" output type wasn't modified except that the default output is now\n\"number\" for all of the hashes.\n\nAdditionally when passing unsupported value to `encoding` or `output_type`\nargument the function throws `TypeError`.\n\nAnother breaking change is for the BE platforms. Starting with 2.0 endian-ness\nis recognized, so hashes should be consistent regardless of the cpu type.\n\nSince v2.1 the callback argument was introduced.\n\n\nBugs, limitations, caveats\n--------------------------\nWhen working with Buffers, input data is not being copied, however for strings\nthis is unavoidable. For strings with byte-length < 1kB the static buffer is\nprovided to avoid mem-allocs.\n\nThe hash functions optimized for x64 and x86 produce different results.\n\nTested on Linux (x64), OS X (x64) and MS Windows (x64 and x86).\n\nTested with nodejs: v0.10, v0.11, v0.12, v4, v5, v6 and v7.\n\n[Travis Status]: https://travis-ci.org/royaltm/node-murmurhash-native\n[Travis img]: https://img.shields.io/travis/royaltm/node-murmurhash-native.svg?maxAge=86400&style=flat-square&label=unix\n[AppVeyor img]: https://img.shields.io/appveyor/ci/royaltm/node-murmurhash-native.svg?maxAge=86400&style=flat-square&label=windows\n[AppVeyor Status]: https://ci.appveyor.com/project/royaltm/node-murmurhash-native\n[NPM img]: https://img.shields.io/npm/v/murmurhash-native.svg?maxAge=86400&style=flat-square\n[NPM Status]: https://www.npmjs.com/package/murmurhash-native\n[Node img]: https://img.shields.io/node/v/murmurhash-native.svg?maxAge=2592000&style=flat-square\n[License img]: https://img.shields.io/npm/l/murmurhash-native.svg?maxAge=2592000&style=flat-square\n[License Link]: https://opensource.org/licenses/MIT\n[bitHound img]: https://img.shields.io/bithound/dependencies/github/royaltm/node-murmurhash-native.svg?maxAge=86400&style=flat-square\n[bitHound Status]: https://www.bithound.io/github/royaltm/node-murmurhash-native\n[murmurhash3js]: https://www.npmjs.com/package/murmurhash3js\n[PMurHash]: https://github.com/aappleby/smhasher/blob/master/src/PMurHash.c\n[crypto.Hash]: https://nodejs.org/dist/latest-v6.x/docs/api/crypto.html#crypto_class_hash\n[node-pre-gyp]: https://github.com/mapbox/node-pre-gyp\n[node-pre-gyp-github]: https://github.com/bchr02/node-pre-gyp-github\n[releases]: https://github.com/royaltm/node-murmurhash-native/releases\n[node-gyp-install]: https://github.com/nodejs/node-gyp#installation","starsCount":3,"created":"2015-01-20T01:04:17.151Z","modified":"2017-07-29T23:19:28.553Z","lastPublisher":{"name":"royaltm","email":"royal@yeondir.com"},"owners":[{"name":"royaltm","email":"royal@yeondir.com"}],"other":{"_attachments":{},"_from":".","_id":"murmurhash-native","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/murmurhash-native-3.2.1.tgz_1495488839070_0.617600996280089"},"_npmUser":{"name":"royaltm","email":"royal@yeondir.com"},"_npmVersion":"4.2.0","_rev":"5-87d4f8e994a5b9e72a8d5026f2b8a460","_shasum":"158b190d613a2c44067a1ec30ea96e841d9b0085","author":{"name":"Rafał Michalski","email":"royal@yeondir.com"},"bugs":{"url":"https://github.com/royaltm/node-murmurhash-native/issues"},"contributors":[],"directories":{},"dist-tags":{"latest":"3.2.1"},"dist":{"shasum":"158b190d613a2c44067a1ec30ea96e841d9b0085","tarball":"https://registry.npmjs.org/murmurhash-native/-/murmurhash-native-3.2.1.tgz"},"maintainers":[{"name":"royaltm","email":"royal@yeondir.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-29T23:19:28.553Z","created":"2015-01-20T01:04:17.151Z","0.1.0":"2015-01-20T01:04:17.151Z","0.1.1":"2015-01-22T16:59:27.518Z","0.2.0":"2015-01-23T00:47:51.032Z","0.2.1":"2015-01-24T01:25:44.356Z","0.3.0":"2015-01-31T08:26:19.410Z","0.3.1":"2015-06-17T15:41:34.337Z","1.0.0":"2015-09-14T21:45:33.243Z","1.0.1":"2015-09-20T20:23:12.783Z","1.0.2":"2016-05-12T15:25:56.740Z","2.0.0":"2016-05-13T06:51:25.706Z","2.1.0":"2016-05-14T12:59:34.592Z","3.0.0":"2016-05-20T06:19:48.842Z","3.0.1":"2016-05-21T07:11:52.052Z","3.0.2":"2016-05-21T07:36:23.083Z","3.0.3":"2016-05-22T02:44:54.514Z","3.0.4":"2016-05-23T02:08:47.175Z","3.1.0":"2016-05-26T04:05:11.396Z","3.1.1":"2016-06-03T18:21:30.641Z","3.2.0":"2016-06-05T09:57:47.683Z","3.2.1":"2017-05-22T21:34:00.207Z"},"users":{"royxun":true,"kkk123321":true,"shanewholloway":true}}}