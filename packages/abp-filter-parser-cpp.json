{"name":"abp-filter-parser-cpp","main":"./build/Release/abp-filter-parser-cpp","version":"1.2.13","description":"Ad block engine used in the Brave browser for ABP filter syntax based lists like EasyList.","dependencies":{"bloom-filter-cpp":"1.1.x","cppunitlite":"^1.0.0","hashset-cpp":"1.0.x","nan":"^2.2.1"},"devDependencies":{"commander":"^2.9.0","node-gyp":"^3.4.0","nsp":"^2.3.0","pre-commit":"^1.1.2","s3":"^4.4.0","standard":"^8.4.0"},"scripts":{"test":"make test","build":"make","sample":"make sample","perf":"make perf","preinstall":"npm install bloom-filter-cpp && npm install hashset-cpp","install":"node-gyp rebuild","lint":"npm run lint-cpp && npm run lint-js","lint-cpp":"./scripts/cpplint.py","lint-js":"standard","checks":"npm run check-security","check-security":"nsp check","data-files":"node scripts/generateDataFiles.js","upload":"node scripts/uploadDataFiles.js"},"repository":"https://github.com/bbondy/abp-filter-parser-cpp","license":"MPL-2.0","gypfile":true,"homepage":"https://github.com/bbondy/abp-filter-parser-cpp#readme","pre-commit":["lint-cpp","lint-js"],"gitHead":"aed099cc7f3a9474560a31e1cac857107207547e","versions":[{"number":"0.1.0","date":"2015-10-23T01:04:32.938Z"},{"number":"0.1.1","date":"2015-10-26T19:11:31.932Z"},{"number":"0.1.2","date":"2015-10-26T20:14:10.305Z"},{"number":"0.1.3","date":"2015-10-26T20:20:26.032Z"},{"number":"0.1.6","date":"2015-10-28T03:04:29.691Z"},{"number":"0.1.7","date":"2015-10-30T20:49:47.318Z"},{"number":"0.1.8","date":"2015-10-31T03:50:13.275Z"},{"number":"0.1.9","date":"2015-11-01T02:19:01.822Z"},{"number":"0.1.10","date":"2015-11-01T02:26:24.518Z"},{"number":"0.1.11","date":"2015-11-03T21:32:52.091Z"},{"number":"0.1.13","date":"2015-11-17T04:04:48.753Z"},{"number":"0.1.14","date":"2015-11-18T08:47:51.298Z"},{"number":"0.1.15","date":"2015-11-19T17:09:28.118Z"},{"number":"0.1.16","date":"2015-11-19T17:57:41.172Z"},{"number":"0.1.18","date":"2015-11-19T21:23:46.650Z"},{"number":"0.2.0","date":"2015-11-19T23:32:23.673Z"},{"number":"0.2.1","date":"2015-11-20T22:01:14.639Z"},{"number":"0.2.2","date":"2015-11-23T03:35:06.159Z"},{"number":"0.2.3","date":"2015-11-23T03:42:51.007Z"},{"number":"0.2.4","date":"2015-11-23T03:54:21.461Z"},{"number":"0.2.5","date":"2015-11-23T04:41:29.106Z"},{"number":"0.2.7","date":"2015-11-23T05:49:10.912Z"},{"number":"0.2.8","date":"2015-11-23T05:53:39.043Z"},{"number":"0.2.9","date":"2015-11-24T18:01:45.475Z"},{"number":"0.2.10","date":"2015-11-30T07:14:34.133Z"},{"number":"0.2.11","date":"2015-11-30T07:23:27.487Z"},{"number":"0.2.13","date":"2015-12-13T01:36:34.931Z"},{"number":"0.2.14","date":"2015-12-13T01:52:23.976Z"},{"number":"0.2.15","date":"2015-12-13T01:57:04.965Z"},{"number":"0.2.16","date":"2015-12-13T02:02:58.628Z"},{"number":"0.3.0","date":"2015-12-17T15:19:27.560Z"},{"number":"0.3.1","date":"2015-12-17T20:02:56.512Z"},{"number":"1.0.1","date":"2016-01-03T00:06:35.868Z"},{"number":"1.0.2","date":"2016-01-03T05:20:55.373Z"},{"number":"1.0.3","date":"2016-01-04T14:54:18.102Z"},{"number":"1.0.5","date":"2016-01-04T17:08:49.629Z"},{"number":"1.0.6","date":"2016-01-04T17:36:35.957Z"},{"number":"1.0.7","date":"2016-01-04T17:46:16.085Z"},{"number":"1.0.8","date":"2016-01-04T18:10:45.616Z"},{"number":"1.0.9","date":"2016-01-04T18:20:32.970Z"},{"number":"1.0.10","date":"2016-01-04T18:24:26.454Z"},{"number":"1.0.11","date":"2016-01-04T18:38:24.273Z"},{"number":"1.0.12","date":"2016-01-04T18:45:53.705Z"},{"number":"1.0.13","date":"2016-01-06T02:44:43.183Z"},{"number":"1.0.15","date":"2016-01-06T21:29:13.554Z"},{"number":"1.0.16","date":"2016-01-08T12:16:07.725Z"},{"number":"1.0.17","date":"2016-01-12T17:00:32.125Z"},{"number":"1.0.18","date":"2016-01-12T17:07:47.513Z"},{"number":"1.0.19","date":"2016-01-12T17:13:51.999Z"},{"number":"1.0.20","date":"2016-01-12T17:19:46.780Z"},{"number":"1.0.21","date":"2016-01-12T19:30:44.991Z"},{"number":"1.0.22","date":"2016-01-12T20:20:36.461Z"},{"number":"1.1.0","date":"2016-01-25T03:58:19.762Z"},{"number":"1.1.1","date":"2016-01-25T04:03:38.436Z"},{"number":"1.1.2","date":"2016-01-25T17:32:31.329Z"},{"number":"1.1.4","date":"2016-01-25T18:16:25.100Z"},{"number":"1.1.5","date":"2016-01-26T17:08:58.226Z"},{"number":"1.1.6","date":"2016-02-10T04:54:16.107Z"},{"number":"1.1.7","date":"2016-02-10T05:04:52.819Z"},{"number":"1.1.8","date":"2016-02-29T15:31:05.174Z"},{"number":"1.1.9","date":"2016-03-31T15:10:40.118Z"},{"number":"1.1.10","date":"2016-03-31T15:27:04.377Z"},{"number":"1.1.12","date":"2016-04-07T01:23:09.189Z"},{"number":"1.1.13","date":"2016-06-30T03:41:12.780Z"},{"number":"1.1.14","date":"2016-07-01T01:59:38.197Z"},{"number":"1.1.15","date":"2016-07-26T22:23:27.853Z"},{"number":"1.1.16","date":"2016-10-01T13:21:23.826Z"},{"number":"1.2.0","date":"2016-10-01T13:23:33.155Z"},{"number":"1.2.2","date":"2016-10-03T20:11:19.202Z"},{"number":"1.2.3","date":"2016-10-03T20:43:52.622Z"},{"number":"1.2.4","date":"2016-10-04T03:49:10.969Z"},{"number":"1.2.5","date":"2016-10-13T22:57:26.065Z"},{"number":"1.2.6","date":"2016-10-14T00:53:35.289Z"},{"number":"1.2.7","date":"2016-10-15T22:16:17.292Z"},{"number":"1.2.8","date":"2016-10-19T06:22:24.885Z"},{"number":"1.2.9","date":"2016-10-31T02:05:44.193Z"},{"number":"1.2.10","date":"2016-10-31T15:52:51.671Z"},{"number":"1.2.11","date":"2016-12-20T04:11:10.892Z"},{"number":"1.2.12","date":"2016-12-29T01:32:33.539Z"},{"number":"1.2.13","date":"2016-12-29T21:59:24.242Z"}],"readme":"[![Build Status](https://travis-ci.org/bbondy/abp-filter-parser-cpp.svg?branch=master)](https://travis-ci.org/bbondy/abp-filter-parser-cpp)\n\n# abp-filter-parser-cpp\n\nNative node module, and C++ library for Adblock Plus filter parsing for lists like EasyList.\n\nThis is a straight port of the prototype done in JS here:\nhttps://github.com/bbondy/abp-filter-parser\n\nIt uses a bloom filter and Rabin-Karp algorithm to be super fast.\n\n## To include abp-filter-parser-cpp in your project:\n\n```\nnpm install --save abp-filter-parser-cpp\n```\n\n## JS Sample\n\n```javascript\nvar ABPFilterParser = ABPFilterParserLib.ABPFilterParser\nvar FilterOptions = ABPFilterParserLib.FilterOptions\n\nvar parser = new ABPFilterParser()\nparser.parse('/public/ad/*$domain=slashdot.org')\nparser.parse('/public/ad3/*$script')\nvar b1 = parser.matches('http://www.brianbondy.com/public/ad/some-ad', FilterOptions.script, 'slashdot.org')\nvar b2 = parser.matches('http://www.brianbondy.com/public/ad/some-ad', FilterOptions.script, 'digg.com')\nconsole.log('public/ad/* should match b1.  Actual: ', b1)\nconsole.log('public/ad/* should not match b2.  Actual: ', b2)\n```\n\n## C++ Sample\n\n```c++\n#include \"ABPFilterParser.h\"\n#include <algorithm>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring getFileContents(const char *filename)\n{\n  ifstream in(filename, ios::in);\n  if (in) {\n    ostringstream contents;\n    contents << in.rdbuf();\n    in.close();\n    return(contents.str());\n  }\n  throw(errno);\n}\n\nvoid writeFile(const char *filename, const char *buffer, int length)\n{\n  ofstream outFile(filename, ios::out | ios::binary);\n  if (outFile) {\n    outFile.write(buffer, length);\n    outFile.close();\n    return;\n  }\n  throw(errno);\n}\n\n\nint main(int argc, char**argv) {\n  std::string &&easyListTxt = getFileContents(\"./test/data/easylist.txt\");\n  const char *urlsToCheck[] = {\n    // ||pagead2.googlesyndication.com^$~object-subrequest\n    \"http://pagead2.googlesyndication.com/pagead/show_ads.js\",\n    // Should be blocked by: ||googlesyndication.com/safeframe/$third-party\n    \"http://tpc.googlesyndication.com/safeframe/1-0-2/html/container.html\",\n    // Should be blocked by: ||googletagservices.com/tag/js/gpt_$third-party\n    \"http://www.googletagservices.com/tag/js/gpt_mobile.js\",\n    // Shouldn't be blocked\n    \"http://www.brianbondy.com\"\n  };\n\n  // This is the site who's URLs are being checked, not the domain of the URL being checked.\n  const char *currentPageDomain = \"slashdot.org\";\n\n  // Parse easylist\n  ABPFilterParser parser;\n  parser.parse(easyListTxt.c_str());\n\n  // Do the checks\n  std::for_each(urlsToCheck, urlsToCheck + sizeof(urlsToCheck) / sizeof(urlsToCheck[0]), [&parser, currentPageDomain](std::string const &urlToCheck) {\n    if (parser.matches(urlToCheck.c_str(), FONoFilterOption, currentPageDomain)) {\n      cout << urlToCheck << \": You should block this URL!\" << endl;\n    } else {\n      cout << urlToCheck << \": You should NOT block this URL!\" << endl;\n    }\n  });\n\n  int size;\n  // This buffer is allocate on the heap, you must call delete[] when you're done using it.\n  char *buffer = parser.serialize(size);\n  writeFile(\"./ABPFilterParserData.dat\", buffer, size);\n\n  ABPFilterParser parser2;\n  // Deserialize uses the buffer directly for subsequent matches, do not free until all matches are done.\n  parser2.deserialize(buffer);\n  // Prints the same as parser.matches would\n  std::for_each(urlsToCheck, urlsToCheck + sizeof(urlsToCheck) / sizeof(urlsToCheck[0]), [&parser2, currentPageDomain](std::string const &urlToCheck) {\n    if (parser2.matches(urlToCheck.c_str(), FONoFilterOption, currentPageDomain)) {\n      cout << urlToCheck << \": You should block this URL!\" << endl;\n    } else {\n      cout << urlToCheck << \": You should NOT block this URL!\" << endl;\n    }\n  });\n  delete[] buffer;\n  return 0;\n}\n```\n\n## Developing abp-filter-parser-cpp\n\n1. Clone the git repository from GitHub:\n\n    git clone --recursive abp-filter-parser-cpp\n\n2. Open the working directory:\n\n    cd abp-filter-parser-cpp\n\n3. Install the Node (v5+) dependencies:\n\n    npm install\n\n\n## Make the node module\n\n```\nmake\n```\n\n## Running sample (which also generates a .dat file for deserializing)\n\n```\nmake sample\n```\n\n## Running tests\n\n```\nmake test\n```\n\n## Clearing build files\n```\nmake clean\n```\n","created":"2015-10-23T01:04:32.938Z","modified":"2016-12-29T21:59:24.242Z","lastPublisher":{"name":"brianbondy","email":"netzen@gmail.com"},"owners":[{"name":"brianbondy","email":"netzen@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"abp-filter-parser-cpp","_nodeVersion":"6.3.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/abp-filter-parser-cpp-1.2.13.tgz_1483048763937_0.010177894262596965"},"_npmUser":{"name":"brianbondy","email":"netzen@gmail.com"},"_npmVersion":"3.10.3","_rev":"6-47d2323c3e35d1c358d6d7b0392eebce","_shasum":"6846c34a60191608755d345271d059ee32d1be13","author":{"name":"Brian R. Bondy","email":"netzen@gmail.com","url":"http://www.brianbondy.com"},"bugs":{"url":"https://github.com/bbondy/abp-filter-parser-cpp/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"1.2.13"},"dist":{"shasum":"6846c34a60191608755d345271d059ee32d1be13","tarball":"http://registry.npmjs.org/abp-filter-parser-cpp/-/abp-filter-parser-cpp-1.2.13.tgz"},"maintainers":[{"name":"brianbondy","email":"netzen@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-12-29T21:59:24.242Z","created":"2015-10-23T01:04:32.938Z","0.1.0":"2015-10-23T01:04:32.938Z","0.1.1":"2015-10-26T19:11:31.932Z","0.1.2":"2015-10-26T20:14:10.305Z","0.1.3":"2015-10-26T20:20:26.032Z","0.1.6":"2015-10-28T03:04:29.691Z","0.1.7":"2015-10-30T20:49:47.318Z","0.1.8":"2015-10-31T03:50:13.275Z","0.1.9":"2015-11-01T02:19:01.822Z","0.1.10":"2015-11-01T02:26:24.518Z","0.1.11":"2015-11-03T21:32:52.091Z","0.1.13":"2015-11-17T04:04:48.753Z","0.1.14":"2015-11-18T08:47:51.298Z","0.1.15":"2015-11-19T17:09:28.118Z","0.1.16":"2015-11-19T17:57:41.172Z","0.1.18":"2015-11-19T21:23:46.650Z","0.2.0":"2015-11-19T23:32:23.673Z","0.2.1":"2015-11-20T22:01:14.639Z","0.2.2":"2015-11-23T03:35:06.159Z","0.2.3":"2015-11-23T03:42:51.007Z","0.2.4":"2015-11-23T03:54:21.461Z","0.2.5":"2015-11-23T04:41:29.106Z","0.2.7":"2015-11-23T05:49:10.912Z","0.2.8":"2015-11-23T05:53:39.043Z","0.2.9":"2015-11-24T18:01:45.475Z","0.2.10":"2015-11-30T07:14:34.133Z","0.2.11":"2015-11-30T07:23:27.487Z","0.2.13":"2015-12-13T01:36:34.931Z","0.2.14":"2015-12-13T01:52:23.976Z","0.2.15":"2015-12-13T01:57:04.965Z","0.2.16":"2015-12-13T02:02:58.628Z","0.3.0":"2015-12-17T15:19:27.560Z","0.3.1":"2015-12-17T20:02:56.512Z","1.0.1":"2016-01-03T00:06:35.868Z","1.0.2":"2016-01-03T05:20:55.373Z","1.0.3":"2016-01-04T14:54:18.102Z","1.0.5":"2016-01-04T17:08:49.629Z","1.0.6":"2016-01-04T17:36:35.957Z","1.0.7":"2016-01-04T17:46:16.085Z","1.0.8":"2016-01-04T18:10:45.616Z","1.0.9":"2016-01-04T18:20:32.970Z","1.0.10":"2016-01-04T18:24:26.454Z","1.0.11":"2016-01-04T18:38:24.273Z","1.0.12":"2016-01-04T18:45:53.705Z","1.0.13":"2016-01-06T02:44:43.183Z","1.0.15":"2016-01-06T21:29:13.554Z","1.0.16":"2016-01-08T12:16:07.725Z","1.0.17":"2016-01-12T17:00:32.125Z","1.0.18":"2016-01-12T17:07:47.513Z","1.0.19":"2016-01-12T17:13:51.999Z","1.0.20":"2016-01-12T17:19:46.780Z","1.0.21":"2016-01-12T19:30:44.991Z","1.0.22":"2016-01-12T20:20:36.461Z","1.1.0":"2016-01-25T03:58:19.762Z","1.1.1":"2016-01-25T04:03:38.436Z","1.1.2":"2016-01-25T17:32:31.329Z","1.1.4":"2016-01-25T18:16:25.100Z","1.1.5":"2016-01-26T17:08:58.226Z","1.1.6":"2016-02-10T04:54:16.107Z","1.1.7":"2016-02-10T05:04:52.819Z","1.1.8":"2016-02-29T15:31:05.174Z","1.1.9":"2016-03-31T15:10:40.118Z","1.1.10":"2016-03-31T15:27:04.377Z","1.1.12":"2016-04-07T01:23:09.189Z","1.1.13":"2016-06-30T03:41:12.780Z","1.1.14":"2016-07-01T01:59:38.197Z","1.1.15":"2016-07-26T22:23:27.853Z","1.1.16":"2016-10-01T13:21:23.826Z","1.2.0":"2016-10-01T13:23:33.155Z","1.2.2":"2016-10-03T20:11:19.202Z","1.2.3":"2016-10-03T20:43:52.622Z","1.2.4":"2016-10-04T03:49:10.969Z","1.2.5":"2016-10-13T22:57:26.065Z","1.2.6":"2016-10-14T00:53:35.289Z","1.2.7":"2016-10-15T22:16:17.292Z","1.2.8":"2016-10-19T06:22:24.885Z","1.2.9":"2016-10-31T02:05:44.193Z","1.2.10":"2016-10-31T15:52:51.671Z","1.2.11":"2016-12-20T04:11:10.892Z","1.2.12":"2016-12-29T01:32:33.539Z","1.2.13":"2016-12-29T21:59:24.242Z"}}}