{"name":"naudiodon","version":"0.1.2","description":"Node Stream bindings for PortAudio.","main":"./index.js","keywords":["portaudio","audio","play","record","wav","raspberry pi"],"repository":"https://github.com/Streampunk/naudiodon","dependencies":{"bindings":"^1.2.1","nan":"^2.5.1"},"devDependencies":{"tape":"^4.6.3"},"license":"Apache-2.0","scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"f9c1ea0ec2d022e5c2025cb176080a7a387ef24e","homepage":"https://github.com/Streampunk/naudiodon#readme","versions":[{"number":"0.0.4","date":"2016-09-24T19:56:25.876Z"},{"number":"0.0.5","date":"2016-10-01T12:31:21.154Z"},{"number":"0.0.6","date":"2016-10-05T11:50:48.834Z"},{"number":"0.0.7","date":"2016-10-07T13:35:21.051Z"},{"number":"0.0.8","date":"2016-10-07T13:46:09.357Z"},{"number":"0.1.0","date":"2017-02-22T16:01:20.684Z"},{"number":"0.1.1","date":"2017-03-18T15:43:29.935Z"},{"number":"0.1.2","date":"2017-03-19T14:03:58.599Z"}],"readme":"# Naudiodon\n\nA [Node.js](http://nodejs.org/) [addon](http://nodejs.org/api/addons.html) that provides a wrapper around the [PortAudio](http://portaudio.com/) library, enabling an application to record and play audio with cross platform support. With this library, you can create [node.js streams](https://nodejs.org/dist/latest-v6.x/docs/api/stream.html) that can be piped to or from other streams, such as files and network connections. This library supports back-pressure.\n\nThis is a fork of [node-portaudio](/joeferner/node-portaudio), refactored by:\n\n* changing from an event model to a stream model;\n* linking to the v8 libraries through the [Native Abstractions for Node.js (NAN)](/nodejs/nan) library to enable more portability between node versions.\n* adding in local copies of libraries so that portaudio does not have to be installed preemptively.\n\nLittle of the original remains but I am very grateful for Joe Ferner for the inspiration and framework to get started.\n\nThis library has been tested on MacOS X 10.11, Windows 10, Linux Ubuntu Trusty and Raspbian Jessie (`armhf` architecture).\n\nNote: This is a server side library. It is not intended as a means to play and record audio via a browser.\n\n## Installation\n\nInstall [Node.js](http://nodejs.org/) for your platform. This software has been developed against the long term stable (LTS) release. For ease of installation with other node packages, this package includes a copy of the dependent PortAudio library and so has no prerequisites.\n\nNaudiodon is designed to be `require`d to use from your own application to provide async processing. For example:\n\n    npm install --save naudiodon\n\nFor Raspberry Pi users, please note that this library is not intended for use with the internal sound card. Please use an external USB sound card or GPIO breakout board such as the [_Pi-DAC+ Full-HD Audio Card_](https://www.modmypi.com/raspberry-pi/breakout-boards/iqaudio/pi-dac-plus-full-hd-audio-card/?tag=pi-dac).\n\n## Using naudiodon\n\n### Listing devices\n\nTo get list of supported devices, call the `getDevices()` function.\n\n```javascript\nvar portAudio = require('naudiodon');\n\nconsole.log(portAudio.getDevices());\n```\n\nAn example of the output is:\n\n```javascript\n[ { id: 0,\n    name: 'Built-in Microph',\n    maxInputChannels: 2,\n    maxOutputChannels: 0,\n    defaultSampleRate: 44100,\n    defaultLowInputLatency: 0.00199546485260771,\n    defaultLowOutputLatency: 0.01,\n    defaultHighInputLatency: 0.012154195011337868,\n    defaultHighOutputLatency: 0.1,\n    hostAPIName: 'Core Audio' },\n  { id: 1,\n    name: 'Built-in Input',\n    maxInputChannels: 2,\n    maxOutputChannels: 0,\n    defaultSampleRate: 44100,\n    defaultLowInputLatency: 0.00199546485260771,\n    defaultLowOutputLatency: 0.01,\n    defaultHighInputLatency: 0.012154195011337868,\n    defaultHighOutputLatency: 0.1,\n    hostAPIName: 'Core Audio' },\n  { id: 2,\n    name: 'Built-in Output',\n    maxInputChannels: 0,\n    maxOutputChannels: 2,\n    defaultSampleRate: 44100,\n    defaultLowInputLatency: 0.01,\n    defaultLowOutputLatency: 0.002108843537414966,\n    defaultHighInputLatency: 0.1,\n    defaultHighOutputLatency: 0.012267573696145125,\n    hostAPIName: 'Core Audio' } ]\n```\n\nNote that the device `id` parameter index value can be used as to specify which device to use for playback or recording with optional parameter `deviceId`.\n\n### Playing audio\n\nPlaying audio involves writing or piping audio data to an instance of `AudioWriter`.\n\n```javascript\nvar portAudio = require('naudiodon');\nvar fs = require('fs');\n\n// Create an instance of an AudioWriter, which is a WritableStream\nvar pw = new portAudio.AudioWriter({\n  channelCount: 2,\n  sampleFormat: portAudio.SampleFormat16Bit,\n  sampleRate: sampleRate,\n  deviceId : 0 }); // Omit the device to select the default device\n\n// Create a stream to pipe into the AudioWriter  \n// Note that this does not strip the WAV header so a click will be heard at the beginning\nvar rs = fs.createReadStream('steam_48000.wav');\n\n// Stop the Node.JS process from closing before the clip plays\nvar to = setTimeout(function () { }, 12345678);\n\n// When the audio device signals that it is ready, start piping data and start streaming\npw.once('audio_ready', function (pa) {\n  rs.pipe(pw);\n  pw.pa.start();\n});\n\n// When the stream is finished, clear the timeout so the node process can complete\npw.once('finish', function () { clearTimeout(to); });\n```\n\nTo stop the stream early, close the piped input or call `pw.pa.stop()`.\n\n### Recording audio\n\nRecording audio invovles reading from an instance of `AudioReader`.\n\n```javascript\nvar portAudio = require('../index.js');\nvar fs = require('fs');\n\n//Create a new instance of Audio Reader, which is a ReadableStream\nvar pr = new portAudio.AudioReader({\n  channelCount: 2,\n  sampleFormat: portAudio.SampleFormat16Bit,\n  sampleRate: 44100\n});\n\n//Create a write stream to write out to a raw audio file\nvar ws = fs.createWriteStream('rawAudio.raw');\n\n//Set a timeout\nvar to = setTimeout(function(){ },12345678);\n\n//Start streaming\npr.once('audio_ready', function(pa) {\n  pr.pipe(ws);\n  pr.pa.start();\n});\n\n//Clear timeout\npr.once('finish',function() {clearTimeout(to); });\n\n```\n\nNote that this produces a raw audio file - wav headers would be required to create a wav file. However this basic example produces a file may be read by audio software such as Audacity, using the sample rate and format parameters set when establishing the stream.\n\nTo stop the recording, close the piped output stream (e.g. `ws`)  and call `pw.pa.stop()`. For example:\n\n```javascript\nprocess.on('SIGINT', () => {\n  console.log('Received SIGINT. Stopping recording.');\n  ws.close();\n  pr.pa.stop();\n  clearTimeout(to);\n  process.exit();\n});\n```\n\n## Troubleshooting\n\n### Linux - No Default Device Found\n\nEnsure that when you compile portaudio that the configure scripts says \"ALSA\" yes.\n\n### Mac - Carbon Component Manager\n\nYou may see the following message during initilisation of the audio library on MacOS:\n\n```\nWARNING:  140: This application, or a library it uses, is using the deprecated Carbon Component Manager\nfor hosting Audio Units. Support for this will be removed in a future release. Also, this makes the host\nincompatible with version 3 audio units. Please transition to the API's in AudioComponent.h.\n```\n\nStreampunk Media know how to fix this issue in PortAudio and intend to contact the authors of PortAudio\nand provide them with a fix.\n\n## Status, support and further development\n\nOptimisation is still required for use with lower specification devices, such as Raspberry Pis.\n\nAlthough the architecture of naudiodon is such that it could be used at scale in production environments, development is not yet complete. In its current state, it is recommended that this software is used in development environments and for building prototypes. Future development will make this more appropriate for production use.\n\nContributions can be made via pull requests and will be considered by the author on their merits. Enhancement requests and bug reports should be raised as github issues. For support, please contact [Streampunk Media](http://www.streampunk.media/).\n\n## License\n\nThis software is released under the Apache 2.0 license. Copyright 2017 Streampunk Media Ltd.\n\nThis software uses libraries from the PortAudio project. The [license terms for PortAudio](http://portaudio.com/license.html) are stated to be an [MIT license](http://opensource.org/licenses/mit-license.php). Streampunk Media are grateful to Ross Bencina and Phil Burk for their excellent library.\n","created":"2016-09-24T19:56:25.876Z","modified":"2017-03-19T14:03:58.599Z","lastPublisher":{"name":"streampunk","email":"furnace@streampunk.media"},"owners":[{"name":"streampunk","email":"furnace@streampunk.media"}],"other":{"_attachments":{},"_from":".","_id":"naudiodon","_nodeVersion":"6.10.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/naudiodon-0.1.2.tgz_1489932236189_0.6772728031501174"},"_npmUser":{"name":"streampunk","email":"furnace@streampunk.media"},"_npmVersion":"3.10.10","_rev":"4-34cf8811a7f26013429601abd416e63d","_shasum":"32f882dd9e967df1e82f6c9e502489ade71fd1e1","author":{"name":"Streampunk Media Ltd"},"bugs":{"url":"https://github.com/Streampunk/naudiodon/issues"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"32f882dd9e967df1e82f6c9e502489ade71fd1e1","tarball":"https://registry.npmjs.org/naudiodon/-/naudiodon-0.1.2.tgz"},"maintainers":[{"name":"streampunk","email":"furnace@streampunk.media"}],"readmeFilename":"README.md","time":{"modified":"2017-03-19T14:03:58.599Z","created":"2016-09-24T19:56:25.876Z","0.0.4":"2016-09-24T19:56:25.876Z","0.0.5":"2016-10-01T12:31:21.154Z","0.0.6":"2016-10-05T11:50:48.834Z","0.0.7":"2016-10-07T13:35:21.051Z","0.0.8":"2016-10-07T13:46:09.357Z","0.1.0":"2017-02-22T16:01:20.684Z","0.1.1":"2017-03-18T15:43:29.935Z","0.1.2":"2017-03-19T14:03:58.599Z"}}}