{"name":"am-test-usb","description":"Library to access USB devices","keywords":["usb","hardware"],"version":"1.1.2","engines":{"node":">=0.12.x"},"main":"./usb","repository":"https://github.com/nonolith/node-usb","scripts":{"install":"node-pre-gyp install --fallback-to-build","test":"mocha --compilers coffee:coffee-script --grep Module","full-test":"mocha --compilers coffee:coffee-script","valgrind":"coffee -c test/usb.coffee; valgrind --leak-check=full --show-possibly-lost=no node --expose-gc --trace-gc node_modules/mocha/bin/_mocha -R spec"},"binary":{"module_name":"usb_bindings","module_path":"./src/binding","host":"https://tessel-builds.s3-us-west-2.amazonaws.com","remote_path":"./pre-gyp/{name}/v{version}"},"dependencies":{"nan":"^2.1.0","node-pre-gyp":"^0.6.13"},"devDependencies":{"coffee-script":"~1.6.2","mocha":"~1.8.2","aws-sdk":"~2.0.0-rc.15"},"license":"MIT","gitHead":"8a3c7c0a74aed1d3a30146dc550975b9d1b01a3f","homepage":"https://github.com/nonolith/node-usb#readme","bundleDependencies":["node-pre-gyp"],"versions":[{"number":"1.1.1","date":"2016-01-11T12:47:42.934Z"},{"number":"1.1.2","date":"2016-01-11T12:52:39.757Z"}],"readme":"USB Library for Node.JS\r\n===============================\r\n\r\n**POSIX:** [![Build Status](https://travis-ci.org/nonolith/node-usb.svg?branch=tcr-usb)](https://travis-ci.org/nonolith/node-usb) &nbsp;&nbsp;&nbsp; **Windows:** [![Build status](https://ci.appveyor.com/api/projects/status/b23kn1pi386nguya/branch/master)](https://ci.appveyor.com/project/kevinmehall/node-usb/branch/master)\r\n\r\nNode.JS library for communicating with USB devices in JavaScript / CoffeeScript.\r\n\r\nThis is a refactoring / rewrite of Christopher Klein's [node-usb](https://github.com/schakko/node-usb). The API is not compatible (hopefully you find it an improvement).\r\n\r\nIt's based entirely on libusb's asynchronous API for better efficiency, and provides a stream API for continuously streaming data or events.\r\n\r\nInstallation\r\n============\r\n\r\nLibusb is included as a submodule. On Linux, you'll need libudev to build libusb. On Ubuntu/Debian: `sudo apt-get install build-essential libudev-dev`\r\n\r\nThen, just run\r\n\r\n\tnpm install usb\r\n\r\nto install from npm. See the bottom of this page for instructions for building from a git checkout.\r\n\r\n### Windows\r\nUse [Zadig](http://sourceforge.net/projects/libwdi/files/zadig/) to install the WinUSB driver for your USB device. Otherwise you will get `LIBUSB_ERROR_NOT_SUPPORTED` when attempting to open devices.\r\n\r\n\r\nAPI\r\n===\r\n\r\n\tvar usb = require('usb')\r\n\r\nusb\r\n---\r\n\r\nTop-level object.\r\n\r\n### usb.getDeviceList()\r\nReturn a list of `Device` objects for the USB devices attached to the system.\r\n\r\n### usb.findByIds(vid, pid)\r\nConvenience method to get the first device with the specified VID and PID, or `undefined` if no such device is present.\r\n\r\n### usb.LIBUSB_*\r\nConstant properties from libusb\r\n\r\n### usb.setDebugLevel(level : int)\r\nSet the libusb debug level (between 0 and 4)\r\n\r\nDevice\r\n------\r\n\r\nRepresents a USB device.\r\n\r\n### .busNumber\r\nInteger USB device number\r\n\r\n### .deviceAddress\r\nInteger USB device address\r\n\r\n### .portNumbers\r\nArray containing the USB device port numbers\r\n\r\n### .deviceDescriptor\r\nObject with properties for the fields of the device descriptor:\r\n\r\n  - bLength\r\n  - bDescriptorType\r\n  - bcdUSB\r\n  - bDeviceClass\r\n  - bDeviceSubClass\r\n  - bDeviceProtocol\r\n  - bMaxPacketSize0\r\n  - idVendor\r\n  - idProduct\r\n  - bcdDevice\r\n  - iManufacturer\r\n  - iProduct\r\n  - iSerialNumber\r\n  - bNumConfigurations\r\n\r\n### .configDescriptor\r\nObject with properties for the fields of the configuration descriptor:\r\n\r\n  - bLength\r\n  - bDescriptorType\r\n  - wTotalLength\r\n  - bNumInterfaces\r\n  - bConfigurationValue\r\n  - iConfiguration\r\n  - bmAttributes\r\n  - bMaxPower\r\n  - extra (Buffer containing any extra data or additional descriptors)\r\n\r\n### .open()\r\n\r\nOpen the device. All methods below require the device to be open before use.\r\n\r\n### .close()\r\n\r\nClose the device.\r\n\r\n### .controlTransfer(bmRequestType, bRequest, wValue, wIndex, data_or_length, callback(error, data))\r\n\r\nPerform a control transfer with `libusb_control_transfer`.\r\n\r\nParameter `data_or_length` can be a integer length for an IN transfer, or a Buffer for an out transfer. The type must match the direction specified in the MSB of bmRequestType.\r\n\r\nThe `data` parameter of the callback is always undefined for OUT transfers, or will be passed a Buffer for IN transfers.\r\n\r\n### .setConfiguration(id, callback(error))\r\nSet the device configuration to something other than the default (0). To use this, first call `.open(false)` (which tells it not to auto configure), then before claiming an interface, call this method.\r\n\r\n### .getStringDescriptor(index, callback(error, data))\r\nPerform a control transfer to retrieve a string descriptor\r\n\r\n### .interface(interface)\r\nReturn the interface with the specified interface number.\r\n\r\n### .interfaces\r\nList of Interface objects for the interfaces of the default configuration of the device.\r\n\r\n### .timeout\r\nTimeout in milliseconds to use for control transfers.\r\n\r\n### .reset(callback(error))\r\nPerforms a reset of the device. Callback is called when complete.\r\n\r\n\r\nInterface\r\n---------\r\n\r\n### .endpoint(address)\r\nReturn the InEndpoint or OutEndpoint with the specified address.\r\n\r\n### .endpoints\r\nList of endpoints on this interface: InEndpoint and OutEndpoint objects.\r\n\r\n### .interface\r\nInteger interface number.\r\n\r\n### .altSetting\r\nInteger alternate setting number.\r\n\r\n### .setAltSetting(altSetting, callback(error))\r\nSets the alternate setting. It updates the `interface.endpoints` array to reflect the endpoints found in the alternate setting.\r\n\r\n### .claim()\r\nClaims the interface. This method must be called before using any endpoints of this interface.\r\n\r\n### .release([closeEndpoints], callback(error))\r\nReleases the interface and resets the alternate setting. Calls callback when complete.\r\n\r\nIt is an error to release an interface with pending transfers. If the optional closeEndpoints parameter is true, any active endpoint streams are stopped (see `Endpoint.stopStream`), and the interface is released after the stream transfers are cancelled. Transfers submitted individually with `Endpoint.transfer` are not affected by this parameter.\r\n\r\n### .isKernelDriverActive()\r\nReturns `false` if a kernel driver is not active; `true` if active.\r\n\r\n### .detachKernelDriver()\r\nDetaches the kernel driver from the interface.\r\n\r\n### .attachKernelDriver()\r\nRe-attaches the kernel driver for the interface.\r\n\r\n### .descriptor\r\nObject with fields from the interface descriptor -- see libusb documentation or USB spec.\r\n\r\n  - bLength\r\n  - bDescriptorType\r\n  - bInterfaceNumber\r\n  - bAlternateSetting\r\n  - bNumEndpoints\r\n  - bInterfaceClass\r\n  - bInterfaceSubClass\r\n  - bInterfaceProtocol\r\n  - iInterface\r\n  - extra (Buffer containing any extra data or additional descriptors)\r\n\r\nEndpoint\r\n--------\r\n\r\nCommon base for InEndpoint and OutEndpoint, see below.\r\n\r\n### .direction\r\nEndpoint direction: `\"in\"` or `\"out\"`.\r\n\r\n### .transferType\r\nEndpoint type: `usb.LIBUSB_TRANSFER_TYPE_BULK`, `usb.LIBUSB_TRANSFER_TYPE_INTERRUPT`, or `usb.LIBUSB_TRANSFER_TYPE_ISOCHRONOUS`.\r\n\r\n###  .descriptor\r\nObject with fields from the endpoint descriptor -- see libusb documentation or USB spec.\r\n\r\n  - bLength\r\n  - bDescriptorType\r\n  - bEndpointAddress\r\n  - bmAttributes\r\n  - wMaxPacketSize\r\n  - bInterval\r\n  - bRefresh\r\n  - bSynchAddress\r\n  - extra (Buffer containing any extra data or additional descriptors)\r\n\r\n### .timeout\r\nSets the timeout in milliseconds for transfers on this endpoint. The default, `0`, is infinite timeout.\r\n\r\nInEndpoint\r\n----------\r\n\r\nEndpoints in the IN direction (device->PC) have this type.\r\n\r\n### .transfer(length, callback(error, data))\r\nPerform a transfer to read data from the endpoint.\r\n\r\nIf length is greater than maxPacketSize, libusb will automatically split the transfer in multiple packets, and you will receive one callback with all data once all packets are complete.\r\n\r\n`this` in the callback is the InEndpoint object.\r\n\r\n### .startPoll(nTransfers=3, transferSize=maxPacketSize)\r\nStart polling the endpoint.\r\n\r\nThe library will keep `nTransfers` transfers of size `transferSize` pending in\r\nthe kernel at all times to ensure continuous data flow. This is handled by the\r\nlibusb event thread, so it continues even if the Node v8 thread is busy. The\r\n`data` and `error` events are emitted as transfers complete.\r\n\r\n### .stopPoll(cb)\r\nStop polling.\r\n\r\nFurther data may still be received. The `end` event is emitted and the callback\r\nis called once all transfers have completed or canceled.\r\n\r\n### Event: data(data : Buffer)\r\nEmitted with data received by the polling transfers\r\n\r\n### Event: error(error)\r\nEmitted when polling encounters an error.\r\n\r\n### Event: end\r\nEmitted when polling has been canceled\r\n\r\nOutEndpoint\r\n-----------\r\n\r\nEndpoints in the OUT direction (PC->device) have this type.\r\n\r\n### .transfer(data, callback(error))\r\nPerform a transfer to write `data` to the endpoint.\r\n\r\nIf length is greater than maxPacketSize, libusb will automatically split the transfer in multiple packets, and you will receive one callback once all packets are complete.\r\n\r\n`this` in the callback is the OutEndpoint object.\r\n\r\n### Event: error(error)\r\nEmitted when the stream encounters an error.\r\n\r\n### Event: end\r\nEmitted when the stream has been stopped and all pending requests have been completed.\r\n\r\n\r\nUsbDetection\r\n------------\r\n\r\n### usb.on('attach', function(device) { ... });\r\nAttaches a callback to plugging in a `device`.\r\n\r\n### usb.on('detach', function(device) { ... });\r\nAttaches a callback to unplugging a `device`.\r\n\r\n\r\nDevelopment and testing\r\n=======================\r\n\r\nTo build from git:\r\n\r\n\tgit clone --recursive https://github.com/nonolith/node-usb.git\r\n\tcd node-usb\r\n\tnpm install\r\n\r\nTo execute the unit tests, [CoffeeScript](http://coffeescript.org) is required. Run\r\n\r\n\tnpm test\r\n\r\nSome tests require an attached USB device -- firmware to be released soon.\r\n\r\nLimitations\r\n===========\r\n\r\nDoes not support:\r\n\r\n  - Configurations other than the default one\r\n  - Isochronous transfers\r\n\r\nLicense\r\n=======\r\n\r\nMIT\r\n\r\nNote that the compiled Node extension includes Libusb, and is thus subject to the LGPL.\r\n","created":"2016-01-11T12:47:42.934Z","modified":"2016-01-11T12:52:39.757Z","lastPublisher":{"name":"ampcpmgp","email":"ampcpmgp@gmail.com"},"owners":[{"name":"ampcpmgp","email":"ampcpmgp@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"am-test-usb","_nodeVersion":"5.4.0","_npmUser":{"name":"ampcpmgp","email":"ampcpmgp@gmail.com"},"_npmVersion":"3.3.12","_rev":"1-0980cc04633899e83352613dc175bb12","_shasum":"b83ec8ae0349d6ab9a5a35189c1cae89c043e3ad","author":{"name":"Nonolith Labs","url":"http://www.nonolithlabs.com"},"bugs":{"url":"https://github.com/nonolith/node-usb/issues"},"contributors":[{"name":"Kevin Mehall","email":"km@kevinmehall.net","url":"http://kevinmehall.net"},{"name":"Tim Ryan","email":"tim@technical.io","url":"http://timryan.org"},{"name":"Christopher Klein"}],"directories":{},"dist-tags":{"latest":"1.1.2"},"dist":{"shasum":"b83ec8ae0349d6ab9a5a35189c1cae89c043e3ad","tarball":"http://registry.npmjs.org/am-test-usb/-/am-test-usb-1.1.2.tgz"},"maintainers":[{"name":"ampcpmgp","email":"ampcpmgp@gmail.com"}],"readmeFilename":"Readme.md","time":{"modified":"2016-01-11T12:52:39.757Z","created":"2016-01-11T12:47:42.934Z","1.1.1":"2016-01-11T12:47:42.934Z","1.1.2":"2016-01-11T12:52:39.757Z"}}}