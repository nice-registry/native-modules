{"name":"pg-libpq","description":"Native, asynchronous, non-blocking interface to PostgreSQL","version":"1.1.1","license":"MIT","main":"lib/pg-libpq","repository":"https://github.com/jacott/node-pg-libpq","gypfile":true,"dependencies":{"bindings":"^1.2.1","nan":"^2.3.5","pg-types":"^1.11.0"},"scripts":{"test":"tools/run-tests","install":"node-gyp rebuild"},"devDependencies":{"mocha":"^2.4.5"},"keywords":["sql","postgresql","libpq","database"],"gitHead":"2ddb591c511e0989613826c32b98f1c5d69bb626","homepage":"https://github.com/jacott/node-pg-libpq#readme","versions":[{"number":"0.1.0","date":"2015-06-05T10:55:52.574Z"},{"number":"0.2.0","date":"2015-06-06T02:21:05.433Z"},{"number":"0.2.1","date":"2015-06-07T04:35:06.900Z"},{"number":"0.3.1","date":"2015-06-10T22:01:20.484Z"},{"number":"0.4.1","date":"2015-06-13T22:32:22.370Z"},{"number":"1.0.0","date":"2015-06-18T00:01:09.163Z"},{"number":"1.0.1","date":"2016-02-02T21:58:53.041Z"},{"number":"1.0.2","date":"2016-02-18T22:32:33.249Z"},{"number":"1.0.3","date":"2016-06-09T02:32:45.430Z"},{"number":"1.1.0","date":"2016-06-13T05:43:44.638Z"},{"number":"1.1.1","date":"2017-03-28T08:19:16.738Z"}],"readme":"# node-pg-libpq\n\nNative, asynchronous, non-blocking interface to PostgreSQL through\n[libpq](http://www.postgresql.org/docs/9.4/static/libpq.html). This module uses node's worker\nthreads to make this package asynchronous instead of libpq's async routines as they still sometimes\nblock but also makes the interface much simpler. I also had trouble using\n[node-libpq](https://github.com/brianc/node-libpq) because the asynchronous reading logic somehow\nblocked other node events such as http server listen and Promises.\n\nThis library is lower level than [node-postgres](https://github.com/brianc/node-postgres) but higher\n than [node-libpq](https://github.com/brianc/node-libpq) hence the name node-pg-libpq. It\n makes use of [node-pg-types](https://github.com/brianc/node-pg-types).\n\nES6 Promises are supported by not passing a callback to the query commands. Note that older versions\nof node may need a Promise npm to be installed to use promises.\n\n## Install\n\nYou need libpq installed and the `pg_config` program should be in your path.  You may also need\n[node-gyp](https://github.com/TooTallNate/node-gyp) installed.\n\n```sh\n$ npm i node-pg-libpq\n```\n\n## Use\n\n```js\nconst Libpq = require('pg-libpq');\n\nnew Libpq((err, pgConn) => {\n    pgConn.exec(\"SELECT 'world' AS hello\", (err, rows) => {\n       console.log(rows);\n       pgConn.finish();\n    });\n});\n```\n\nor with promises\n\n```js\nconst Libpq = require('pg-libpq');\n\nconst pgConn = new Libpq;\npgConn.exec(\"SELECT 'world' AS hello\")\n .then(rows => {\n    console.log(rows);\n    pgConn.finish();\n});\n```\n\n\n## API\n\nMost methods have an optional callback. When no callback is supplied the method will return a\nPromise.\n\n### Connecting\n\nThis package does not include a connection pool. You can use\n[generic-pool](https://www.npmjs.com/package/generic-pool) or similar like so:\n\n```js\nconst Libpq = require('pg-libpq');\nconst poolModule = require('generic-pool');\n\nconst pool = poolModule.Pool({\n  name: 'PostgreSQL',\n  create: function(callback) {\n    new Libpq(\"postgresql://localhost/testdb\", callback);\n  },\n  destroy: function(pgConn) {\n    pgConn.finish();\n  },\n  max: 10,\n});\n```\n\n#### `new Libpq([conninfo], [function callback(err, pgConn)])`\n\nReturns a connection (pgConn) to the database. `conninfo` is optional; see [libpq -\nPQconnectdb](http://www.postgresql.org/docs/9.4/interactive/libpq-connect.html) for\ndetails.\n\nIf a callback function is supplied it is called with the database connection `pgConn` if successful\notherwise `err` explains why the connection failed.\n\n#### `pgConn.finish()`\n\nCancels any command that is in progress and disconnects from the server. This pgConn instance is\nunusable afterwards.\n\n### Queries / Commands\n\nSee [libpq - Command execution functions](http://www.postgresql.org/docs/9.4/interactive/libpq-exec.html)\n\nAn exception will be thrown if more than one command at a time is sent to the same\npgConn.\n\n#### `pgConn.isReady()`\n\nReturn true if connection is ready to receive a query/command.\n\n#### `pgConn.then(function)`\n\nRun function when the connection is ready. This method will wait for any currently running query\nchain to finish.\n\n#### `pgConn.resultErrorField(name)`\n\nReturns an error field associated with the last error where `name` is string in upper case\ncorresponding to the `PG_DIAG_` fields but without the `PG_DIAG_` prefix; for example\n`pgConn.resultErrorField('SEVERITY')`.\n\nFor convenience the `SQLSTATE` field is set on the last error as the field `sqlState`.\n\n#### `pgConn.execParams(command, params, [callback])`\n\nparams are coverted to strings before passing to libpq. No type information is passed along with the\nparamters; it is left for the PostgreSQL server to derive the type. Arrays are naturally converted to\njson format but calling `pgConn.sqlArray(array)` will convert to array format `{1,2,3}`.\n\nFor updating calls such as INSERT, UPDATE and DELETE the callback will be called with the number of\nrows affected. For SELECT it is called with an array of rows. Each row is a key/value pair object\nwhere key is the column name and value is calculated using the\n[pg-types](https://www.npmjs.com/package/pg-types) npm package. If the value is `null` no entry will\nbe given for that column.\n\n#### `pgConn.exec(command, [callback])`\n\nSame as `execParams` but with no params.\n\n#### `pgConn.prepare(name, command, [callback])`\n\nCreate a prepared statement named `name`. Parameters are specified in the command the same as\n`execParams`. To specify a type for params use the format `$n::type` where `n` is the parameter\nposition and `type` is the sql type; for example `$1::text`, `$2::integer[]`, `$3::jsonb`.  To\ndiscard a prepared statement run `pgConn.exec('DEALLOCATE \"name\"')`.\n\n#### `pgConn.execPrepared(name, params, [callback])`\n\nThe same as `execParams` except the prepared statment name, from `prepare`, is given instead of the\ncommand.\n\n#### `escaped = pgConn.escapeLiteral(string)`\n\nReturns an escaped version of `string` including surrounding with single quotes. The escaping makes\nan untrustworthy string safe to include as part of a sql query. It is preferable to use such strings\nas a param in the `pgConn.execParams` command.\n\n#### `stream = pgConn.copyFromStream(command, [params], callback)`\n\nCopies data from a Writable stream into the database using the `COPY table FROM STDIN` statement.\nThere is no promise version of this command.\n\nExample:\n\n```js\nvar dbStream = pgConn.copyFromStream('COPY mytable FROM STDIN WITH (FORMAT csv) ',\n      function (err) {console.log(\"finished\", err)});\n\ndbStream.write('123,\"name\",\"address\"\\n');\ndbStream.end();\n```\n\n### Not implemented\n\n* `PQdescribePrepared`\n* `PQdescribePortal`\n* `PQgetCopyData`\n* Binary format -- for sending and receiving fields as binary data instead of text.\n* Retrieving Query Results Row-By-Row. Use cursors instead.\n* Asynchronous Notification -- LISTEN, UNLISTEN, NOTIFY\n\n\n## Testing / Developing\n\n```sh\n$ tools/run-tests\n```\n\nTo run the tests you need a PostgreSQL back-end reachable by typing `psql` with no connection\nparameters in your terminal. The tests expect PostgreSQL to be running on the same machine as the\ntests.\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015, 2016 Geoff Jacobsen <geoffjacobsen@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n","created":"2015-06-05T10:55:52.574Z","modified":"2017-03-28T08:19:16.738Z","lastPublisher":{"name":"jacott","email":"geoffjacobsen@gmail.com"},"owners":[{"name":"jacott","email":"geoffjacobsen@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"pg-libpq","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pg-libpq-1.1.1.tgz_1490689154966_0.3396304890047759"},"_npmUser":{"name":"jacott","email":"geoffjacobsen@gmail.com"},"_npmVersion":"3.10.10","_rev":"2-657f37b84380decf55b843fa333d781c","_shasum":"c47d0580828a243191670edd04be823cc715d3e3","author":{"name":"Geoff Jacobsen","email":"geoffjacobsen@gmail.com"},"bugs":{"url":"https://github.com/jacott/node-pg-libpq/issues"},"directories":{},"dist-tags":{"latest":"1.1.1"},"dist":{"shasum":"c47d0580828a243191670edd04be823cc715d3e3","tarball":"https://registry.npmjs.org/pg-libpq/-/pg-libpq-1.1.1.tgz"},"maintainers":[{"name":"jacott","email":"geoffjacobsen@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-28T08:19:16.738Z","created":"2015-06-05T10:55:52.574Z","0.1.0":"2015-06-05T10:55:52.574Z","0.2.0":"2015-06-06T02:21:05.433Z","0.2.1":"2015-06-07T04:35:06.900Z","0.3.1":"2015-06-10T22:01:20.484Z","0.4.1":"2015-06-13T22:32:22.370Z","1.0.0":"2015-06-18T00:01:09.163Z","1.0.1":"2016-02-02T21:58:53.041Z","1.0.2":"2016-02-18T22:32:33.249Z","1.0.3":"2016-06-09T02:32:45.430Z","1.1.0":"2016-06-13T05:43:44.638Z","1.1.1":"2017-03-28T08:19:16.738Z"}}}