{"name":"mtrace","description":"Native memory allocation tracing and mtrace log parsing for node.","version":"1.0.5","homepage":"https://github.com/Jimbly/node-mtrace","repository":"https://github.com/Jimbly/node-mtrace","bin":{"mtrace.js":"lib/mtrace.js"},"main":"index.js","dependencies":{"easy-table":"0.0.3","nan":"^2.1.0"},"engines":{"node":">=0.6.0"},"scripts":{"install":"node-gyp configure build"},"gitHead":"3496f13674808bade2c12b74cfe18d61e3c05bd4","versions":[{"number":"1.0.0","date":"2012-05-02T17:22:39.956Z"},{"number":"1.0.1","date":"2012-05-14T23:10:20.046Z"},{"number":"1.0.2","date":"2012-05-15T00:03:38.907Z"},{"number":"1.0.3","date":"2013-01-09T03:24:58.433Z"},{"number":"1.0.4","date":"2015-04-10T19:04:21.108Z"},{"number":"1.0.5","date":"2015-12-07T17:49:04.835Z"}],"readme":"# node-mtrace\n\nNative memory tracing and mtrace log parsing for node.\n\n## Supported Platforms\n\nLinux only.\n\n## Usage\n\nInstall with npm:\n```npm install mtrace```\n\nGenerating a mtrace:\n\n``` javascript\nvar mtrace = require('mtrace');\nvar filename = mtrace.mtrace();\nif (filename) {\n  console.log('Saving mtrace to ' + filename);\n} else {\n  console.log('mtrace not supported');\n}\n// do stuff\n// exit program, or, force a flush\nmtrace.gc(); // Optionally force a garbage collect so destructors are called\nmtrace.muntrace();\n// start tracing again\nmtrace.mtrace();\n```\n\nmtrace() takes an optional parameter to specify a filename to save to, otherwise\nit generates a unique filename based on process pid and call count (first file\nis \"mtrace.[pid].0\", etc).\n\n## Viewing the mtrace log\n\nThere's a built-in command line tool that's part of GCC called mtrace.  I find\nits output rather uselss in any real-world application (lists thousands or\nmillions of allocations in an unsorted list, and has meager symbol lookup).\nYour mileage on this may vary.\n\nThe raw log can however sometimes be very useful for tracking harder to\nidentify allocations (like those that show up as just \"operator new\" from C++\nfiles) by looking at allocation sizes and patterns and comparing them to known\nstructure sizes, etc.\n\nThis module includes a simple little parser to generate summarized information\nshowing useful high-level information on outstanding allocations.  The\n\"Traffic\" column indicates total alloc/free events from that call site, which\ncan be useful for tracking performance-impacting heap thrashing.\n\n```\n$ ./node_modules/.bin/mtrace.js mtrace.1234.0\nAddr       Size       Count  Traffic  Module                            Symbol                                            Offs\n---------  ---------  -----  -------  --------------------------------  ------------------------------------------------  ------\n 0xd0c080   15 bytes      1      197  /lib/tls/i686/cmov/libc.so.6      __strdup                                          +0x30\n0x84573f4  100 bytes      1      391  node                              eio_custom                                        +0x1a\n 0x341fda  120 bytes      6        6  ...les/native/bullet/bullet.node  _ZN13PhysicsEntity16addCollisionMeshER11btTra...  +0x5e\n0x844bd10  296 bytes      2        2  node                                                                                und...\n0x840ddaf    9.43 KB      2     1024  node                              _ZN2v88internal8Malloced3NewEj                    +0xf\n 0x34200d   13.59 KB      6        6  ...les/native/bullet/bullet.node  _ZN13PhysicsEntity16addCollisionMeshER11btTra...  +0x91\n 0x341ff1   54.38 KB      6        6  ...les/native/bullet/bullet.node  _ZN13PhysicsEntity16addCollisionMeshER11btTra...  +0x75\n 0x2c8c07    3.03 MB   8976    59094  /usr/lib/libstdc++.so.6           _Znwj                                             +0x27\n 0x3c7bad   81.15 MB  10915    28901  ...les/native/bullet/bullet.node                                                    und...\n---------  ---------  -----  -------  --------------------------------  ------------------------------------------------  ------\n   TOTALS   84.25 MB  19915    90195\n```\n\nOr, even better, if the process the mtrace was dumped from is still running, we\ncan get very accurate symbol information by specifying a pid:\n\n```\n$ ./node_modules/.bin/mtrace.js mtrace.1234.0 1234\nAddr       Size       Count  Traffic  Module                            Symbol\n---------  ---------  -----  -------  --------------------------------  ------------------------------------------------\n 0xd0c080   15 bytes      1      197  /lib/tls/i686/cmov/libc.so.6      strdup\n0x84573f4  100 bytes      1      391  node                              eio_custom\n 0x341fda  120 bytes      6        6  ...les/native/bullet/bullet.node  PhysicsEntity::addCollisionMesh(btTransform&,...\n0x844bd10  296 bytes      2        2  node                              ev_realloc_emul\n0x840ddaf    9.43 KB      2     1024  node                              v8::internal::Malloced::New(unsigned int)\n 0x34200d   13.59 KB      6        6  ...les/native/bullet/bullet.node  PhysicsEntity::addCollisionMesh(btTransform&,...\n 0x341ff1   54.38 KB      6        6  ...les/native/bullet/bullet.node  PhysicsEntity::addCollisionMesh(btTransform&,...\n 0x2c8c07    3.03 MB   8976    59094  /usr/lib/libstdc++.so.6           operator new(unsigned int)\n 0x3c7bad   81.15 MB  10915    28901  ...les/native/bullet/bullet.node  btAllocDefault(unsigned int)\n---------  ---------  -----  -------  --------------------------------  ------------------------------------------------\n   TOTALS   84.25 MB  19915    90195\n```\n\nIf you want to use this module's sweet mtrace parsing functionality but not for\na node app, just change the one reference to \"node\" in mtrace.js (one of the\narguments to gdb) to your executable, or let me know and I can make it take it\nas a parameter.\n\n## Requirements\n\nTested on Ubuntu, should work on any flavor of Linux.\n\nRequires gdb to be installed to get good symbol information.\n\n## Special Thanks\n\nUses [easy-table](https://github.com/eldargab/easy-table).  \nInitial NPM packaging by [christopherobin](https://github.com/christopherobin).\n","created":"2012-05-02T17:22:38.246Z","modified":"2016-07-12T23:17:44.392Z","lastPublisher":{"name":"Jimbly","email":"wasteland@gmail.com"},"owners":[{"name":"jimbly","email":"wasteland@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"mtrace","_nodeVersion":"0.10.36","_npmUser":{"name":"Jimbly","email":"wasteland@gmail.com"},"_npmVersion":"2.10.1","_rev":"1-14605368d9affb824909966567a3430e","_shasum":"0e47317df8d4033aecdab357e87319f18172d52f","author":{"name":"Jimb Esser","url":"https://github.com/Jimbly"},"bugs":{"url":"https://github.com/Jimbly/node-mtrace/issues"},"contributors":[{"name":"Christophe Robin","email":"crobin@nekoo.com"},{"name":"Vincent Giersch","url":"https://github.com/gierschv"},{"name":"magicode","url":"https://github.com/magicode"}],"directories":{},"dist-tags":{"latest":"1.0.5"},"dist":{"shasum":"0e47317df8d4033aecdab357e87319f18172d52f","tarball":"http://registry.npmjs.org/mtrace/-/mtrace-1.0.5.tgz"},"maintainers":[{"name":"jimbly","email":"wasteland@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-07-12T23:17:44.392Z","created":"2012-05-02T17:22:38.246Z","1.0.0":"2012-05-02T17:22:39.956Z","1.0.1":"2012-05-14T23:10:20.046Z","1.0.2":"2012-05-15T00:03:38.907Z","1.0.3":"2013-01-09T03:24:58.433Z","1.0.4":"2015-04-10T19:04:21.108Z","1.0.5":"2015-12-07T17:49:04.835Z"}}}