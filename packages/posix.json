{"name":"posix","version":"4.1.1","description":"The missing POSIX system calls","license":"MIT","keywords":["posix","rlimit","getrlimit","setrlimit","ulimit","setuid","setgid","seteuid","setegid","chroot","setreuid","setregid","getpgrp","setsid","setpgid","getpwnam","getgrnam","uid","gid","initgroups","syslog","setlogmask","gethostname","sethostname","swapon","swapoff"],"homepage":"http://github.com/ohmu/node-posix","repository":"https://github.com/ohmu/node-posix","main":"./lib/posix","dependencies":{"nan":"2.4.x"},"scripts":{"test":"make test","install":"node-gyp rebuild"},"engines":{"node":">= 0.8.0"},"gypfile":true,"gitHead":"8a7b79e04372169309e47298213478fdd9c2d149","versions":[{"number":"0.0.1","date":"2011-11-22T00:18:13.793Z"},{"number":"0.0.2","date":"2011-11-23T23:26:41.124Z"},{"number":"0.0.3","date":"2011-11-26T17:28:09.707Z"},{"number":"0.0.4","date":"2011-11-26T21:52:51.720Z"},{"number":"0.0.5","date":"2011-12-04T00:35:04.951Z"},{"number":"0.0.6","date":"2011-12-28T18:19:00.467Z"},{"number":"0.0.7","date":"2012-03-05T23:05:45.206Z"},{"number":"0.0.8","date":"2012-06-13T19:32:58.334Z"},{"number":"0.0.10","date":"2012-09-10T21:51:06.077Z"},{"number":"0.0.11","date":"2013-01-21T23:01:46.368Z"},{"number":"0.0.12","date":"2013-01-24T21:12:45.674Z"},{"number":"0.0.13","date":"2013-03-12T13:30:43.406Z"},{"number":"1.0.0","date":"2013-04-08T19:13:33.149Z"},{"number":"1.0.1","date":"2013-05-31T03:16:39.845Z"},{"number":"1.0.2","date":"2013-07-11T15:40:54.320Z"},{"number":"1.0.3","date":"2013-10-09T23:45:21.147Z"},{"number":"1.0.4","date":"2014-11-01T18:27:39.022Z"},{"number":"2.0.0","date":"2015-02-11T20:10:52.179Z"},{"number":"2.0.1","date":"2015-05-05T06:19:31.835Z"},{"number":"4.0.0","date":"2015-09-15T17:52:05.836Z"},{"number":"4.0.1","date":"2016-03-15T23:52:12.918Z"},{"number":"4.0.2","date":"2016-05-01T05:55:38.247Z"},{"number":"4.1.0","date":"2016-09-20T09:12:45.482Z"},{"number":"4.1.1","date":"2016-09-20T17:27:01.563Z"}],"readme":"# node-posix\n\nThe missing POSIX system calls for Node.\n\n[![Build Status](https://secure.travis-ci.org/ohmu/node-posix.png)](http://travis-ci.org/ohmu/node-posix)\n\n[![NPM](https://nodei.co/npm/posix.png?downloads=true&downloadRank=true)](https://nodei.co/npm/posix/) [![NPM](https://nodei.co/npm-dl/posix.png?months=6&height=3)](https://nodei.co/npm/posix/)\n\n\n## FAQ\n\n* Q: Why?\n* A: Because the Node core has a limited set of POSIX system calls.\n* Q: How mature/stable is this?\n* A: Each version released in NPM has decent automated test coverage. The\n  module has been successfully used in busy production sites for several\n  years.\n* Q: I have a feature request/bug report...\n* A: Please submit a pull request or an issue ticket at\n  https://github.com/ohmu/node-posix\n\n## Compatibility and API Stability\n\n* Some degree of POSIX compliance is sought after, but this module is not always\n  restricted by the standard.\n  For example `posix.openlog()` also supports non-POSIX facility codes.\n* node-posix version format: *MAJOR.MINOR.PATCH*\n* *PATCH* version upgrades will not break backward compatibility, so it should be\n  safe to upgrade from 1.0.0 to 1.0.1, 1.0.2, etc.\n* *MAJOR* and *MINOR* version upgrades *probably* break backward-compatibility in\n  some way, which may or may not affect your module.\n* Recommended way to define a version dependency to node-posix in your\n  `package.json`: `\"dependencies\": { \"posix\": \"1.0.x\" }`\n* Update the version in `package.json` manually after validating compatibility\n  with new node-posix *MAJOR* and *MINOR* releases).\n* *\"package.json dependencies done right\"*:\n  http://blog.nodejitsu.com/package-dependencies-done-right\n\n## Related modules\n\nOther extension modules that provide POSIX/Unix/Linux/BSD functionality:\n\n* glob() http://npm.im/glob\n* getrusage() http://npm.im/getrusage\n* chroot(), daemonization http://npm.im/daemon-tools\n* iconv() http://npm.im/iconv\n* mmap() http://npm.im/mmap\n* PAM authentication, flock() and mkstemp() http://npm.im/unixlib\n* execvp() http://npm.im/kexec\n\n## General Information\n\n### User and Group ID Management\n* `posix.getgid()` is an alias to Node core `process.getgid()`\n* `posix.getuid()` is an alias to Node core `process.getuid()`\n* `posix.setgid()` is an alias to Node core `process.setgid()`\n* `posix.setuid()` is an alias to Node core `process.setuid()`,\n  NOTE: should be used carefully  due to inconsistent behavior under different\n  operating systems, see http://www.cs.ucdavis.edu/~hchen/paper/usenix02.html\n\n### Resource limits\n* `ulimit()` is obsolete, use `posix.setrlimit()` instead.\n\n## General usage\n\n* Installation: `npm install posix`\n* In your code: `var posix = require('posix');`\n\n## POSIX System Calls\n\n### posix.chroot(path)\n\nChanges the root directory of the calling process to that specified in `path`.\nThis directory will be used for pathnames beginning with `/`. The root\ndirectory is inherited by all children of the calling process.\n\nThe working directory is also automatically set to the new root directory.\n\nNOTE: Please be aware of the limitations of `chroot` jails:\n\n* \"Best Practices for UNIX `chroot()` Operations\":\n  http://www.unixwiz.net/techtips/chroot-practices.html\n* \"How to break out of a `chroot()` jail\":\n  http://www.bpfh.net/simes/computing/chroot-break.html\n\nExample:\n\n    posix.chroot('/somewhere/safe');\n\n### posix.getegid()\n\nReturns the current process's effective group ID.\n\n    console.log('Effective GID: ' + posix.getegid());\n\n### posix.geteuid()\n\nReturns the current process's effective user ID.\n\n    console.log('Effective UID: ' + posix.geteuid());\n\n### posix.getgrnam(group)\n\nGet the group database entry for the given group. `group` can be specified\neither as a numeric GID or a group name (string).\n\n    var util = require('util');\n    util.inspect(posix.getgrnam('wheel'));\n\nExample output of above:\n\n    { name: 'wheel', passwd: '*', gid: 0, members: [ 'root' ] }\n\n### posix.getpgid(pid)\n\nReturn the process group ID of the current process (`posix.getpgid(0)`) or of\na process of a given PID (`posix.getpgid(PID)`).\n\n    console.log('My PGID: ' + posix.getpgid(0));\n    console.log('init's PGID: ' + posix.getpgid(1));\n\n### posix.setpgid(pid)\n\nReturn the process group ID of the current process (`posix.setpgid(0, PGID)`)\nor of a process of a given PID (`posix.getpgid(PID, PGID)`).\n\n    // move process into it's own process group\n    posix.setpgid(process.pid, process.pid)\n\n### posix.getppid()\n\nReturns the parent process's PID.\n\n    console.log('Parent PID: ' + posix.getppid());\n\n### posix.getpwnam(user)\n\nGet the user database entry for the given user. `user` can be specified either\nas a numeric UID or a username (string).\n\n    var util = require('util');\n    util.inspect(posix.getpwnam('root'));\n\nExample output of above:\n\n    { name: 'root',\n      passwd: '*',\n      uid: 0,\n      gid: 0,\n      gecos: 'System Administrator',\n      shell: '/bin/sh',\n      dir: '/var/root' }\n\n### posix.getrlimit(resource)\n\nGet resource limits. (See getrlimit(2).)\n\nThe `soft` limit is the value that the kernel enforces for the\ncorresponding resource. The `hard` limit acts as a ceiling for the soft\nlimit: an unprivileged process may only set its soft limit to a value in the\nrange from 0 up to the hard limit, and (irreversibly) lower its hard limit.\n\nA limit value of `null` indicates \"unlimited\" (RLIM_INFINITY).\n\nSupported resources:\n\n`'core'` (RLIMIT_CORE) Maximum size of core file.  When 0 no core dump files\nare created.\n\n`'cpu'` (RLIMIT_CPU) CPU time limit in seconds.  When the process reaches the\nsoft limit, it is sent a SIGXCPU signal. The default action for this signal is\nto terminate the process.\n\n`'data'` (RLIMIT_DATA) The maximum size of the process's data segment\n(initialized data, uninitialized data, and heap).\n\n`'fsize'` (RLIMIT_FSIZE) The maximum size of files that the process may create.\nAttempts to extend a file beyond this limit result in delivery of a SIGXFSZ\nsignal.\n\n`'nofile'` (RLIMIT_NOFILE) Specifies a value one greater than the maximum file\ndescriptor number that can be opened by this process.\n\n`'nproc'` (RLIMIT_NPROC) The maximum number of processes (or, more precisely on Linux,\nthreads) that can be created by this process. *(Note: Only Linux, OS X, and BSDs support the 'nproc' resource limit. An error will be raised on unsupported platforms.)*\n\n`'stack'` (RLIMIT_STACK) The maximum size of the process stack, in bytes. Upon\nreaching this limit, a SIGSEGV signal is generated.\n\n`'as'` (RLIMIT_AS) The maximum size of the process's virtual memory (address\nspace) in bytes.\n\n    var limits = posix.getrlimit('nofile');\n    console.log('Current limits: soft=' + limits.soft + ', max=' + limits.hard);\n\n### posix.initgroups(user, group)\n\nSets the group access list to all groups of which user is a member.\nThe additional group group is also added to the list.\n\n    posix.initgroups(\"node\", \"httpd\");  // all groups of 'node' plus 'httpd'\n\n### posix.setegid(gid)\n\nSets the Effective group ID of the current process. `gid` can be either a\nnumeric GID or a group name (string).\n\n    posix.setegid(0); // set effective group UID to \"wheel\"\n    posix.setegid('nobody');\n\n### posix.seteuid(uid)\n\nSets the Effective user ID of the current process. `uid` can be either a\nnumeric UID or a username (string).\n\n    posix.seteuid(0); // set effective UID to \"root\"\n    posix.seteuid('nobody');\n\n### posix.setregid(rgid, egid)\n\nSets the Real and Effective group IDs of the current process. `rgid` and `egid`\ncan be either a numeric UIDs or group names (strings). A value of `-1` means\nthat the corresponding GID is left unchanged.\n\n    posix.setregid(-1, 1000); // just set the EGID to 1000\n    posix.setregid('www-data', 'www-data'); // change both RGID and EGID to \"www-data\"\n\n### posix.setreuid(ruid, euid)\n\nSets the Real and Effective user IDs of the current process. `ruid` and `euid`\ncan be either a numeric UIDs or usernames (strings). A value of `-1` means\nthat the corresponding UID is left unchanged.\n\nIMPORTANT NOTE: what happens to the Saved UID when `setreuid()` is called is\noperating system dependent. For example on OSX the Saved UID seems to be set\nto the previous EUID. This means that the process can escape back to EUID=0\nsimply by calling `setreuid(0, 0)`. A workaround for this is to call\n`posix.setreuid(ruid, euid)` twice with the same arguments.\n\n    posix.setreuid(-1, 1000); // just set the EUID to 1000\n    posix.setreuid('nobody', 'nobody'); // change both RUID and EUID to \"nobody\"\n\n### posix.setrlimit(resource, limits)\n\nSet resource limits. (See setrlimit(2).) Supported resource types are listed\nunder `posix.getrlimit`.\n\nThe `limits` argument is an object in the form\n`{ soft: SOFT_LIMIT, hard: HARD_LIMIT }`. Current limit values are used if\neither `soft` or `hard` key is not specifing in the `limits` object. A limit\nvalue of `null` indicates \"unlimited\" (RLIM_INFINITY).\n\n    // raise maximum number of open file descriptors to 10k, hard limit is left unchanged\n    posix.setrlimit('nofile', { soft: 10000 });\n\n    // enable core dumps of unlimited size\n    posix.setrlimit('core', { soft: null, hard: null });\n\n### posix.setsid()\n\nCreates a session and sets the process group ID. Returns the process group ID.\n\n    console.log('Session ID: ' + posix.setsid());\n\n## Syslog\n\n### posix.openlog(identity, options, facility)\n\nOpen a connection to the logger.\n\nArguments:\n\n* `identity` - defines the name of the process visible in the logged entries.\n* `options` -  set of option flags (see below).\n* `facility` - facility code for the logged messages (see below).\n\nOptions:\n\n* `'cons'` - Log to the system console on error.\n* `'ndelay'` - Connect to syslog daemon immediately.\n* `'nowait'` - Do not wait for child processes.\n* `'odelay'` - Delay open until syslog() is called.\n* `'pid'` - Log the process ID with each message.\n\nFacilities:\n\nNOTE: only `'user'` and `'local0'` .. `'local7'` are defined in the POSIX\nstandard. However, the other codes should be pretty well supported on most\nplatforms.\n\n* `'kern'`\n* `'user'`\n* `'mail'`\n* `'news'`\n* `'uucp'`\n* `'daemon'`\n* `'auth'`\n* `'cron'`\n* `'lpr'`\n* `'local0'` .. `'local7'`\n\nExample:\n\n    posix.openlog('myprog', {odelay: true, pid: true}, 'local7');\n\n### posix.closelog()\n\nClose connection to the logger.\n\n### posix.setlogmask(mask)\n\nSets a priority mask for log messages. Further `posix.syslog()` messages are\nonly sent out if their priority is included in the mask. Priorities are listed\nunder `posix.syslog()`.\n\n    // only send the most critical messages\n    posix.setlogmask({emerg:true, alert: true, crit: true});\n\n### posix.syslog(priority, message)\n\nSend a message to the syslog logger using the given `priority`.\n\nPriorities:\n\n* `'emerg'`\n* `'alert'`\n* `'crit'`\n* `'err'`\n* `'warning'`\n* `'notice'`\n* `'info'`\n* `'debug'`\n\nExample:\n\n    posix.syslog('info', 'hello, world!');\n\n## hostname\n\n### posix.gethostname()\n\nReturns the hostname of the operating system.\n\n### posix.sethostname(hostname)\n\nSets the hostname of the operating system.\n\nExample:\n\n    posix.sethostname('beefheart');\n\n## swap\n\n### posix.swapon(path, swapflags)\n\nEnable the swap device located at `path`. `swapflags` is an optional array of\nstrings to define the flags of the swap device, being available `prefer` and\n`discard`.\n\n### posix.swapoff(path)\n\nDisable the swap device located at `path`.\n\n## Credits\n\n* Some of the documentation strings stolen from Linux man pages.\n* `posix.seteuid` etc. implementation is based on Node core project `SetUid`\n* Thank you for your contributions:\n  Igor Pashev, Dan Bornstein, Jamie Paton, Nick Muerdter, Oskari Saarenmaa,\n  Theo Schlossnagle, Alex Potsides, Robey Pointer, Stephen Sugden,\n  Dave Longley, Jesús Leganés-Combarro\n\n## LICENSE\n\nCopyright (c) 2011-2015 Mika Eloranta\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n","starsCount":5,"created":"2011-11-22T00:06:49.384Z","modified":"2016-09-20T17:27:01.563Z","lastPublisher":{"name":"mel","email":"mel@ohmu.fi"},"owners":[{"name":"mel","email":"mel@ohmu.fi"}],"other":{"_attachments":{},"_from":".","_id":"posix","_nodeVersion":"6.5.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/posix-4.1.1.tgz_1474392419445_0.7527781869284809"},"_npmUser":{"name":"mel","email":"mel@ohmu.fi"},"_npmVersion":"3.10.3","_rev":"1-30187680cd0557c605f4daaf9199b226","_shasum":"cc9e1b87316f68e782a4316c94dca0d1741e471a","author":{"name":"Mika Eloranta","email":"mel@ohmu.fi"},"bugs":{"url":"https://github.com/ohmu/node-posix/issues"},"directories":{},"dist-tags":{"latest":"4.1.1"},"dist":{"shasum":"cc9e1b87316f68e782a4316c94dca0d1741e471a","tarball":"http://registry.npmjs.org/posix/-/posix-4.1.1.tgz"},"maintainers":[{"name":"mel","email":"mel@ohmu.fi"}],"readmeFilename":"README.md","time":{"modified":"2016-09-20T17:27:01.563Z","created":"2011-11-22T00:06:49.384Z","0.0.1":"2011-11-22T00:18:13.793Z","0.0.2":"2011-11-23T23:26:41.124Z","0.0.3":"2011-11-26T17:28:09.707Z","0.0.4":"2011-11-26T21:52:51.720Z","0.0.5":"2011-12-04T00:35:04.951Z","0.0.6":"2011-12-28T18:19:00.467Z","0.0.7":"2012-03-05T23:05:45.206Z","0.0.8":"2012-06-13T19:32:58.334Z","0.0.10":"2012-09-10T21:51:06.077Z","0.0.11":"2013-01-21T23:01:46.368Z","0.0.12":"2013-01-24T21:12:45.674Z","0.0.13":"2013-03-12T13:30:43.406Z","1.0.0":"2013-04-08T19:13:33.149Z","1.0.1":"2013-05-31T03:16:39.845Z","1.0.2":"2013-07-11T15:40:54.320Z","1.0.3":"2013-10-09T23:45:21.147Z","1.0.4":"2014-11-01T18:27:39.022Z","2.0.0":"2015-02-11T20:10:52.179Z","2.0.1":"2015-05-05T06:19:31.835Z","4.0.0":"2015-09-15T17:52:05.836Z","4.0.1":"2016-03-15T23:52:12.918Z","4.0.2":"2016-05-01T05:55:38.247Z","4.1.0":"2016-09-20T09:12:45.482Z","4.1.1":"2016-09-20T17:27:01.563Z"},"users":{"maxmaximov":true,"parroit":true,"bluerival":true,"dypsilon":true,"craigpatten":true}}}