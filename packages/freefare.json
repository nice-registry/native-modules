{"name":"freefare","version":"0.1.5","description":"NodeJS binding of Freefare to access Mifare cards (classic, Ultralight and DESfire) via libNFC","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","install":"node-gyp rebuild"},"repository":"https://github.com/ALabate/node-freefare","keywords":["libnfc","nfc","libfreefare","freefare","mifare","ultralight","desfire"],"license":"MIT","homepage":"https://github.com/ALabate/node-freefare#readme","dependencies":{"bindings":"^1.1.0","nan":"^2.4.0"},"gypfile":true,"gitHead":"ddd08b3fd48e0cae72db4a85009b577fa357fdf6","versions":[{"number":"0.1.0","date":"2016-12-20T07:45:34.674Z"},{"number":"0.1.1","date":"2016-12-22T17:24:49.739Z"},{"number":"0.1.2","date":"2017-01-16T03:08:27.858Z"},{"number":"0.1.3","date":"2017-01-16T04:23:35.896Z"},{"number":"0.1.4","date":"2017-04-13T22:59:52.346Z"},{"number":"0.1.5","date":"2017-06-02T20:14:00.542Z"}],"readme":"# node-freefare\n\n[![npm](https://img.shields.io/npm/v/freefare.svg)](https://www.npmjs.com/package/freefare)\n\nNodeJS binding of LibFreefare. [LibFreefare](https://github.com/nfc-tools/libfreefare) is a library to manipulate Mifare NFC smart cards (Classic, DESFire, Ultralight, etc) over LibNFC. Your reader has to be compatible with LibNFC to work with this Library (Check out the [compatibility matrix](http://nfc-tools.org/index.php?title=Devices_compatibility_matrix) to know if your device is compatible)\n\nDue to lack of time and testing material, the binding is not complete :\n\n* Mifare Ultralight : fully Supported\n* Mifare Classic 1K/4K : Partially supported (enough to authenticate, write and read a data block)\n* Mifare DESFire : Partially supported (enough to select an application, authenticate in DES/3DES and read/write on a file)\n\nIf you need Freefare function which are currently not bound, submit an issue, a pull request or contact me by email.\n\n### Installation\n\nYou need at least NodeJS v6. Go to [NodeJs website](https://nodejs.org/en/download/package-manager/) to know how to get it for your system.\n\nYou also need LibFreefare. Under debian you can do\n\n```\napt-get install libfreefare0 libfreefare-dev\n```\n\nFinally [use npm.](https://docs.npmjs.com/cli/install) to install this package\n\n```\nnpm install freefare\n```\n\n### Example\n\nYou can find examples under the `examples/` directory\n\n\n## API\n### Class: Freefare\nWhen a Freefare object is created, it automatically initialize LibNFC. Once initialized, you can list available NFC devices.\n\n#### Freefare.listDevices()\n\nGive a list of available NFC devices\n\n**Returns**: `Promise.<Array.<Device>>`, A promise to the `Device` list.\n\n\n### Class: Device\nA NibNFC compatible device that can read NFC tag.\nThe `open()` method have to be executed before any other.\n\n#### Device.open()\n\nOpen device for further communication\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### Device.close()\n\nClose device to release memory and device\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### Device.listTags()\n\nList of detected tags\n\n**Returns**: `Promise.<Array.<(Tag|MifareUltralightTag|MifareClassicTag|MifareDesfireTag)>>`, A promise to the list of `Tag`\n\n#### Device.abort()\n\nAbort command blocking the device like open().\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n### Class: Tag\nA Freefare compatible NFC tag\n\n#### Tag.getType()\n\nGet Tag type\n\n**Returns**: `string`, The tag type between `MIFARE_CLASSIC_1K`, `MIFARE_CLASSIC_4K`, `MIFARE_DESFIRE`, `MIFARE_ULTRALIGHT`, `MIFARE_ULTRALIGHT_C`\n\n#### Tag.getFriendlyName()\n\nGet Tag friendly name\n\n**Returns**: `string`, The tag friendly name\n\n#### Tag.getUID()\n\nGet Tag UID\n\n**Returns**: `string`, The tag UID\n\n\n### Class: MifareUltralightTag\nA MIFARE Ultralight tag\n\n**Extends**: `Tag`\n\n#### MifareUltralightTag.open()\n\nOpen tag for further communication\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareUltralightTag.close()\n\nClose tag to release memory and device\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareUltralightTag.read(page)\n\nRead a page on the tag\n\n**Parameters**\n\n* **page**: `Number`, The page number between 0 and 11\n\n**Returns**: `Promise.<Buffer>`, A promise to the read data (in a 4 bytes buffer)\n\n#### MifareUltralightTag.write(page, buf)\n\nWrite a page on the tag\n\n**Parameters**\n\n* **page**: `Number`, The page number between 0 and 11\n* **buf**: `Buffer`, A buffer of 4 bytes to be written on the page\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n\n### Class: MifareClassicTag\nA MIFARE Classic tag\n\n**Extends**: `Tag`\n\n\n#### MifareClassicTag.open()\n\nOpen tag for further communication\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareClassicTag.close()\n\nClose tag to release memory and device\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareClassicTag.authenticate(block, key, keyType)\n\nAfter openning the tag, an authentication is required for further operation.\n\n**Parameters**\n\n* **block**: `Number`, The block number between 0 and 63 (for 1k)\n* **key**: `Buffer`, The key\n* **keyType**: `String`, \"A\" or \"B\"\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareClassicTag.read(block)\n\nRead the given block\n\n**Parameters**\n\n* **block**: `Number`, The block number between 0 and 63 (for 1k)\n\n**Returns**: `Promise.<Buffer>`, A promise to the read data (in a 16 bytes buffer)\n\n#### MifareClassicTag.write(block, data)\n\nWrite on the given block\n\n**Parameters**\n\n* **block**: `Number`, The block number between 0 and 63 (for 1k)\n* **data**: `Buffer`, A 16 byte buffer (for 1k)\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareClassicTag.initValue(block, value, adr)\n\nInitialize a value block, with the given value and address\n\n**Parameters**\n\n* **block**: `Number`, The block number between 0 and 63 (for 1k)\n* **value**: `Number`, The Int32 value that will be stored\n* **adr**: `String`, A 1 byte address which can be used to save the storage address of a block, when implementing a powerful backup management\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareClassicTag.readValue(block)\n\nRead a value block\n\n**Parameters**\n\n* **block**: `Number`, The block number between 0 and 63 (for 1k)\n\n**Returns**: `Promise.<Object>`, A promise to an object containing value and adr : `{adr: 0, value: 0}`\n\n#### MifareClassicTag.incrementValue(block, amount)\n\nIncrement the block value by a given amount and store it in the internal data register\n\n**Parameters**\n\n* **block**: `Number`, The block number between 0 and 63 (for 1k)\n* **amount**: `Number`, The amount that will be added to the value\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareClassicTag.decrementValue(block, amount)\n\nDecrement the block value by a given amount and store it in the internal data register\n\n**Parameters**\n\n* **block**: `Number`, The block number between 0 and 63 (for 1k)\n* **amount**: `Number`, The amount that will be remove from the value\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareClassicTag.restoreValue(block)\n\nPut a block value from in the internal data register\n\n**Parameters**\n\n* **block**: `Number`, The block number between 0 and 63 (for 1k)\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareClassicTag.transferValue(block)\n\nRestore the internal data register to the given block value\n\n**Parameters**\n\n* **block**: `Number`, The block number between 0 and 63 (for 1k)\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n\n### Class: MifareDesfireTag\nA MIFARE DESFire tag\n\n**Extends**: `Tag`\n\n\n#### MifareDesfireTag.open()\n\nOpen tag for further communication\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareDesfireTag.close()\n\nClose tag to release memory and device\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareDesfireTag.authenticateDES(KeyNum, key)\n\nAuthenticate with a DES key\n\n**Parameters**\n\n* **KeyNum**: `Number`, The number of the key\n* **key**: `Buffer`, The 8 byte key\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareDesfireTag.authenticate3DES(KeyNum, key)\n\nAuthenticate with a 3DES key\n\n**Parameters**\n\n* **KeyNum**: `Number`, The number of the key\n* **key**: `Buffer`, The 16 byte key\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n#### MifareDesfireTag.getApplicationIds()\n\nList application IDs (AID)\n\n**Returns**: `Promise.<Array.<Number>>`, A promise to the AID list\n\n#### MifareDesfireTag.selectApplication(aid)\n\nSelect an application\n\n**Parameters**\n\n* **aid**: `Buffer`, Application id in 3 byte Buffer\n\n**Returns**: `Promise`, A promise to the end of the action.\n\n### MifareDesfireTag.getFileIds()\n\nList file IDs (AID)\n\n**Returns**: `Promise.<Array.<Number>>`, A promise to the File ID list\n\n### MifareDesfireTag.read(file, offset, length)\n\nRead the given file\n\n**Parameters**\n\n* **file**: `Number`, The file ID\n* **offset**: `Number`, The number of bytes before we start reading in the file\n* **length**: `Number`, The number of bytes we will read in the file\n\n**Returns**: `Promise.<Buffer>`, A promise to the read data\n\n### MifareDesfireTag.write(file, offset, length, data)\n\nWrite on the given file\n\n**Parameters**\n\n* **file**: `Number`, The file ID\n* **offset**: `Number`, The number of bytes before we start reading in the file\n* **length**: `Number`, The number of bytes we will read in the file\n* **data**: `Buffer`, A data buffer\n\n**Returns**: `Promise`, A promise to the end of the action.\n","starsCount":1,"created":"2016-12-20T07:45:34.674Z","modified":"2017-06-02T20:14:00.542Z","lastPublisher":{"name":"alabate","email":"aurelien@labate.me"},"owners":[{"name":"alabate","email":"aurelien@labate.me"}],"other":{"_attachments":{},"_from":".","_id":"freefare","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/freefare-0.1.5.tgz_1496434439484_0.2516097971238196"},"_npmUser":{"name":"alabate","email":"aurelien@labate.me"},"_npmVersion":"4.5.0","_rev":"7-b34823e037f9d77eef5ae84d05cb3da7","_shasum":"a6e04edaa8ede23ed2d5f7effce45a7585536e37","author":{"name":"Aurélien Labate","email":"aurelien@labate.me"},"bugs":{"url":"https://github.com/ALabate/node-freefare/issues"},"directories":{},"dist-tags":{"latest":"0.1.5"},"dist":{"shasum":"a6e04edaa8ede23ed2d5f7effce45a7585536e37","tarball":"https://registry.npmjs.org/freefare/-/freefare-0.1.5.tgz"},"maintainers":[{"name":"alabate","email":"aurelien@labate.me"}],"readmeFilename":"README.md","time":{"modified":"2017-06-02T20:14:00.542Z","created":"2016-12-20T07:45:34.674Z","0.1.0":"2016-12-20T07:45:34.674Z","0.1.1":"2016-12-22T17:24:49.739Z","0.1.2":"2017-01-16T03:08:27.858Z","0.1.3":"2017-01-16T04:23:35.896Z","0.1.4":"2017-04-13T22:59:52.346Z","0.1.5":"2017-06-02T20:14:00.542Z"},"users":{"alabate":true}}}