{"name":"png-img","version":"2.1.1","description":"PNG Image","main":"index.js","engines":{"node":">= 4.0.0"},"dependencies":{"nan":"^2.0.4"},"devDependencies":{"mocha":"^2.0.1","node-gyp":"^2.0.2","sinon":"^1.17.3","chai":"^3.5.0"},"scripts":{"test":"./dev/test","build":"node-gyp build","install":"node-gyp rebuild"},"license":"MIT","repository":"https://github.com/gemini-testing/png-img","homepage":"https://github.com/gemini-testing/png-img","gypfile":true,"gitHead":"393e7b7355e3bce93c44ba9a9570914a3fcdbef6","versions":[{"number":"0.1.0","date":"2014-10-15T19:29:33.420Z"},{"number":"0.1.1","date":"2014-10-15T19:38:08.327Z"},{"number":"0.2.0","date":"2014-10-17T07:20:34.447Z"},{"number":"0.2.1","date":"2014-10-29T09:13:49.858Z"},{"number":"0.3.0","date":"2014-12-10T12:18:20.666Z"},{"number":"0.4.0","date":"2014-12-22T18:53:19.503Z"},{"number":"0.4.1","date":"2014-12-29T15:35:53.417Z"},{"number":"1.0.0","date":"2015-04-01T14:11:27.807Z"},{"number":"1.1.0","date":"2015-04-09T13:28:03.946Z"},{"number":"1.1.1","date":"2015-05-05T15:09:18.686Z"},{"number":"1.1.2","date":"2015-08-08T19:09:30.229Z"},{"number":"1.1.3","date":"2015-08-10T08:41:32.047Z"},{"number":"1.1.4","date":"2015-09-21T13:24:18.009Z"},{"number":"2.0.0","date":"2016-05-10T08:45:57.935Z"},{"number":"2.1.0","date":"2016-05-27T15:46:29.849Z"},{"number":"2.1.1","date":"2016-10-28T20:36:05.233Z"}],"readme":"png-img\n=======\n\n[![Build Status](https://travis-ci.org/gemini-testing/png-img.svg)](https://travis-ci.org/gemini-testing/png-img)\n\nLite self-contained png image processing library for OS X and Linux.\n\n## Requirements\nLinux: Depends on GCC 4.6 or later\n\nOS X: Tested with Xcode 6.0 development tools (but should be ok with Xcode 5.0 also)\n\nWindows: Tested with MSVC 2013 Express\n\n## Installation\n```\nnpm install png-img\n```\n\n## API\n### new PngImg(buffer)\nCreate `PngImg` object from passed buffer with image.\n\nArguments:\n * `buf` - `Buffer` with image file content.\n```js\nvar fs = require('fs'),\n    PngImg = require('png-img');\n\nvar buf = fs.readFileSync('path/to/img.png'),\n    img = new PngImg(buf);\n```\n\n### size()\nGet image size as an object.\n```js\nconsole.log(img.size());\n```\nfor 32x32 image will print out:\n```\n{ width: 32, height: 32 }\n```\n\n### get(x, y)\nGet pixel color and alpha.\n\nReturns object:\n * r: red channel (0 to 255)\n * g: green channel (0 to 255)\n * b: blue channel (0 to 255)\n * a: alpha (0 to 255). 0 - transparent\n\n```js\nconsole.log(img.get(0, 0));\n```\nwill print pixel and color for pixel (0, 0):\n```js\n{\n  r: 100,\n  g: 150,\n  b: 200,\n  a: 255\n}\n```\n\n### fill(offsetX, offsetY, widht, height, color)\nFill region with passed color. Modifies current image.\n\nArguments:\n * `offsetX` - horizontal offset from the left side of the image\n * `offsetY` - vertical offset from the top side of the image\n * `width` - region width\n * `height` - region height\n * `color` - color as {r,g,b,a} object or as a '#XXXXXX' string\n\nReturns: current image object\n\nThrows if region is not inside the current image\n```js\nimg\n  .fill(0, 0, 16, 16, '#00ffFF') // fill with cyan\n  .fill(16, 16, 16, 16, {r: 0, g: 255, b: 255, a: 127}); // fill with half-transparent cyan\n```\n\n### set(x, y, color)\nSame as `fill(x, y, 1, 1, color)`\n\n### crop(offsetX, offsetY, widht, height)\nCrop image. Modifies current image.\n\nArguments:\n * `offsetX` - horizontal offset from the left side of the image\n * `offsetY` - vertical offset from the top side of the image\n * `width` - new width\n * `height` - new height\n\nReturns: current image object\n\nThrows if new image is not inside the current image.\n```js\nimg\n    .crop(0, 0, 16, 16)\n    .crop(8, 8, 8, 8);\n```\n\n### setSize(width, height)\nSets new image size. Modifies current image.\n\nArguments:\n * `width` - new width\n * `height` - new height\n\nReturns: current image object\n\nIf new size is less or equal than current size, than `crop` will be performed.\n\n**Note**: this method doesn't strech current image, it just sets new size. If new dimension is less than previous\nthan image will be cut. If new dimension is greater than previous than image will be extended with black area.\n```js\nvar size = img.size();\nimg\n  .setSize(size.width/2, size.height*2);\n```\n\n### insert(img, offsetX, offsetY)\nInserts image into specified place.\n\nArguments:\n * `img` - image to insert. Should be a PngImg object\n * `offsetX` - horizontal offset from the left side of the image\n * `offsetY` - vertical offset from the top side of the image\n\nJoin to images (pretend that they have same witdh):\n ```js\nvar otherImg = new PngImg(/*...*/)\nimg\n  .setSize(img.size().width, img.size().height + otherImg.size().height)\n  .insert(otherImg, 0, img.size().height);\n ```\n\n### rotateRight()\nRotates image 90 degrees clockwise\n\n### rotateLeft()\nRotates image 90 degress counterclockwise\n\n### save(file, callback)\nSave image to file. Asynchronous operation.\n\nArguments:\n * `file` - path to file to save image\n * `callback` - function with one argument (`error`). Will be called after save operation finish or on error.\n\nOverwrites existing file.\n\n```js\nimg.save('path/to/file.png', function(error) {\n    if(error) {\n        console.error('Error:', error);\n    } else {\n        console.log('OK');\n    }\n});\n```\n\n## Build\n```\nnpm run build\n```\nThis will build native node extension and place it to the `compiled` directory\n\n## Vagrant\nUse vagrant to build and test on Linux and Windows from OS X.\n\nTested with `vagrant 1.7` and `VirtualBox 4.3`.\n\n1. Install `vagrant` and `VirtualBox`.\n2. Create windows vagrant box (see [howto](dev/vagrant-win-box.md))\n3. Run `vagrant up --provider virtualbox`\n4. Specify `OS` env variable to run and test on specific platform:\n  - `npm run build`, `npm test` - current platform\n  - `OS=linux npm test` - Ubuntu 14.04\n  - `OS=linux-old npm test` - Ubuntu 12.04\n  - `OS=win npm test` - windows\n  - `OS=all npm test` - all\n","starsCount":1,"created":"2014-10-15T19:29:29.920Z","modified":"2016-10-28T20:36:05.233Z","lastPublisher":{"name":"j0tunn","email":"j0tunn@ya.ru"},"owners":[{"name":"j0tunn","email":"j0tunn@ya.ru"},{"name":"sevinf","email":"sevinf@yandex-team.ru"}],"other":{"_attachments":{},"_from":".","_id":"png-img","_nodeVersion":"4.4.3","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/png-img-2.1.1.tgz_1477686962539_0.304471232695505"},"_npmUser":{"name":"j0tunn","email":"j0tunn@ya.ru"},"_npmVersion":"2.15.1","_rev":"2-1f72ed6f415744a315ed3a8560d7a3f6","_shasum":"9a765ae1bfd9cb9f7c646e14b1ff5c873603a8b6","author":{"name":"Anton Usmansky","email":"anton.usmansky@gmail.com","url":"https://github.com/j0tunn"},"bugs":{"url":"https://github.com/gemini-testing/png-img/issues"},"contributors":[{"name":"The following authors have created the source code of \"png-img\""},{"name":"published and distributed by YANDEX LLC as the owner:"},{"name":"Anton Usmansky","email":"cody0@yandex-team.ru"}],"directories":{},"dist-tags":{"latest":"2.1.1"},"dist":{"shasum":"9a765ae1bfd9cb9f7c646e14b1ff5c873603a8b6","tarball":"http://registry.npmjs.org/png-img/-/png-img-2.1.1.tgz"},"maintainers":[{"name":"j0tunn","email":"j0tunn@ya.ru"},{"name":"sevinf","email":"sevinf@yandex-team.ru"}],"readmeFilename":"README.md","time":{"modified":"2016-10-28T20:36:05.233Z","created":"2014-10-15T19:29:29.920Z","0.1.0":"2014-10-15T19:29:33.420Z","0.1.1":"2014-10-15T19:38:08.327Z","0.2.0":"2014-10-17T07:20:34.447Z","0.2.1":"2014-10-29T09:13:49.858Z","0.3.0":"2014-12-10T12:18:20.666Z","0.4.0":"2014-12-22T18:53:19.503Z","0.4.1":"2014-12-29T15:35:53.417Z","1.0.0":"2015-04-01T14:11:27.807Z","1.1.0":"2015-04-09T13:28:03.946Z","1.1.1":"2015-05-05T15:09:18.686Z","1.1.2":"2015-08-08T19:09:30.229Z","1.1.3":"2015-08-10T08:41:32.047Z","1.1.4":"2015-09-21T13:24:18.009Z","2.0.0":"2016-05-10T08:45:57.935Z","2.1.0":"2016-05-27T15:46:29.849Z","2.1.1":"2016-10-28T20:36:05.233Z"},"users":{"itonyyo":true}}}