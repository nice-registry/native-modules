{"name":"x509","version":"0.3.2","description":"Simple X509 certificate parser.","main":"index.js","repository":"https://github.com/Southern/node-x509","scripts":{"test":"node test/test","install":"node-gyp rebuild"},"license":"MIT","dependencies":{"nan":"2.2.0"},"gypfile":true,"gitHead":"380d771c7e1a8cf93ad0ed03c6b6b2e722337197","homepage":"https://github.com/Southern/node-x509#readme","versions":[{"number":"0.0.1","date":"2013-07-02T15:39:24.906Z"},{"number":"0.0.2","date":"2013-07-11T02:15:25.463Z"},{"number":"0.0.3","date":"2013-07-12T04:17:41.005Z"},{"number":"0.0.4","date":"2013-07-24T12:44:44.326Z"},{"number":"0.0.5","date":"2013-08-01T19:51:44.807Z"},{"number":"0.0.6","date":"2013-08-24T00:03:50.226Z"},{"number":"0.0.7","date":"2014-01-01T03:50:52.104Z"},{"number":"0.1.4","date":"2014-09-14T13:47:33.257Z"},{"number":"0.2.0","date":"2015-09-09T16:03:55.851Z"},{"number":"0.2.1","date":"2015-09-09T16:18:25.302Z"},{"number":"0.2.2","date":"2015-09-10T07:30:49.962Z"},{"number":"0.2.3","date":"2015-11-06T15:08:56.859Z"},{"number":"0.2.4","date":"2016-02-22T16:08:25.012Z"},{"number":"0.2.5","date":"2016-05-13T08:30:02.995Z"},{"number":"0.2.6","date":"2016-06-15T21:51:40.033Z"},{"number":"0.3.0","date":"2016-10-03T01:43:13.740Z"},{"number":"0.3.1","date":"2017-02-06T19:17:31.243Z"},{"number":"0.3.2","date":"2017-03-21T23:54:35.102Z"}],"readme":"node-x509\n=========\n\n[![Build Status](https://travis-ci.org/Southern/node-x509.svg?branch=master)](https://travis-ci.org/Southern/node-x509)\n\nSimple X509 certificate parser.\n\n## Installation\n\nFrom NPM *(recommended)*: `npm install x509`\n\nBuilding and testing from source:\n```\nsudo npm install -g node-gyp\nnpm install\nnpm test\n```\n\n## Usage\nReading from a file:\n```js\nconst x509 = require('x509');\nvar issuer = x509.getIssuer(__dirname + '/certs/your.crt');\n```\n\nReading from a string:\n```js\nconst fs = require('fs'),\n      x509 = require('x509');\nvar issuer = x509.getIssuer(fs.readFileSync('./certs/your.crt').toString());\n```\n\n## Methods\n**Notes:**\n- `cert` may be a filename or a raw base64 encoded PEM string in any of these methods.\n\n#### x509.getAltNames(`cert`)\nParse certificate with `x509.parseCert` and return the alternate names.\n\n```js\nconst x509 = require('x509');\nvar altNames = x509.getAltNames(__dirname + '/certs/nodejitsu.com.crt');\n/*\naltNames = [ '*.nodejitsu.com', 'nodejitsu.com' ]\n*/\n```\n\n#### x509.getIssuer(`cert`)\nParse certificate with `x509.parseCert` and return the issuer.\n\n```js\nconst x509 = require('x509');\nvar issuer = x509.getIssuer(__dirname + '/certs/nodejitsu.com.crt');\n/*\nissuer = { countryName: 'GB',\n  stateOrProvinceName: 'Greater Manchester',\n  localityName: 'Salford',\n  organizationName: 'COMODO CA Limited',\n  commonName: 'COMODO High-Assurance Secure Server CA' }\n*/\n```\n\n#### x509.getSubject(`cert`)\nParse certificate with `x509.parseCert` and return the subject.\n\n```js\nconst x509 = require('x509');\nvar subject = x509.getSubject(__dirname + '/certs/nodejitsu.com.crt');\n/*\nsubject = { countryName: 'US',\n  postalCode: '10010',\n  stateOrProvinceName: 'NY',\n  localityName: 'New York',\n  streetAddress: '902 Broadway, 4th Floor',\n  organizationName: 'Nodejitsu',\n  organizationalUnitName: 'PremiumSSL Wildcard',\n  commonName: '*.nodejitsu.com' }\n*/\n```\n\n#### x509.parseCert(`cert`)\nParse subject, issuer, valid before and after date, and alternate names from certificate.\n\n```js\nconst x509 = require('x509');\nvar cert = x509.parseCert(__dirname + '/certs/nodejitsu.com.crt');\n/*\ncert = { subject:\n   { countryName: 'US',\n     postalCode: '10010',\n     stateOrProvinceName: 'NY',\n     localityName: 'New York',\n     streetAddress: '902 Broadway, 4th Floor',\n     organizationName: 'Nodejitsu',\n     organizationalUnitName: 'PremiumSSL Wildcard',\n     commonName: '*.nodejitsu.com' },\n  issuer:\n   { countryName: 'GB',\n     stateOrProvinceName: 'Greater Manchester',\n     localityName: 'Salford',\n     organizationName: 'COMODO CA Limited',\n     commonName: 'COMODO High-Assurance Secure Server CA' },\n  notBefore: Sun Oct 28 2012 20:00:00 GMT-0400 (EDT),\n  notAfter: Wed Nov 26 2014 18:59:59 GMT-0500 (EST),\n  altNames: [ '*.nodejitsu.com', 'nodejitsu.com' ],\n  signatureAlgorithm: 'sha1WithRSAEncryption',\n  fingerPrint: 'E4:7E:24:8E:86:D2:BE:55:C0:4D:41:A1:C2:0E:06:96:56:B9:8E:EC',\n  publicKey: {\n    algorithm: 'rsaEncryption',\n    e: '65537',\n    n: '.......' } }\n*/\n```\n\n\n#### x509.verify(`cert`, `CABundlePath`, function(err, result){ /*...*/})\n\nPerforms basic certificate validation against a bundle of ca certificates.\n\nIt accepts an error-first callback as first argument. If the error is null, then\nthe certificate is valid.\n\nThe error messages are the same returned by openssl: [x509_verify_cert_error_string](https://www.openssl.org/docs/man1.0.2/crypto/X509_STORE_CTX_get_error.html)\n\n\n**Note:**\nAs now, this function only accepts absolute paths to existing files as arguments\n\n```js\nconst x509 = require('x509');\n\nx509.verify(\n  __dirname + '/certs/user.com.crt',\n  __dirname + 'enduser-example.com.chain',\n  function(err, result){ /*...*/}\n);\n\n```\n\n## Examples\nChecking the date to make sure the certificate is active:\n```js\nconst x509 = require('x509');\nvar cert = x509.parseCert('yourcert.crt'),\n    date = new Date();\n\nif (cert.notBefore > date) {\n  // Certificate isn't active yet.\n}\nif (cert.notAfter < date) {\n  // Certificate has expired.\n}\n```\n\n## License\n\nMIT\n\n#### Alternative implementation / build issues\nIf you are suffering from hard to fix build issues, there is an alternative (pure javascript) implementation using emscripten: https://github.com/encharm/x509.js (based on node-x509, slightly different API)\n","starsCount":3,"created":"2013-07-02T15:39:23.730Z","modified":"2017-03-21T23:54:35.102Z","lastPublisher":{"name":"southern","email":"npm@netrefuge.net"},"owners":[{"name":"southern","email":"educability@gmail.com"},{"name":"yorkie","email":"yorkiefixer@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"x509","_nodeVersion":"8.0.0-pre","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/x509-0.3.2.tgz_1490140474400_0.07698000175878406"},"_npmUser":{"name":"southern","email":"npm@netrefuge.net"},"_npmVersion":"4.1.2","_rev":"4-4933cbbf3970497e80464fd988a0e599","_shasum":"ea5243ac5a4e5c44f12b25231b707142e4d45ec4","author":{"name":"Colton Baker"},"bugs":{"url":"https://github.com/Southern/node-x509/issues"},"directories":{},"dist-tags":{"latest":"0.3.2"},"dist":{"shasum":"ea5243ac5a4e5c44f12b25231b707142e4d45ec4","tarball":"https://registry.npmjs.org/x509/-/x509-0.3.2.tgz"},"maintainers":[{"name":"southern","email":"educability@gmail.com"},{"name":"yorkie","email":"yorkiefixer@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-21T23:54:35.102Z","created":"2013-07-02T15:39:23.730Z","0.0.1":"2013-07-02T15:39:24.906Z","0.0.2":"2013-07-11T02:15:25.463Z","0.0.3":"2013-07-12T04:17:41.005Z","0.0.4":"2013-07-24T12:44:44.326Z","0.0.5":"2013-08-01T19:51:44.807Z","0.0.6":"2013-08-24T00:03:50.226Z","0.0.7":"2014-01-01T03:50:52.104Z","0.1.4":"2014-09-14T13:47:33.257Z","0.2.0":"2015-09-09T16:03:55.851Z","0.2.1":"2015-09-09T16:18:25.302Z","0.2.2":"2015-09-10T07:30:49.962Z","0.2.3":"2015-11-06T15:08:56.859Z","0.2.4":"2016-02-22T16:08:25.012Z","0.2.5":"2016-05-13T08:30:02.995Z","0.2.6":"2016-06-15T21:51:40.033Z","0.3.0":"2016-10-03T01:43:13.740Z","0.3.1":"2017-02-06T19:17:31.243Z","0.3.2":"2017-03-21T23:54:35.102Z"},"users":{"fdaciuk":true,"seachange":true,"manikantag":true}}}