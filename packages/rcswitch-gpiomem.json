{"name":"rcswitch-gpiomem","version":"0.3.2","description":"Rootless control of your wireless power outlet sockets with RCSwitch for the Raspberry Pi. Fork of https://github.com/marvinroger/node-rcswitch.","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","install":"node-gyp rebuild"},"repository":"https://github.com/n8henrie/node-rcswitch-gpiomem","keywords":["rpi","raspberrypi","rcswitch","433","rf","wireless","gpiomem"],"engines":{"node":">=0.8"},"license":"GPL-2.0","gypfile":true,"homepage":"http://n8henrie.com/2015/12/control-an-rf-outlet-with-siri-via-homebridge","dependencies":{"bindings":"^1.2.1","nan":"^2.0.8"},"gitHead":"344c4cf48d28eafb28f243c6df42f761128ea7fa","versions":[{"number":"0.3.0","date":"2015-12-27T23:10:17.093Z"},{"number":"0.3.1","date":"2016-06-25T20:35:40.217Z"},{"number":"0.3.2","date":"2016-10-29T05:54:34.665Z"}],"readme":"# node-rcswitch-gpiomem\n\n<http://n8henrie.com/2015/12/control-an-rf-outlet-with-siri-via-homebridge>\n\nFork of <https://github.com/marvinroger/node-rcswitch> with `/dev/gpiomem`\naccess for rootless use on Raspbian Jessie as well as an exposing\nthe `setPulseLength` method and expanding `rcswitch.send` to accept a decimal\nRF code (with bit length), as per the c++ version. Renamed as it may not be\nbackwards compatible with Wheezy / systems without `/dev/gpiomem`.\n\nMy contribution has been negligible; all credit goes to the original developers\nof these libraries:\n\n- <https://github.com/marvinroger/node-rcswitch>\n- <https://github.com/FWeinb/homebridge-rcswitch>\n- <https://github.com/32leaves/rcswitch-NodeOnPi>\n- <https://github.com/r10r/rcswitch-pi>\n- <http://code.google.com/p/rc-switch>\n- <https://projects.drogon.net/raspberry-pi/wiringpi>\n\nAdditionally, this fork uses\n[sched.h](http://pubs.opengroup.org/onlinepubs/007908775/xsh/sched.h.html) to\ntry to give the process a high priority during the RF transmission (currently\nonly implemented for `rcswitch.send()`). I've found this important for\noptimizing reliability of the transmission if the CPU is busy. Reference [my\nrf_pi post and\nrepository](http://n8henrie.com/2015/12/rf_pi-control-rf-outlets-from-your-raspberry-pi-without-sudo-or-root/)\nfor more information on using `libcap2-bin` and `setcap` to accomplish this,\nbut the short version is: `sudo apt-get install libcap2-bin && sudo setcap\ncap_sys_nice+ep $(readlink -f $(which node))`. It works just fine without this\nif you don't want to bother or are concerned about the security ramifications.\n\n## Introduction\n\nNode bindings for the rcswitch Raspberry Pi port: <https://github.com/r10r/rcswitch-pi>.\n\nPersonally, I have only tested on node v4.2.3. Per original author:\n\n> It should be compatible with Node 0.8, 0.10 and 0.12 (tested only on 0.10 and\n> 0.12). Successfully tested on Raspbian Wheezy up-to-date as of 2015-02-28.\n\n## Requirements\n\n- Like the c++ version of rcswitch, [WiringPi must be\n  installed](https://projects.drogon.net/raspberry-pi/wiringpi/download-and-install/)\n  in order to compile.\n- To work without root by way of `/dev/gpiomem` part to work, it should be run\n  on Raspbian Jessie with [wiringPi >=\n  2.29](wiringpi.com/wiringpi-update-to-2-29/)\n- Both the data and the power Pins of the 315/433Mhz emitter must be connected\n  to the RPi. Note the number of the ~~WiringPi data~~ BCM Pin. (see\n  http://wiringpi.com/pins/)\n\n## Usage\n\n```javascript\nvar rcswitch = require('rcswitch-gpiomem'); // May throw an error if /dev/gpiomem is not accessible\nrcswitch.enableTransmit(17); // Use **BCM** pin 17\nrcswitch.setPulseLength(190); // Set pulse length (see https://github.com/n8henrie/rf_pi)\nrcswitch.setRepeatTransmit(15); // Set number of repeat transmissions\nrcswitch.send(12345, 24) // send(code, bitlength)\n\n// Alternative\nrcswitch.switchOn(\"10110\", 1); // Switch on the first unit of 10110 (code 1x23x) group\nrcswitch.switchOff(\"11000\", 2); // Switch off the second unit of 11000 (code 12xxx) group\n```\n\nNote: If testing / experimenting from a local copy of the repo, you need to\nrequire the base directory of the repo:\n\n```bash\ngit clone https://github.com/n8henrie/node-rcswitch-gpiomem.git\ncd node-rcswitch-gpiomem\nnpm install .\nnode\n> var rcswitch = require('.')\nrcswitch.enableTransmit(17);\n```\n\n## API\n\n### Configuration\n\n#### `rcswitch.enableTransmit(int pin)`\n\nEnable transmission on BCM `pin`. On Jessie should \"just work\". **NB:** if you to **not** want to use `/dev/gpiomem`, you'll need to first export the pin with the wiringPi `gpio` utility to avoid needing root.`\n\n- `pin` - (Number) data Pin to use following [the WiringPi schema](http://wiringpi.com/pins/)\n\nReturn true if `pin` is an integer, false otherwise.\n\n#### `rcswitch.disableTransmit()`\n\nDisable transmission (set the pin to -1 which disable any following function call).\n\nReturn true.\n\n#### `rcswitch.setPulseLength(int pLength)`\n\n- `pLength` - RF pulse length, defaults to 190.\n- See: <http://n8henrie.com/2015/12/rf_pi>\n\n#### `rcswitch.setRepeatTransmit(int nRepeat)`\n\n- `nRepeat` - Number of repeat transmissions (default 10)\n\n#### `rcswitch.send(int code, int bLength)`\n\n- `code` - **decimal** RF code to send\n- `bLength` - bit length of decimal RF code\n- See: <http://n8henrie.com/2015/12/rf_pi>\n\nReturn true if both are Uint32, otherwise false.\n\n#### `rcswitch.send(`char* codeWord`)`\n\n- `codeWord` - (String) codeword. Can use this to send the **binary** RF code,\nsee: <http://n8henrie.com/2015/12/rf_pi>\n\nReturn true.\n\n## Specific RF receiver types\n\nThis is for use with specific RF protocols that I have never needed -- I just\nuse [RF_Snifer](https://github.com/n8henrie/rf_pi) to get the code. -@n8henrie\n\n### Type A\n\n![Type A switch](https://raw.github.com/n8henrie/node-rcswitch-gpiomem/master/img/type_a.jpg \"Type A switch\")\n\n#### rcswitch.switchOn(`group`, `switch`)\n\nSwitch a remote switch on (Type A with 10 pole DIP switches).\n\n* `group` - (String) code of the switch group (refers to DIP switches 1, 2, 3, 4 and 5 where \"1\" = on and \"0\" = off - e.g. if all DIP switches are on it's \"11111\")\n* `switch` - (Number) switch number (can be 1 (if DIP switch A is on), 2 (if DIP switch B is on) and so on until 4)\n\nReturn true.\n\n#### rcswitch.switchOff(`group`, `switch`)\n\nSwitch a remote switch off (Type A with 10 pole DIP switches).\n\n* `group` - (String) code of the switch group (refers to DIP switches 1, 2, 3, 4 and 5 where \"1\" = on and \"0\" = off - e.g. if all DIP switches are on it's \"11111\")\n* `switch` - (Number) switch number (can be 1 (if DIP switch A is on), 2 (if DIP switch B is on) and so on until 4)\n\nReturn true.\n\n### Type B\n\n![Type B switch](https://raw.github.com/n8henrie/node-rcswitch-gpiomem/master/img/type_b.jpg \"Type B switch\")\n\n#### rcswitch.switchOn(`group`, `switch`)\n\nSwitch a remote switch on (Type B with two rotary/sliding switches).\n\n* `group` - (Number) group (can be 1, 2, 3, 4)\n* `switch` - (Number) switch (can be 1, 2, 3, 4)\n\nReturn true.\n\n#### rcswitch.switchOff(`group`, `switch`)\n\nSwitch a remote switch off (Type B with two rotary/sliding switches).\n\n* `group` - (Number) group (can be 1, 2, 3, 4)\n* `switch` - (Number) switch (can be 1, 2, 3, 4)\n\nReturn true.\n\n### Type C\n\n#### rcswitch.switchOn(`family`, `group`, `switch`)\n\nSwitch a remote switch on (Type C Intertechno).\n\n* `family` - (String) familycode (can be a, b, c, d, e, f)\n* `group` - (Number) group (can be 1, 2, 3, 4)\n* `switch` - (Number) switch (can be 1, 2, 3, 4)\n\nReturn true.\n\n#### rcswitch.switchOff(`family`, `group`, `switch`)\n\nSwitch a remote switch off (Type C Intertechno).\n\n* `family` - (String) familycode (can be a, b, c, d, e, f)\n* `group` - (Number) group (can be 1, 2, 3, 4)\n* `switch` - (Number) switch (can be 1, 2, 3, 4)\n\nReturn true.\n","created":"2015-12-27T23:10:17.093Z","modified":"2016-10-29T05:54:34.665Z","lastPublisher":{"name":"n8henrie","email":"n8henrie@gmail.com"},"owners":[{"name":"n8henrie","email":"n8henrie@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"rcswitch-gpiomem","_nodeVersion":"4.5.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/rcswitch-gpiomem-0.3.2.tgz_1477720472461_0.7808223424945027"},"_npmUser":{"name":"n8henrie","email":"n8henrie@gmail.com"},"_npmVersion":"2.15.9","_rev":"2-70bba04b1ee52a8a73d7bbcc1bea9a76","_shasum":"c32e76f3fac4883bd441b2909e5d3e6aa9b25c01","author":{"name":"Nathan Henrie","email":"http://n8henrie.com"},"bugs":{"url":"https://github.com/n8henrie/node-rcswitch-gpiomem/issues"},"directories":{},"dist-tags":{"latest":"0.3.2"},"dist":{"shasum":"c32e76f3fac4883bd441b2909e5d3e6aa9b25c01","tarball":"http://registry.npmjs.org/rcswitch-gpiomem/-/rcswitch-gpiomem-0.3.2.tgz"},"maintainers":[{"name":"n8henrie","email":"n8henrie@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-29T05:54:34.665Z","created":"2015-12-27T23:10:17.093Z","0.3.0":"2015-12-27T23:10:17.093Z","0.3.1":"2016-06-25T20:35:40.217Z","0.3.2":"2016-10-29T05:54:34.665Z"}}}