{"name":"node-core-audio-edison","version":"0.5.0","dependencies":{"audio-streamer":">= 0.1.0","fft":"~0.2.1","nan":"^1.8.4","node-waveheader":"git://github.com/mrose17/node-waveheader.git","portfinder":"0.2.1"},"description":"Core native node.js audio functionality, including sound card access and audio streaming","main":"./node-core-audio","engines":{"node":">=0.8.0"},"keywords":["audio","dsp","processing","portaudio","sound","synth","signal","streaming","edison","intel","buffer"],"licenses":[{"type":"MIT","url":"http://raw.github.com/ZECTBynmo/node-core-audio/master/LICENSE"}],"repository":"https://github.com/GeorgeStrakhov/node-core-audio","scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"69565baa1d8c173f3345cb2cd744d60818af692d","homepage":"https://github.com/GeorgeStrakhov/node-core-audio#readme","versions":[{"number":"0.5.0","date":"2015-09-22T09:23:02.165Z"}],"readme":"Node Core Audio\n==================\n\n![alt tag](https://nodei.co/npm-dl/node-core-audio.png)\n\nA C++ extension for node.js that gives javascript access to audio buffers and basic audio processing functionality\n\nRight now, it's basically a node.js binding for PortAudio.\n\nInstallation\n=====\n\n```\nnpm install node-core-audio\n```\n\nBasic Usage\n=====\n\nBelow is the most basic use of the audio engine. We create a new instance of\nnode-core-audio, and then give it our processing function. The audio engine\nwill call the audio callback whenever it needs an output buffer to send to\nthe sound card.\n\n```javascript\n// Create a new instance of node-core-audio\nvar coreAudio = require(\"node-core-audio\");\n\n// Create a new audio engine\nvar engine = coreAudio.createNewAudioEngine();\n\n// Add an audio processing callback\n// This function accepts an input buffer coming from the sound card,\n// and returns an ourput buffer to be sent to your speakers.\n//\n// Note: This function must return an output buffer\nfunction processAudio( inputBuffer ) {\n\tconsole.log( \"%d channels\", inputBuffer.length );\n\tconsole.log( \"Channel 0 has %d samples\", inputBuffer[0].length );\n\n\treturn inputBuffer;\n}\n\nengine.addAudioCallback( processAudio );\n```\n\n// Alternatively, you can read/write samples to the sound card manually\n```javascript\nvar engine = coreAudio.createNewAudioEngine();\n\n// Grab a buffer\nvar buffer = engine.read();\n\n// Silence the 0th channel\nfor( var iSample=0; iSample<inputBuffer[0].length; ++iSample )\n\tbuffer[0][iSample] = 0.0;\n\n// Send the buffer back to the sound card\nengine.write( buffer );\n```\n\nImportant! Processing Thread\n=====\nWhen you are writing code inside of your audio callback, you are operating on\nthe processing thread of the application. This high priority environment means you\nshould try to think about performance as much as possible. Allocations and other\ncomplex operations are possible, but dangerous.\n\nIF YOU TAKE TOO LONG TO RETURN A BUFFER TO THE SOUND CARD, YOU WILL HAVE AUDIO DROPOUTS\n\nThe basic principle is that you should have everything ready to go before you enter\nthe processing function. Buffers, objects, and functions should be created in a constructor or static function outside of the audio callback whenever possible. The\nexamples in this readme are not necessarily good practice as far as performance is concerned.\n\nThe callback is only called if all buffers has been processed by the soundcard.\n\nAudio Engine Options\n=====\n* sampleRate [default 44100]\n  * Sample rate - number of samples per second in the audio stream\n* sampleFormat [default sampleFormatFloat32]\n  * Bit depth - Number of bits used to represent sample values\n  * formats are sampleFormatFloat32, sampleFormatInt32, sampleFormatInt24, sampleFormatInt16, sampleFormatInt8, sampleFormatUInt8.\n* framesPerBuffer [default 256]\n  * Buffer length - Number of samples per buffer\n* interleaved [default false]\n  * Interleaved / Deinterleaved - determines whether samples are given to you as a two dimensional array (buffer[channel][sample]) (deinterleaved) or one buffer with samples from alternating channels (interleaved).\n* inputChannels [default 2]\n  * Input channels - number of input channels\n* outputChannels [default 2]\n  * Output channels - number of output channels\n* inputDevice [default to Pa_GetDefaultInputDevice]\n  * Input device - id of the input device\n* outputDevice [default to Pa_GetDefaultOutputDevice]\n  * Output device - id of the output device\n\nAPI\n=====\nFirst things first\n```javascript\nvar coreAudio = require(\"node-core-audio\");\n```\nCreate and audio processing function\n```javascript\nfunction processAudio( inputBuffer ) {\n    // Just print the value of the first sample on the left channel\n    console.log( inputBuffer[0][0] );\n}\n```\n\nInitialize the audio engine and setup the processing loop\n```javascript\nvar engine = coreAudio.createNewAudioEngine();\n\nengine.addAudioCallback( processAudio );\n```\n\nGeneral functionality\n```javascript\n// Returns whether the audio engine is active\nbool engine.isActive();\n\n// Updates the parameters and restarts the engine. All keys from getOptions() are available.\nengine.setOptions({\n\tinputChannels: 2\n});\n\n// Returns all parameters\narray engine.getOptions();\n\n// Reads buffer of the input of the soundcard and returns as array.\n// Note: this is a blocking call, don't take too long!\narray engine.read();\n\n// Writes the buffer to the output of the soundcard. Returns false if underflowed.\n// notic: blocking i/o\nbool engine.write(array input);\n\n// Returns the name of a given device\nstring engine.getDeviceName( int inputDeviceIndex );\n\n// Returns the total number of audio devices\nint engine.getNumDevices();\n```\n\nKnown Issues / TODO\n=====\n\n* Add FFTW to C++ extension, so you can get fast FFT's from javascript, and also register for the FFT of incoming audio, rather than the audio itself\n* Add support for streaming audio over sockets\n\n\nLicense\n=====\nMIT - See LICENSE file.\n\nCopyright Mike Vegeto, 2013\n","created":"2015-09-22T09:23:02.165Z","modified":"2015-09-22T09:23:02.165Z","lastPublisher":{"name":"georgestrakhov","email":"george.strakhov@gmail.com"},"owners":[{"name":"georgestrakhov","email":"george.strakhov@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-core-audio-edison","_nodeVersion":"0.12.7","_npmUser":{"name":"georgestrakhov","email":"george.strakhov@gmail.com"},"_npmVersion":"2.11.3","_rev":"1-02a2b9fe514c1bfe686a3983de66a2cc","_shasum":"2177ad6969ab7eb0976e541dfbecbe066c4edce5","author":{"name":"Mike Vegeto","email":"michael.vegeto@gmail.com","url":"http://mikevegeto.com/"},"bugs":{"url":"https://github.com/GeorgeStrakhov/node-core-audio/issues"},"contributors":[{"name":"Marc J. Schmidt","email":"marc@kryn.org","url":"http://marcjschmidt.de/"},{"name":"Jeremiah Senkpiel","email":"fishrock123@rocketmail.com","url":"http://searchbeam.jit.su/"},{"name":"Daniel Church","email":"CrazyNorman@gmail.com","url":"https://github.com/anprogrammer/"},{"name":"George Strakhov","email":"george.strakhov@gmail.com"}],"directories":{},"dist-tags":{"latest":"0.5.0"},"dist":{"shasum":"2177ad6969ab7eb0976e541dfbecbe066c4edce5","tarball":"http://registry.npmjs.org/node-core-audio-edison/-/node-core-audio-edison-0.5.0.tgz"},"maintainers":[{"name":"georgestrakhov","email":"george.strakhov@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-09-22T09:23:02.165Z","created":"2015-09-22T09:23:02.165Z","0.5.0":"2015-09-22T09:23:02.165Z"}}}