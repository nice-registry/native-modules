{"name":"syspipe","version":"0.1.5","description":"Access to the operating system native pipe implementation","main":"build/Release/syspipe.node","scripts":{"test":"test.js","install":"node-gyp rebuild"},"files":["README.md","LICENSE","binding.gyp","pipe.cc","test.js"],"repository":"https://github.com/jpenalbae/syspipe","keywords":["pipe","syscall","native","ospipe","syspipe"],"license":"LGPL-3.0","gypfile":true,"homepage":"https://github.com/jpenalbae/syspipe","dependencies":{"nan":"^2.0.5"},"gitHead":"f89480f096e840e0cd33818dc1757a66c7b2a49a","versions":[{"number":"0.1.0","date":"2015-04-20T08:05:29.342Z"},{"number":"0.1.1","date":"2015-04-20T09:11:20.472Z"},{"number":"0.1.2","date":"2015-04-20T09:15:29.951Z"},{"number":"0.1.3","date":"2015-05-15T05:01:00.831Z"},{"number":"0.1.4","date":"2015-05-15T05:04:08.076Z"},{"number":"0.1.5","date":"2015-09-09T13:41:17.355Z"}],"readme":"# Syspipe\nnode.js module to access operating system native pipe implementation. For more info check  \"man 2 pipe\"\n\nThis interface simply gives you the ability to call the operating system `pipe` system call. It will return an object with the input and output file descriptors\n\n```\n$ node\n> require('syspipe').pipe()\n{ read: 13, write: 14 }\n```\n\nThis is generally not useful for most node program, as the pipe has a limited size imposed by the os, and if you exceed that your program will block until it is read -- and since node is single threaded by nature, you will not be able to read from the pipe and you end up deadlocked.\n\nHowever where this extension is useful, is if you have a native threaded extension which requires data to be read from a FD, then is a handy way of passing data from the node envirionment to the extension.\n\n\n# Install\n```\n$ npm install syspipe\n```\n\n# Usage\n```js\nvar fs = require('fs');\nvar syspipe = require('syspipe');\n\nvar buf = new Buffer(1024);\nvar read = 0;\n\nvar pipe = syspipe.pipe();\nfs.writeSync(pipe.write, 'hello world');\nread = fs.readSync(pipe.read, buf, 0, 1024, null);\n\nconsole.log('Pipe read: ' + buf.slice(0, read).toString());\n```\n\nNative pipes can also be useful to interact with child processes executed from node.js in a sync manner.\n\nExample:\n```js\nvar proc = require('child_process');\nvar fs = require('fs');\nvar syspipe = require('syspipe');\n\nvar buf = new Buffer(1024);\nvar read = 0;\n\n\nvar pipe = syspipe.pipe();\nvar options = { stdio: ['pipe', pipe.write, 'pipe'] };\nvar ls = proc.spawn('r2', ['-q0', '/bin/ls'], options);\n\nvar OUT = pipe.read;\nvar IN = ls.stdin['_handle'].fd;\n\n\nread = fs.readSync(OUT, buf, 0, 1024, null);\nconsole.log('[+] read ' + read + ' bytes');\n\nfs.writeSync(IN, 'f\\n');\nread = fs.readSync(OUT, buf, 0, 1024, null);\nvar result = buf.slice(0, read-1);\n\nconsole.log(result.toString());\nconsole.log('[+] Read: ' + read + ' bytes');\n\nfs.writeSync(IN, 'q\\n');\n```\n","created":"2015-04-20T08:05:29.342Z","modified":"2015-09-09T13:41:17.355Z","lastPublisher":{"name":"jpenalba","email":"jpenalbae@gmail.com"},"owners":[{"name":"jpenalba","email":"jpenalbae@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"syspipe","_nodeVersion":"4.0.0","_npmUser":{"name":"jpenalba","email":"jpenalbae@gmail.com"},"_npmVersion":"2.14.2","_rev":"1-9f5cdc3c47c79ea88fd3037789ea7ab4","_shasum":"4cdb3420fe59855f30fbd8f0a7cfdb22814f082e","author":{"name":"Jaime Pe√±alba","email":"jpenalbae@gmail.com"},"bugs":{"url":"https://github.com/jpenalbae/syspipe/issues"},"directories":{},"dist-tags":{"latest":"0.1.5"},"dist":{"shasum":"4cdb3420fe59855f30fbd8f0a7cfdb22814f082e","tarball":"http://registry.npmjs.org/syspipe/-/syspipe-0.1.5.tgz"},"maintainers":[{"name":"jpenalba","email":"jpenalbae@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-09-09T13:41:17.355Z","created":"2015-04-20T08:05:29.342Z","0.1.0":"2015-04-20T08:05:29.342Z","0.1.1":"2015-04-20T09:11:20.472Z","0.1.2":"2015-04-20T09:15:29.951Z","0.1.3":"2015-05-15T05:01:00.831Z","0.1.4":"2015-05-15T05:04:08.076Z","0.1.5":"2015-09-09T13:41:17.355Z"}}}