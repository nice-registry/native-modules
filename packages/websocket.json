{"name":"websocket","description":"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.","keywords":["websocket","websockets","socket","networking","comet","push","RFC-6455","realtime","server","client"],"version":"1.0.24","repository":"https://github.com/theturtle32/WebSocket-Node","homepage":"https://github.com/theturtle32/WebSocket-Node","engines":{"node":">=0.8.0"},"dependencies":{"debug":"^2.2.0","nan":"^2.3.3","typedarray-to-buffer":"^3.1.2","yaeti":"^0.0.6"},"devDependencies":{"buffer-equal":"^1.0.0","faucet":"^0.0.1","gulp":"git+https://github.com/gulpjs/gulp.git#4.0","gulp-jshint":"^2.0.4","jshint-stylish":"^2.2.1","jshint":"^2.0.0","tape":"^4.0.1"},"config":{"verbose":false},"scripts":{"install":"(node-gyp rebuild 2> builderror.log) || (exit 0)","test":"faucet test/unit","gulp":"gulp"},"main":"index","browser":"lib/browser.js","license":"Apache-2.0","gitHead":"0e15f9445953927c39ce84a232cb7dd6e3adf12e","versions":[{"number":"0.0.1","date":"2011-07-05T23:56:30.823Z"},{"number":"0.0.2","date":"2011-07-18T06:04:02.923Z"},{"number":"0.0.3","date":"2011-07-18T21:02:20.583Z"},{"number":"0.0.4","date":"2011-07-18T23:52:10.397Z"},{"number":"0.0.5","date":"2011-07-20T01:49:40.651Z"},{"number":"0.0.6","date":"2011-07-20T03:25:50.541Z"},{"number":"0.0.7","date":"2011-07-23T02:45:56.734Z"},{"number":"0.0.8","date":"2011-08-01T22:58:04.540Z"},{"number":"0.0.9","date":"2011-08-09T01:44:38.024Z"},{"number":"0.0.10","date":"2011-08-10T01:46:03.649Z"},{"number":"0.0.11","date":"2011-08-12T02:02:23.844Z"},{"number":"0.0.12","date":"2011-08-12T04:11:10.739Z"},{"number":"0.0.13","date":"2011-08-18T23:47:29.899Z"},{"number":"0.0.14","date":"2011-08-25T05:43:31.961Z"},{"number":"0.0.15","date":"2011-08-30T22:37:13.100Z"},{"number":"0.0.16","date":"2011-09-05T20:47:34.105Z"},{"number":"0.0.17","date":"2011-09-25T19:48:05.758Z"},{"number":"0.0.18","date":"2011-10-11T21:14:45.409Z"},{"number":"0.0.19","date":"2011-10-11T21:16:10.076Z"},{"number":"0.0.20","date":"2011-10-20T08:28:48.776Z"},{"number":"1.0.0","date":"2011-10-26T11:25:52.259Z"},{"number":"1.0.1","date":"2011-11-22T07:35:17.281Z"},{"number":"1.0.2","date":"2011-11-28T22:37:56.321Z"},{"number":"1.0.3","date":"2011-12-18T10:19:49.737Z"},{"number":"1.0.4","date":"2011-12-19T02:55:37.055Z"},{"number":"1.0.5","date":"2012-05-21T22:16:20.458Z"},{"number":"1.0.6","date":"2012-05-22T08:43:26.428Z"},{"number":"1.0.7","date":"2012-08-12T23:23:17.579Z"},{"number":"1.0.8","date":"2012-12-28T17:23:44.596Z"},{"number":"1.0.9","date":"2014-10-20T18:21:36.732Z"},{"number":"1.0.10","date":"2014-10-23T17:16:55.648Z"},{"number":"1.0.11","date":"2014-11-25T22:19:42.307Z"},{"number":"1.0.12","date":"2014-11-28T19:49:59.445Z"},{"number":"1.0.13","date":"2014-11-29T20:12:31.160Z"},{"number":"1.0.14","date":"2014-12-03T22:08:33.371Z"},{"number":"1.0.15","date":"2015-01-13T18:44:38.425Z"},{"number":"1.0.16","date":"2015-01-16T21:39:22.656Z"},{"number":"1.0.17","date":"2015-01-17T23:04:50.631Z"},{"number":"1.0.18","date":"2015-03-19T19:37:22.247Z"},{"number":"1.0.19","date":"2015-05-28T23:24:40.007Z"},{"number":"1.0.20","date":"2015-07-22T22:48:42.751Z"},{"number":"1.0.21","date":"2015-07-22T22:53:34.021Z"},{"number":"1.0.22","date":"2015-09-29T06:46:30.445Z"},{"number":"1.0.23","date":"2016-05-19T02:43:17.323Z"},{"number":"1.0.24","date":"2016-12-29T02:15:58.177Z"}],"readme":"WebSocket Client & Server Implementation for Node\n=================================================\n\n[![npm version](https://badge.fury.io/js/websocket.svg)](http://badge.fury.io/js/websocket)\n\n[![NPM Downloads](https://img.shields.io/npm/dm/websocket.svg)](https://www.npmjs.com/package/websocket)\n\n[![NPM](https://nodei.co/npm/websocket.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/websocket/)\n\n[![NPM](https://nodei.co/npm-dl/websocket.png?height=3)](https://nodei.co/npm/websocket/)\n\n[ ![Codeship Status for theturtle32/WebSocket-Node](https://codeship.com/projects/70458270-8ee7-0132-7756-0a0cf4fe8e66/status?branch=master)](https://codeship.com/projects/61106)\n\nOverview\n--------\nThis is a (mostly) pure JavaScript implementation of the WebSocket protocol versions 8 and 13 for Node.  There are some example client and server applications that implement various interoperability testing protocols in the \"test/scripts\" folder.\n\nFor a WebSocket client written in ActionScript 3, see my [AS3WebScocket](https://github.com/theturtle32/AS3WebSocket) project.\n\n\nDocumentation\n=============\n\n[You can read the full API documentation in the docs folder.](docs/index.md)\n\n\nChangelog\n---------\n\n***Current Version: 1.0.24*** â€” Released 2016-12-28\n\n***Version 1.0.24***\n\n* Fixed a bug when using native keepalive on Node >= 6.0. (Thanks, [@prossin](https://github.com/prossin))\n* Upgrading outdated dependencies\n\n***Version 1.0.23***\n\n* Official support for Node 6.x\n* Updating dependencies. Specifically, updating nan to ^2.3.3\n\n***Version 1.0.22***\n\n* Updating to work with nan 2.x\n\n\n***Version 1.0.21***\n\n* Incremented and re-published to work around an aborted npm publish of v1.0.20.\n\n***Version 1.0.20***\n\n* Added EventTarget to the W3CWebSocket interface (Thanks, [@ibc](https://github.com/ibc)!)\n* Corrected an inaccurate error message. (Thanks, [@lekoaf](https://github.com/lekoaf)!)\n\n***Version 1.0.19***\n\n* Updated to nan v1.8.x (tested with v1.8.4)\n* Added `\"license\": \"Apache-2.0\"` to package.json via [pull request #199](https://github.com/theturtle32/WebSocket-Node/pull/199) by [@pgilad](https://github.com/pgilad). See [npm1k.org](http://npm1k.org/).\n\n[View the full changelog](CHANGELOG.md)\n\nBrowser Support\n---------------\n\nAll current browsers are fully supported.\n\n* Firefox 7-9 (Old) (Protocol Version 8)\n* Firefox 10+ (Protocol Version 13)\n* Chrome 14,15 (Old) (Protocol Version 8)\n* Chrome 16+ (Protocol Version 13)\n* Internet Explorer 10+ (Protocol Version 13)\n* Safari 6+ (Protocol Version 13)\n\n***Safari older than 6.0 is not supported since it uses a very old draft of WebSockets***\n\n***If you need to simultaneously support legacy browser versions that had implemented draft-75/draft-76/draft-00, take a look here: https://gist.github.com/1428579***\n\nBenchmarks\n----------\nThere are some basic benchmarking sections in the Autobahn test suite.  I've put up a [benchmark page](http://theturtle32.github.com/WebSocket-Node/benchmarks/) that shows the results from the Autobahn tests run against AutobahnServer 0.4.10, WebSocket-Node 1.0.2, WebSocket-Node 1.0.4, and ws 0.3.4.\n\nAutobahn Tests\n--------------\nThe very complete [Autobahn Test Suite](http://autobahn.ws/testsuite/) is used by most WebSocket implementations to test spec compliance and interoperability.\n\n- [View Server Test Results](http://theturtle32.github.com/WebSocket-Node/test-report/servers/)\n- [View Client Test Results](http://theturtle32.github.com/WebSocket-Node/test-report/clients/)\n\nNotes\n-----\nThis library has been used in production on [worlize.com](https://www.worlize.com) since April 2011 and seems to be stable.  Your mileage may vary.\n\n**Tested with the following node versions:**\n\n- 6.2.0\n- 5.11.1\n- 4.4.4\n- 0.10.45\n\nIt may work in earlier or later versions but I'm not actively testing it outside of the listed versions.  YMMV.\n\nInstallation\n------------\n\nA few users have reported difficulties building the native extensions without first manually installing node-gyp.  If you have trouble building the native extensions, make sure you've got a C++ compiler, and have done `npm install -g node-gyp` first. \n\nNative extensions are optional, however, and WebSocket-Node will work even if the extensions cannot be compiled.\n\nIn your project root:\n\n    $ npm install websocket\n  \nThen in your code:\n\n```javascript\nvar WebSocketServer = require('websocket').server;\nvar WebSocketClient = require('websocket').client;\nvar WebSocketFrame  = require('websocket').frame;\nvar WebSocketRouter = require('websocket').router;\nvar W3CWebSocket = require('websocket').w3cwebsocket;\n```\n\nNote for Windows Users\n----------------------\nBecause there is a small C++ component used for validating UTF-8 data, you will need to install a few other software packages in addition to Node to be able to build this module:\n\n- [Microsoft Visual C++](http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express)\n- [Python 2.7](http://www.python.org/download/) (NOT Python 3.x)\n\n\nCurrent Features:\n-----------------\n- Licensed under the Apache License, Version 2.0\n- Protocol version \"8\" and \"13\" (Draft-08 through the final RFC) framing and handshake\n- Can handle/aggregate received fragmented messages\n- Can fragment outgoing messages\n- Router to mount multiple applications to various path and protocol combinations\n- TLS supported for outbound connections via WebSocketClient\n- TLS supported for server connections (use https.createServer instead of http.createServer)\n  - Thanks to [pors](https://github.com/pors) for confirming this!\n- Cookie setting and parsing\n- Tunable settings\n  - Max Receivable Frame Size\n  - Max Aggregate ReceivedMessage Size\n  - Whether to fragment outgoing messages\n  - Fragmentation chunk size for outgoing messages\n  - Whether to automatically send ping frames for the purposes of keepalive\n  - Keep-alive ping interval\n  - Whether or not to automatically assemble received fragments (allows application to handle individual fragments directly)\n  - How long to wait after sending a close frame for acknowledgment before closing the socket.\n- [W3C WebSocket API](http://www.w3.org/TR/websockets/) for applications running on both Node and browsers (via the `W3CWebSocket` class). \n\n\nKnown Issues/Missing Features:\n------------------------------\n- No API for user-provided protocol extensions.\n\n\nUsage Examples\n==============\n\nServer Example\n--------------\n\nHere's a short example showing a server that echos back anything sent to it, whether utf-8 or binary.\n\n```javascript\n#!/usr/bin/env node\nvar WebSocketServer = require('websocket').server;\nvar http = require('http');\n\nvar server = http.createServer(function(request, response) {\n    console.log((new Date()) + ' Received request for ' + request.url);\n    response.writeHead(404);\n    response.end();\n});\nserver.listen(8080, function() {\n    console.log((new Date()) + ' Server is listening on port 8080');\n});\n\nwsServer = new WebSocketServer({\n    httpServer: server,\n    // You should not use autoAcceptConnections for production\n    // applications, as it defeats all standard cross-origin protection\n    // facilities built into the protocol and the browser.  You should\n    // *always* verify the connection's origin and decide whether or not\n    // to accept it.\n    autoAcceptConnections: false\n});\n\nfunction originIsAllowed(origin) {\n  // put logic here to detect whether the specified origin is allowed.\n  return true;\n}\n\nwsServer.on('request', function(request) {\n    if (!originIsAllowed(request.origin)) {\n      // Make sure we only accept requests from an allowed origin\n      request.reject();\n      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');\n      return;\n    }\n    \n    var connection = request.accept('echo-protocol', request.origin);\n    console.log((new Date()) + ' Connection accepted.');\n    connection.on('message', function(message) {\n        if (message.type === 'utf8') {\n            console.log('Received Message: ' + message.utf8Data);\n            connection.sendUTF(message.utf8Data);\n        }\n        else if (message.type === 'binary') {\n            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');\n            connection.sendBytes(message.binaryData);\n        }\n    });\n    connection.on('close', function(reasonCode, description) {\n        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');\n    });\n});\n```\n\nClient Example\n--------------\n\nThis is a simple example client that will print out any utf-8 messages it receives on the console, and periodically sends a random number.\n\n*This code demonstrates a client in Node.js, not in the browser*\n\n```javascript\n#!/usr/bin/env node\nvar WebSocketClient = require('websocket').client;\n\nvar client = new WebSocketClient();\n\nclient.on('connectFailed', function(error) {\n    console.log('Connect Error: ' + error.toString());\n});\n\nclient.on('connect', function(connection) {\n    console.log('WebSocket Client Connected');\n    connection.on('error', function(error) {\n        console.log(\"Connection Error: \" + error.toString());\n    });\n    connection.on('close', function() {\n        console.log('echo-protocol Connection Closed');\n    });\n    connection.on('message', function(message) {\n        if (message.type === 'utf8') {\n            console.log(\"Received: '\" + message.utf8Data + \"'\");\n        }\n    });\n    \n    function sendNumber() {\n        if (connection.connected) {\n            var number = Math.round(Math.random() * 0xFFFFFF);\n            connection.sendUTF(number.toString());\n            setTimeout(sendNumber, 1000);\n        }\n    }\n    sendNumber();\n});\n\nclient.connect('ws://localhost:8080/', 'echo-protocol');\n```\n\nClient Example using the *W3C WebSocket API*\n--------------------------------------------\n\nSame example as above but using the [W3C WebSocket API](http://www.w3.org/TR/websockets/).\n\n```javascript\nvar W3CWebSocket = require('websocket').w3cwebsocket;\n\nvar client = new W3CWebSocket('ws://localhost:8080/', 'echo-protocol');\n\nclient.onerror = function() {\n    console.log('Connection Error');\n};\n\nclient.onopen = function() {\n    console.log('WebSocket Client Connected');\n\n    function sendNumber() {\n        if (client.readyState === client.OPEN) {\n            var number = Math.round(Math.random() * 0xFFFFFF);\n            client.send(number.toString());\n            setTimeout(sendNumber, 1000);\n        }\n    }\n    sendNumber();\n};\n\nclient.onclose = function() {\n    console.log('echo-protocol Client Closed');\n};\n\nclient.onmessage = function(e) {\n    if (typeof e.data === 'string') {\n        console.log(\"Received: '\" + e.data + \"'\");\n    }\n};\n```\n    \nRequest Router Example\n----------------------\n\nFor an example of using the request router, see `libwebsockets-test-server.js` in the `test` folder.\n\n\nResources\n---------\n\nA presentation on the state of the WebSockets protocol that I gave on July 23, 2011 at the LA Hacker News meetup.  [WebSockets: The Real-Time Web, Delivered](http://www.scribd.com/doc/60898569/WebSockets-The-Real-Time-Web-Delivered)\n","starsCount":61,"created":"2011-07-05T23:56:29.826Z","modified":"2017-08-02T19:21:42.295Z","lastPublisher":{"name":"theturtle32","email":"brian@worlize.com"},"owners":[{"name":"theturtle32","email":"brian@worlize.com"}],"other":{"_attachments":{},"_from":".","_id":"websocket","_nodeVersion":"7.3.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/websocket-1.0.24.tgz_1482977757939_0.1858439394272864"},"_npmUser":{"name":"theturtle32","email":"brian@worlize.com"},"_npmVersion":"3.10.10","_rev":"18-6637c531f0d598c19e2233047498833b","_shasum":"74903e75f2545b6b2e1de1425bc1c905917a1890","author":{"name":"Brian McKelvey","email":"brian@worlize.com","url":"https://www.worlize.com/"},"bugs":{"url":"https://github.com/theturtle32/WebSocket-Node/issues"},"contributors":[{"name":"IÃ±aki Baz Castillo","email":"ibc@aliax.net","url":"http://dev.sipdoc.net"}],"directories":{"lib":"./lib"},"dist-tags":{"latest":"1.0.24"},"dist":{"shasum":"74903e75f2545b6b2e1de1425bc1c905917a1890","tarball":"http://registry.npmjs.org/websocket/-/websocket-1.0.24.tgz"},"maintainers":[{"name":"theturtle32","email":"brian@worlize.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-02T19:21:42.295Z","created":"2011-07-05T23:56:29.826Z","0.0.1":"2011-07-05T23:56:30.823Z","0.0.2":"2011-07-18T06:04:02.923Z","0.0.3":"2011-07-18T21:02:20.583Z","0.0.4":"2011-07-18T23:52:10.397Z","0.0.5":"2011-07-20T01:49:40.651Z","0.0.6":"2011-07-20T03:25:50.541Z","0.0.7":"2011-07-23T02:45:56.734Z","0.0.8":"2011-08-01T22:58:04.540Z","0.0.9":"2011-08-09T01:44:38.024Z","0.0.10":"2011-08-10T01:46:03.649Z","0.0.11":"2011-08-12T02:02:23.844Z","0.0.12":"2011-08-12T04:11:10.739Z","0.0.13":"2011-08-18T23:47:29.899Z","0.0.14":"2011-08-25T05:43:31.961Z","0.0.15":"2011-08-30T22:37:13.100Z","0.0.16":"2011-09-05T20:47:34.105Z","0.0.17":"2011-09-25T19:48:05.758Z","0.0.18":"2011-10-11T21:14:45.409Z","0.0.19":"2011-10-11T21:16:10.076Z","0.0.20":"2011-10-20T08:28:48.776Z","1.0.0":"2011-10-26T11:25:52.259Z","1.0.1":"2011-11-22T07:35:17.281Z","1.0.2":"2011-11-28T22:37:56.321Z","1.0.3":"2011-12-18T10:19:49.737Z","1.0.4":"2011-12-19T02:55:37.055Z","1.0.5":"2012-05-21T22:16:20.458Z","1.0.6":"2012-05-22T08:43:26.428Z","1.0.7":"2012-08-12T23:23:17.579Z","1.0.8":"2012-12-28T17:23:44.596Z","1.0.9":"2014-10-20T18:21:36.732Z","1.0.10":"2014-10-23T17:16:55.648Z","1.0.11":"2014-11-25T22:19:42.307Z","1.0.12":"2014-11-28T19:49:59.445Z","1.0.13":"2014-11-29T20:12:31.160Z","1.0.14":"2014-12-03T22:08:33.371Z","1.0.15":"2015-01-13T18:44:38.425Z","1.0.16":"2015-01-16T21:39:22.656Z","1.0.17":"2015-01-17T23:04:50.631Z","1.0.18":"2015-03-19T19:37:22.247Z","1.0.19":"2015-05-28T23:24:40.007Z","1.0.20":"2015-07-22T22:48:42.751Z","1.0.21":"2015-07-22T22:53:34.021Z","1.0.22":"2015-09-29T06:46:30.445Z","1.0.23":"2016-05-19T02:43:17.323Z","1.0.24":"2016-12-29T02:15:58.177Z"},"users":{"divanvisagie":true,"kubakubula":true,"amaan":true,"zhiong":true,"eventhorizon":true,"bostwickenator":true,"hollobit":true,"nafem":true,"ibc":true,"leonning":true,"fank":true,"temasm":true,"aahz":true,"tommyzzm":true,"andygreenegrass":true,"mattevigo":true,"l8niteowl":true,"brettv":true,"hyteer":true,"p4r4n0id":true,"supermelon":true,"segen":true,"juangotama":true,"loselovegirl":true,"marlongrape":true,"arturparkhisenko":true,"altanai":true,"yesseecity":true,"nickeltobias":true,"gavaxiang":true,"morphix":true,"wenhsiaoyi":true,"anticz":true,"cooclsee":true,"x0000ff":true,"nickleefly":true,"jedaviata":true,"ymk":true,"ronchi":true,"youngmo":true,"ronin161":true,"gurunate":true,"robba.jt":true,"buzuli":true,"krishaamer":true,"dofy":true,"rulelee":true,"hhans":true,"dburdese":true,"mo2c":true,"rajivmehtajs":true,"pixeleate":true,"panlw":true,"chinawolf_wyp":true,"manxisuo":true,"tsxuehu":true,"landy2014":true,"scottfreecode":true,"epan":true,"starfox64":true,"nestfall":true}}}