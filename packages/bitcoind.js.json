{"name":"bitcoind.js","description":"Node binding for bitcoind","version":"0.0.8","main":"./index.js","repository":"https://github.com/chjj/bitcoind.js","homepage":"https://github.com/chjj/bitcoind.js","scripts":{"preinstall":"./bin/build-libbitcoind remote","start":"node example"},"tags":["bitcoin","bitcoind"],"dependencies":{"nan":"1.3.0","mkdirp":"0.5.0","tiny":"0.0.10"},"devDependencies":{"mocha":"~1.16.2","optimist":"0.6.0","rimraf":"2.2.8"},"gitHead":"84a20b44183b27e57030efbe77b4b46fc17c36bc","versions":[{"number":"0.0.0","date":"2014-10-13T23:42:47.963Z"},{"number":"0.0.1","date":"2014-12-07T09:47:09.944Z"},{"number":"0.0.2","date":"2014-12-07T09:49:18.806Z"},{"number":"0.0.3","date":"2014-12-07T10:05:17.572Z"},{"number":"0.0.4","date":"2014-12-07T10:08:53.840Z"},{"number":"0.0.5","date":"2014-12-07T10:10:34.093Z"},{"number":"0.0.6","date":"2014-12-09T21:34:56.812Z"},{"number":"0.0.7","date":"2014-12-09T23:08:46.789Z"},{"number":"0.0.8","date":"2014-12-09T23:17:56.225Z"}],"readme":"# bitcoind.js\n\n__bitcoind.js__ as a node.js module which dynamically loads a node.js C++\nmodules which links to libbitcoind.so (bitcoind compiled as a shared library),\nmaking all useful bitcoind functions asynchronous.\n\n## Building\n\n### libbitcoind.so\n\n#### Compiling bitcoind as a library\n\n##### Dependencies\n\n- Boost\n  - Bost Header Files (`/usr/include/boost`)\n  - NOTE: These are now included in the repo if they're not present.\n\n- Berkeley DB\n\n- LevelDB Header Files (included in bitcoin source repo, leveldb itself\n  unnecessary, libbitcoind.so is already linked to them)\n  - NOTE: These also are now included in the repo if they're not present.\n\n- Protobuf\n\n- secp256k1\n\n##### Building\n\n``` bash\n$ cd ~/node_modules/bitcoind.js\n$ ./bin/build-libbitcoind remote\n```\n\nNOTE: This script will run automatically on an `npm install`, along with the\ncompilation below.\n\n`remote` will clone the latest bitcoin upstream, apply a patch to it, compile\nlibbitcoind.so, and place it in the appropriate directory. The first argument\ncan also be a bitcoin repo directory you already have on your disk, otherwise\nit will check for ~/bitcoin by default.\n\nNOTE: libbitcoind.so is currently unsupported on OSX due to OSX's mess of\nheader files and libraries. Special magic is required to make this work that\nhas not been implemented yet. This will only compile on a real unix (linux is\nrecommended).\n\n###### In the build-libbitcoind.sh script:\n\n`--enable-daemonlib` will compile all object files with `-fPIC` (Position\nIndependent Code - needed to create a shared object).\n\n`make` will then compile `./src/libbitcoind.so` (with `-shared -fPIC`), linking\nto all the freshly compiled PIC object files. This will completely ignore\ncompiling tests and the QT object files.\n\nWithout `--enable-daemonlib`, the Makefile with compile bitcoind with -fPIE\n(Position Independent for Executable), this allows compiling of bitcoind.\n\n### bitcoind.js\n\n``` bash\n$ cd ~/node_modules/bitcoind.js\n$ BITCOIN_DIR=~/libbitcoind BOOST_INCLUDE=/usr/include/boost PYTHON=/usr/bin/python2.7 make\n```\n\n#### Running bitcoind.js\n\nYou can run bitcoind.js to start downloading the blockchain by doing:\n\n``` bash\n$ node example --on-block &\nbitcoind: status=\"start_node(): bitcoind opened.\"\n...\n[should see full javascript blocks here]\n```\n\nYou can also look at the blocks come in through the bitcoind log file:\n\n``` bash\n$ tail -f ~/.libbitcoind-example/debug.log\n```\n\n^C (SIGINT) will call `StartShutdown()` in bitcoind on the node thread pool.\n\n##### Example Usage\n\nbitcoind.js has direct access to the global wallet:\n\n``` js\nvar bitcoind = require('bitcoind.js')({\n  directory: '~/.libbitcoind-example',\n  testnet: false,\n  rpc: false\n});\n\nbitcoind.on('block', function(block) {\n  console.log('Found Block:');\n  console.log(block);\n});\n\nbitcoind.on('addr', function(addr) {\n  console.log('Found more peers to connect to:');\n  console.log(addr);\n});\n\nbitcoind.on('open', function() {\n  console.log('Your Wallet:');\n  console.log(bitcoind.wallet.getAccounts());\n});\n\nbitcoind.start();\n```\n\n``` bash\n$ node ./my-example.js\nbitcoind.js: status=\"start_node(): bitcoind opened.\"\nYour Wallet:\n{ '':\n   { balance: 0,\n     addresses:\n      [ { address: '16PvEk4NggaCyfR2keZaP9nPufJvDb2ATZ',\n          privkeycompressed: true,\n          privkey: 'L47MC7gtB5UdWYsmxT6czzGophFm6Zj99PYVQWDNkJG6Mf12GGyi',\n          pubkeycompressed: true,\n          pubkey: '02bf636e7a3ad48ea2cf0c8dbdf992792e617a4f92f2e161f20f3c038883647f0d' } ] } }\n^C\nbitcoind.js: stop_node(): bitcoind shutdown.\nbitcoind.js: shutting down...\nbitcoind.js: shut down.\n```\n\n\n## Documentation\n\n**bitcoind.js** is a node.js module which links to libbitcoind.so (bitcoind\ncomplied as a shared library).\n\n### Javascript API\n\n#### Bitcoin Object/Class\n\nBitcoind in javascript. Right now, only one object can be instantiated.\n\n##### `Bitcoin::start([options], [callback])`\n\nStart the javascript bitcoin node.\n\n##### `Bitcoin::getBlock(blockHash, callback)`\n\nGet any block asynchronously by reading it from disk.\n\n##### `Bitcoin::getTransaction(txid, blockhash, callback)`\n\nGet any tx asynchronously by reading it from disk.\n\n##### `Bitcoin::log(), Bitcoin::info()`\n\nLog to standard output.\n\n##### `Bitcoin::error()`\n\nLog to stderr.\n\n##### `Bitcoin::stop, Bitcoin::close(callback)`\n\nStop the javascript bitcoin node safely. This will be done automatically on\n`process.exit` also. It also takes the bitcoin node off the libuv event loop.\nIf the bitcoin object is the only thing on the event loop. Node will simply\nclose.\n\n\n##### Bitcoin Object Events\n\nNote: Any event that requires polling will only start the polling once the\nevent is bound.\n\n###### `open(bitcoind)`\n\nbitcoind has opened and loaded the blockchain.\n\n###### `close(bitcoind)`\n\nbitcoind has shutdown.\n\n###### `block(block)`\n\nA block has been received an accepted by bitcoind.\n\n###### `tx(tx)`\n\nA confirmed or unconfirmed transaction has been received by bitcoind.\n\n###### `mptx(tx)`\n\nA tx from the mempool has been addded. Most likely not included in a block yet.\n\n\n#### Block Object\n\nA block (CBlock) represented in javascript. It is a full block containing all\ntransactions in `block.tx`.\n\n##### `Block::_blockFlag`\n\nInternal non-enumerable property to check whether the object is a block.\n\n##### `Block.isBlock(block)`\n\nStatic method to check whether object is a block.\n\n##### `Block.fromHex(hex)`\n\nCreate a js block from a hex string.\n\n##### `Block::getHash(enc)`\n\nGet the block's hash. Return the correct encoding. `hex` is most likely what\nyou want. If no encoding is provided, a buffer will be returned.\n\n##### `Block::verify()`\n\nVerify whether the block is valid.\n\n##### `Block::toHex()`\n\nConvert the block to a hex string.\n\n##### `Block.toHex(block)`\n\nStatic method to convert any block-like object to a hex string.\n\n##### `Block::toBinary()`\n\nConvert the block to a binary buffer.\n\n##### `Block.toBinary(block)`\n\nStatic method to convert a block-like object to a hex string.\n\n\n#### Transaction Object/Class\n\n##### `Transaction::_txFlag`\n\nInternal non-enumerable property to check whether the object is a transaction.\n\n##### `Transaction.isTransaction(tx), Transaction.isTx(tx)`\n\nStatic method to check whether object is a transaction.\n\n##### `Transaction.fromHex(hex)`\n\nCreate a js transaction from a hex string.\n\n##### `Transaction::verify()`\n\nVerify whether the transaction is valid.\n\n##### `Transaction::sign(), Transaction::fill(options)`\n\nFill the raw transaction with available unspent outputs and sign them.\n\n##### `Transaction.sign(tx, options), Transaction.fill(tx, options)`\n\nStatic method to fill a tx-like object.\n\n##### `Transaction::getHash(enc)`\n\nGet the hash of a Transaction object. Encoding is usually `hex`. If no encoding\nis provided, a Buffer will be returned.\n\n##### `Transaction::isCoinbase()`\n\nCheck whether the Transaction is a coinbase tx.\n\n##### `Transaction::toHex()`\n\nConvert the transaction to a hex string.\n\n##### `Transaction.toHex(tx)`\n\nStatic method to convert a transaction-like object to a hex string.\n\n##### `Transaction::toBinary()`\n\nConvert the transaction to a binary buffer.\n\n##### `Transaction.toBinary(tx)`\n\nStatic method to convert a transaction-like object to a binary buffer.\n\n##### `Transaction::broadcast(options, callback)`\n\nBroadcast a raw transaction that has not been included in a block yet. This can\nbe your own transaction or a transaction relayed to you.\n\n##### `Transaction.broadcast(tx, options, callback)`\n\nStatic method to broadcast a transaction.\n\n\n#### Wallet Object/Class (Singleton)\n\n##### `Wallet::createAddress(options)`\n\nCreate a new address for the global wallet.\n\n##### `Wallet::getAccountAddress(options)`\n\nGet the main address associated with the provided account.\n\n##### `Wallet::setAccount(options)`\n\nAssociate account name with address.\n\n##### `Wallet::getAccount(options)`\n\nGet account name by address.\n\n##### `Wallet::sendTo(options)`\n\nAutomatically create a transaction and fill/sign it with any available unspent\noutputs/inputs and broadcast it.\n\n##### `Wallet::signMessage(options)`\n\nSign any piece of text using the private key associated with the provided\naddress.\n\n##### `Wallet::verifyMessage(options)`\n\nVerify any signed piece of text using the public key associated with signing\nprivate key.\n\n##### `Wallet::createMultiSigAddress(options)`\n\nCreate a multi-signature for the global wallet.\n\n##### `Wallet::getBalance(options)`\n\nGet the total balance of the global wallet in satoshis.\n\n##### `Wallet::getUnconfirmedBalance(options)`\n\nGet the total unconfirmed balance of the global wallet in satoshis\n\n##### `Wallet::sendFrom(options)`\n\nAutomatically create a transaction and fill/sign it with any available unspent\noutputs/inputs and broadcast it. This method will also select unspent outputs\nfrom the provided account name to fill the transaction.\n\n##### `Wallet::listTransactions(options)`\n\nList transactions associated with the global wallet - NOT YET IMPLEMENTED.\n\n##### `Wallet::listAccounts(options)`\n\nReturn a javascript object containing account names, addresses, public keys,\nprivate keys, balances, and whether the keys are in compressed format.\n\n##### `Wallet::getTransaction(options)`\n\nReturn any transaction associated with the global wallet - NOT YET IMPLEMENTED.\n\n##### `Wallet::backup(options)`\n\nBackup wallet.dat to provided path.\n\n##### `Wallet::decrypt(options), Wallet::passphrase(options)`\n\nTemporarily decrypt the wallet using the provided passphrase.\n\n##### `Wallet::passphraseChange(options)`\n\nChange passphrase for the global encrypted wallet.\n\n##### `Wallet::forgetPassphrase(options), Wallet::lock(options)`\n\nForget the current passphrase so the wallet is once again encrypted and\nunusuable for any meaningful purpose.\n\n##### `Wallet::encrypt(options)`\n\nEncrypt the global wallet with the provided passphrase.\n\n##### `Wallet::setTxFee(options)`\n\nThe the default transaction fee for the global wallet in satoshis.\n\n##### `Wallet::importKey(options)`\n\nImport a private key to global wallet in the standard bitcoind compressed\nformat.\n\n\n#### Utils Object (Singleton)\n\n##### `utils.forEach(obj, iter, done)`\n\nAsynchronous parallel forEach function.\n\n##### `utils.NOOP()`\n\nA simple NOP function.\n\n\n#### Exposed Objects\n\nNOTE: All exposed objects will also be exposed on any instantiated `Bitcoin` object.\n\n##### `bitcoin.Bitcoin, bitcoin.bitcoin, bitcoin.bitcoind`\n\nThe bitcoin object.\n\n##### `bitcoin.native, bitcoin.bitcoindjs`\n\nThe native C++ bitcoindjs object.\n\n##### `bitcoin.Block, bitcoin.block`\n\nThe bitcoind.js Block object.\n\n##### `bitcoin.Transaction, bitcoin.transaction, bitcoin.tx`\n\nThe bitcoind.js Transaction object.\n\n##### `bitcoin.Wallet, bitcoin.wallet`\n\nThe bitcoind.js Wallet singleton.\n\n##### `bitcoin.utils`\n\nThe bitcoind.js utils object.\n\n\n## Contribution and License Agreement\n\nIf you contribute code to this project, you are implicitly allowing your code\nto be distributed under the MIT license. You are also implicitly verifying that\nall code is your original work. `</legalese>`\n\n\n## License\n\n- bitcoind.js: Copyright (c) 2014, BitPay (MIT License).\n- bitcoin: Copyright (c) 2009-2013 Bitcoin Core Developers (MIT License)\n- bcoin (some code borrowed temporarily): Copyright Fedor Indutny, 2014.\n","starsCount":1,"created":"2014-10-13T23:42:47.963Z","modified":"2016-08-17T21:51:17.863Z","lastPublisher":{"name":"chjj","email":"chjjeffrey@gmail.com"},"owners":[{"name":"braydonf","email":"braydon@bitpay.com"},{"name":"chjj","email":"chjjeffrey@gmail.com"},{"name":"kleetus","email":"laconia@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"bitcoind.js","_nodeVersion":"0.10.33","_npmUser":{"name":"chjj","email":"chjjeffrey@gmail.com"},"_npmVersion":"2.1.12","_rev":"1-1462f518762e60bc174d04401d3e1aa3","_shasum":"e898cfd0f169f46fbde6991cde59477d29ba4956","author":{"name":"Christopher Jeffrey"},"bugs":{"url":"https://github.com/chjj/bitcoind.js/issues"},"directories":{},"dist-tags":{"latest":"0.0.8"},"dist":{"shasum":"e898cfd0f169f46fbde6991cde59477d29ba4956","tarball":"http://registry.npmjs.org/bitcoind.js/-/bitcoind.js-0.0.8.tgz"},"maintainers":[{"name":"braydonf","email":"braydon@bitpay.com"},{"name":"chjj","email":"chjjeffrey@gmail.com"},{"name":"kleetus","email":"laconia@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-08-17T21:51:17.863Z","created":"2014-10-13T23:42:47.963Z","0.0.0":"2014-10-13T23:42:47.963Z","0.0.1":"2014-12-07T09:47:09.944Z","0.0.2":"2014-12-07T09:49:18.806Z","0.0.3":"2014-12-07T10:05:17.572Z","0.0.4":"2014-12-07T10:08:53.840Z","0.0.5":"2014-12-07T10:10:34.093Z","0.0.6":"2014-12-09T21:34:56.812Z","0.0.7":"2014-12-09T23:08:46.789Z","0.0.8":"2014-12-09T23:17:56.225Z"},"users":{"hengkiardo":true}}}