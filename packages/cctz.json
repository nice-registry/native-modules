{"name":"cctz","version":"1.7.7","description":"⚡️ Fast parsing, formatting and timezone manipulations for dates","main":"index.js","scripts":{"bench":"node bench","test":"xo && ava","install":"node-gyp rebuild"},"keywords":["date","time","timezone","cctz","iana","zone","parse","format","strptime","strftime","tz"],"license":"MIT","dependencies":{"bindings":"^1.2.1","nan":"^2.4.0"},"gypfile":true,"devDependencies":{"ava":"^0.17.0","benchmark":"^2.1.2","date-fns":"^1.11.2","moment-timezone":"^0.5.9","xo":"^0.17.1"},"repository":"https://github.com/floatdrop/node-cctz","homepage":"https://github.com/floatdrop/node-cctz#readme","gitHead":"f1b5158bf4a108134f8c3cff3d67c2f7908e8344","versions":[{"number":"0.0.0","date":"2016-11-29T14:21:57.901Z"},{"number":"0.0.1","date":"2016-11-29T15:20:11.685Z"},{"number":"0.0.2","date":"2016-11-29T17:20:25.440Z"},{"number":"0.0.3","date":"2016-11-30T06:45:07.200Z"},{"number":"0.0.4","date":"2016-11-30T12:39:33.369Z"},{"number":"0.0.5","date":"2016-11-30T13:16:29.416Z"},{"number":"1.0.0","date":"2016-12-02T13:02:14.671Z"},{"number":"1.0.1","date":"2016-12-03T13:19:58.143Z"},{"number":"1.1.0","date":"2016-12-03T14:15:24.779Z"},{"number":"1.1.1","date":"2016-12-03T17:59:13.642Z"},{"number":"1.2.0","date":"2016-12-04T07:36:28.468Z"},{"number":"1.3.0","date":"2016-12-07T14:36:46.495Z"},{"number":"1.4.0","date":"2016-12-08T09:12:31.785Z"},{"number":"1.4.1","date":"2016-12-12T08:28:12.281Z"},{"number":"1.4.2","date":"2016-12-13T12:25:00.444Z"},{"number":"1.5.0","date":"2016-12-14T10:29:16.165Z"},{"number":"1.5.1","date":"2016-12-27T05:37:49.048Z"},{"number":"1.5.2","date":"2017-01-05T19:50:02.218Z"},{"number":"1.5.3","date":"2017-01-18T06:44:23.557Z"},{"number":"1.5.4","date":"2017-01-25T13:55:22.745Z"},{"number":"1.5.5","date":"2017-02-13T15:10:12.323Z"},{"number":"1.5.6","date":"2017-02-19T13:32:01.018Z"},{"number":"1.5.7","date":"2017-02-20T15:27:50.264Z"},{"number":"1.5.8","date":"2017-03-03T14:27:31.584Z"},{"number":"1.6.0","date":"2017-03-06T17:41:41.037Z"},{"number":"1.7.0","date":"2017-03-08T09:18:57.163Z"},{"number":"1.7.1","date":"2017-03-13T10:27:08.915Z"},{"number":"1.7.2","date":"2017-03-14T05:28:10.422Z"},{"number":"1.7.3","date":"2017-03-17T14:58:00.614Z"},{"number":"1.7.4","date":"2017-03-22T05:53:15.612Z"},{"number":"1.7.5","date":"2017-04-07T09:08:38.792Z"},{"number":"1.7.6","date":"2017-04-13T09:19:44.980Z"},{"number":"1.7.7","date":"2017-06-20T07:35:49.630Z"}],"readme":"# node-cctz [![Build Status](https://travis-ci.org/floatdrop/node-cctz.svg?branch=master)](https://travis-ci.org/floatdrop/node-cctz)\n\n[CCTZ](https://github.com/google/cctz) is a C++ library for translating between absolute and civil times using the rules of a time zone.\n\n\n## Install\n\nYou will need C++11 compatible compiler to build this binding. For most systems this will work:\n\n```\n$ npm install --save cctz\n```\n\nIf you have Ubuntu 12.04, then install `clang-3.4` and set-up environment:\n\n```\n$ sudo apt-get install clang-3.4\n$ export CXX=clang++\n$ export npm_config_clang=1\n```\n\n\n## Usage\n\n```js\nconst {convert, format, CivilTime} = require('cctz');\n\nconst unix = convert(new CivilTime(2015, 9, 22, 9), 'America/Los_Angeles');\nconsole.log(format('Talk starts at %T %z (%Z)', unix, 'America/New_York'));\n\n// => Talk starts at 12:00:00 -0400 (EDT)\n```\n\n\n## API\n\n### convert(time, timezone)\n\nConverts `CivilTime` to unix timestamp and vice versa.\n\n##### time\n\nType: `CivilTime` or `number`\n\nIf `time` is `CivilTime`, then method returns Unix timestamp (without fractional part).\nOtherwise returns `CivilTime`.\n\n##### timezone\n\nType: `TimeZone` or `string`\n\nTimeZone objcet, that represents target timezone for converting.\n\n### format(format, unix, [timezone])\n\nReturns formatted unix timestamp according to timezone.\n\n##### format\n\nType: `string`\n\nFormat of output. See [strftime](http://www.cplusplus.com/reference/ctime/strftime/) documentation and [Google CCTZ](https://github.com/google/cctz/blob/6e09ceb/include/time_zone.h#L197) sources for syntax.\n\n##### unix\n\nType: `number`\n\nUnix timestamp in seconds (can have fractional part).\n\n##### timezone\n\nType: `TimeZone` or `string`\nDefault: local timezone\n\nTimeZone objcet, that represents target timezone for formatting.\n\n### parse(format, input, [timezone])\n\nParses `input` string according to `format` string (assuming `input` in `timezone`).\n\nReturns unix timestamp or `undefined` if parsing failed.\n\n##### format\n\nType: `string`\n\nFormat of `input` argument. See [strftime](http://www.cplusplus.com/reference/ctime/strftime/) documentation and [Google CCTZ](https://github.com/google/cctz/blob/6e09ceb/include/time_zone.h#232) sources for syntax.\n\n##### input\n\nType: `string`\n\nInput string to parse.\n\n##### timezone\n\nType: `TimeZone` or `string`<br>\nDefault: Timezone from `input` or local timezone\n\nTimezone, that should be used in parse. Timezone can be part of input:\n\n```js\ncctz.parse('%Y-%m-%d %H:%M:%S %Ez', '2015-09-22 09:35:12+03:00');\n```\n\n### tz(name)\n\n> Alias for `cctz.load_time_zone`\n\nUse this method instead `new TimeZone` – because it caches `TimeZone` objects inside.\n\nReturns `TimeZone` object.\n\n##### name\nType: `string`\n\nTimezone name, that should be loaded from `/usr/share/zoneinfo`.\n\n### now()\n\n> Alias for `Math.floor(Date.now() / 1000)`\n\nReturns unix timestamp in seconds. All methods can accept timestamp with fractional milliseconds (if you need such accuracy).\n\n\n### CivilTime\n\nHolder for [`cctz::civil_second`](https://github.com/google/cctz/blob/6e09ceb/include/civil_time.h#L22) with getters and setters for properties.\n\n#### CivilTime(year = 1970, month = 1, day = 1, hour = 0, minute = 0, second = 0)\n\nCreates CivilTime object with next properties:\n\n- `year` – getter and setter\n- `month` – getter and setter [1:12]\n- `day` – getter and setter [1:31]\n- `hour` – getter and setter [0:23]\n- `minute` – getter and setter [0:59]\n- `second` – getter and setter [0:59]\n- `yearday` – only getter [1:356]\n- `weekday` – only getter [0:6]\n\n> __Tip:__ Fastest way to add amount of time is to add number of seconds to unix timestamp.\n\n##### CivilTime.startOfYear()\n\nReturns new CivilTime object with start of year.\n\n##### CivilTime.startOfMonth()\n\nReturns new CivilTime object with start of month.\n\n##### CivilTime.startOfDay()\n\nReturns new CivilTime object with start of day.\n\n##### CivilTime.startOfHour()\n\nReturns new CivilTime object with start of hour.\n\n##### CivilTime.clone()\n\nReturns cloned CivilTime object.\n\n\n### TimeZone\n\nHolder for [`cctz::time_zone`](https://github.com/google/cctz/blob/6e09ceb/include/time_zone.h#L37).\n\n#### TimeZone(name)\n\nCreates __new__ object with TimeZone.\n\n##### TimeZone.lookup(unix)\n\nReturns [`cctz::absolute_lookup`](https://github.com/google/cctz/blob/6e09ceb/include/time_zone.h#L60) object.\n\n##### TimeZone.lookup(civiltime)\n\nReturns [`cctz::civil_lookup`](https://github.com/google/cctz/blob/6e09ceb/include/time_zone.h#L85) object.\n\n##### TimeZone.name\n\nName of TimeZone.\n\n\n## Benchmarks\n\n```\nFormat              (cctz) x 532,683 ops/sec ±2.80% (78 runs sampled)\n                    (Date) x 191,400 ops/sec ±2.59% (81 runs sampled)\n                (date-fns) x  91,772 ops/sec ±1.58% (85 runs sampled)\n                  (moment) x  56,508 ops/sec ±6.35% (76 runs sampled)\n\nParse               (cctz) x 1,105,353 ops/sec ±0.59% (86 runs sampled)\n                    (Date) x 1,200,218 ops/sec ±2.00% (82 runs sampled)\n                (date-fns) x   249,225 ops/sec ±5.00% (77 runs sampled)\n                  (moment) x    23,905 ops/sec ±1.91% (80 runs sampled)\n\nAdd hour            (cctz) x 6,123,083 ops/sec ±5.39% (82 runs sampled)\n                    (Date) x 3,604,915 ops/sec ±1.13% (69 runs sampled)\n                (date-fns) x 3,211,900 ops/sec ±2.28% (81 runs sampled)\n                  (moment) x   590,854 ops/sec ±8.48% (72 runs sampled)\n\nConvert Ut->Time    (cctz) x 653,305 ops/sec ±9.33% (68 runs sampled)\n                  (moment) x 144,580 ops/sec ±2.18% (83 runs sampled)\n\nConvert Time->Ut    (cctz) x 987,437 ops/sec ±11.68% (70 runs sampled)\n                  (moment) x 154,492 ops/sec ±3.54% (82 runs sampled)\n```\n\nRun `npm i` and then `npm run bench`.\n\n## License\n\nMIT © [Vsevolod Strukchinsky](mailto://floatdrop@gmail.com)\n","created":"2016-11-29T14:21:57.901Z","modified":"2017-06-20T07:35:49.630Z","lastPublisher":{"name":"floatdrop","email":"floatdrop@gmail.com"},"owners":[{"name":"floatdrop","email":"floatdrop@gmail.com"}],"other":{"_attachments":{},"_id":"cctz","_nodeVersion":"8.1.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cctz-1.7.7.tgz_1497944148083_0.17534676473587751"},"_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmVersion":"5.0.3","_rev":"33-9529486cb8e6aaced2ca381425245642","author":{"name":"Vsevolod Strukchinsky","email":"floatdrop@gmail.com"},"bugs":{"url":"https://github.com/floatdrop/node-cctz/issues"},"directories":{},"dist-tags":{"latest":"1.7.7"},"dist":{"integrity":"sha512-8R40VM4QO/YBR73fOzy0BCckBA0jMlli70Uq2ahiAYqfzxJ+KEQsDjaF09be1ihdFC0zWqiRfh5ur68HGAh6GQ==","shasum":"356b2247beeda0246e411bca7e281e6c89b652c9","tarball":"https://registry.npmjs.org/cctz/-/cctz-1.7.7.tgz"},"maintainers":[{"name":"floatdrop","email":"floatdrop@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2017-06-20T07:35:49.630Z","created":"2016-11-29T14:21:57.901Z","0.0.0":"2016-11-29T14:21:57.901Z","0.0.1":"2016-11-29T15:20:11.685Z","0.0.2":"2016-11-29T17:20:25.440Z","0.0.3":"2016-11-30T06:45:07.200Z","0.0.4":"2016-11-30T12:39:33.369Z","0.0.5":"2016-11-30T13:16:29.416Z","1.0.0":"2016-12-02T13:02:14.671Z","1.0.1":"2016-12-03T13:19:58.143Z","1.1.0":"2016-12-03T14:15:24.779Z","1.1.1":"2016-12-03T17:59:13.642Z","1.2.0":"2016-12-04T07:36:28.468Z","1.3.0":"2016-12-07T14:36:46.495Z","1.4.0":"2016-12-08T09:12:31.785Z","1.4.1":"2016-12-12T08:28:12.281Z","1.4.2":"2016-12-13T12:25:00.444Z","1.5.0":"2016-12-14T10:29:16.165Z","1.5.1":"2016-12-27T05:37:49.048Z","1.5.2":"2017-01-05T19:50:02.218Z","1.5.3":"2017-01-18T06:44:23.557Z","1.5.4":"2017-01-25T13:55:22.745Z","1.5.5":"2017-02-13T15:10:12.323Z","1.5.6":"2017-02-19T13:32:01.018Z","1.5.7":"2017-02-20T15:27:50.264Z","1.5.8":"2017-03-03T14:27:31.584Z","1.6.0":"2017-03-06T17:41:41.037Z","1.7.0":"2017-03-08T09:18:57.163Z","1.7.1":"2017-03-13T10:27:08.915Z","1.7.2":"2017-03-14T05:28:10.422Z","1.7.3":"2017-03-17T14:58:00.614Z","1.7.4":"2017-03-22T05:53:15.612Z","1.7.5":"2017-04-07T09:08:38.792Z","1.7.6":"2017-04-13T09:19:44.980Z","1.7.7":"2017-06-20T07:35:49.630Z"}}}