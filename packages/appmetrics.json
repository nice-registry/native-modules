{"name":"appmetrics","version":"3.0.2","engines":{"node":">=4"},"description":"Node Application Metrics","bin":{"node-hc":"bin/appmetrics-cli.js"},"dependencies":{"nan":"2.x","tar":"2.x","semver":"^5.3.0","jszip":"2.5.x"},"bundleDependencies":["tar"],"devDependencies":{"codecov":"2.x","node-gyp":"3.x","tap":"7.x"},"scripts":{"test":"tap --reporter tap --timeout=120 tests/*tests.js tests/probes/http-outbound-probe-test.js tests/probes/http-probe-test.js tests/headless_test.js","travis":"tap --reporter tap --timeout=120 tests/*tests.js tests/probes/http-outbound-probe-test.js tests/probes/http-probe-test.js tests/headless_test.js --coverage","posttravis":"./get_code_cov.sh && tap --coverage-report=lcov && codecov --disable=gcov","install":"node extract_all_binaries.js || node-gyp rebuild"},"repository":"https://github.com/RuntimeTools/appmetrics","license":"Apache-2.0","homepage":"https://github.com/RuntimeTools/appmetrics#readme","_resolved":"file:appmetrics-3.0.2.tgz","readme":"# Node Application Metrics\nNode Application Metrics monitoring and profiling agent\n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/8caec03a401f4a37823ac547d7a0a272)](https://www.codacy.com/app/dancunnington/appmetrics?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=RuntimeTools/appmetrics&amp;utm_campaign=Badge_Grade)\n[![Build Status](https://travis-ci.org/RuntimeTools/appmetrics.svg?branch=master)](https://travis-ci.org/RuntimeTools/appmetrics)\n[![codebeat badge](https://codebeat.co/badges/9e9229c4-dcfa-4a98-a9a2-4770f3a2dd59)](https://codebeat.co/projects/github-com-runtimetools-appmetrics-master)\n[![codecov.io](https://codecov.io/github/RuntimeTools/appmetrics/coverage.svg?branch=master)](https://codecov.io/github/RuntimeTools/appmetrics?branch=master)\n![Apache 2](https://img.shields.io/badge/license-Apache2-blue.svg?style=flat)\n[![Homepage](https://img.shields.io/badge/homepage-Node%20Application%20Metrics-blue.svg)](https://developer.ibm.com/node/monitoring-post-mortem/application-metrics-node-js/)\n\nNode Application Metrics instruments the Node.js runtime for performance monitoring, providing the monitoring data via an API. \nAdditionally the data can be visualized by using the [Node Application Metrics Dashboard](https://github.com/RuntimeTools/appmetrics-dash). \n\nThe data can also be visualized in Eclipse using the [IBM Monitoring and Diagnostics Tools - Health Center][1] client. Profiling data is available in Health Center, but is not yet available in the Dashboard. See https://www.ibm.com/developerworks/java/jdk/tools/healthcenter/ for more details.\n\nNode Application Metrics provides the following built-in data collection sources:\n\n Source             | Description\n:-------------------|:-------------------------------------------\n Environment        | Machine and runtime environment information\n CPU                | Process and system CPU\n Memory             | Process and system memory usage\n GC                 | Node/V8 garbage collection statistics\n Event Loop         | Event loop latency information\n Loop               | Event loop timing metrics\n Function profiling | Node/V8 function profiling (disabled by default)\n HTTP               | HTTP request calls made of the application\n HTTP Outbound      | HTTP requests made by the application\n socket.io          | WebSocket data sent and received by the application\n LevelDB            | LevelDB queries made by the application\n MySQL              | MySQL queries made by the application\n MongoDB            | MongoDB queries made by the application\n PostgreSQL         | PostgreSQL queries made by the application\n MQTT               | MQTT messages sent and received by the application\n MQLight            | MQLight messages sent and received by the application\n Memcached          | Data that is stored or manipulated in Memcached\n OracleDB           | OracleDB queries made by the application\n Oracle             | Oracle queries made by the application\n StrongOracle       | StrongOracle database queries made by the application\n Redis              | Redis commands issued by the application\n Riak               | Riak methods called by the application\n Request tracking   | A tree of application requests, events and optionally trace (disabled by default)\n Function trace     | Tracing of application function calls that occur during a request (disabled by default)\n## Performance overhead\n\nOur testing has shown that the performance overhead in terms of processing is minimal, adding less than 0.5 % to the CPU usage of your application. The additional memory required is around 20 MB to gather information about your system and application. \n\nWe gathered this information by monitoring the sample application [Acme Air][3]. We used MongoDB as our datastore and used JMeter to drive load though the program.  We have performed this testing with Node.js version 6.10.3\n\n## Getting Started\n\n### Installation\n\nYou can get Node Application Metrics from 3 different places:\n\n  * npmjs.org (install by running `npm install appmetrics`. Native libraries are prebuilt)\n  * Github ([install from source](https://github.com/RuntimeTools/appmetrics/wiki/Install-direct-from-github-source) by cloning the git repository. Requires a compiler)\n  * [IBM SDK for Node.js](https://developer.ibm.com/node/sdk/) (packaged with the SDK, native libraries are prebuilt)\n\nUsing **npm** you can install Node Application Metrics either locally or globally.\n\n**When installed locally** you can access monitoring data via both the API and the Health Center client by modifying your application to use appmetrics (see *[Modifying your application to use the local installation](#modifying-your-application-to-use-the-local-installation)*).\n\nTo perform a local install:\n```sh\n$ npm install appmetrics\n```\nA local install will put the module inside \"*`./node_modules` of the current package root*\" (see the [npm documentation][4] for more information); usually this is the current directory and in that case the module installation directory will be `./node_modules/appmetrics`.\n\n**When installed globally** you can access monitoring data via the Health Center client (but not the API) by using the `node-hc` command-line utility (see *[The `node-hc` command](#the-node-hc-command)*).\n\nTo perform a global install:\n```sh\n$ npm install -g appmetrics\n```\nA global install will put the module inside a directory tied to your Node.js SDK.\n\n* On Windows, either: \n  * `<UserDirectory>\\AppData\\Roaming\\npm\\node_modules`\n  * or: `<NodeInstallDirectory>\\node_modules`\n* On other platforms: \n  * `<node_install_directory>/lib/node_modules`\n\nIt also adds the `node-hc` command to another directory tied to your Node.js SDK, one that was added to your executable search path by the Node.js SDK installer.\n\n* On Windows, either:\n  * `<UserDirectory>\\AppData\\Roaming\\npm`\n  * or: `<NodeInstallDirectory>`\n* On other platforms:\n  * `<node_install_directory>/bin`\n\n### Configuring Node Application Metrics\n\nNode Application Metrics can be configured in two ways, by using the configuration file described below or via a call to configure(options).\n\nNode Application Metrics comes with a configuration file inside the [module installation directory](#installation) (`.../node_modules/appmetrics/appmetrics.properties`). This can be used to configure connection options, logging and data source options. \n\nNode Application Metrics will attempt to load `appmetrics.properties` from one of the following locations (in order):\n\n1. the application directory\n2. the current working directory\n3. the appmetrics module installation directory\n\nThe default configuration has minimal logging enabled, will attempt to send data to a local MQTT server on the default port and has method profiling disabled.\n\nMany of the options provide configuration of the Health Center core agent library and are documented in the Health Center documentation: [Health Center configuration properties](https://www-01.ibm.com/support/knowledgecenter/SS3KLZ/com.ibm.java.diagnostics.healthcenter.doc/topics/configproperties.html).\n\nThe following options are specific to appmetrics:\n\n* `com.ibm.diagnostics.healthcenter.data.profiling=[off|on]`\n  Specifies whether method profiling data will be captured. The default value is `off`.  This specifies the value at start-up; it can be enabled and disabled dynamically as the application runs, either by a monitoring client or the API. \n\n## Running Node Application Metrics\n\n### The `node-hc` command\nIf you [globally installed](#installation) this module with npm, you can use the `node-hc` command to run your application instead of the `node` command. This will run your application as it would normally under node (including any node options) but additionally load and start `appmetrics`.\n\n```sh\n$ node-hc app.js\n```\n\nThe purpose of this mode of operation is to provide monitoring of the application without requiring any changes to the application code. The data is sent to the Health Center Eclipse IDE client.\n\n### Modifying your application to use the local installation\nIf you [locally install](#installation) this module with npm then you will additionally have access to the monitoring data via the `appmetrics` API (see *[API Documentation](#api-documentation)*).\n\nTo load `appmetrics` and get the monitoring API object, add the following to the start-up code for your application:\n```js\nvar appmetrics = require('appmetrics');\nvar monitoring = appmetrics.monitor();\n```\nThe call to `appmetrics.monitor()` starts the data collection agent, making the data available via the API and to the Heath Center client via MQTT.\n\nYou should start your application using the `node` command as usual (**not** `node-hc`).\n\nYou must call `require('appmetrics');` *before* the require statements for any npm modules you want to monitor. Appmetrics must be initialized first so that it can instrument modules for monitoring as they are loaded. If this is a problem due to the structure of your application you can require the module on the node command line with -r to make sure it is pre-loaded:\n\n`> node -r appmetrics myapp.js`\n\nOnce you have loaded appmetrics you can then use the monitoring object to register callbacks and request information about the application:\n```js\nmonitoring.on('initialized', function (env) {\n    env = monitoring.getEnvironment();\n    for (var entry in env) {\n        console.log(entry + ':' + env[entry]);\n    };\n});\n\nmonitoring.on('cpu', function (cpu) {\n    console.log('[' + new Date(cpu.time) + '] CPU: ' + cpu.process);\n});\n```\n\n## Health Center Eclipse IDE client\n### Connecting to the client\nConnecting to the Health Center client requires the additional installation of a MQTT broker. The Node Application Metrics agent sends data to the MQTT broker specified in the `appmetrics.properties` file or set via a call to configure(options). Installation and configuration documentation for the Health Center client is available from the [Health Center documentation in IBM Knowledge Center][2].\n\nNote that both the API and the Health Center client can be used at the same time and will receive the same data. Use of the API requires a local install and application modification (see *[Modifying your application to use the local installation](#modifying-your-application-to-use-the-local-installation)*).\n\nFurther information regarding the use of the Health Center client with Node Application Metrics can be found on the [appmetrics wiki][3]: [Using Node Application Metrics with the Health Center client](https://github.com/RuntimeTools/appmetrics/wiki/Using-Node-Application-Metrics-with-the-Health-Center-client).\n\n## API Documentation\n### appmetrics.configure(options)\nSets various properties on the appmetrics monitoring agent. If the agent has already been started, this function does nothing. \n* `options`(Object) key value pairs of properties and values to be set on the monitoring agent. \n\nProperty name              | Property value            | Effect\n:--------------------|:-------------------------|:-----------------------------\n `applicationID`              | `string`      | Specifies a unique identifier for the mqtt connection             \n `mqtt`          | `[off|on]`         | Specifies whether the monitoring agent sends data to the mqtt broker. The default value is on\n `mqttHost`             | `host name`         | Specifies the host name of the mqtt broker\n `mqttPort` | `port number`              | Specifies the port number of the mqtt broker\n `profiling` | `[off|on]`              | Specifies whether method profiling data will be captured. The default value is off\n \n\n### appmetrics.start()\nStarts the appmetrics monitoring agent. If the agent is already running this function does nothing.\n\n### appmetrics.stop()\nStops the appmetrics monitoring agent. If the agent is not running this function does nothing.\n\n### appmetrics.enable(`type`, `config`)\nEnable data generation of the specified data type. Cannot be called until the agent has been started by calling `start()` or `monitor()`.\n* `type` (String) the type of event to start generating data for. Values of `eventloop`, `profiling`, `http`, `http-outbound`, `mongo`, `socketio`, `mqlight`, `postgresql`, `mqtt`, `mysql`, `redis`, `riak`, `memcached`, `oracledb`, `oracle`, `strong-oracle`, `requests` and `trace` are currently supported. As `trace` is added to request data, both `requests` and `trace` must be enabled in order to receive trace data.\n* `config` (Object) (optional) configuration map to be added for the data type being enabled. (see *[setConfig](#appmetricssetconfigtype-config)*) for more information.\n\nThe following data types are disabled by default: `profiling`, `requests`, `trace`\n\n### appmetrics.disable(`type`)\nDisable data generation of the specified data type. Cannot be called until the agent has been started by calling `start()` or `monitor()`.\n* `type` (String) the type of event to stop generating data for. Values of `eventloop`, `profiling`, `http`, `mongo`, `socketio`, `mqlight`, `postgresql`, `mqtt`, `mysql`, `redis`, `riak`, `memcached`, `oracledb`, `oracle`, `strong-oracle`, `requests` and `trace` are currently supported.\n\n### appmetrics.setConfig(`type`, `config`)\nSet the configuration to be applied to a specific data type. The configuration available is specific to the data type.\n* `type` (String) the type of event to apply the configuration to.\n* `config` (Object) key value pairs of configurations to be applied to the specified event. The available configuration options are as follows:\n\n Source              | Configuration            | Effect\n:--------------------|:-------------------------|:-----------------------------\n `http`              | `filters`                | (Array) of URL filter Objects consisting of: \n                     |                          | `pattern` (String) a regular expression pattern to match HTTP method and URL against, eg. 'GET /favicon.ico$'\n                     |                          | `to` (String) a conversion for the URL to allow grouping. A value of `''` causes the URL to be ignored.             \n `requests`          | `excludeModules`         | (Array) of String names of modules to exclude from request tracking.\n `trace`             | `includeModules`         | (Array) of String names for modules to include in function tracing. By default only non-module functions are traced when trace is enabled.\n `advancedProfiling` | `threshold`              | (Number) millisecond run time of an event loop cycle that will trigger profiling\n\n### appmetrics.emit(`type`, `data`)\nAllows custom monitoring events to be added into the Node Application Metrics agent.\n* `type` (String) the name you wish to use for the data. A subsequent event of that type will be raised, allowing callbacks to be registered for it.\n* `data` (Object) the data to be made available with the event. The object must not contain circular references, and by convention should contain a `time` value representing the milliseconds when the event occurred.\n\n### appmetrics.writeSnapshot([filename],[callback])\nDumps the v8 heap via `heapdump`. \nFor more information, see https://github.com/bnoordhuis/node-heapdump/blob/master/README.md\n\n### appmetrics.monitor()\nCreates a Node Application Metrics agent client instance. This can subsequently be used to get environment data and subscribe to data events. This function will start the appmetrics monitoring agent if it is not already running.\n\n### appmetrics.monitor.getEnvironment()\nRequests an object containing all of the available environment information for the running application. This will not contain all possible environment information until an 'initialized' event has been received.\n\n### Event: 'cpu'\nEmitted when a CPU monitoring sample is taken.\n* `data` (Object) the data from the CPU sample:\n    * `time` (Number) the milliseconds when the sample was taken. This can be converted to a Date using `new Date(data.time)`.\n    * `process` (Number) the percentage of CPU used by the Node.js application itself. This is a value between 0.0 and 1.0.\n    * `system` (Number) the percentage of CPU used by the system as a whole. This is a value between 0.0 and 1.0.\n\n### Event: 'eventloop'\nEmitted every 5 seconds, summarising sample based information of the event loop latency\n* `data` (Object) the data from the event loop sample:\n    * `time` (Number) the milliseconds when the event was emitted. This can be converted to a Date using `new Date(data.time)`.\n    * `latency.min` (Number) the shortest sampled latency, in milliseconds.\n    * `latency.max` (Number) the longest sampled latency, in milliseconds.\n    * `latency.avg` (Number) the average sampled latency, in milliseconds.\n\n### Event: 'gc'\nEmitted when a garbage collection (GC) cycle occurs in the underlying V8 runtime.\n* `data` (Object) the data from the GC sample:\n    * `time` (Number) the milliseconds when the sample was taken. This can be converted to a Date using `new Date(data.time)`.\n    * `type` (String) the type of GC cycle, either 'M' or 'S'.\n    * `size` (Number) the size of the JavaScript heap in bytes.\n    * `used` (Number) the amount of memory used on the JavaScript heap in bytes.\n    * `duration` (Number) the duration of the GC cycle in milliseconds.\n\n### Event: 'initialized'\nEmitted when all possible environment variables have been collected. Use `appmetrics.monitor.getEnvironment()` to access the available environment variables.\n\n### Event: 'loop'\nEmitted every 60 seconds, summarising event tick information in time interval\n* `data` (Object) the data from the event loop sample:\n    * `count` (Number) the number of event loop ticks in the last interval.\n    * `minimum` (Number) the shortest (i.e. fastest) tick in milliseconds.\n    * `maximum` (Number) the longest (slowest) tick in milliseconds.\n    * `average` (Number) the average tick time in milliseconds.\n\n### Event: 'memory'\nEmitted when a memory monitoring sample is taken.\n* `data` (Object) the data from the memory sample:\n    * `time` (Number) the milliseconds when the sample was taken. This can be converted to a Date using `new Date(data.time)`.\n    * `physical_total` (Number) the total amount of RAM available on the system in bytes.\n    * `physical_used` (Number) the total amount of RAM in use on the system in bytes.\n    * `physical_free` (Number) the total amount of free RAM available on the system in bytes.\n    * `virtual` (Number) the memory address space used by the Node.js application in bytes.\n    * `private` (Number) the amount of memory used by the Node.js application that cannot be shared with other processes, in bytes.\n    * `physical` (Number) the amount of RAM used by the Node.js application in bytes.\n\n### Event: 'profiling'\nEmitted when a profiling sample is available from the underlying V8 runtime.\n* `data` (Object) the data from the profiling sample:\n    * `time` (Number) the milliseconds when the sample was taken. This can be converted to a Date using `new Date(data.time)`.\n    * `functions` (Array) an array of functions that ran during the sample. Each array entry consists of:\n        * `self` (Number) the ID for this function.\n        * `parent` (Number) the ID for this function's caller.\n        * `name` (String) the name of this function.\n        * `file` (String) the file in which this function is defined.\n        * `line` (Number) the line number in the file.\n        * `count` (Number) the number of samples for this function.\n\n## API: Dependency Events (probes)\n\n### Event: 'http'\nEmitted when a HTTP request is made of the application.\n* `data` (Object) the data from the HTTP request:\n    * `time` (Number) the milliseconds when the request was made. This can be converted to a Date using `new Date(data.time)`.\n    * `method` (String) the HTTP method used for the request.\n    * `url` (String) the URL on which the request was made.\n    * `duration` (Number) the time taken for the HTTP request to be responded to in ms.\n    * `header` (String) the response header for the HTTP request.\n    * `contentType` (String) the content type of the HTTP request.\n    * `requestHeader` (Object) the request header for HTTP request.\n\n### Event: 'http-outbound'\nEmitted when the application makes an outbound HTTP request.\n* `data` (Object) the data from the HTTP request:\n    * `time` (Number) the milliseconds when the request was made. This can be converted to a Date using `new Date(data.time)`.\n    * `method` (String) the HTTP method used for the request.\n    * `url` (String) the URL on which the request was made.\n    * `contentType` (String) the HTTP response content-type.\n    * `statusCode` (String) the HTTP response status code.\n    * `duration` (Number) the time taken for the HTTP request to be responded to in ms.\n    * 'requestHeaders' (Object) the HTTP request headers.\n\n### Event: 'leveldown'\nEmitted when a LevelDB query is made using the `leveldown` module.\n* `data` (Object) the data from the LevelDB query:\n    * `time` (Number) the time in milliseconds when the LevelDB query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `method` (String) The leveldown method being used.\n    * `key` (Object) The key being used for a call to `get`, `put` or `del` (Undefined for other methods)\n    * `value` (Object) The value being added to the LevelDB database using the `put` method (Undefined for other methods) \n    * `opCount` (Number) The number of operations carried out by a `batch` method (Undefined for other methods) \n    * `duration` (Number) the time taken for the LevelDB query to be responded to in ms.\n    \n### Event: 'loopback-datasource-juggler'\nEmitted when a function is called on the `loopback-datasource-juggler` module\n* `data` (Object) the data from the loopback-datasource-juggler event:\n    * `time` (Number) the time in milliseconds when the event occurred. This can be converted to a Date using `new Date(data.time)`\n    * `method` (String) the function the juggler has executed\n    * `duration` (Number) the time taken for the operation to complete.\n\n### Event: 'memcached'\nEmitted when a data is stored, retrieved or modified in Memcached using the `memcached` module.\n* `data` (Object) the data from the memcached event:\n    * `time` (Number) the milliseconds when the memcached event occurred. This can be converted to a Date using `new Date(data.time)`\n    * `method` (String) the method used in the memcached client, eg `set`, `get`, `append`, `delete`, etc.\n    * `key` (String) the key associated with the data.\n    * `duration` (Number) the time taken for the operation on the memcached data to occur.\n\n### Event: 'mongo'\nEmitted when a MongoDB query is made using the `mongodb` module.\n* `data` (Object) the data from the MongoDB request:\n    * `time` (Number) the milliseconds when the MongoDB query was made. This can be converted to a Date using `new Date(data.time)`\n    * `query` (String) the query made of the MongoDB database.\n    * `duration` (Number) the time taken for the MongoDB query to be responded to in ms.\n    * `method` (String) the executed method for the query, such as find, update.\n    * `collection` (String) the MongoDB collection name.\n\n### Event: 'mqlight'\nEmitted when a MQLight message is sent or received.\n* `data` (Object) the data from the MQLight event:\n    * `time` (Number) the time in milliseconds when the MQLight event occurred. This can be converted to a Date using new Date(data.time).\n    * `clientid` (String) the id of the client.\n    * `data` (String) the data sent if a 'send' or 'message', undefined for other calls.  Truncated if longer than 25 characters.\n    * `method` (String) the name of the call or event (will be one of 'send' or 'message').\n    * `topic` (String) the topic on which a message is sent/received.\n    * `qos` (Number) the QoS level for a 'send' call, undefined if not set.\n    * `duration` (Number) the time taken in milliseconds.\n\n### Event: 'mqtt'\nEmitted when a MQTT message is sent or received.\n* `data` (Object) the data from the MQTT event:\n    * `time` (Number) the time in milliseconds when the MQTT event occurred. This can be converted to a Date using new Date(data.time).\n    * `method` (String) the name of the call or event (will be one of 'publish' or 'message').\n    * `topic` (String) the topic on which a message is published or received.\n    * `qos` (Number) the QoS level for the message.\n    * `duration` (Number) the time taken in milliseconds.\n\n### Event: 'mysql'\nEmitted when a MySQL query is made using the `mysql` module.\n* `data` (Object) the data from the MySQL query:\n    * `time` (Number) the milliseconds when the MySQL query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `query` (String) the query made of the MySQL database.\n    * `duration` (Number) the time taken for the MySQL query to be responded to in ms.\n\n### Event: 'oracle'\nEmitted when a query is executed using the `oracle` module.\n* `data` (Object) the data from the Oracle query:\n    * `time` (Number) the milliseconds when the Oracle query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `query` (String) the query made of the Oracle database.\n    * `duration` (Number) the time taken for the Oracle query to be responded to in ms.\n\n### Event: 'oracledb'\nEmitted when a query is executed using the `oracledb` module.\n* `data` (Object) the data from the OracleDB query:\n    * `time` (Number) the milliseconds when the OracleDB query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `query` (String) the query made of the OracleDB database.\n    * `duration` (Number) the time taken for the OracleDB query to be responded to in ms.\n\n### Event: 'postgres'\nEmitted when a PostgreSQL query is made to the `pg` module.\n* `data` (Object) the data from the PostgreSQL query:\n    * `time` (Number) the milliseconds when the PostgreSQL query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `query` (String) the query made of the PostgreSQL database.\n    * `duration` (Number) the time taken for the PostgreSQL query to be responded to in ms.\n\n### Event: 'redis'\nEmitted when a Redis command is sent.\n* `data` (Object) the data from the Redis event:\n    * `time` (Number) the time in milliseconds when the redis event occurred. This can be converted to a Date using new Date(data.time).\n    * `cmd` (String) the Redis command sent to the server or 'batch.exec'/'multi.exec' for groups of command sent using batch/multi calls.\n    * `duration` (Number) the time taken in milliseconds.\n\n### Event: 'riak'\nEmitted when a Riak method is called using the `basho-riak-client` module.\n* `data` (Object) the data from the Riak event:\n    * `time` (Number) the time in milliseconds when the riak event occurred. This can be converted to a Date using new Date(data.time).\n    * `method` (String) the Riak method called.\n    * `options` (Object) the options parameter passed to Riak.\n    * `command` (Object) the command parameter used in the `execute` method.\n    * `query` (String) the query parameter used in the `mapReduce` method.\n    * `duration` (Number) the time taken in milliseconds.\n\n### Event: 'socketio'\nEmitted when WebSocket data is sent or received by the application using socketio.\n* `data` (Object) the data from the socket.io request:\n    * `time` (Number) the milliseconds when the event occurred. This can be converted to a Date using `new Date(data.time)`.\n    * `method` (String) whether the event is a `broadcast` or `emit` from the application, or a `receive` from a client  .\n    * `event` (String) the name used for the event.\n    * `duration` (Number) the time taken for event to be sent or for a received event to be handled.\n\n### Event: 'strong-oracle'\nEmitted when a query is executed using the `strong-oracle` module.\n* `data` (Object) the data from the Strong Oracle query:\n    * `time` (Number) the milliseconds when the Strong Oracle query was made. This can be converted to a Date using `new Date(data.time)`.\n    * `query` (String) the query made of the database.\n    * `duration` (Number) the time taken for the Strong Oracle query to be responded to in ms.\n    \n## API: Requests\n\n### Event: 'request'\nRequests are a special type of event emitted by appmetrics.  All the probes named above can also create request events if requests are enabled.  Howver requests are nested within a root incoming request (usually http). Request events are disabled by default.\n* `data` (Object) the data from the request:\n    * `time` (Number) the milliseconds when the request occurred. This can be converted to a Date using `new Date(data.time)`.\n    * `type` (String) The type of the request event. This is the name of the probe that sent the request data, e.g. `http`, `socketio` etc.\n    * `name` (String) The name of the request event. This is the request task, eg. the url, or the method being used.\n    * `request` (Object) the detailed data for the root request event:\n        * `type` (String) The type of the request event. This is the name of the probe that sent the request data, e.g. `http`, `socketio` etc.\n        * `name` (String) The name of the request event. This is the request task, eg. the url, or the method being used.\n        * `context` (Object) Additional context data (usually contains the same data as the associated non-request metric event).\n        * `stack` (String) An optional stack trace for the event call.\n        * `children` (Array) An array of child request events that occurred as part of the overall request event. Child request events may include function trace entries, which will have a `type` of null.\n        * `duration` (Number) the time taken for the request to complete in ms.\n    * `duration` (Number) the time taken for the overall request to complete in ms.\n\n### Supported platforms\n\nThe Node Application Metrics agent supports the following runtime environments where a Node.js runtime is available:\n\n* **Node.js v4, v6 ,v7 and v8** on:\n  * 64-bit or 32-bit runtime on Windows (x64 or x86)\n  * 64-bit or 32-bit runtime on Linux (x64, x86, PPC32, PPC64, PPC64LE, z31, z64)\n  * 64-bit or 32-bit runtime on AIX (PPC64)\n  * 64-bit runtime on Mac OS X (x64)\n\n## Troubleshooting\nFind below some possible problem scenarios and corresponding diagnostic steps. Updates to troubleshooting information will be made available on the [appmetrics wiki][3]: [Troubleshooting](https://github.com/RuntimeTools/appmetrics/wiki/Troubleshooting). If these resources do not help you resolve the issue, you can open an issue on the Node Application Metrics [appmetrics issue tracker][5].\n\n### Checking Node Application Metrics has started\nBy default, a message similar to the following will be written to console output when Node Application Metrics starts:\n\n`[Fri Aug 21 09:36:58 2015] com.ibm.diagnostics.healthcenter.loader INFO: Node Application Metrics 1.0.1-201508210934 (Agent Core 3.0.5.201508210934)`\n\n### Error \"Conflicting appmetrics module was already loaded by node-hc. Try running with node instead.\" when using `node-hc`\nThis error indicates you are using `node-hc` to run an application that uses the Node Application Metrics monitoring API (see *[Modifying your application to use the local installation](#modifying-your-application-to-use-the-local-installation)*). Resolve this by using `node` to run the application instead. **Alternatively**, you could remove (or disable temporarily) the use of the Node Application Metrics monitoring API in your application.\n\nThis error was added to prevent the scenario where 2 instances of the agent can be accidentally created and started in parallel -- the globally installed one created by `node-hc` and the locally installed one created by the `require('appmetrics');` call in an application modified to use the Node Application Metrics monitoring API.\n\n### Error \"The specified module could not be found ... appmetrics.node\"\nThis error indicates there was a problem while loading the native part of the module or one of its dependent libraries. On Windows, `appmetrics.node` depends on a particular version of the C runtime library and if it cannot be found this error is the likely result.\n\nCheck:\n\n* Does the `appmetrics.node` file exist in the indicated location? If not, try reinstalling the module.\n* For version `1.0.0` on Windows: are `msvcr100.dll` and `msvcp100.dll` installed on your Windows system, and do they match the bitness (32-bit or 64-bit) of your Node.js runtime environment? If not, you may be able to install them with the *Visual C++ Redistributable Packages for Visual Studio 2010* package from the Microsoft website.\n* For version `1.0.1` on Windows: does `msvcr120.dll` and `msvcp120.dll` exist in the module installation directory (see *[Installation](#install)*) and does it match the bitness of your Node.js runtime environment? If not, try reinstalling the module.\n\nNote: On Windows, the global module installation directory might be shared between multiple Node.js runtime environments. This can cause problems with globally installed modules with native components, particularly if some of the Node.js runtime environments are 32-bit and others are 64-bit because the native components will only work with those with matching bitness.\n\n### Error \"Failed to open library .../libagentcore.so: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found\"\nThis error indicates there was a problem while loading the native part of the module or one of its dependent libraries. On non-Windows platforms, `libagentcore.so` depends on a particular (minimum) version of the C runtime library and if it cannot be found this error is the result.\n\nCheck:\n\n* Your system has the required version of `libstdc++` installed. You may need to install or update a package in your package manager. If your OS does not supply a package at this version, you may have to install standalone software - consult the documentation or support forums for your OS.\n* If you have an appropriate version of `libstdc++`installed, ensure it is on the system library path, or use a method (such as setting `LD_LIBRARY_PATH` environment variable on Linux, or LIBPATH environment variable on AIX) to add the library to the search path.\n\n### No profiling data present for Node.js applications\nMethod profiling data is not collected by default, check *[Configuring Node Application Metrics](#configuring-node-application-metrics)* for information on how to enable it.\n\nIf collection is enabled, an absence of method profiling data from a Node.js application could be caused by the type of tasks that are being run by your application -- it may be running long, synchronous tasks that prevent collection events from being scheduled on the event loop.\n\nIf a task uses the Node.js thread exclusively then shuts down the Node.js runtime environment, the Health Center agent may not get the opportunity to obtain *any* profiling data. An example of such an application is the Octane JavaScript benchmark suite, which loads the CPU continuously rather than dividing the load across multiple units of work.\n\n## Source code\nThe source code for Node Application Metrics is available in the [appmetrics project][6]. Information on working with the source code -- installing from source, developing, contributing -- is available on the [appmetrics wiki][3].\n\n## License\nThis project is released under an Apache 2.0 open source license.  \n\n## Versioning scheme\nThe npm package for this project uses a semver-parsable X.0.Z version number for releases, where X is incremented for breaking changes to the public API described in this document and Z is incremented for bug fixes **and** for non-breaking changes to the public API that provide new function.\n\n### Development versions\nNon-release versions of this project (for example on github.com/RuntimeTools/appmetrics) will use semver-parsable X.0.Z-dev.B version numbers, where X.0.Z is the last release with Z incremented and B is an integer. For further information on the development process go to the  [appmetrics wiki][3]: [Developing](https://github.com/RuntimeTools/appmetrics/wiki/Developing).\n\n## Version\n3.0.2\n\n## Release History\n`3.0.2` - Probe defect for Node 8 support.  \n`3.0.1` - Packaging bug fix to allow build from source if binary not present.  \n`3.0.0` - Remove express probe. Additional data available in http and request events. Code improvements.  \n`2.0.1` - Remove support for Node.js 0.10, 0.12, 5.  Add heapdump api call.  \n`1.2.0` - Add file data collection capability and option configuration via api.  \n`1.1.2` - Update agent core to 3.0.10, support Node.js v7.  \n`1.1.1` - Fix node-gyp rebuild failure and don't force MQTT broker to on  \n`1.1.0` - Bug fixes, improved MongoDB data, updated dependencies, CPU watchdog feature  \n`1.0.13` - Express probe, strong-supervisor integration  \n`1.0.12` - Appmetrics now fully open sourced under Apache 2.0 license  \n`1.0.11` - Bug fixes    \n`1.0.10` - Bug fixes  \n`1.0.9` - Loopback and Riak support, bug fixes and update to agent core 3.0.9.  \n`1.0.8` - Oracle support, bug fixes and api tests runnable using 'npm test'.  \n`1.0.7` - StrongOracle support, support for installing with a proxy, expose MongoDB, MQLight and MySQL events to connectors.  \n`1.0.6` - OracleDB support and bug fixes.  \n`1.0.5` - Expose HTTP events to connectors (including MQTT).  \n`1.0.4` - Redis, Leveldown, Postgresql, Memcached, MQLight and MQTT support, higher precision timings, and improved performance.  \n`1.0.3` - Node.js v4 support.  \n`1.0.2` - HTTP, MySQL, MongoDB, request tracking and function tracing support.  \n`1.0.1` - Mac OS X support, io.js v2 support.  \n`1.0.0` - First release.\n\n[1]:https://marketplace.eclipse.org/content/ibm-monitoring-and-diagnostic-tools-health-center\n[2]:http://www.ibm.com/support/knowledgecenter/SS3KLZ/com.ibm.java.diagnostics.healthcenter.doc/topics/connecting.html\n[3]:https://github.com/RuntimeTools/appmetrics/wiki\n[4]:https://docs.npmjs.com/files/folders\n[5]:https://github.com/RuntimeTools/appmetrics/issues\n[6]:https://github.com/RuntimeTools/appmetrics\n","versions":[{"number":"0.0.1","date":"2015-07-13T11:43:33.257Z"},{"number":"1.0.0","date":"2015-07-16T13:07:22.978Z"},{"number":"1.0.1","date":"2015-08-27T16:37:17.325Z"},{"number":"1.0.2","date":"2015-09-04T15:19:16.109Z"},{"number":"1.0.3","date":"2015-11-06T15:52:34.177Z"},{"number":"1.0.4","date":"2015-12-08T16:19:15.887Z"},{"number":"1.0.5","date":"2015-12-18T16:10:13.474Z"},{"number":"1.0.6","date":"2016-01-21T16:15:33.825Z"},{"number":"1.0.7","date":"2016-02-12T15:08:34.209Z"},{"number":"1.0.8","date":"2016-04-12T08:13:59.913Z"},{"number":"1.0.9","date":"2016-04-29T16:03:54.559Z"},{"number":"1.0.10","date":"2016-04-29T17:22:14.132Z"},{"number":"1.0.11","date":"2016-05-11T08:29:20.357Z"},{"number":"1.0.12","date":"2016-06-14T14:24:20.384Z"},{"number":"1.0.13","date":"2016-08-02T10:02:02.524Z"},{"number":"1.1.0","date":"2016-10-04T13:13:38.522Z"},{"number":"1.1.1","date":"2016-10-13T10:22:19.048Z"},{"number":"1.1.2","date":"2016-10-26T15:15:53.030Z"},{"number":"1.2.0","date":"2016-12-02T11:34:13.873Z"},{"number":"2.0.0","date":"2017-02-09T14:26:34.718Z"},{"number":"2.0.1","date":"2017-02-10T14:56:23.285Z"},{"number":"3.0.0","date":"2017-04-11T12:05:11.556Z"},{"number":"3.0.1","date":"2017-04-11T14:53:02.087Z"},{"number":"3.0.2","date":"2017-06-08T13:08:59.307Z"}],"starsCount":12,"created":"2015-07-13T11:43:33.257Z","modified":"2017-06-08T13:08:59.307Z","lastPublisher":{"name":"tobycorbin","email":"corbint@uk.ibm.com"},"owners":[{"name":"colegate","email":"colegate@uk.ibm.com"},{"name":"seabaylea","email":"cnbailey@gmail.com"},{"name":"stalleyj","email":"julie_stalley@uk.ibm.com"},{"name":"tobycorbin","email":"corbint@uk.ibm.com"},{"name":"tunniclm","email":"mike.tunnicliffe@uk.ibm.com"}],"other":{"_attachments":{},"_from":"appmetrics-3.0.2.tgz","_id":"appmetrics","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/appmetrics-3.0.2.tgz_1496927336964_0.5034888244699687"},"_npmUser":{"name":"tobycorbin","email":"corbint@uk.ibm.com"},"_npmVersion":"3.10.10","_rev":"14-b11a30a4d6e1f6923fe286f15f674fa0","_shasum":"2775ff2dfbbc0c06b35bd29338da1f108cfbf3d2","author":"","bugs":{"url":"https://github.com/RuntimeTools/appmetrics/issues"},"directories":{"lib":"lib","probes":"probes"},"dist-tags":{"latest":"3.0.2"},"dist":{"shasum":"2775ff2dfbbc0c06b35bd29338da1f108cfbf3d2","tarball":"https://registry.npmjs.org/appmetrics/-/appmetrics-3.0.2.tgz"},"maintainers":[{"name":"colegate","email":"colegate@uk.ibm.com"},{"name":"seabaylea","email":"cnbailey@gmail.com"},{"name":"stalleyj","email":"julie_stalley@uk.ibm.com"},{"name":"tobycorbin","email":"corbint@uk.ibm.com"},{"name":"tunniclm","email":"mike.tunnicliffe@uk.ibm.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-08T13:08:59.307Z","created":"2015-07-13T11:43:33.257Z","0.0.1":"2015-07-13T11:43:33.257Z","1.0.0":"2015-07-16T13:07:22.978Z","1.0.1":"2015-08-27T16:37:17.325Z","1.0.2":"2015-09-04T15:19:16.109Z","1.0.3":"2015-11-06T15:52:34.177Z","1.0.4":"2015-12-08T16:19:15.887Z","1.0.5":"2015-12-18T16:10:13.474Z","1.0.6":"2016-01-21T16:15:33.825Z","1.0.7":"2016-02-12T15:08:34.209Z","1.0.8":"2016-04-12T08:13:59.913Z","1.0.9":"2016-04-29T16:03:54.559Z","1.0.10":"2016-04-29T17:22:14.132Z","1.0.11":"2016-05-11T08:29:20.357Z","1.0.12":"2016-06-14T14:24:20.384Z","1.0.13":"2016-08-02T10:02:02.524Z","1.1.0":"2016-10-04T13:13:38.522Z","1.1.1":"2016-10-13T10:22:19.048Z","1.1.2":"2016-10-26T15:15:53.030Z","1.2.0":"2016-12-02T11:34:13.873Z","2.0.0":"2017-02-09T14:26:34.718Z","2.0.1":"2017-02-10T14:56:23.285Z","3.0.0":"2017-04-11T12:05:11.556Z","3.0.1":"2017-04-11T14:53:02.087Z","3.0.2":"2017-06-08T13:08:59.307Z"},"users":{"306766053":true,"hohoho":true,"seabaylea":true,"majgis":true,"santihbc":true,"sfabriece":true,"nicknaso":true,"harry.harihar":true,"vchouhan":true,"leizongmin":true,"shiyanfeng":true,"ys_sidson_aidson":true}}}