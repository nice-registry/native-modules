{"name":"yara","version":"1.3.1","description":"YARA support for Node.js","main":"index.js","dependencies":{"nan":"2.3.*"},"repository":"https://github.com/stephenwvickers/node-yara","keywords":["libyara","virustotal","vt","yara"],"license":"MIT","scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"de67193fef0c8b82bb4775388a09f53bbb2cd8ee","homepage":"https://github.com/stephenwvickers/node-yara#readme","versions":[{"number":"0.0.1","date":"2017-04-10T21:31:36.830Z"},{"number":"0.0.2","date":"2017-04-12T19:40:30.004Z"},{"number":"0.0.3","date":"2017-04-12T19:43:27.350Z"},{"number":"0.0.4","date":"2017-04-27T22:51:31.996Z"},{"number":"1.0.0","date":"2017-04-28T21:28:53.663Z"},{"number":"1.1.0","date":"2017-05-02T20:42:25.048Z"},{"number":"1.1.1","date":"2017-05-29T09:10:02.429Z"},{"number":"1.2.0","date":"2017-05-29T09:10:57.726Z"},{"number":"1.3.0","date":"2017-07-14T13:48:00.127Z"},{"number":"1.3.1","date":"2017-07-24T21:58:59.063Z"}],"readme":"\n# yara\n\nThis module implements [YARA][yara] bindings for [Node.js][nodejs].\n\n**This module is supported on Linux and MacOS (using homebrew) platforms only**\n\nThis module requires the `libmagic` library and the `libcrypto` library, and\ntheir associated C header files.  Use the following commands to install these\nlibraries before installation:\n\n\t# CentOS/Red Hat\n\tsudo yum install file-devel\n\t\n\t# Debian/Ubuntu\n\tsudo apt-get install libmagic-dev\n\n\t# MacOS (using homebrew)\n\tsudo brew install autoconf aclocal automake libtool libmagic libssl\n\nThis module is installed using [node package manager (npm)][npm]:\n\n\t# This module contains C++ source code which will be compiled\n\t# during installation using node-gyp.  A suitable build chain\n\t# must be configured before installation.\n\n\tnpm install yara\n\nThe `libyara` library source is NOT included in this module and will be\ndownloaded and compiled using `make` and associated tools during installation.\nBy default version `3.6.3` of `libyara` will used. The version can be\noverridden using the `YARA` environment variable, e.g.:\n\n\texport YARA=3.6.4; npm install yara\n\nIt is loaded using the `require()` function:\n\n\tvar yara = require(\"yara\")\n\nFollowing initialisation of this module `Scanner` objects can then\nbe created, and content scanned using YARA rules:\n\n\tyara.intialize(function(error) {\n\t\tif (error) {\n\t\t\tconsole.error(error.message)\n\t\t} else {\n\t\t\tvar rule_string = [\n\t\t\t\t\t\"rule is_good {\",\n\t\t\t\t\t\"\tcondition:\",\n\t\t\t\t\t\"\t\ttrue\",\n\t\t\t\t\t\"}\"\n\t\t\t\t].join(\"\\n\")\n\n\t\t\tvar rules = [\n\t\t\t\t{filename: \"rules.yara\"},\n\t\t\t\t{string: rule_string}\n\t\t\t]\n\n\t\t\tvar scanner = yara.createScanner()\n\t\t\t\n\t\t\tscanner.configure({rules: rules}, function(error, warnings) {\n\t\t\t\tif (error) {\n\t\t\t\t\tif (error instanceof CompileRulesError) {\n\t\t\t\t\t\tconsole.error(error.message + \": \" + JSON.stringify(error.errors))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(error.message)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (warnings.length)\n\t\t\t\t\t\tconsole.error(\"Compile warnings: \" + JSON.stringify(warnings))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar req = {buffer: Buffer.from(\"content\")}\n\t\t\t\t\t\t\n\t\t\t\t\t\tscanner.scan(req, function(error, result) {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\tconsole.error(error.message)\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.error(JSON.stringify(result))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n\n[nodejs]: http://nodejs.org \"Node.js\"\n[npm]: https://npmjs.org/ \"npm\"\n[yara]: http://virustotal.github.io/yara/ \"YARA\"\n\n# This Module vs the YARA C API\n\nWhen working with the YARA C API one would typically perform the following:\n\n 1. Initialize the YARA library\n 2. Create a YARA compiler\n 3. Compile one or more rules\n 4. Define zero or more external variables\n 5. Retrieve the compiled rules\n 6. Scan one or more pieces of content (file or memory based) using the\n   compiled rules\n\nNode.js is asynchronous and this module takes advantage of this property by\nperforming steps 2 to 5 above as a single action.  This is done in a way that\nYARA rules can be completely replaced at run-time while in the middle of\nscanning files.\n\nThis can be useful for long-running processes which must reload rules on the\nfly in the middle of scanning large numbers of files, for example.\n\nWhen using this module in place of the YARA C API the following steps would\nbe used instead:\n\n 1. Initialize the YARA library - call `yara.initialize()`\n 2. Create a scanner instance - call `yara.createScanner()`\n 3. Configure the scanner instance - call `Scanner.configure()`\n 4. Scan one or more pieces of content (file or memory based) - call\n    `Scanner.scan()`\n 5. At any point, even while scanning files, re-configure the scanner instance\n    with new rules and external variables - call `Scanner.configure()`\n\nNearly all features of the YARA C API are exposed by this module.  Features\nthat do not fit in with the Node.js environment are excluded, e.g. the\n`yr_rules_scan_fd()` function and all the `yr_..._foreach()` functions.\n\nNote also that the `yr_rules_save()` and `yr_rules_load()` functions are not\nexposed in anyway, nor are the `yr_rules_save_stream()` and\n`yr_rules_load_stream()` functions.\n\n# Asynchronous Thread Pool Size\n\nContent scanning is performed in background threads.  This is provided by the\n[Native Abstractions for Node.js][nan] framework, specifically the\n`AsyncWorker` class interface.\n\nBy default, Node.js employs 4 background threads by default.  When scanning\nmany hundreds of files at once, for example, this would reduce throughput.\nSupport for the `UV_THREADPOOL_SIZE` environment variable was introduced into\nNode.js 0.10.0.  This can be used increase the number of background threads up\nto a maximum of 128.  This should be set before starting Node.js, and cannot\nbe changed once Node.js has been started:\n\n\texport UV_THREADPOOL_SIZE=128; node\n\n[nan]: https://github.com/nodejs/nan \"Native Abstractions for Node.js\"\n\n# Constants\n\nThe following sections describe constants exported and used by this module.\n\n## yara.MetaType\n\nWhen a rule is matched during a scan the `result` object passed to the\n`Scanner.scan()` callback will contain a `rules` attribute, which is an\narray of objects each defining a matched rule.  Each rule object will have a\n`metas` attribute, which is a further array of objects, each defining the\nmeta fields defined for the corresponding rule.  Each meta object contains\na `type` attribute which defines the YARA type for the meta field's value.\nFor example:\n\n\tvar result = {\n\t\t\"rules\": [\n\t\t\t{\n\t\t\t\t\"id\": \"is_stephen\",\n\t\t\t\t...\n\t\t\t\t\"metas\": [\n\t\t\t\t\t{type: yara.MetaType.String, id: \"m1\", value: \"something\"},\n\t\t\t\t\t{type: yara.MetaType.Boolean, id: \"m2\", value: true}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n\nThis object contains constants which can be used for the `type` attribute.\n\nThe following constants are defined in this object (the corresponding YARA C\nAPI constant is also given):\n\n * `Integer` - `META_TYPE_INTEGER`  \n * `Boolean` - `META_TYPE_BOOLEAN`\n * `String` - `META_TYPE_STRING`\n\n## yara.ScanFlag\n\nThe `Scanner.scan()` method expects an object as its first argument.  This\nobject can contain a `flags` attribute which is used by the YARA scanning\nengine.  Currently only the one flag below is defined by YARA, therefore\nthis attribute will be either `0` (the default) or the singular flag defined\nbelow.\n\nThe following constants are defined in this object (the corresponding YARA C\nAPI constant is also given):\n\n * `FastMode` - `SCAN_FLAGS_FAST_MODE`\n\n## yara.VariableType\n\nThe `Scanner.scan()` method expects an object as its first argument.  This\nobject can contain a `variables` attribute, which is an array of objects,\neach defining a YARA external variable.  Each variable object contains\na `type` attribute which defines the YARA type for the variables value.\nFor example:\n\n\tvar options = {\n\t\t...\n\t\tvariables: [\n\t\t\t{type: yara.VariableType.Integer, id: \"age\", value: 35}\n\t\t\t{type: yara.VariableType.String, id: \"name\", value: \"Stephen Vickers\"}\n\t\t]\n\t}\n\nThis object contains constants which can be used for the `type` attribute.\n\nThe following constants are defined in this object (the corresponding YARA C\nAPI function used to define the variable an a YARA compiler instance is also\ngiven):\n\n * `Integer` - `yr_compiler_define_integer_variable()`\n * `Float` - `yr_compiler_define_float_variable()`\n * `Boolean` - `yr_compiler_define_boolean_variable()`\n * `String` - `yr_compiler_define_string_variable()`\n\n# Using This Module\n\nThis module exposes the `Scanner` class.  Instances of this class are used to\nconfigure one or more YARA rules and zero or more external variables.  Once\nconfigured with these items, `Scanner` instances are then used to scan content\nusing the `scan()` method.\n\nThis module exports the `createScanner()` function which is used to create\ninstances of the `Scanner` class.\n\nBefore any `Scanner` instances can be configured, or used for scanning, the\n`yara.initialize()` function must be called.\n\n## yara.libyaraVersion()\n\nThe `libyaraVersion()` function returns a string containing the version of\nYARA which was statically compiled into the module during installation.\n\nThe following example will print `3.6.4` to standard output if the module was\ninstalled using the `YARA=3.6.4 npm install yara` command:\n\n\tconsole.log(yara.libyaraVersion())\n\n## yara.initialize(callback)\n\nThe `initialize()` function initializes the YARA library by calling the\nYARA C API function `yr_initialize()`.\n\nThe `callback` function is called once `yr_initialize()` has been called.\nThe following arguments will be passed to the `callback` function:\n\n * `error` - Instance of the `Error` class, or `null` if no error occurred\n\nThe following example initializes the YARA library:\n\n\tyara.initialize(function(error) {\n\t\tif (error) {\n\t\t\tconsole.error(error.message)\n\t\t} else {\n\t\t\t// Create a scanner, configure it and scan some files...\n\t\t}\n\t})\n\n## yara.createScanner()\n\nThe `createScanner()` function instantiates and returns an instance of the\n`Scanner` class:\n\n    var scanner = raw.createScanner()\n\nThis function takes no arguments.\n\n## scanner.configure(options, callback)\n\nThe `configure()` method configures a `Scanner` instance with one or more YARA\nrules and zero or more YARA external variables.\n\nThe required `options` parameter is an object, and can contain the following\nitems:\n\n * `rules` - An array of objects, each defining one YARA rule, each object\n   must contain one of the following two attributes:\n    * `filename` - A file containing YARA rules to configure the scanner with\n    * `string` - A string containin YARA rules to configure the scanner with\n * `variables` - An array of objects, each defining one YARA external variable,\n   each object must contain the following attributes:\n    * `type` - One of the constants defined in the `yara.VariableType` object,\n      e.g. `yara.VariableType.Integer`\n    * `id` - The variables identifier as a string, e.g. `created_at`\n    * `value` - The variables value, the type of this field will depend on the\n      type specified in the `type` attribute, e.g. `true` for the type\n      `yara.VariableType.Boolean`\n\nThe `callback` function is called once all rules have been compiled and all\nexternal variables have been configured.  The following arguments will be\npassed to the `callback` function:\n\n * `error` - Instance of the `Error` class, an instance of the\n   `yara.CompileRulesError` class, or `null` if no error occurred, if `error`\n   is an instance of the `yara.CompileRulesError` class then the attribute\n   `errors` will be defined on the `error` object which is an array of one or\n   more objects, each object defines an error generated when a rule was\n   compiled, each object will contain the following attributes:\n    * `index` - An integer index indicating which item in the `rules` array,\n      specified in the `options` object passed to the `configure()` method,\n      the error relates to, i.e. `0` for the first item\n    * `line` - The line number within the rule the error relates to, e.g.\n      `42` for line 42\n    * `message` - A string describing the error, e.g.\n      `syntax error, unexpected '}', expecting _CONDITION_`\n * `warnings` - An array of zero or more objects, each object defines a\n   warning generated when a rule was compiled, if there were no warnings the\n   array will be `0` in length, each object will contain the following\n   attributes:\n    * `index` - An integer index indicating which item in the `rules` array,\n      specified in the `options` object passed to the `configure()` method,\n      the warning relates to, i.e. `3` for the fourth item\n    * `line` - The line number within the rule the warning relates to, e.g.\n      `12` for line 12\n    * `message` - A string describing the warning, e.g.\n      `Using literal string \"stephen\" in a boolean operation.`\n\nThe following example configures a number of YARA rules from strings:\n\n\tvar rules = [\n\t\t\"rule always_true {\\ncondition:\\ntrue\\n}\",\n\t\t\"rule always_false {\\ncondition:\\nfalse\\n}\"\n\t]\n\n\tvar variables = [\n\t\t{type: yara.VariableType.Integer, id: \"created_at\", value: 1493332105},\n\t\t{type: yara.VariableType.String, id: \"created_by\", value: \"Stephen Vickers\"},\n\t\t{type: yara.VariableType.Boolean, id: \"is_stable\", value: true}\n\t]\n\t\n\tscanner.configure({rules: rules, variables: variables}, function(error, warnings) {\n\t\tif (error) {\n\t\t\tif (error instanceof CompileRulesError) {\n\t\t\t\tconsole.error(error.message + \": \" + JSON.stringify(error.errors))\n\t\t\t} else {\n\t\t\t\tconsole.error(error.message)\n\t\t\t}\n\t\t} else {\n\t\t\tif (warnings.length)\n\t\t\t\tconsole.error(\"Compile warnings: \" + JSON.stringify(warnings))\n\t\t\t} else {\n\t\t\t\t// Scan some files\n\t\t\t}\n\t\t}\n\t})\n\n## scanner.scan(request, callback)\n\nThe `scan()` method scans the content contained within a Node.js `Buffer` object\nor a file.\n\nThe required `request` parameter is an object, and can contain the following\nitems:\n\n * `filename` - A string specifying a file, either this attribute or the\n   `buffer` attribute is required\n * `buffer` - A Node.js `Buffer` object, either this attribute or the\n   `filename` attribute is required\n * `offset` - A number specifying how many bytes of the Node.js `Buffer`\n   object specified by the `buffer` attribute to skip before scanning,\n   defaults to `0`\n * `length` - A number specifying the number of bytes, starting at the offset\n   specified by the `offset` attribute, to scan in the Node.js `Buffer` object\n   specified by the `buffer` attribute, defaults to the result of\n   `buffer.length - offset`\n * `flags` - Either the constant `yara.ScanFlag.FastMode` or the number `0`,\n   defaults to `0`\n * `timeout` - A number specifying after how many seconds a scan should be\n   aborted, defaults to `0` meaning no timeout\n * `matchedBytes` - A number specifying the number of bytes of actual matched\n   data to include in the scan result, defaults to `0` meaning not to\n\tinclude any matched data, note that this number is also capped by the\n\t`MAX_MATCH_DATA` libyara configuration\n\nThe `callback` function is called once the scan has completed.  The following\narguments will be passed to the `callback` function:\n\n * `error` - Instance of the `Error` class or `null` if no error occurred\n * `result` - An object containing the following attributes:\n    * `rules` - An array of objects, each defining a YARA rule found to match\n      the content scanned, each object will contain the following attributes:\n       * `id` - The rule identifier\n       * `tags` - An array of strings, each is a tag defined in the YARA rule\n       * `matches` - An array of objects, each identifying a string found in\n         the content scanned, and at which offset, note since a YARA rule can\n         match on other non-string items this array may have a length of `0`,\n         each object will contain the following attributes:\n          * `offset` - A number indicating at which offset in the content the\n            string matched some data, e.g. `43`\n          * `length` - A number indicating the length of the data matched\n            in the content, e.g. `7`\n          * `id` - The matching strings identifier, e.g. `$s1`\n          * `bytes` - If the `matchedBytes` attribute was specified in the\n            `request` parameter passed to the `scan()` method, this attribute\n            will be present and will contain a Node.js `Buffer` instance with\n\t\t\t\tthe bytes of data which matched, this may not contain all data that\n\t\t\t\tmatched, and will contain a number of bytes up to the number\n\t\t\t\tspecified by `matchedBytes`, or the `MAX_MATCH_DATA` libyara\n\t\t\t\tconfiguration if it is smaller, use the `length` attribute to\n\t\t\t\tdetermine if the `bytes` attribute contains all the matched data\n       * `metas` - An array of objects, each identifying a meta field defined\n         on the rule, since a rule may have no meta fields this array may have\n         a length of `0`, each object will contain the following attributes:\n          * `type` - One of the constants defined in the `yara.MetaType`\n            object, e.g. `yara.MetaType.Integer`\n          * `id` - The meta fields identifier, e.g. `created_by`\n          * `value` - The meta fields value, e.g. `Stephen Vickers`\n\nThe following example scans a Node.js `Buffer` object:\n\n\tvar buffer = Buffer.from(\"some bad content\")\n\t\n\tscanner.scan({buffer: buffer}, function(error, result) {\n\t\tif (error) {\n\t\t\tconsole.error(error)\n\t\t} else {\n\t\t\tif (result.rules.length) {\n\t\t\t\tconsole.log(\"match: \" + JSON.stringify(result))\n\t\t\t} else {\n\t\t\t\tconsole.log(\"no-match\")\n\t\t\t}\n\t\t}\n\t})\n\n# Example Programs\n\nExample programs are included under the modules `example` directory.\n\n# Bugs & Known Issues\n\nNone, yet!\n\nBug reports should be sent to <stephen.vickers.sv@gmail.com>.\n\n# Changes\n\n## Version 1.0.0 - 28/04/2017\n\n * Initial release\n\n## Version 1.1.0 - 02/05/2017\n\n * Support Mac OS\n * Address indentation inconsistencies\n\n## Version 1.2.0 - 29/05/2017\n\n * Introduce \"official\" support for Mac OS\n * Upgrade YARA to 3.6.0\n\n## Version 1.3.0 - 14/07/2017\n\n * Extract specified number of bytes of matched data when a string from a rule\n   matches (added the `matchedBytes` attribute to the `request` object to the\n\t`Scanner.scan()` method)\n * YARA dependancy is downloaded during build (defaults to `3.6.3`, override\n   using `YARA=x.x.x npm install`)\n * Added the `libyaraVersion()` function to obtain the version of YARA which\n   has been statically compiled into the module\n\n## Version 1.3.1 - 24/07/2017\n\n * Matched data buffer in scan result is freed twice resulting a double free\n   exception\n\n# Roadmap\n\nSuggestions and requirements should be sent to <stephen.vickers.sv@gmail.com>.\n\n# License\n\nCopyright (c) 2017 Stephen Vickers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n# Author\n\nStephen Vickers <stephen.vickers.sv@gmail.com>\n","created":"2017-04-10T21:31:36.830Z","modified":"2017-07-24T21:58:59.063Z","lastPublisher":{"name":"stephen.vickers","email":"stephen.vickers@devopsnetworks.com"},"owners":[{"name":"stephen.vickers","email":"stephen.vickers@devopsnetworks.com"}],"other":{"_attachments":{},"_from":".","_id":"yara","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yara-1.3.1.tgz_1500933537225_0.2760800011456013"},"_npmUser":{"name":"stephen.vickers","email":"stephen.vickers@devopsnetworks.com"},"_npmVersion":"3.10.8","_rev":"10-ccfd3ec3a4191ae7c3e162562ac317f7","_shasum":"1abba29e2600c8573d42241886ef5127a9bce4b8","author":{"name":"Stephen Vickers","email":"stephen.vickers.sv@gmail.com"},"bugs":{"url":"https://github.com/stephenwvickers/node-yara/issues"},"contributors":[{"name":"Stephen Vickers","email":"stephen.vickers.sv@gmail.com"}],"directories":{"example":"example"},"dist-tags":{"latest":"1.3.1"},"dist":{"shasum":"1abba29e2600c8573d42241886ef5127a9bce4b8","tarball":"https://registry.npmjs.org/yara/-/yara-1.3.1.tgz"},"maintainers":[{"name":"stephen.vickers","email":"stephen.vickers@devopsnetworks.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-24T21:58:59.063Z","created":"2017-04-10T21:31:36.830Z","0.0.1":"2017-04-10T21:31:36.830Z","0.0.2":"2017-04-12T19:40:30.004Z","0.0.3":"2017-04-12T19:43:27.350Z","0.0.4":"2017-04-27T22:51:31.996Z","1.0.0":"2017-04-28T21:28:53.663Z","1.1.0":"2017-05-02T20:42:25.048Z","1.1.1":"2017-05-29T09:10:02.429Z","1.2.0":"2017-05-29T09:10:57.726Z","1.3.0":"2017-07-14T13:48:00.127Z","1.3.1":"2017-07-24T21:58:59.063Z"}}}