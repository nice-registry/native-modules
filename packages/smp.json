{"name":"smp","description":"Streaming Message Protocol.","version":"1.1.3","main":"index.js","homepage":"https://github.com/smprotocol/smp-node","dependencies":{"nan":"^2.1.0","preview":"~0.1.3"},"devDependencies":{},"repository":"https://github.com/smprotocol/smp-node","engines":{"node":">=0.12.0"},"license":"MIT","keywords":["message frame","message framing","frame","framing","streaming","streaming data","messaging","protocol"],"scripts":{"test":"node test.js"},"gitHead":"4e528c37209c8f3381df4b0ca5cd770a082897a4","readme":"# Streaming Message Protocol for Node.js [![Build Status](https://api.travis-ci.org/smprotocol/smp-node.png)](https://travis-ci.org/smprotocol/smp-node)\n\nStreaming Message Protocol for Node.js.  \n\nThe Streaming Message Protocol (SMP) is a lightweight and efficient data framing protocol for \nexchanging messages across network transports like: TCP, TLS, WebSocket. \n\n_To read the [Streaming Message Protocol Specification](http://smprotocol.github.io/)._\n\nSMP is a binary protocol allowing any binary data format to be used. You can of cause use non \nbinary data such as text or JSON - by converting to a buffer. You can also encode multiple \narguments within a single message, for example: binary from a photo and JSON about that photo, as \nseparate arguments. This means you don't have to use serialization to combine binary and text based \ndata together into a single argument - although you could if you want.\n\nSMP solves three data scenarios when sending messages across a network:\n\n1. A whole small message.\n2. A whole large message, called frames.\n3. A never ending message, also frames.\n\nSMP makes frames of large or never ending messages efficiently sized to best fit over the network, \nframes are assigned a unique ID and order number. This approach allows asynchronously sent frames - \nyou could even send frames to different receivers, to be reassembled later.\n\n_SMP-Protocol-Version: 1.1._\n\n*TODO: fix and finsih frames support.*\n\n## Installation\n\n```\nnpm install smp\n```\n\n\n## Examples\n\n_See examples folder. To print use preview, eg: node examples/message.js --preview_\n\n```js\nvar smp = require('smp');\n\nvar framed = smp.encode([new Buffer('hello world')]);\nconsole.log('framed', framed);    // <Buffer 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n\nvar message = smp.decode(framed.toBuffer());\nconsole.log('message', message);\n\nvar payload = message.args[0].toString();\nconsole.log('payload:', payload);\n\n```\nStream through TCP.\n\n```js\nvar net = require('net');    // TCP\nvar smp = require('smp');\n\nvar server = net.createServer(function(sock){\n\n  var stream = smp.StreamParser;\n  var parser = new stream();\n\n  // can use parser.on( 'frame', 'message', 'err', 'errorMessage', 'information', etc.\n\n  parser.on('frame', function(frame){\n    console.log('frame', frame);\n  });\n\n  sock.pipe(parser);\n  \n});\n\nserver.listen(8888);\n\nvar client = net.connect(8888);\nclient.write(smp.encode([new Buffer('abcdefghijklmnopqrstuvwxyz'), new Buffer('0123456789')], {max_message_size: 10, id: 555, first: true}).toBuffer());\n\n```\nUsing WebSockets, [npm install naked-websocket](https://github.com/fluidecho/naked-websocket).\n\n```js\nvar nws = require('naked-websocket');\nvar smp = require('smp');\n\nvar server = nws.createServer({protocol: 'ws'}, function(socket) {\n\n  var stream = smp.StreamParser;\n  var parser = new stream();\n\n  // can use parser.on( 'frame', 'message', 'information', etc.\n\n  parser.on('message', function(message){\n    console.log('message', message);\n    console.log('payload', message.args[0].toString());\n  });\n\n  socket.pipe(parser);\n  \n}).listen(8888);\n\n\nvar options = {\n  protocol: 'ws',\n  hostname: '127.0.0.1',\n  port: 8888\n};\n\nvar client = nws.connect(options, function(socket) {\n\n  socket.write(smp.encode([new Buffer('hello world')]).toBuffer());\n  \n});\n\n```\n\n\n## SMP Meta Codes\n\nSMP uses meta codes within each message/frame to define meaning between the sender and receiver.\n\n_To read the [Streaming Message Protocol Specification](http://smprotocol.github.io/)._\n\n```\n+------+-------------------+-----------------------------------------------------------------------+\n| FLAG | DESCRIPTION       | NOTES                                                                 |\n+------+-------------------+-----------------------------------------------------------------------+\n|    0 | WHOLE MESSAGE     | Payload data, a whole complete MESSAGE, when ARGUMENTS PAYLOAD size < | \n|      |                   | MAX-MESSAGE-SIZE.                                                     |\n+------+-------------------+-----------------------------------------------------------------------+\n|    1 | NEW FRAME         | Payload data, a new FRAME.                                            |\n+------+-------------------+-----------------------------------------------------------------------+\n|    2 | CONTINUING FRAME  | Payload data, a middle FRAME.                                         |\n+------+-------------------+-----------------------------------------------------------------------+\n|    3 | LAST FRAME        | Payload data, the last FRAME.                                         |\n+------+-------------------+-----------------------------------------------------------------------+\n|    4 | INFOMATION        | Information, contained within the PAYLOAD.                            |\n+------+-------------------+-----------------------------------------------------------------------+\n|    5 | ERROR             | Error, first ARGUMENT is a error code (3.2.), second ARGUMENT is the  |\n|      |                   | error message (3.2.).                                                 |\n+------+-------------------+-----------------------------------------------------------------------+\n|    6 | HEARTBEAT         | Heartbeat, with optional PAYLOAD data.                                |\n+------+-------------------+-----------------------------------------------------------------------+\n|    7 | STOP              | Action, stop sending or receiving payload data, will immediately      |\n|      |                   | close any socket connection.                                          |\n+------+-------------------+-----------------------------------------------------------------------+\n|    8 | PAUSE             | Action, pause sending or receiving payload data.                      |\n+------+-------------------+-----------------------------------------------------------------------+\n|    9 | RESUME            | Action, resume sending or receiving payload data.                     |\n+------+-------------------+-----------------------------------------------------------------------+\n|   10 | CHECKPOINT        | Information, a list of sequence number(s) of committed objects.       |\n+------+-------------------+-----------------------------------------------------------------------+\n|   11 | NAMESPACE         | Namespace, a message type of any custom name.                         |\n+------+-------------------+-----------------------------------------------------------------------+\n|   12 | BLOCK             | Payload data wrapper, a list of payload data (as EG, CODE: 0,1,2,3).  |\n+------+-------------------+-----------------------------------------------------------------------+\n|   13 | ROW               | Payload data wrapper, a list of BLOCKs.                               |\n+------+-------------------+-----------------------------------------------------------------------+\n|   14 | SUPER             | Super Protocol, build a custom higher-level messaging protocol.       |\n+------+-------------------+-----------------------------------------------------------------------+\n|   15 | RESERVED          | Reserved for future versions.                                         |\n+------+-------------------+-----------------------------------------------------------------------+\n```\n\n_See /examples/infos.js for examples._\n\n\n## Options\n\nEncode options.\n```\n max_message_size: number,   // byte size of a whole message, if greater will be frames of (default: 1493).\n               id: number,   // can set a ID for frames, from 0 to 65535.\n            first: boolean,  // if true and frames, frame[0] will be first frame (CODE:1).\n         complete: boolean,  // if true and frames, frame[frames.length] will be last frame (CODE:3).\n          toFrame: boolean   // if true will be frame even when size less than max_message_size.\n```\n\n## Extentions\n\nThe Streaming Message Protocol allows extentions. These are not defined by using first nibble flags, but some other method of identification such as file extention.\n\n\n## Benchmarking\n\n_See bm folder to run benchmarking tests._\n\n### Results\n\nUsing a WebSocket connection _[naked-websocket](https://github.com/fluidecho/naked-websocket)_ and \nsending 200 byte [SMP messages](https://github.com/smprotocol/smp-node), I get over 300,000 messages per second.\n\n```\n---------------------------------------------\n| RESULTS ~\n---------------------------------------------\n|     median: 322,581 ops/s\n|       mean: 275,587 ops/s\n|      total: 2,750,084 ops in 9.979s\n|    through: 55.39 MB/s\n---------------------------------------------\n```\n\n\n## Thanks\n\nThanks to [TJ Holowaychuk](https://github.com/tj/node-amp) for inspiration of multiple arguments within a message.\n\n\n## License\n\nChoose either: [MIT](http://opensource.org/licenses/MIT) or [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n","versions":[{"number":"0.0.1","date":"2014-02-24T16:11:15.431Z"},{"number":"0.0.2","date":"2014-02-24T16:14:47.934Z"},{"number":"0.0.3","date":"2014-03-06T17:08:27.670Z"},{"number":"0.0.4","date":"2014-03-06T17:08:36.502Z"},{"number":"0.0.5","date":"2014-03-06T17:09:30.401Z"},{"number":"0.0.6","date":"2014-03-10T15:14:32.307Z"},{"number":"0.0.7","date":"2014-03-10T19:17:37.798Z"},{"number":"0.0.71","date":"2014-03-10T20:32:36.613Z"},{"number":"0.0.8","date":"2014-03-11T03:06:35.154Z"},{"number":"0.0.9","date":"2014-03-11T14:40:07.484Z"},{"number":"0.1.0","date":"2014-03-11T14:47:09.493Z"},{"number":"0.1.1","date":"2014-03-11T14:49:36.564Z"},{"number":"0.1.2","date":"2014-03-11T17:57:32.315Z"},{"number":"0.1.3","date":"2014-03-11T17:59:54.103Z"},{"number":"0.1.4","date":"2014-03-14T14:47:26.446Z"},{"number":"0.1.6","date":"2014-03-17T19:19:23.434Z"},{"number":"1.0.0","date":"2015-08-10T10:48:17.325Z"},{"number":"1.0.1","date":"2015-08-10T10:53:09.653Z"},{"number":"1.0.2","date":"2015-08-10T11:01:57.978Z"},{"number":"1.0.3","date":"2015-08-10T11:12:12.615Z"},{"number":"1.0.4","date":"2015-08-11T01:01:18.144Z"},{"number":"1.0.5","date":"2015-08-11T01:33:53.978Z"},{"number":"1.0.6","date":"2015-08-13T00:23:26.957Z"},{"number":"1.0.7","date":"2015-08-13T00:47:19.120Z"},{"number":"1.0.8","date":"2015-08-18T02:51:19.035Z"},{"number":"1.1.0","date":"2016-12-21T04:57:33.561Z"},{"number":"1.1.2","date":"2016-12-22T00:53:28.648Z"},{"number":"1.1.3","date":"2017-01-05T00:43:45.355Z"}],"starsCount":2,"created":"2014-02-24T16:11:15.091Z","modified":"2017-02-21T14:15:10.050Z","lastPublisher":{"name":"fluidecho","email":"fluidecho@gmail.com"},"owners":[{"name":"fluidecho","email":"fluidecho@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"smp","_nodeVersion":"6.9.3","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/smp-1.1.3.tgz_1483577025118_0.5175273576751351"},"_npmUser":{"name":"fluidecho","email":"fluidecho@gmail.com"},"_npmVersion":"3.10.10","_rev":"6-1e98b5f4bef293daa39cecffdb93d7c7","_shasum":"71ac059f4dbe6f932759e1dc9eb3dc47f430fd28","author":{"name":"Mark W. B. Ashcroft","email":"mark@fluidecho.com","url":"http://fluidecho.com"},"bugs":{"url":"http://github.com/smprotocol/smp-node/issues","email":"bugs@fluidecho.com"},"contributors":[{"name":"Mark W. B. Ashcroft","email":"mark@fluidecho.com"}],"directories":{"example":"examples"},"dist-tags":{"latest":"1.1.3"},"dist":{"shasum":"71ac059f4dbe6f932759e1dc9eb3dc47f430fd28","tarball":"http://registry.npmjs.org/smp/-/smp-1.1.3.tgz"},"maintainers":[{"name":"fluidecho","email":"fluidecho@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-21T14:15:10.050Z","created":"2014-02-24T16:11:15.091Z","0.0.1":"2014-02-24T16:11:15.431Z","0.0.2":"2014-02-24T16:14:47.934Z","0.0.3":"2014-03-06T17:08:27.670Z","0.0.4":"2014-03-06T17:08:36.502Z","0.0.5":"2014-03-06T17:09:30.401Z","0.0.6":"2014-03-10T15:14:32.307Z","0.0.7":"2014-03-10T19:17:37.798Z","0.0.71":"2014-03-10T20:32:36.613Z","0.0.8":"2014-03-11T03:06:35.154Z","0.0.9":"2014-03-11T14:40:07.484Z","0.1.0":"2014-03-11T14:47:09.493Z","0.1.1":"2014-03-11T14:49:36.564Z","0.1.2":"2014-03-11T17:57:32.315Z","0.1.3":"2014-03-11T17:59:54.103Z","0.1.4":"2014-03-14T14:47:26.446Z","0.1.6":"2014-03-17T19:19:23.434Z","1.0.0":"2015-08-10T10:48:17.325Z","1.0.1":"2015-08-10T10:53:09.653Z","1.0.2":"2015-08-10T11:01:57.978Z","1.0.3":"2015-08-10T11:12:12.615Z","1.0.4":"2015-08-11T01:01:18.144Z","1.0.5":"2015-08-11T01:33:53.978Z","1.0.6":"2015-08-13T00:23:26.957Z","1.0.7":"2015-08-13T00:47:19.120Z","1.0.8":"2015-08-18T02:51:19.035Z","1.1.0":"2016-12-21T04:57:33.561Z","1.1.2":"2016-12-22T00:53:28.648Z","1.1.3":"2017-01-05T00:43:45.355Z"},"users":{"fluidecho":true,"wmhilton":true}}}