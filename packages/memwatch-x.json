{"name":"memwatch-x","description":"Keep an eye on your memory usage, and discover and isolate leaks.","version":"0.3.2","engines":{"node":">= 0.8.0"},"repository":"https://github.com/zack-lin/node-memwatch","main":"include.js","licenses":[{"type":"wtfpl"}],"scripts":{"install":"node-gyp rebuild","test":"mocha tests --reporter spec"},"devDependencies":{"mocha":"1.2.2","should":"0.6.3"},"dependencies":{"bindings":"^1.2.0","nan":"^1.8.0"},"gitHead":"c968d4bf8640dd187d134c546da9022fd9f26f2b","gypfile":true,"homepage":"https://github.com/zack-lin/node-memwatch","versions":[{"number":"0.3.0","date":"2015-06-23T09:27:49.334Z"},{"number":"0.3.1","date":"2015-06-24T11:22:18.995Z"},{"number":"0.3.2","date":"2015-06-24T11:25:05.195Z"}],"readme":"`node-memwatch`: Leak Detection and Heap Diffing for Node.JS\n============================================================\n\n[![Build Status](https://travis-ci.org/zack-lin/node-memwatch.svg?branch=master)](https://travis-ci.org/zack-lin/node-memwatch)\n\n`node-memwatch` is here to help you detect and find memory leaks in\nNode.JS code.  It provides:\n\n- A `leak` event, emitted when it appears your code is leaking memory.\n\n- A `stats` event, emitted occasionally, giving you\n  data describing your heap usage and trends over time.\n\n- A `HeapDiff` class that lets you compare the state of your heap between\n  two points in time, telling you what has been allocated, and what\n  has been released.\n\n\nInstallation\n------------\n\n- `npm install memwatch-x`\n\n\nDescription\n-----------\n\nThere are a growing number of tools for debugging and profiling memory\nusage in Node.JS applications, but there is still a need for a\nplatform-independent native module that requires no special\ninstrumentation.  This module attempts to satisfy that need.\n\nTo get started, import `node-memwatch` like so:\n\n```javascript\nvar memwatch = require('memwatch-x');\n```\n\n### Leak Detection\n\nYou can then subscribe to `leak` events.  A `leak` event will be\nemitted when your heap usage has increased for five consecutive\ngarbage collections:\n\n```javascript\nmemwatch.on('leak', function(info) { ... });\n```\n\nThe `info` object will look something like:\n\n```javascript\n{ start: Fri, 29 Jun 2012 14:12:13 GMT,\n  end: Fri, 29 Jun 2012 14:12:33 GMT,\n  growth: 67984,\n  reason: 'heap growth over 5 consecutive GCs (20s) - 11.67 mb/hr' }\n```\n\n\n### Heap Usage\n\nThe best way to evaluate your memory footprint is to look at heap\nusage right aver V8 performs garbage collection.  `memwatch` does\nexactly this - it checks heap usage only after GC to give you a stable\nbaseline of your actual memory usage.\n\nWhen V8 performs a garbage collection (technically, we're talking\nabout a full GC with heap compaction), `memwatch` will emit a `stats`\nevent.\n\n```javascript\nmemwatch.on('stats', function(stats) { ... });\n```\n\nThe `stats` data will look something like this:\n\n```javascript\n{\n  \"num_full_gc\": 17,\n  \"num_inc_gc\": 8,\n  \"heap_compactions\": 8,\n  \"estimated_base\": 2592568,\n  \"current_base\": 2592568,\n  \"min\": 2499912,\n  \"max\": 2592568,\n  \"usage_trend\": 0\n}\n```\n\n`estimated_base` and `usage_trend` are tracked over time.  If usage\ntrend is consistently positive, it indicates that your base heap size\nis continuously growing and you might have a leak.\n\nV8 has its own idea of when it's best to perform a GC, and under a\nheavy load, it may defer this action for some time.  To aid in\nspeedier debugging, `memwatch` provides a `gc()` method to force V8 to\ndo a full GC and heap compaction.\n\n\n### Heap Diffing\n\nSo far we have seen how `memwatch` can aid in leak detection.  For\nleak isolation, it provides a `HeapDiff` class that takes two snapshots\nand computes a diff between them.  For example:\n\n```javascript\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\n\n// do some things ...\n\n// Take the second snapshot and compute the diff\nvar diff = hd.end();\n```\n\nThe contents of `diff` will look something like:\n\n```javascript\n{\n  \"before\": { \"nodes\": 11625, \"size_bytes\": 1869904, \"size\": \"1.78 mb\" },\n  \"after\":  { \"nodes\": 21435, \"size_bytes\": 2119136, \"size\": \"2.02 mb\" },\n  \"change\": { \"size_bytes\": 249232, \"size\": \"243.39 kb\", \"freed_nodes\": 197,\n    \"allocated_nodes\": 10007,\n    \"details\": [\n      { \"what\": \"String\",\n        \"size_bytes\": -2120,  \"size\": \"-2.07 kb\",  \"+\": 3,    \"-\": 62\n      },\n      { \"what\": \"Array\",\n        \"size_bytes\": 66687,  \"size\": \"65.13 kb\",  \"+\": 4,    \"-\": 78\n      },\n      { \"what\": \"LeakingClass\",\n        \"size_bytes\": 239952, \"size\": \"234.33 kb\", \"+\": 9998, \"-\": 0\n      }\n    ]\n  }\n```\n\nThe diff shows that during the sample period, the total number of\nallocated `String` and `Array` classes decreased, but `Leaking Class`\ngrew by 9998 allocations.  Hmmm.\n\nYou can use `HeapDiff` in your `on('stats')` callback; even though it\ntakes a memory snapshot, which triggers a V8 GC, it will not trigger\nthe `stats` event itself.  Because that would be silly.\n\n\nFuture Work\n-----------\n\nPlease see the Issues to share suggestions and contribute!\n\n\nLicense\n-------\n\nhttp://wtfpl.org\n","created":"2015-06-23T09:27:49.334Z","modified":"2015-06-24T11:25:05.195Z","lastPublisher":{"name":"zack-lin","email":"linzegia@gmail.com"},"owners":[{"name":"zack-lin","email":"linzegia@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"memwatch-x","_nodeVersion":"0.12.2","_npmUser":{"name":"zack-lin","email":"linzegia@gmail.com"},"_npmVersion":"2.7.4","_rev":"1-4a0582a2c975153612386b2a4aeb76a3","_shasum":"b1360a3eef4883f720ceb46fb23394a770335fce","author":{"name":"Lloyd Hilaiel","url":"http://lloyd.io"},"bugs":{"url":"https://github.com/zack-lin/node-memwatch/issues"},"contributors":[{"name":"Jed Parsons","url":"@jedp"},{"name":"Jeff Haynie","url":"@jhaynie"},{"name":"Justin Matthews","url":"@jmatthewsr-ms"}],"directories":{},"dist-tags":{"latest":"0.3.2"},"dist":{"shasum":"b1360a3eef4883f720ceb46fb23394a770335fce","tarball":"http://registry.npmjs.org/memwatch-x/-/memwatch-x-0.3.2.tgz"},"maintainers":[{"name":"zack-lin","email":"linzegia@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-06-24T11:25:05.195Z","created":"2015-06-23T09:27:49.334Z","0.3.0":"2015-06-23T09:27:49.334Z","0.3.1":"2015-06-24T11:22:18.995Z","0.3.2":"2015-06-24T11:25:05.195Z"}}}