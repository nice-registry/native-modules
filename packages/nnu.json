{"name":"nnu","description":"Node.js Native Utilities.","version":"0.2.0","repository":"https://github.com/talrasha007/nnu","main":"include_dir.js","license":"MIT","devDependencies":{"nan":"^2.2.0"},"gitHead":"73ad77930052381eb565ebe7e1b5c7cba35f2aa7","homepage":"https://github.com/talrasha007/nnu#readme","versions":[{"number":"0.0.1","date":"2014-11-06T09:15:11.367Z"},{"number":"0.1.0","date":"2017-07-05T19:17:44.327Z"},{"number":"0.1.1","date":"2017-07-05T19:22:16.096Z"},{"number":"0.1.2","date":"2017-07-06T02:47:21.667Z"},{"number":"0.1.3","date":"2017-07-06T03:04:38.095Z"},{"number":"0.1.4","date":"2017-07-06T05:30:34.086Z"},{"number":"0.1.5","date":"2017-07-06T05:44:58.001Z"},{"number":"0.1.6","date":"2017-07-11T09:35:38.838Z"},{"number":"0.1.7","date":"2017-07-13T03:40:34.049Z"},{"number":"0.2.0","date":"2017-07-26T10:48:39.480Z"}],"readme":"# nnu - Node.js Native Utilities\n  Some useful utilities for writing node.js native module.\n  \n## Usage\n  Simply add **NAN** and **NNU** as a dependency in the package.json of your Node addon:\n```bash\nnpm install --save nan nnu\n```\n  Pull in the path to **NAN** and **NNU** in your binding.gyp so that you can use #include <nan.h> in your .cpp files:\n```python\n\"include_dirs\" : [\n    \"<!(node -e \\\"require('nan')\\\")\",\n    \"<!(node -e \\\"require('nnu')\\\")\"\n]\n```\n\n## Example\n  - nnu::setPrivate & nnu::getPrivate\n  - nnu::ClassWrap\n```c++\n#include <iostream>\n#include <nnu.h>\n\n// nnu::ClassWrap will simplify the way you write a class.\nclass SampleClass : public nnu::ClassWrap<SampleClass> {\npublic:\n    static const char * const CLASS_NAME;\n\n    // Static member *cotr* is *required*\n    static NAN_METHOD(ctor) {\n        int v = 0;\n        if (info.Length() > 0) {\n            v = info[0]->Int32Value();\n        }\n\n        SampleClass *sc = new SampleClass(v);\n        sc->Wrap(info.This());\n\n        nnu::setPrivate(info.This(), \"_priv_2_\", 2);\n        nnu::setPrivate(info.This(), \"_priv_3_\", sc);\n\n        info.GetReturnValue().Set(info.This());\n    }\n\n    // Static member *setupMember*  is *required*\n    static void setupMember(v8::Local<v8::FunctionTemplate>& tpl) {\n        // Use wrapFunction to wrap member function as static.\n        Nan::SetPrototypeMethod(tpl, \"printPriv\", wrapFunction<&SampleClass::printPriv>);\n        Nan::SetPrototypeMethod(tpl, \"getVal\", wrapFunction<&SampleClass::getVal>);\n        Nan::SetPrototypeMethod(tpl, \"incVal\", wrapFunction<&SampleClass::incVal>);\n        Nan::SetPrototypeMethod(tpl, \"clone\", wrapFunction<&SampleClass::clone>);\n    }\n\nprivate:\n    SampleClass() : _val(0) { }\n\n    // You can now write member function instead of static, ObjectWrap::Unwrap is no longer needed.\n    NAN_METHOD(printPriv) {\n        int priv1 = nnu::getPrivate<int>(info.This(), \"_priv_2_\");\n        std::cout << \"priv1: \" << priv1 << std::endl;\n\n        SampleClass *priv2 = nnu::getPrivate<SampleClass*>(info.This(), \"_priv_3_\");\n        std::cout << \"priv2: \" << priv2 << \" should be equal to \" << this << std::endl;\n    }\n\n    NAN_METHOD(getVal) {\n        info.GetReturnValue().Set(Nan::New(_val));\n    }\n\n    NAN_METHOD(incVal) {\n        _val++; \n        info.GetReturnValue().Set(info.This());\n    }\n\n    NAN_METHOD(clone) {\n        v8::Local<v8::Value> args[] = { Nan::New(_val) };\n        v8::Local<v8::Object> ret = SampleClass::newInstance(1, args);\n        info.GetReturnValue().Set(ret);\n    }\n\nprivate:\n    int _val;\n};\n\nconst char * const SampleClass::CLASS_NAME = \"SampleClass\";\n\n// newInstance()\n// or\n// newInstance(int argc, v8::Local<v8::Value> argv[])\nNAN_METHOD(newSample) {\n    info.GetReturnValue().Set(SampleClass::newInstance());\n}\n\nNAN_MODULE_INIT(InitAll) {\n    SampleClass::setup(target);\n\n    NAN_EXPORT(target, newSample);\n}\n\nNODE_MODULE(nnu_example, InitAll);\n```\n","created":"2014-11-06T09:15:11.367Z","modified":"2017-07-26T10:48:39.480Z","lastPublisher":{"name":"talrasha007","email":"talrasha007@gmail.com"},"owners":[{"name":"talrasha007","email":"talrasha007@gmail.com"}],"other":{"_attachments":{},"_id":"nnu","_nodeVersion":"8.1.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nnu-0.2.0.tgz_1501066119426_0.8408285304903984"},"_npmUser":{"name":"talrasha007","email":"talrasha007@gmail.com"},"_npmVersion":"5.0.3","_rev":"10-d894e0920366c14ff820da6046cf65f3","bugs":{"url":"https://github.com/talrasha007/nnu/issues"},"directories":{},"dist-tags":{"latest":"0.2.0"},"dist":{"integrity":"sha512-TpuG/HE/ZtJO1K22pGfyFtKPBIukE9ZOZWD5m01fNDuSMaKKSSN9qQwMgbKpaRYMbQmdgmPpMs0oZ6BQzuGTuw==","shasum":"166afa451105d317617919d7dc599242e4cd03d4","tarball":"https://registry.npmjs.org/nnu/-/nnu-0.2.0.tgz"},"maintainers":[{"name":"talrasha007","email":"talrasha007@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-26T10:48:39.480Z","created":"2014-11-06T09:15:11.367Z","0.0.1":"2014-11-06T09:15:11.367Z","0.1.0":"2017-07-05T19:17:44.327Z","0.1.1":"2017-07-05T19:22:16.096Z","0.1.2":"2017-07-06T02:47:21.667Z","0.1.3":"2017-07-06T03:04:38.095Z","0.1.4":"2017-07-06T05:30:34.086Z","0.1.5":"2017-07-06T05:44:58.001Z","0.1.6":"2017-07-11T09:35:38.838Z","0.1.7":"2017-07-13T03:40:34.049Z","0.2.0":"2017-07-26T10:48:39.480Z"}}}