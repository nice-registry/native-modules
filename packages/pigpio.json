{"name":"pigpio","version":"0.6.1","description":"Fast GPIO, PWM, servo control, state change notification, and interrupt handling on the Raspberry Pi","main":"pigpio.js","scripts":{"test":"echo \"Tests can only be run manually from the command line.\" && exit 1","install":"node-gyp rebuild"},"repository":"https://github.com/fivdi/pigpio","engines":{"node":">=0.10.0"},"dependencies":{"bindings":"~1.2.1","nan":"~2.6.2"},"keywords":["gpio","pwm","servo","interrupt","raspberry","pi"],"license":"MIT","gypfile":true,"gitHead":"1e38233550f5e7e18e91f2dc95ee985025e4075a","homepage":"https://github.com/fivdi/pigpio#readme","versions":[{"number":"0.0.0","date":"2015-10-13T22:00:45.441Z"},{"number":"0.0.1","date":"2015-10-31T20:53:16.166Z"},{"number":"0.0.2","date":"2015-11-01T17:01:45.846Z"},{"number":"0.0.3","date":"2015-11-01T22:00:57.168Z"},{"number":"0.0.4","date":"2015-11-02T15:02:48.419Z"},{"number":"0.0.5","date":"2015-11-03T12:22:05.608Z"},{"number":"0.0.7","date":"2015-11-03T19:41:24.587Z"},{"number":"0.0.8","date":"2015-11-08T07:37:30.172Z"},{"number":"0.1.0","date":"2015-11-28T07:31:01.758Z"},{"number":"0.1.1","date":"2015-11-28T07:43:20.196Z"},{"number":"0.1.2","date":"2015-12-05T07:34:04.346Z"},{"number":"0.1.3","date":"2015-12-05T10:02:29.716Z"},{"number":"0.2.0","date":"2015-12-13T11:04:55.410Z"},{"number":"0.3.0","date":"2016-02-14T10:41:28.630Z"},{"number":"0.3.1","date":"2016-02-21T10:14:06.576Z"},{"number":"0.3.2","date":"2016-02-21T19:12:25.206Z"},{"number":"0.3.3","date":"2016-05-03T22:05:00.727Z"},{"number":"0.3.4","date":"2016-05-15T17:24:47.648Z"},{"number":"0.4.0","date":"2016-09-25T09:59:02.389Z"},{"number":"0.5.1","date":"2017-04-13T20:14:09.789Z"},{"number":"0.6.0","date":"2017-06-10T04:11:46.808Z"},{"number":"0.6.1","date":"2017-07-15T06:22:17.652Z"}],"readme":"# pigpio\n\nA wrapper for the [pigpio C library](https://github.com/joan2937/pigpio) to\nenable fast GPIO, PWM, servo control, state change notification and interrupt\nhandling with **Node.js** on the Raspberry Pi Zero, 1, 2 or 3.\n\npigpio supports Node.js versions 0.10, 0.12, 4, 5, 6, 7 and 8.\n\n## Contents\n\n * [Features](https://github.com/fivdi/pigpio#features)\n * [Installation](https://github.com/fivdi/pigpio#installation)\n * [Usage](https://github.com/fivdi/pigpio#usage)\n   * [Pulse an LED with PWM](https://github.com/fivdi/pigpio#pulse-an-led-with-pwm)\n   * [Buttons and interrupt handling](https://github.com/fivdi/pigpio#buttons-and-interrupt-handling)\n   * [Servo control](https://github.com/fivdi/pigpio#servo-control)\n   * [Measure distance with a HC-SR04 ultrasonic sensor](https://github.com/fivdi/pigpio#measure-distance-with-a-hc-sr04-ultrasonic-sensor)\n   * [Determine the width of a pulse with alerts](https://github.com/fivdi/pigpio#determine-the-width-of-a-pulse-with-alerts)\n * [API documentation](https://github.com/fivdi/pigpio#api-documentation)\n * [Performance](https://github.com/fivdi/pigpio#performance)\n * [Limitations](https://github.com/fivdi/pigpio#limitations)\n * [Related packages](https://github.com/fivdi/pigpio#related-packages)\n\n## Features\n\n * Digital IO\n   * Up to 2.1 million digital reads per second <sup>*)</sup>\n   * Up to 2.3 million digital writes per second <sup>*)</sup>\n * PWM on any of GPIOs 0 through 31\n   * Multiple frequencies and duty cycle ranges supported\n * Servo control on any of GPIOs 0 through 31\n   * Jitter free\n * Alerts when any of GPIOs 0 through 31 change state\n   * The time of the state change is available accurate to a few microseconds\n * Notification streams for monitoring state changes on any of GPIOs 0 through 31 concurrently\n   * The time of the state changes are available accurate to a few microseconds\n * Low latency interrupt handlers\n   * Handle up to 20000 interrupts per second <sup>*)</sup>\n * Read or write up to 32 GPIOs as one operation with banked GPIO\n * Trigger pulse generation\n * Pull up/down resistor configuration\n\n*) On a Raspberry Pi 3 Model B V1.2 running at 1.2 GHz ([Performance](https://github.com/fivdi/pigpio#performance))\n\n## Installation\n\n#### Step 1 - Install the pigpio C library\n\nThe pigpio Node.js package requires the pigpio C library V41 or higher.\n\nRaspbian Jessie 2016-05-10 or newer comes with the pigpio C library\npre-installed so it need not be manually installed.\n\nRaspbian Jessie Lite 2016-05-10 or newer does not come with the pigpio C\nlibrary pre-installed so it must be manually installed with the following\ncommands:\n\n```\nsudo apt-get update\nsudo apt-get install pigpio\n```\n\nThe pigpio C library contains a number of utilities. One of these utilities\nis pigpiod which launches the pigpio C library as a daemon. This utility\nshould not be used as the pigpio Node.js package uses the C library directly.\n\nInstallation instructions for the pigpio C library on versions of Raspbian\nprior to 2016-05-10 can be found\n[here](http://abyz.co.uk/rpi/pigpio/download.html).\n\n#### Step 2 - Install the pigpio Node.js package\n\n```\nnpm install pigpio\n```\n\nIf you're using Node.js v4 or higher and seeing lots of compile errors when\ninstalling pigpio, it's very likely that gcc/g++ 4.8 or higher are not\ninstalled. See\n[Node.js v4 and native addons](https://github.com/fivdi/onoff/wiki/Node.js-v4-and-native-addons)\nfor details.\n\nIf you're using Node.js v0.10.29 and seeing a compile error saying that\n`‘REPLACE_INVALID_UTF8’ is not a member of ‘v8::String’` see\n[Node.js v0.10.29 and native addons on the Raspberry Pi](https://github.com/fivdi/onoff/wiki/Node.js-v0.10.29-and-native-addons-on-the-Raspberry-Pi).\n\n## Usage\n\nAssume there's an LED connected to GPIO17 (pin 11) and a momentary push button\nconnected to GPIO4 (pin 7).\n\n<img src=\"https://raw.githubusercontent.com/fivdi/pigpio/master/example/led-button.png\">\n\n#### Pulse an LED with PWM\n\nUse PWM to pulse the LED connected to GPIO17 from fully off to fully on\ncontinuously.\n\n```js\nvar Gpio = require('pigpio').Gpio,\n  led = new Gpio(17, {mode: Gpio.OUTPUT}),\n  dutyCycle = 0;\n\nsetInterval(function () {\n  led.pwmWrite(dutyCycle);\n\n  dutyCycle += 5;\n  if (dutyCycle > 255) {\n    dutyCycle = 0;\n  }\n}, 20);\n\n```\n\n#### Buttons and interrupt handling\n\nTurn the LED connected to GPIO17 on when the momentary push button connected to\nGPIO4 is pressed. Turn the LED off when the button is released.\n\n```js\nvar Gpio = require('pigpio').Gpio,\n  button = new Gpio(4, {\n    mode: Gpio.INPUT,\n    pullUpDown: Gpio.PUD_DOWN,\n    edge: Gpio.EITHER_EDGE\n  }),\n  led = new Gpio(17, {mode: Gpio.OUTPUT});\n\nbutton.on('interrupt', function (level) {\n  led.digitalWrite(level);\n});\n```\n\n#### Servo control\n\nContinuously move a servo connected to GPIO10 clockwise and anti-clockwise.\n\n<img src=\"https://raw.githubusercontent.com/fivdi/pigpio/master/example/servo.png\">\n\n```js\nvar Gpio = require('pigpio').Gpio,\n  motor = new Gpio(10, {mode: Gpio.OUTPUT}),\n  pulseWidth = 1000,\n  increment = 100;\n\nsetInterval(function () {\n  motor.servoWrite(pulseWidth);\n\n  pulseWidth += increment;\n  if (pulseWidth >= 2000) {\n    increment = -100;\n  } else if (pulseWidth <= 1000) {\n    increment = 100;\n  }\n}, 1000);\n```\n\n#### Measure distance with a HC-SR04 ultrasonic sensor\n\nThe `trigger` function can be used to generate a pulse on a GPIO and alerts can\nbe used to determine the time of a GPIO state change accurate to a few\nmicroseconds. These two features can be combined to measure distance using a\nHC-SR04 ultrasonic sensor.\n\n<img src=\"https://raw.githubusercontent.com/fivdi/pigpio/master/example/distance-hc-sr04.png\">\n\n```js\nvar Gpio = require('pigpio').Gpio,\n  trigger = new Gpio(23, {mode: Gpio.OUTPUT}),\n  echo = new Gpio(24, {mode: Gpio.INPUT, alert: true});\n\n// The number of microseconds it takes sound to travel 1cm at 20 degrees celcius\nvar MICROSECDONDS_PER_CM = 1e6/34321;\n\ntrigger.digitalWrite(0); // Make sure trigger is low\n\n(function () {\n  var startTick;\n\n  echo.on('alert', function (level, tick) {\n    var endTick,\n      diff;\n\n    if (level == 1) {\n      startTick = tick;\n    } else {\n      endTick = tick;\n      diff = (endTick >> 0) - (startTick >> 0); // Unsigned 32 bit arithmetic\n      console.log(diff / 2 / MICROSECDONDS_PER_CM);\n    }\n  });\n}());\n\n// Trigger a distance measurement once per second\nsetInterval(function () {\n  trigger.trigger(10, 1); // Set trigger high for 10 microseconds\n}, 1000);\n```\n\n#### Determine the width of a pulse with alerts\n\nAlerts can be used to determine the time of a GPIO state change accurate to a\nfew microseconds. Typically, alerts will be used for GPIO inputs but they can\nalso be used for outputs. In this example, the `trigger` method is used to\npulse the LED connected to GPIO17 on for 15 microseconds once per second.\nAlerts are used to measure the length of the pulse.\n\n```js\n// Assumption: the LED is off when the program is started\n\nvar Gpio = require('pigpio').Gpio,\n  led = new Gpio(17, {\n    mode: Gpio.OUTPUT,\n    alert: true\n  });\n\n(function () {\n  var startTick;\n\n  // Use alerts to determine how long the LED was turned on\n  led.on('alert', function (level, tick) {\n    var endTick,\n      diff;\n\n    if (level == 1) {\n      startTick = tick;\n    } else {\n      endTick = tick;\n      diff = (endTick >> 0) - (startTick >> 0); // Unsigned 32 bit arithmetic\n      console.log(diff);\n    }\n  });\n}());\n\n// Turn the LED on for 15 microseconds once per second\nsetInterval(function () {\n  led.trigger(15, 1);\n}, 1000);\n```\n\nHere's an example of the typical output to the console:\n\n```\n15\n15\n15\n15\n15\n15\n20\n15\n15\n15\n15\n```\n\n## API documentation\n\n### Classes\n\n- [Gpio](https://github.com/fivdi/pigpio/blob/master/doc/gpio.md) - General Purpose Input Output\n- [GpioBank](https://github.com/fivdi/pigpio/blob/master/doc/gpiobank.md) - Banked General Purpose Input Output\n- [Notifier](https://github.com/fivdi/pigpio/blob/master/doc/notifier.md) - Notification Stream\n\n### Configuring pigpio\n\n- [Configuration](https://github.com/fivdi/pigpio/blob/master/doc/configuration.md) - pigpio configuration\n\n## Performance\n\nThree of the pigpio tests are used to monitor performance:\n\n * digital-read-performance.js - determine max. no. of digitalRead ops per second\n * digital-write-performance.js - determine max. no. of digitalWrite ops per second\n * isr-performance.js - determine max. no. of interrupts per second\n\nThe average of ten runs of these tests are shown in the table below.\n\n Name | Pi 2 | Pi 3\n:--- | :--- | :---\nPi Model | Raspberry Pi 2 Model B V1.1 | Raspberry Pi 3 Model B V1.2\nOS | Raspbian Jessie 2016-02-09 | Raspbian Jessie 2016-02-26\nKernel | 4.1.17-v7+ | 4.1.18-v7+\nNode.js | v5.6.0 armv7l | v5.7.0 armv7l\npigpio | v0.3.0 | v0.3.2\npigpio C library | V45 | V47\nReads per second | 1,232,588 | 2,129,221\nWrites per second | 1,323,039 | 2,336,157\nInterrupts per second | 8,881 | 20,533\n\n## Limitations\n\nThe pigpio Node.js package is a wrapper for the\n[pigpio C library](https://github.com/joan2937/pigpio). A limitation of the\npigpio C library is that it can only be used by a single running process.\n\n## Related packages\n\n- [onoff](https://github.com/fivdi/onoff) - GPIO access and interrupt detection\n- [i2c-bus](https://github.com/fivdi/i2c-bus) - I2C serial bus access\n- [spi-device](https://github.com/fivdi/spi-device) - SPI serial bus access\n- [mcp-spi-adc](https://github.com/fivdi/mcp-spi-adc) - Analog to digital conversion with the MCP3002/4/8, MCP3202/4/8 and MCP3304\n\n","starsCount":6,"created":"2015-10-13T22:00:45.441Z","modified":"2017-07-25T21:08:23.997Z","lastPublisher":{"name":"fivdi","email":"bdscooke@gmail.com"},"owners":[{"name":"fivdi","email":"bdscooke@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"pigpio","_nodeVersion":"6.2.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pigpio-0.6.1.tgz_1500099735831_0.4671075346414"},"_npmUser":{"name":"fivdi","email":"bdscooke@gmail.com"},"_npmVersion":"3.9.5","_rev":"7-96341f1d6993c8f244b99294cedf43df","_shasum":"567c652e0ff6091f34e070aa3508aeaa2e653708","author":{"name":"fivdi"},"bugs":{"url":"https://github.com/fivdi/pigpio/issues"},"directories":{"example":"example","test":"test"},"dist-tags":{"latest":"0.6.1"},"dist":{"shasum":"567c652e0ff6091f34e070aa3508aeaa2e653708","tarball":"https://registry.npmjs.org/pigpio/-/pigpio-0.6.1.tgz"},"maintainers":[{"name":"fivdi","email":"bdscooke@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-25T21:08:23.997Z","created":"2015-10-13T22:00:45.441Z","0.0.0":"2015-10-13T22:00:45.441Z","0.0.1":"2015-10-31T20:53:16.166Z","0.0.2":"2015-11-01T17:01:45.846Z","0.0.3":"2015-11-01T22:00:57.168Z","0.0.4":"2015-11-02T15:02:48.419Z","0.0.5":"2015-11-03T12:22:05.608Z","0.0.7":"2015-11-03T19:41:24.587Z","0.0.8":"2015-11-08T07:37:30.172Z","0.1.0":"2015-11-28T07:31:01.758Z","0.1.1":"2015-11-28T07:43:20.196Z","0.1.2":"2015-12-05T07:34:04.346Z","0.1.3":"2015-12-05T10:02:29.716Z","0.2.0":"2015-12-13T11:04:55.410Z","0.3.0":"2016-02-14T10:41:28.630Z","0.3.1":"2016-02-21T10:14:06.576Z","0.3.2":"2016-02-21T19:12:25.206Z","0.3.3":"2016-05-03T22:05:00.727Z","0.3.4":"2016-05-15T17:24:47.648Z","0.4.0":"2016-09-25T09:59:02.389Z","0.5.1":"2017-04-13T20:14:09.789Z","0.6.0":"2017-06-10T04:11:46.808Z","0.6.1":"2017-07-15T06:22:17.652Z"},"users":{"lights0123":true,"rbultitude":true,"carlo.curinga":true,"dosevader":true,"cristiandley":true,"toszter":true}}}