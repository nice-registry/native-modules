{"name":"rpi-sk6812-native","version":"0.9.1","description":"(raspberry-pi *only*) native bindings to control a strip of WS281x or SK6812 LEDs with node.js","keywords":["raspberry","ws2811","ws2812","sk6812","led","hardware"],"main":"index.js","engines":{"node":">=0.10.0"},"repository":"https://github.com/n-johnson/node-rpi-sk6812-native","homepage":"https://github.com/n-johnson/node-rpi-sk6812-native","license":"MIT","dependencies":{"nan":"^2.0.9"},"devDependencies":{},"scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"ca637a660c7971f083dd0451b5666d09668f6875","versions":[{"number":"0.8.1","date":"2017-02-06T00:47:05.860Z"},{"number":"0.9.0","date":"2017-02-06T00:52:17.340Z"},{"number":"0.9.1","date":"2017-02-06T01:14:00.023Z"}],"readme":"# control ws281x-LEDs with node.js\n\nThis module provides native bindings to the\n[rpi_ws281x](https://github.com/jgarff/rpi_ws281x) library by Jeremy Garff to\nprovide a very basic set of functions to write data to a strip of\nws2811/ws2812 LEDs. **this will only run on the Raspberry Pi.**\n\nNOTE: This is a fork of [node-rpi-ws281x-native](https://github.com/beyondscreen/node-rpi-ws281x-native) with additional support for SK6812 LEDs.\n\n## setup\n\nthis module is available via npm:\n\n    npm install rpi-sk6812-native\n\nif you prefer installing from source:\n\n    npm install -g node-gyp\n    git clone --recursive https://github.com/n-johnson/node-rpi-sk6812-native.git\n    cd node-rpi-sk6812-native\n    npm install\n    node-gyp rebuild\n\n\n## basic usage\n\nthis module mainly exports four functions to send data to the LED-String.\n\n```javascript\nexports = {\n    /**\n     * configures PWM and DMA for sending data to the LEDs.\n     *\n     * @param {Number} numLeds  number of LEDs to be controlled\n     * @param {?Object} options  (acutally only tested with default-values)\n     *                           intialization-options for the library\n     *                           (PWM frequency, DMA channel, GPIO, Brightness)\n     */\n    init: function(numLeds, options) {},\n\n    /**\n     * register a mapping to manipulate array-indices within the\n     * data-array before rendering.\n     *\n     * @param {Array.<Number>} map  the mapping, indexed by destination.\n     */\n    setIndexMapping: function(map) {},\n\n    /**\n     * set the overall-brightness for the entire strip.\n     * This is a fixed scaling applied by the driver when\n     * data is sent to the strip\n     *\n     * @param {Number} brightness the brightness, value from 0 to 255.\n     */\n    setBrightness: function(brightness) {},\n\n    /**\n     * send data to the LED-strip.\n     *\n     * @param {Uint32Array} data  the pixel-data, 24bit per pixel in\n     *                            RGB-format (0xff0000 is red).\n     */\n    render: function(data) {},\n\n    /**\n     * clears all LEDs, resets the PWM and DMA-parts and deallocates\n     * all internal structures.\n     */\n    reset: function() {}\n};\n```\n\n### Index-Mapping\n\nAs the wiring of the LEDs not neccessarily corresponds to the pixel-ordering in\nthe data-array, this module supports index-remapping. So, if you are building a\ngrid of LEDs you can just use an alternating, top-to-bottom or mirrored wiring\nand use the remapping in order to use a unified structure in the incoming\ndata-arrays.\n\n### Events\n\nIn addition to that, the exported object is an `EventEmitter` that will emit\nthe following Events:\n\n * `beforeRender`: emitted just before the data is prepared and sent to the\n   LED-driver. The handler will receive the pixel-data array (an `Uint32Array`)\n   as single argument. As this event is handled synchronously, you can use this\n   to manipulate the data before it is sent to the LED-Strip.\n * `render`: emitted after the data has been sent to the LED-Strip. The single\n   argument passed to the handler is the final pixel-data array, after\n   index-remapping and gamma-correction.\n\n\n## testing basic functionality\n\nconnect the WS2812-strip to the raspberry-pi as described\n[here](https://learn.adafruit.com/neopixels-on-raspberry-pi/wiring) and run\nthe command `sudo node examples/rainbow.js <numLeds>`.\nYou should now see some rainbow-colors animation on the LED-strip.\n\n\n## needs to run as root\n\nAs the native part of this module needs to directly interface with the physical\nmemory of the raspberry-pi (which is required in order to configure the PWM and\nDMA-modules), it always has to run with root-privileges (there are probably ways\naround this requirement, but that doesn't change the fact that the node-process\nrunning the LEDs needs access to the raw physical memory â€“ a thing you should\nnever allow to any user other than root).\n\nIf you are using this module as part of a program that should not be run with\nelevated privileges, it would be a good idea to have the LED-driver running in\na seperate process. In such a case you could use the openpixel-control protocol\nto send the pixel-data to the driver-process.\nA stream-based node-implementation and some more information\n[can be found here](https://github.com/beyondscreen/node-openpixelcontrol).\n\n\n## Hardware\n\nThere is a guide [over at adafruit.com](https://learn.adafruit.com/neopixels-on-raspberry-pi)\non how to get the hardware up and running. I followed these instructions by\nthe word and had a working LED-strip.\n\nEssentially, you need the Raspberry Pi, a logic-level converter to shift the\noutput-voltage of the GPIO from 3.3V up to 5V (the guide mentions the 74AHCT125,\nmine is an 74HCT125N which works just as well) and of course a LED-Strip or\nother types of WS2812-LEDs.\n\nTo connect all that together, I'd recommend buying a small breadboard and some\njumper-wires. Also, consider buying a 5V power-supply that can deliver up to\n60mA per LED (so you'll need up to 6A (30W) to fully power 100 LEDs).\nFor smaller applications, a decent USB-charger should do.\n\n### Buying stuff\n\nA short checklist of what you will need:\n\n * Raspberry-PI and SD-Card\n * 5V power-supply (Meanwell for instance builds really good ones)\n * LED-Strip with WS2811/WS2812 Controllers (there are several other\n   controller-variations that are not supported)\n * a breadboard and some jumper-wires (m/m as well as at least two f/m to\n   connect the GPIO-Pins)\n * a 3.3V to 5V logic-level converter (74AHCT125 or 74HCT125N, others will\n   probably also work)\n * more wire to connect the LED-strips\n\nYou can buy everything at [adafruit.com](https://adafruit.com),\n[sparkfun](https://sparkfun.com), on ebay or your favourite electronics\nretailer (germany: check [conrad electronic](http://www.conrad.de),\n[watterott](http://watterott.com) or [reichelt](http://reichelt.de) where\ni bought most of my stuff).\n\n\n## Known Issues\n\nThere is a conflict where the internal soundcard uses the same \nGPIO / DMA / PWM functions that are needed to run the LED-drivers. \nAs far as I know you can not use both at the same time.\n\nOne workaround is to use an external (USB) soundcard and make it the \ndefault device:\n\nEdit /etc/modprobe.d/alsa-base.conf and comment out the line \n\n    options snd-usb-audio index=-2\n\nIf anyone finds a better solution please get in touch!\n","created":"2017-02-06T00:47:05.860Z","modified":"2017-02-06T01:14:00.023Z","lastPublisher":{"name":"nmjohnson","email":"node@njohnson.me"},"owners":[{"name":"nmjohnson","email":"node@njohnson.me"}],"other":{"_attachments":{},"_from":".","_id":"rpi-sk6812-native","_nodeVersion":"6.9.4","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/rpi-sk6812-native-0.9.1.tgz_1486343639764_0.8167461338452995"},"_npmUser":{"name":"nmjohnson","email":"node@njohnson.me"},"_npmVersion":"3.10.10","_rev":"3-2655a31ffdc72ba60abbabca1406a89a","_shasum":"3a6d8be0e7942c53c34feefe4e5f7628e762a043","author":{"name":"Martin Schuhfuss","email":"m.schuhfuss@gmail.com"},"bugs":{"url":"https://github.com/n-johnson/node-rpi-sk6812-native/issues"},"directories":{},"dist-tags":{"latest":"0.9.1"},"dist":{"shasum":"3a6d8be0e7942c53c34feefe4e5f7628e762a043","tarball":"https://registry.npmjs.org/rpi-sk6812-native/-/rpi-sk6812-native-0.9.1.tgz"},"maintainers":[{"name":"nmjohnson","email":"node@njohnson.me"}],"readmeFilename":"README.md","time":{"modified":"2017-02-06T01:14:00.023Z","created":"2017-02-06T00:47:05.860Z","0.8.1":"2017-02-06T00:47:05.860Z","0.9.0":"2017-02-06T00:52:17.340Z","0.9.1":"2017-02-06T01:14:00.023Z"}}}