{"name":"lru-native2","version":"1.0.1","description":"LRU cache module written in C++","keywords":["LRU","cache","native","c++"],"repository":"https://github.com/kibae/node-lru-native","license":"MIT","dependencies":{"nan":"latest"},"devDependencies":{"chai":"latest","coffee-script":"1.7.1","mocha":"latest","nan":"^2.2.0"},"scripts":{"valgrind":"valgrind --leak-check=full --show-possibly-lost=no node --expose-gc --trace-gc node_modules/mocha/bin/_mocha -R spec --compilers coffee:coffee-script","install":"node-gyp rebuild"},"gypfile":true,"gitHead":"d73152a4bee923f75a702804e313f104e5eb5bb5","homepage":"https://github.com/kibae/node-lru-native#readme","versions":[{"number":"1.0.0","date":"2017-04-02T04:27:57.600Z"},{"number":"1.0.1","date":"2017-04-02T04:59:07.163Z"}],"readme":"node-lru-native\n===============\n\nThis is an implementation of a simple in-memory cache for node.js, supporting LRU (least-recently-used) eviction\nand TTL expirations.\n\nIt was developed as an alternative to the (excellent) [node-lru-cache](https://github.com/isaacs/node-lru-cache)\nlibrary for use with hashes with a very large number of items. V8 normally does a good job of optimizing the\nin-memory representation of objects, but it isn't optimized for an object that holds a huge amount of data.\nWhen you add a very large number of properties (particularly with non-integer keys) to an object, performance\nbegins to suffer.\n\nRather than rely on V8 to figure out what we're trying to do, `node-lru-native` is a light wrapper around\n`std::unordered_map` from C++11. A `std::list` is used to track accesses so we can evict the least-recently-used\nitem when necessary.\n\nBased on the [node-hashtable](https://github.com/isaacbwagner/node-hashtable) library by Issac Wagner.\n\n# Usage\n\nInstall via npm:\n\n```\n$ npm install lru-native2\n```\n\nThen:\n\n```javascript\nvar LRUCache = require('lru-native2');\nvar cache = new LRUCache({ maxElements: 1000 });\ncache.set('some-key', 42);\nvar value = cache.get('some-key');\n```\n\nIf you'd like to tinker, you can build the extension using [node-gyp](https://github.com/TooTallNate/node-gyp):\n\n```\n$ npm install -g node-gyp\n$ node-gyp configure\n$ node-gyp build\n```\n\n# Configuration\n\nTo configure the cache, you can pass a hash to the `LRUCache` constructor with the following options:\n\n```\nvar cache = new LRUCache({\n\n  // The maximum number of items to add to the cache before evicting the least-recently-used item.\n  // Default: 0, meaning there is no maximum.\n  maxElements: 10000,\n\n  // The maximum age (in milliseconds) of an item.\n  // The item will be removed if get() is called and the item is too old.\n  // Default: 0, meaning items will never expire.\n  maxAge: 60000,\n\n  // The initial number of items for which space should be allocated.\n  // The cache will resize dynamically if necessary.\n  size: 1000,\n\n  // The maximum load factor for buckets in the unordered_map.\n  // Typically you won't need to change this.\n  maxLoadFactor: 2.0\n\n});\n```\n\n# API\n\n## set(key, value)\n\nAdds the specified item to the cache with the specified key.\n\n## get(key)\n\nReturns the item with the specified key, or `undefined` if no item exists with that key.\n\n## remove(key)\n\nRemoves the item with the specified key if it exists.\n\n## clear()\n\nRemoves all items from the cache.\n\n## size()\n\nReturns the number of items in the cache.\n\n## stats()\n\nReturns a hash containing internal information about the cache.\n\n## setMaxElements(maxElements)\n\nSet the maximum number of items\n\n## setMaxAge(maxAge)\n\nSet the maximum age (in milliseconds) of an item\n\n\n# Changelog\n\n- 1.0.0 -- Update the timestamp when get a value(like common LRU cache). Added SetMaxAge(), SetMaxElements()\n- *forked*\n- 0.4.0 -- Added support for newer versions of Node via NAN\n- 0.3.0 -- Changed memory allocation strategy, fixed issue where remove() would do a seek through the LRU list, code cleanup\n- 0.2.0 -- Fixed issue where maxAge-based removal would result in a seek through the LRU list\n- 0.1.0 -- Initial release\n","created":"2017-04-02T04:27:57.600Z","modified":"2017-04-02T04:59:07.163Z","lastPublisher":{"name":"kibae","email":"nonunnet@gmail.com"},"owners":[{"name":"kibae","email":"nonunnet@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"lru-native2","_nodeVersion":"6.10.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/lru-native2-1.0.1.tgz_1491109146900_0.2808434031903744"},"_npmUser":{"name":"kibae","email":"nonunnet@gmail.com"},"_npmVersion":"3.10.10","_rev":"2-afebe4ddf9d3ec3ab0b88f249a872d1b","_shasum":"5b9077fa598329feea2756483ff191187cce8327","author":{"name":"Kibae Shin","email":"nonunnet@gmail.com"},"bugs":{"url":"https://github.com/kibae/node-lru-native/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"5b9077fa598329feea2756483ff191187cce8327","tarball":"https://registry.npmjs.org/lru-native2/-/lru-native2-1.0.1.tgz"},"maintainers":[{"name":"kibae","email":"nonunnet@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-02T04:59:07.163Z","created":"2017-04-02T04:27:57.600Z","1.0.0":"2017-04-02T04:27:57.600Z","1.0.1":"2017-04-02T04:59:07.163Z"}}}