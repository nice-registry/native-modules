{"name":"memcached-native","version":"1.0.0","description":"Nodejs memcache native library","main":"index.js","gypfile":true,"scripts":{"mocha":"./node_modules/mocha/bin/mocha test","compile":"rm -rf build && node-gyp configure && node-gyp build","build-travis":"rm -rf build && npm --no-bin-links install && npm test","test":"npm run compile && npm run mocha","install":"node-gyp rebuild"},"repository":"https://github.com/allevo/memcached-native","license":"MIT","dependencies":{"nan":"^2.0.9"},"keywords":["memcached","memcache","cache","membase","nosql","native"],"devDependencies":{"async":"^1.4.2","istanbul":"^0.3.21","lodash":"^3.10.1","mocha":"^2.3.3","oa-ascync":"^1.0.0"},"gitHead":"9c28398304f85f83cc406e185b30adc1289089ad","homepage":"https://github.com/allevo/memcached-native","versions":[{"number":"1.0.0","date":"2015-12-11T22:16:17.456Z"}],"readme":"# memcached-native\n[![Build Status](https://travis-ci.org/allevo/memcached-native.svg)](https://travis-ci.org/allevo/memcached-native)\n\nThis package wraps the library for memcache written in C.\n\n## Client\nThis class is used to connect to memcache server. All expirationTime is misured in seconds. Please see (http://stackoverflow.com/questions/1418324/memcache-maximum-key-expiration-time)\n\n### Constructor\nUse the memcached configuration language to setup the client correctly:\n\n``` var memcachedClient = new Client('--SERVER=127.0.0.1:11211'); ```\n\nNo fallback is made\n\n### Start\nYou should always call this method before doing anything\n\n``` memcachedClient.start(); ```\n\n### Stop\nAfter all, this library needed to be stopped\n\n``` memcachedClient.stop(done); ```\n\n### Set\n``` memcachedClient.set(key, value, expirationTime, callback); ```\n\nSet a new value to the server. The third parameter is the expiration time in sec. The callback takes a parameter, the error.\n```\nmemcachedClient.set(key, value, 10, function(err) {\n  assert.ifError(err);\n  console.log('Set');\n});\n```\n\n### Get\n``` memcachedClient.get(key, callback); ```\n\nRetrieve the value saved as `key`\n```\nmemcachedClient.get(key, function(err, data) {\n  assert.ifError(err);\n  console.log(data);\n  done();\n});\n```\n\n### Touch\n``` memcachedClient.touch(key, expirationTime, callback); ```\n\nTouch a key\n```\nmemcachedClient.touch(key, 200, function(err) {\n  assert.ifError(err);\n  console.log('Touched');\n});\n\n```\n\n### Increment\n``` memcachedClient.increment(key, delta, callback); ```\n\nIncremnt key value by delta.\n```\nmemcachedClient.increment(key, 40, function(err, finalValue) {\n  assert.ifError(err);\n  console.log('Incremented. Final value is', finalValue);\n});\n```\n\n### Decrement\n``` memcachedClient.decrement(key, 3, callback); ```\n\nDecrement key value by delta. No negative value is stored on the server (forced to be 0 at least)\n```\nmemcachedClient.decrement(key, 3, function(err, finalValue) {\n  assert.ifError(err);\n  console.log('Decremented. Final value is', finalValue);\n});\n```\n\n### Append\n``` memcachedClient.append(key, '-suffix', callback); ```\n\nAppend a string before a stored value.\n```\nmemcachedClient.append(key, '-suffix', function(err) {\n  assert.ifError(err);\n});\n```\n\n### Prepend\n``` memcachedClient.append(key, '-suffix', callback); ```\n\nPrepend a string before a stored value.\n```\nmemcachedClient.prepend(key, 'prefix-', function(err) {\n  assert.ifError(err);\n});\n```\n\n### Delete\n``` memcachedClient.delete(key, expirationTime); ```\n\nDelete a key from the server. ExpirationTime is often 0 (now).\n```\nmemcachedClient.delete(key, 0, function(err) {\n  assert.ifError(err);\n});\n```\n\n### Exist\n``` memcachedClient.exist(key, callback); ```\n\nCheck if a key is set to memcached without retrieving it.\n```\nmemcachedClient.exist(key, function(err, isExist) {\n  assert.ifError(err);\n  console.log(isExist ? 'exists' : 'no');\n});\n```\n\n### Replace\n``` memcachedClient.replace(key, value, expirationTime, callback); ```\n\nReplace a value already presents on the server.\n```\nmemcachedClient.replace(key, value, 10, function(err) {\n  assert.ifError(err);\n});\n```\n\n### Cas\n``` memcachedClient.cas(key, value, expirationTime, casValue, callback); ```\n\nCas operation. `casValue` can be retrieved from `fetch_result` or `mget_and_fetch_all` methods.\n```\nmemcachedClient.cas(key, value, 10, casValue, function(err) {\n  assert.ifError(err);\n});\n```\n\n### MGet\n``` memcachedClient.mget(keys, callback); ```\n\nFetch an array of keys (see fetch_result)\n```\nmemcachedClient.mget(['key1', 'key2'], function(err) {\n  assert.ifError(err);\n});\n```\n\n### FetchResult\n``` memcachedClient.fetch_result(callback); ```\n\nReturn the key fetched by mget method. Be careful.\n```\nmemcachedClient.mget(['key1', 'key2'], function(err) {\n  memcachedClient.fetch_result(function(err, results) {\n    assert.ifError(err);\n    console.log(results.key1);\n    console.log(results.key2);\n  });\n});\n```\n\n### MGetAndFetchAll\n``` memcachedClient.mget_and_fetch_all(keys, callback); ```\n\nRequest and return all keys specified\n```\nmemcachedClient.mget_and_fetch_all(['key1', 'key2'], function(err, results) {\n  assert.ifError(err);\n  console.log(results.key1);\n  console.log(results.key2);\n});\n```\n\n## Some considerations\nWhen you run a client, a thread is started. Nodejs uses 4 thread to make some operations (like read file) that cannot be performed as asynchronous operation.\n\nAll suggestions are welcome\n","created":"2015-12-11T22:16:17.456Z","modified":"2015-12-11T22:16:17.456Z","lastPublisher":{"name":"allevo","email":"tomallevi@gmail.com"},"owners":[{"name":"allevo","email":"tomallevi@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"memcached-native","_nodeVersion":"0.10.32","_npmUser":{"name":"allevo","email":"tomallevi@gmail.com"},"_npmVersion":"2.1.9","_rev":"1-4a1726af7fcbde57d981e4436593478b","_shasum":"c5a434e7fcbbe9934d876846917a16ecea449a21","author":{"name":"allevo"},"bugs":{"url":"https://github.com/allevo/memcached-native/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"c5a434e7fcbbe9934d876846917a16ecea449a21","tarball":"http://registry.npmjs.org/memcached-native/-/memcached-native-1.0.0.tgz"},"maintainers":[{"name":"allevo","email":"tomallevi@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-12-11T22:16:17.456Z","created":"2015-12-11T22:16:17.456Z","1.0.0":"2015-12-11T22:16:17.456Z"}}}