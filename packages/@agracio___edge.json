{"name":"@agracio/edge","scope":"@agracio","version":"6.5.6","description":"Edge.js: run .NET and Node.js in-process on Windows, Mac OS, and Linux","tags":["owin","edge","net","clr","coreclr","c#","mono","managed",".net"],"main":"./lib/edge.js","engines":{"node":">= 0.8"},"licenses":[{"type":"Apache","url":"http://www.apache.org/licenses/LICENSE-2.0"}],"dependencies":{"edge-cs":"1.2.1","nan":"^2.0.9"},"devDependencies":{"chalk":"^1.1.3","del":"^2.2.2","gulp":"^3.9.1","gulp-bump":"^2.7.0","gulp-run":"^1.7.1","jshint":"1.1.0","merge2":"^1.0.3","mocha":"2.5.3","run-sequence":"^1.2.2"},"homepage":"https://github.com/agracio/edge","repository":"https://github.com/agracio/edge","scripts":{"install":"node tools/install.js","test":"node tools/test.js","jshint":"node ./tools/runJsHint.js"},"_resolved":"file:publish","versions":[{"number":"6.5.3","date":"2017-04-05T07:32:54.452Z"},{"number":"6.5.5","date":"2017-04-05T08:05:04.446Z"},{"number":"6.5.6","date":"2017-04-05T08:13:17.192Z"}],"readme":"Edge.js: .NET and Node.js in-process [![Build Status](https://travis-ci.org/agracio/edge.svg)](https://travis-ci.org/agracio/edge)\r\n====\r\n\r\n---\r\n**This is a fork of https://github.com/tjanczuk/edge aimed at providing support for Node.js 7.x.**\r\n\r\n**NPM package is published to `@agracio/edge`. Use `npm install @agracio/edge` and `require('@agracio/edge')`**\r\n\r\n---\r\n\r\n**NEW** Edge.js is now on Slack at https://edgejs.slack.com. Join [here](https://webtask.it.auth0.com/api/run/tjanczuk/edgejs-slack-invite). \r\n \r\nAn edge connects two nodes. This edge connects Node.js and .NET. V8 and CLR/.NET Core/Mono - in process. On Windows, MacOS, and Linux. \r\n\r\n![image](https://cloud.githubusercontent.com/assets/822369/11969685/e9476f3a-a8d1-11e5-94d4-847bfc4ed960.png)\r\n\r\nYou can script C# from a Node.js process:\r\n\r\n**ES5**\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) => { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld('JavaScript', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\n**ES6**\r\n\r\nIn ES6 you can use [template strings](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/template_strings) to write multiline C# code.\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar helloWorld = edge.func(`\r\n    async (input) => { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n`);\r\n\r\nhelloWorld('JavaScript', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\nYou can also script Node.js from C#:\r\n\r\n```c#\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing EdgeJs;\r\n\r\nclass Program\r\n{\r\n    public static async Task Start()\r\n    {\r\n        var func = Edge.Func(@\"\r\n            return function (data, callback) {\r\n                callback(null, 'Node.js welcomes ' + data);\r\n            }\r\n        \");\r\n\r\n        Console.WriteLine(await func(\".NET\"));\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        Start().Wait();\r\n    }\r\n}\r\n```\r\n\r\n## What problems does Edge.js solve?\r\n\r\n> Ah, whatever problem you have. If you have this problem, this solves it.\r\n\r\n*[--Scott Hanselman (@shanselman)](https://twitter.com/shanselman/status/461532471037677568)*\r\n\r\n## Before you dive in\r\n\r\nSee the [Edge.js overview](http://tjanczuk.github.com/edge).  \r\nRead the [Edge.js introduction on InfoQ](http://www.infoq.com/articles/the_edge_of_net_and_node).  \r\nListen to the [Edge.js podcast on Herdingcode](http://herdingcode.com/herding-code-166-tomasz-janczuk-on-edge-js/). \r\n\r\n![image](https://cloud.githubusercontent.com/assets/822369/2808101/87f73a5c-cd0f-11e3-9f7a-f53be86641be.png)\r\n\r\n## Contents\r\n\r\n[Introduction](#introduction)  \r\n[Scripting CLR from Node.js](#scripting-clr-from-nodejs)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[What you need](#what-you-need)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Windows](#windows)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Linux](#linux)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[OSX](#osx)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Docker](#docker)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: C# hello, world](#how-to-c-hello-world)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: integrate C# code into Node.js code](#how-to-integrate-c-code-into-nodejs-code)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: specify additional CLR assembly references in C# code](#how-to-specify-additional-clr-assembly-references-in-c-code)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: marshal data between C# and Node.js](#how-to-marshal-data-between-c-and-nodejs)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: call Node.js from C#](#how-to-call-nodejs-from-c)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: export C# function to Node.js](#how-to-export-c-function-to-nodejs)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: script Python in a Node.js application](#how-to-script-python-in-a-nodejs-application)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: script PowerShell in a Node.js application](#how-to-script-powershell-in-a-nodejs-application)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: script F# in a Node.js application](#how-to-script-f-in-a-nodejs-application)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: script Lisp in a Node.js application](#how-to-script-lisp-in-a-nodejs-application)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: script T-SQL in a Node.js application](#how-to-script-t-sql-in-a-nodejs-application)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: support for other CLR languages](#how-to-support-for-other-clr-languages)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: exceptions](#how-to-exceptions)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: app.config](#how-to-appconfig)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: debugging](#how-to-debugging)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[Performance](#performance)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[Building on Windows](#building-on-windows)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[Building on OSX](#building-on-osx)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[Building on Linux](#building-on-linux)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[Running tests](#running-tests)  \r\n[Scripting Node.js from CLR](#scripting-nodejs-from-clr)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[What you need](#what-you-need-1)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: Node.js hello, world](#how-to-nodejs-hello-world)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: integrate Node.js into CLR code](#how-to-integrate-nodejs-code-into-clr-code)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: use Node.js built-in modules](#how-to-use-nodejs-built-in-modules)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: use external Node.js modules](#how-to-use-external-nodejs-modules)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: handle Node.js events in .NET](#how-to-handle-nodejs-events-in-net)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: expose Node.js state to .NET](#how-to-expose-nodejs-state-to-net)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: use Node.js in ASP.NET application](#how-to-use-nodejs-in-aspnet-web-applications)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[How to: debug Node.js code running in a CLR application](#how-to-debug-nodejs-code-running-in-a-clr-application)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[Building Edge.js NuGet package](#building-edgejs-nuget-package)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;[Running tests of scripting Node.js in C#](#running-tests-of-scripting-nodejs-in-c)  \r\n[Use cases and other resources](#use-cases-and-other-resources)  \r\n[Contribution and derived work](#contribution-and-derived-work)  \r\n\r\n## Introduction \r\n\r\nEdge.js allows you to run Node.js and .NET code in one process on Windows, MacOS, and Linux. \r\n\r\nYou can call .NET functions from Node.js and Node.js functions from .NET. Edge.js takes care of marshalling data between CLR and V8. Edge.js also reconciles threading models of single threaded V8 and multi-threaded CLR. Edge.js ensures correct lifetime of objects on V8 and CLR heaps. The CLR code can be pre-compiled or specified as C#, F#, Python, or PowerShell source: Edge.js can compile CLR scripts at runtime. Edge can be extended to support other CLR languages or DSLs.\r\n\r\n![Edge.js interop model](https://f.cloud.github.com/assets/822369/234085/b305625c-8768-11e2-8de0-e03ae98e7249.PNG)\r\n\r\nEdge.js provides an asynchronous, in-process mechanism for interoperability between Node.js and .NET. You can use this mechanism to:\r\n\r\n* script Node.js from a .NET application (console app, ASP.NET, etc.)\r\n* script C# from a Node.js application on Windows, MacOS, and Linux\r\n* access MS SQL from Node.js using ADO.NET [more...](http://blog.codeship.io/2014/04/22/leverage-sql-server-with-node-js-using-edge-js.html)  \r\n* use CLR multi-threading from Node.js for CPU intensive work [more...](http://tomasz.janczuk.org/2013/02/cpu-bound-workers-for-nodejs.html)  \r\n* write native extensions to Node.js in C# instead of C/C++  \r\n* integrate existing .NET components into Node.js applications\r\n\r\nRead more about the background and motivations of the project [here](http://tomasz.janczuk.org/2013/02/hosting-net-code-in-nodejs-applications.html). \r\n\r\n[Follow @tjanczuk](https://twitter.com/tjanczuk) for updates related to the module. \r\n\r\n## Scripting CLR from Node.js\r\n\r\nIf you are writing a Node.js application, this section explains how you include and run CLR code in your app. It works on Windows, MacOS, and Linux.\r\n\r\n### What you need\r\n\r\nEdge.js runs on Windows, Linux, and OSX and requires Node.js 7.x, 6.x, 5.x, 4.x, 0.12.x, 0.10.x, or 0.8.x, as well as .NET Framework 4.5 (Windows), Mono 4.2.4 (OSX, Linux), or .NET Core 1.0.0 Preview 2 (Windows, OSX, Linux). \r\n\r\n**NOTE** there is a known issue with Mono after 4.2.4 that will be addressed in Mono 4.6.\r\n\r\n#### Windows\r\n\r\n* Node.js 7.x, 6.x, 5.x, 4.x, 0.12.x, 0.10.x, or 0.8.x \r\n* [.NET 4.5](http://www.microsoft.com/en-us/download/details.aspx?id=30653) and/or [.NET Core](https://www.microsoft.com/net/core)\r\n* to use Python, you also need [IronPython 2.7.3 or later](http://ironpython.codeplex.com/releases/view/81726)  \r\n* to use F#, read [Dave Thomas blog post](http://7sharpnine.com/blog/2013-05-05-i-node-something/)\r\n\r\nIf you have both desktop CLR and .NET Core installed, read [using .NET Core](#using-net-core) for how to configure Edge to use one or the other. \r\n\r\n![image](https://cloud.githubusercontent.com/assets/822369/2808066/3707f37c-cd0d-11e3-9b4e-7257ffc27c9c.png)\r\n\r\n#### Linux\r\n\r\n* Node.js 7.x, 6.x, 5.x, 4.x, 0.12.x, 0.10.x, or 0.8.x\r\n* Mono 4.2.4 x64 and/or .NET Core\r\n* Follow [Linux setup instructions](#building-on-linux)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/822369/2808077/03f92874-cd0e-11e3-88ea-79f67b8b1d49.png)\r\n\r\n#### OSX  \r\n\r\n* Node.js 7.x, 6.x, 5.x, 4.x, 0.12.x, 0.10.x, or 0.8.x  \r\n* Mono 4.2.4 x64 and/or .NET Core\r\n* Follow [OSX setup instructions](#building-on-osx)  \r\n\r\n![image](https://cloud.githubusercontent.com/assets/822369/2808046/8f4ce378-cd0b-11e3-95dc-ef0842c28821.png)\r\n\r\n#### Docker\r\n\r\nEdge.js is available as a Docker image on the [tjanczuk/edgejs repository on Docker Hub](https://registry.hub.docker.com/u/tjanczuk/edgejs/). The image is based on Debian Trusty, and contains Node.js 6.3.0 x64, Mono 4.2.4 x64, .NET Core 1.0.0 Preview 2 x64 (dotnet-dev-1.0.0-preview2-003121), and Edge.js 6.5.1:\r\n\r\nBy default Edge uses Mono to execute CLR code: \r\n\r\n```\r\n> docker run -it tjanczuk/edgejs:6.5.1\r\n> cd samples\r\n> node 101_hello_lambda.js\r\n.NET welcomes Node.js\r\n```\r\n\r\nSpecify the `EDGE_USE_CORECLR=1` environment variable to use .NET Core instead: \r\n\r\n```\r\n> docker run -it tjanczuk/edgejs:6.5.1\r\n> cd samples\r\n> EDGE_USE_CORECLR=1 node 101_hello_lambda.js\r\n.NET welcomes Node.js\r\n```\r\n\r\nAlternatively, you can also specify `EDGE_USE_CORECLR` when starting the container: \r\n\r\n```\r\n> docker run -it -e EDGE_USE_CORECLR=1 tjanczuk/edgejs:6.5.1\r\n```\r\n\r\n### How to: C# hello, world\r\n\r\nFollow setup instructions [for your platform](#what-you-need). \r\n\r\nInstall edge:\r\n\r\n```\r\nnpm install edge\r\n```\r\n\r\nIn your server.js:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) => { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld('JavaScript', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\n\r\nRun and enjoy:\r\n\r\n```\r\n$>node server.js\r\n.NET welcomes JavaScript\r\n```\r\n\r\nIf you want to use .NET Core as your runtime and are running in a dual runtime environment (i.e. Windows with .NET 4.5 installed as well or Linux with Mono installed), you will need to tell edge to use .NET Core by setting the `EDGE_USE_CORECLR` environment variable:\r\n\r\n```\r\n$>EDGE_USE_CORECLR=1 node server.js\r\n.NET Welcomes JavaScript\r\n```\r\n\r\n### How to: integrate C# code into Node.js code\r\n\r\nEdge provides several ways to integrate C# code into a Node.js application. Regardless of the way you choose, the entry point into the .NET code is normalized to a `Func<object,Task<object>>` delegate. This allows Node.js code to call .NET asynchronously and avoid blocking the Node.js event loop. \r\n\r\nEdge provides a function that accepts a reference to C# code in one of the supported representations, and returns a Node.js function which acts as a JavaScript proxy to the `Func<object,Task<object>>` .NET delegate:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar myFunction = edge.func(...);\r\n```\r\n\r\nThe function proxy can then be called from Node.js like any asynchronous function:\r\n\r\n```javascript\r\nmyFunction('Some input', function (error, result) {\r\n    //...\r\n});\r\n```\r\n\r\nAlternatively, if you know the C# implementation will complete synchronously given the circumstances, you can call this function as any synchronous JavaScript function as follows:\r\n\r\n```javascript\r\nvar result = myFunction('Some input', true);\r\n```\r\n\r\nThe `true` parameter instead of a callback indicates that Node.js expects the C# implementation to complete synchronously. If the CLR function implementation does not complete synchronously, the call above will result in an exception. \r\n\r\nOne representation of CLR code that Edge.js accepts is C# source code. You can embed C# literal representing a .NET async lambda expression implementing the `Func<object,Task<object>>` delegate directly inside Node.js code:\r\n\r\n```javascript\r\nvar add7 = edge.func('async (input) => { return (int)input + 7; }');\r\n``` \r\n\r\nIn another representation, you can embed multi-line C# source code by providing a function with a body containing a multi-line comment. Edge extracts the C# code from the function body using regular expressions:\r\n\r\n```javascript\r\nvar add7 = edge.func(function() {/*\r\n    async (input) => {\r\n        return (int)input + 7;\r\n    }\r\n*/});\r\n```\r\n\r\nOr if you use ES6 you can use [template strings](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/template_strings) to define a multiline string:\r\n\r\n```javascript\r\nvar add7 = edge.func(`\r\n    async (input) => {\r\n        return (int)input + 7;\r\n    }\r\n`);\r\n```\r\n\r\nIf your C# code is more involved than a simple lambda, you can specify entire class definition. By convention, the class must be named `Startup` and it must have an `Invoke` method that matches the `Func<object,Task<object>>` delegate signature. This method is useful if you need to factor your code into multiple methods:\r\n\r\n```javascript\r\nvar add7 = edge.func(function() {/*\r\n    using System.Threading.Tasks;\r\n\r\n    public class Startup\r\n    {\r\n        public async Task<object> Invoke(object input)\r\n        {\r\n            int v = (int)input;\r\n            return Helper.AddSeven(v);\r\n        }\r\n    }\r\n\r\n    static class Helper\r\n    {\r\n        public static int AddSeven(int v) \r\n        {\r\n            return v + 7;\r\n        }\r\n    }\r\n*/});\r\n```\r\n\r\nIf your C# code grows substantially, it is useful to keep it in a separate file. You can save it to a file with `*.csx` or `*.cs` extension, and then reference from your Node.js application:\r\n\r\n```javascript\r\nvar add7 = edge.func(require('path').join(__dirname, 'add7.csx'));\r\n```\r\n\r\nIf you integrate C# code into your Node.js application by specifying C# source using one of the methods above, edge will compile the code on the fly. If you prefer to pre-compile your C# sources to a CLR assembly, or if your C# component is already pre-compiled, you can reference a CLR assembly from your Node.js code. In the most generic form, you can specify the assembly file name, the type name, and the method name when creating a Node.js proxy to a .NET method:\r\n\r\n```javascript\r\nvar clrMethod = edge.func({\r\n    assemblyFile: 'My.Edge.Samples.dll',\r\n    typeName: 'Samples.FooBar.MyType',\r\n    methodName: 'MyMethod' // This must be Func<object,Task<object>>\r\n});\r\n```\r\n\r\nIf you don't specify methodName, `Invoke` is assumed. If you don't specify typeName, a type name is constructed by assuming the class called `Startup` in the namespace equal to the assembly file name (without the `.dll`). In the example above, if typeName was not specified, it would default to `My.Edge.Samples.Startup`.\r\n\r\nThe assemblyFile is relative to the working directory. If you want to locate your assembly in a fixed location relative to your Node.js application, it is useful to construct the assemblyFile using `__dirname`.  If you are using .NET Core, assemblyFile can also be a project name or NuGet package name that is specified in your `project.json` or `.deps.json` dependency manifest.\r\n\r\nYou can also create Node.js proxies to .NET functions specifying just the assembly name as a parameter:\r\n\r\n```javascript\r\nvar clrMethod = edge.func('My.Edge.Samples.dll');\r\n```\r\n\r\nIn that case the default typeName of `My.Edge.Samples.Startup` and methodName of `Invoke` is assumed as explained above. \r\n\r\n### How to: specify additional CLR assembly references in C# code\r\n\r\nWhen you provide C# source code and let edge compile it for you at runtime, edge will by default reference only mscorlib.dll and System.dll assemblies.  If you're using .NET Core, we automatically reference the most recent versions of the System.Runtime, System.Threading.Tasks, System.Dynamic.Runtime, and the compiler language packages, like Microsoft.CSharp. In applications that require additional assemblies you can specify them in C# code using a special hash pattern, similar to Roslyn. For example, to use ADO.NET you must reference System.Data.dll:\r\n\r\n```javascript\r\nvar add7 = edge.func(function() {/*\r\n\r\n    #r \"System.Data.dll\"\r\n\r\n    using System.Data;\r\n    using System.Threading.Tasks;\r\n\r\n    public class Startup\r\n    {\r\n        public async Task<object> Invoke(object input)\r\n        {\r\n            // ...\r\n        }\r\n    }\r\n*/});\r\n```\r\n\r\nIf you prefer, instead of using comments you can specify references by providing options to the `edge.func` call:\r\n\r\n```javascript\r\nvar add7 = edge.func({\r\n    source: function() {/*\r\n\r\n        using System.Data;\r\n        using System.Threading.Tasks;\r\n\r\n        public class Startup\r\n        {\r\n            public async Task<object> Invoke(object input)\r\n            {\r\n                // ...\r\n            }\r\n        }\r\n    */},\r\n    references: [ 'System.Data.dll' ]\r\n});\r\n```\r\n\r\nIf you are using .NET Core and are using the .NET Core SDK and CLI, you must have a `project.json` file (specification [here](https://github.com/aspnet/Home/wiki/Project.json-file)) that specifies the dependencies for the application.  This list of dependencies must also include the [Edge.js runtime package](https://www.nuget.org/packages/Edge.js/) and, if you need to be able to dynamically compile your code, the package(s) for the compilers that you plan to use, like [Edge.js.CSharp](https://www.nuget.org/packages/Edge.js.CSharp/).  You must have run the `dotnet restore` (to restore the dependencies) and `dotnet build` (to build your project and generate the dependency manifest) commands in that project's directory to generate a `.deps.json` file under `bin/[configuration]/[framework]`, i.e. `bin/Release/netstandard1.6/MyProject.deps.json`.  This `.deps.json` file must either be in the current working directory that `node` is executed in or you must specify its directory by setting the `EDGE_APP_ROOT` environment variable.  For example, if for a `netstandard1.6` project in the `c:\\DotNet\\MyProject` directory, you would run something like:\r\n\r\n```\r\nset EDGE_APP_ROOT=c:\\DotNet\\MyProject\\bin\\Release\\netstandard1.6\r\nnode app.js\r\n```\r\n\r\nEdge.js also supports running published .NET Core applications on servers that do not have the .NET Core SDK and CLI installed, which is a common scenario in production environments.  To do so, the `project.json` for your application should meet the following requirements:\r\n\r\n 1. It should target the `netcoreapp1.0` framework moniker.\r\n 2. It should reference `Microsoft.NETCore.DotNetHost` and `Microsoft.NETCore.DotNetHostPolicy`.  This is required so that the publish process can provide all the native libraries required to create a completely standalone version of your application.\r\n 3. `\"emitEntryPoint\": true` should be present under `buildOptions`.  You can add an empty `Main()` implementation to your project to accomodate it; this method will not be called, but is just a requirement in order for `dotnet publish` to generate a completely standalone app.\r\n\r\nOn your development machine, you would run `dotnet publish -r [target runtime for your production server]` (i.e. `dotnet publish -r ubuntu.14.04-x64`) to aggregate the package assemblies and native libraries necessary to run your application.  You can copy the contents of the publish directory up to your SDK- and CLI-less server and use them directly in Edge.js by setting the  `EDGE_APP_ROOT` environment variable to the directory on the server that you copied the published application to.\r\n\r\n### How to: marshal data between C# and Node.js\r\n\r\nEdge.js can marshal any JSON-serializable value between .NET and Node.js (although JSON serialization is not used in the process). Edge also supports marshalling between Node.js `Buffer` instance and a CLR `byte[]` array to help you efficiently pass binary data.\r\n\r\nYou can call .NET from Node.js and pass in a complex JavaScript object as follows:\r\n\r\n```javascript\r\nvar dotNetFunction = edge.func('Edge.Sample.dll');\r\n\r\nvar payload = {\r\n    anInteger: 1,\r\n    aNumber: 3.1415,\r\n    aString: 'foo',\r\n    aBoolean: true,\r\n    aBuffer: new Buffer(10),\r\n    anArray: [ 1, 'foo' ],\r\n    anObject: { a: 'foo', b: 12 }\r\n};\r\n\r\ndotNetFunction(payload, function (error, result) { });\r\n```\r\n\r\nIn .NET, JavaScript objects are represented as dynamics (which can be cast to `IDictionary<string,object>` if desired), JavaScript arrays as `object[]`, and JavaScript `Buffer` as `byte[]`. Scalar JavaScript values have their corresponding .NET types (`int`, `double`, `bool`, `string`). Here is how you can access the data in .NET:\r\n\r\n```c#\r\nusing System.Threading.Tasks;\r\n\r\npublic class Startup\r\n{\r\n    public async Task<object> Invoke(dynamic input)\r\n    {\r\n        int anInteger = (int)input.anInteger;\r\n        double aNumber = (double)input.aNumber;\r\n        string aString = (string)input.aString;\r\n        bool aBoolean = (bool)input.aBoolean;\r\n        byte[] aBuffer = (byte[])input.aBuffer;\r\n        object[] anArray = (object[])input.anArray;\r\n        dynamic anObject = (dynamic)input.anObject;\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\n```\r\n\r\nSimilar type marshalling is applied when .NET code passes data back to Node.js code. In .NET code you can provide an instance of any CLR type that would normally be JSON serializable, including domain specific types like `Person` or anonymous objects. For example:\r\n\r\n```c#\r\nusing System.Threading.Tasks;\r\n\r\npublic class Person\r\n{\r\n    public int anInteger = 1;\r\n    public double aNumber = 3.1415;\r\n    public string aString = \"foo\";\r\n    public bool aBoolean = true;\r\n    public byte[] aBuffer = new byte[10];\r\n    public object[] anArray = new object[] { 1, \"foo\" };\r\n    public object anObject = new { a = \"foo\", b = 12 };\r\n}\r\n\r\npublic class Startup\r\n{\r\n    public async Task<object> Invoke(dynamic input)\r\n    {\r\n        Person person = new Person();\r\n        return person;\r\n    }\r\n}\r\n```\r\n\r\nIn your Node.js code that invokes this .NET method you can display the result object that the callback method receives:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar getPerson = edge.func(function () {/*\r\n    using System.Threading.Tasks;\r\n\r\n    public class Person\r\n    {\r\n        public int anInteger = 1;\r\n        public double aNumber = 3.1415;\r\n        public string aString = \"foo\";\r\n        public bool aBoolean = true;\r\n        public byte[] aBuffer = new byte[10];\r\n        public object[] anArray = new object[] { 1, \"foo\" };\r\n        public object anObject = new { a = \"foo\", b = 12 };\r\n    }\r\n\r\n    public class Startup\r\n    {\r\n        public async Task<object> Invoke(dynamic input)\r\n        {\r\n            Person person = new Person();\r\n            return person;\r\n        }\r\n    }\r\n*/});\r\n\r\ngetPerson(null, function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\n\r\nPassing this .NET object to Node.js generates a JavaScript object as follows:\r\n\r\n```\r\n$>node sample.js\r\n{ anInteger: 1,\r\n  aNumber: 3.1415,\r\n  aString: 'foo',\r\n  aBoolean: true,\r\n  aBuffer: <Buffer 00 00 00 00 00 00 00 00 00 00>,\r\n  anArray: [ 1, 'foo' ],\r\n  anObject: { a: 'foo', b: 12 } }\r\n```\r\n\r\nWhen data is marshalled from .NET to Node.js, no checks for circular references are made. They will typically result in stack overflows. Make sure the object graph you are passing from .NET to Node.js is a tree and does not contain any cycles. \r\n\r\n**WINDOWS ONLY** When marshalling strongly typed objects (e.g. Person) from .NET to Node.js, you can optionally tell Edge.js to observe the [System.Web.Script.Serialization.ScriptIgnoreAttribute](http://msdn.microsoft.com/en-us/library/system.web.script.serialization.scriptignoreattribute.aspx). You opt in to this behavior by setting the `EDGE_ENABLE_SCRIPTIGNOREATTRIBUTE` environment variable:\r\n\r\n```\r\nset EDGE_ENABLE_SCRIPTIGNOREATTRIBUTE=1\r\n```\r\n\r\nEdge.js by default does not observe the ScriptIgnoreAttribute to avoid the associated performance cost. \r\n\r\n### How to: call Node.js from C#  \r\n\r\nIn addition to marshalling data, edge can marshal proxies to JavaScript functions when invoking .NET code from Node.js. This allows .NET code to call back into Node.js. \r\n\r\nSuppose the Node.js application passes an `add` function to the .NET code as a property of an object. The function receives two numbers and returns the sum of them via the provided callback:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar addAndMultiplyBy2 = edge.func(function () {/*\r\n    async (dynamic input) => {\r\n        var add = (Func<object, Task<object>>)input.add;\r\n        var twoNumbers = new { a = (int)input.a, b = (int)input.b };\r\n        var addResult = (int)await add(twoNumbers);\r\n        return addResult * 2;\r\n    }   \r\n*/});\r\n\r\nvar payload = {\r\n    a: 2,\r\n    b: 3,\r\n    add: function (data, callback) {\r\n        callback(null, data.a + data.b);\r\n    }\r\n};\r\n\r\naddAndMultiplyBy2(payload, function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\n\r\nThe .NET code implements the addAndMultiplyBy2 function. It extracts the two numbers passed from Node.js, calls back into the `add` function exported from Node.js to add them, multiplies the result by 2 in .NET, and returns the result back to Node.js:\r\n\r\n```\r\n$>node sample.js\r\n10\r\n```\r\n\r\nThe Node.js function exported from Node.js to .NET must follow the prescriptive async pattern of accepting two parameters: payload and a callback. The callback function accepts two parameters. The first one is the error, if any, and the second the result of the operation:\r\n\r\n```javascript\r\nfunction (payload, callback) {\r\n    var error;  // must be null or undefined in the absence of error\r\n    var result; \r\n\r\n    // do something\r\n\r\n    callback(error, result);\r\n}\r\n```\r\n\r\nThe proxy to that function in .NET has the following signature:\r\n\r\n```c#\r\nFunc<object,Task<object>>\r\n```\r\n\r\nUsing TPL in CLR to provide a proxy to an asynchronous Node.js function allows the .NET code to use the convenience of the `await` keyword when invoking the Node.js functionality. The example above shows the use of the `await` keyword when calling the proxy of the Node.js `add` method.  \r\n\r\n### How to: export C# function to Node.js\r\n\r\nSimilarly to marshalling functions from Node.js to .NET, Edge.js can also marshal functions from .NET to Node.js. The .NET code can export a `Func<object,Task<object>>` delegate to Node.js as part of the return value of a .NET method invocation. For example:\r\n\r\n```javascript\r\nvar createHello = edge.func(function () {/*\r\n    async (input) =>\r\n    {\r\n        return (Func<object,Task<object>>)(async (i) => { \r\n            Console.WriteLine(\"Hello from .NET\"); \r\n            return null; \r\n        });\r\n    }\r\n*/});\r\n\r\nvar hello = createHello(null, true); \r\nhello(null, true); // prints out \"Hello from .NET\"\r\n```\r\n\r\nThis mechanism in conjunction with a closure can be used to expose CLR class instances or CLR state in general to JavaScript. For example:\r\n\r\n```javascript\r\nvar createCounter = edge.func(function () {/*\r\n    async (input) =>\r\n    {\r\n        var k = (int)input; \r\n        return (Func<object,Task<object>>)(async (i) => { return ++k; });\r\n    }\r\n*/});\r\n\r\nvar counter = createCounter(12, true); // create counter with 12 as initial state\r\nconsole.log(counter(null, true)); // prints 13\r\nconsole.log(counter(null, true)); // prints 14\r\n```\r\n\r\n### How to: script Python in a Node.js application\r\n\r\n**NOTE** This functionality requires IronPython and has been tested on Windows only. \r\n\r\nEdge.js enables you to run Python and Node.js in-process.\r\n\r\nIn addition to [platform specific prerequisites](#what-you-need) you need [IronPython 2.7.3](http://ironpython.codeplex.com/releases/view/81726) to proceed.\r\n\r\n#### Hello, world\r\n\r\nInstall edge and edge-py modules:\r\n\r\n```\r\nnpm install edge\r\nnpm install edge-py\r\n```\r\n\r\nIn your server.js:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar hello = edge.func('py', function () {/*\r\n    def hello(input):\r\n        return \"Python welcomes \" + input\r\n\r\n    lambda x: hello(x)\r\n*/});\r\n\r\nhello('Node.js', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\n\r\nRun and enjoy:\r\n\r\n```\r\n$>node py.js\r\nPython welcomes Node.js\r\n```\r\n\r\n#### The interop model\r\n\r\nYour Python script must evaluate to a lambda expression that accepts a single parameter. The parameter represents marshalled input from the Node.js code. The return value of the lambda expression is passed back as the result to Node.js code. The Python script can contain constructs (e.g. Python functions) that are used in the closure of the lambda expression. The instance of the script with associated state is created when `edge.func` is called in Node.js. Each call to the function referes to that instance.\r\n\r\nThe simplest *echo* Python script you can embed in Node.js looks like this:\r\n\r\n```python\r\nlambda x: x\r\n```\r\n\r\nTo say hello, you can use something like this:\r\n\r\n```python\r\nlambda: x: \"Hello, \" + x\r\n```\r\n\r\nTo maintain a running sum of numbers:\r\n\r\n```python\r\ncurrent = 0\r\n\r\ndef add(x):\r\n    global current\r\n    current = current + x\r\n    return current\r\n\r\nlambda x: add(x)\r\n```\r\n\r\n#### Python in its own file\r\n\r\nYou can reference Python script stored in a *.py file instead of embedding Python code in a Node.js script.\r\n\r\nIn your hello.py file:\r\n\r\n```python\r\ndef hello(input):\r\n    return \"Python welcomes \" + input\r\n\r\nlambda x: hello(x)\r\n```\r\n\r\nIn your hello.js file:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar hello = edge.func('py', 'hello.py');\r\n\r\nhello('Node.js', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\n\r\nRun and enjoy:\r\n\r\n```\r\n$>node hello.js\r\nPython welcomes Node.js\r\n```\r\n\r\n#### To sync or to async, that is the question\r\n\r\nIn the examples above Python script was executing asynchronously on its own thread without blocking the singleton V8 thread on which the Node.js event loop runs. This means your Node.js application remains responsive while the Python code executes in the background. \r\n\r\nIf you know your Python code is non-blocking, or if you know what you are doing, you can tell Edge.js to execute Python code on the singleton V8 thread. This will improve performance for non-blocking Python scripts embedded in a Node.js application:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar hello = edge.func('py', {\r\n    source: function () {/*\r\n        def hello(input):\r\n            return \"Python welcomes \" + input\r\n\r\n        lambda x: hello(x)\r\n    */},\r\n    sync: true\r\n});\r\n\r\nconsole.log(hello('Node.js', true));\r\n```\r\n\r\nThe `sync: true` property in the call to `edge.func` tells Edge.js to execute Python code on the V8 thread as opposed to creating a new thread to run Python script on. The `true` parameter in the call to `hello` requests that Edge.js does in fact call the `hello` function synchronously, i.e. return the result as opposed to calling a callback function. \r\n\r\n### How to: script PowerShell in a Node.js application\r\n\r\n**NOTE** This functionality only works on Windows. \r\n\r\nEdge.js enables you to run PowerShell and Node.js in-process on Windows. [Edge-PS](https://github.com/dfinke/edge-ps) connects the PowerShell ecosystem with Node.js.\r\n\r\nYou need Windows, [Node.js](http://nodejs.org), [.NET 4.5](http://www.microsoft.com/en-us/download/details.aspx?id=30653), and [PowerShell 3.0](http://www.microsoft.com/en-us/download/details.aspx?id=34595) to proceed.\r\n\r\n### Hello, world\r\n\r\nInstall edge and edge-ps modules:\r\n\r\n``` \r\nnpm install edge\r\nnpm install edge-ps\r\n```\r\n\r\nIn your server.js:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar hello = edge.func('ps', function () {/*\r\n\"PowerShell welcomes $inputFromJS on $(Get-Date)\"\r\n*/});\r\n\r\nhello('Node.js', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result[0]);\r\n});\r\n```\r\n\r\nRun and enjoy:\r\n\r\n```\r\nC:\\testEdgeps>node server\r\nPowerShell welcomes Node.js on 05/04/2013 09:38:40\r\n```\r\n\r\n#### Tapping into PowerShell's ecosystem\r\n\r\nRather than embedding PowerShell directly, you can use PowerShell files, dot source them and even use *Import-Module*.\r\n\r\nWhat you can do in native PowerShell works in Node.js.\r\n\r\n#### Interop PowerShell and Python\r\n\r\nHere you can reach out to IronPython from PowerShell from within Node.js on Windows. This holds true for working with JavaScript frameworks and C#.\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar helloPowerShell = edge.func('ps', function () {/*\r\n\t\"PowerShell welcomes $inputFromJS\"\r\n*/});\r\n\r\nvar helloPython = edge.func('py', function () {/*\r\n    def hello(input):\r\n        return \"Python welcomes \" + input\r\n\r\n    lambda x: hello(x)\r\n*/});\r\n\r\n\r\nhelloPython('Node.js', function(error, result){\r\n\tif(error) throw error;\r\n\r\n\thelloPowerShell(result, function(error, result){\r\n\t\tif(error) throw error;\r\n\t\tconsole.log(result[0]);\r\n\t});\r\n});\r\n```\r\n\r\n### How to: script F# in a Node.js application\r\n\r\n**NOTE** This functionality has not been tested on non-Windows platforms. \r\n\r\nThis section is coming up. In the meantime please refer to [Dave Thomas blog post](http://7sharpnine.com/posts/i-node-something/). This has been validated on Windows only. \r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar helloFs = edge.func('fs', function () {/*\r\n    fun input -> async { \r\n        return \"F# welcomes \" + input.ToString()\r\n    }\r\n*/});\r\n\r\nhelloFs('Node.js', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\n\r\n### How to: script Lisp in a Node.js application\r\n\r\n**NOTE** This functionality has not been tested on non-Windows platforms. \r\n\r\nThe [edge-lsharp](https://github.com/richorama/edge-lsharp) extension uses [LSharp](https://github.com/RobBlackwell/LSharp) to compile and run Lisp to .NET.\r\n\r\nInstall edge and edge-lsharp modules:\r\n\r\n```\r\nnpm install edge\r\nnpm install edge-lsharp\r\n```\r\n\r\nIn your server.js:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\nvar fact = edge.func('lsharp', function(){/*\r\n\r\n;; Factorial\r\n(def fact(n) \r\n    (if (is n 0) 1 (* n (fact (- n 1)))))\r\n\r\n*/});\r\n\r\nfact([5], function(err, answer){\r\n    console.log(answer);\r\n    // = 120\r\n});\r\n```\r\n\r\nAn LSharp filename can be passed in instead of the Lisp string/comment:\r\n\r\n```js\r\nvar edge = require('edge');\r\nvar lisp = edge.func('lsharp', 'lisp-func.ls');\r\n\r\nlisp(['arg1', 'arg2'], function(err, result){\r\n    \r\n});\r\n```\r\n\r\nIn Lisp you can specify either a function (as shown in the first example) or just return a value:\r\n\r\n```js\r\nvar edge = require('edge');\r\nvar lisp = edge.func('lsharp', '(+ 2 3)');\r\n\r\nlisp([], function(err, answer){\r\n    console.log(answer);\r\n    // = 5\r\n});\r\n```\r\n\r\n### How to: script T-SQL in a Node.js application\r\n\r\n**NOTE** This functionality has only been tested on Windows. Although ADO.NET exist in Mono, your mileage can vary. \r\n\r\nThe edge-sql extension of Edge.js allows for accessing MS SQL databases by scripting T-SQL inside the Node.js application. The edge-sql extension uses async ADO.NET SQL client to access MS SQL. \r\n\r\nYou need Windows, [Node.js](http://nodejs.org), and [.NET 4.5](http://www.microsoft.com/en-us/download/details.aspx?id=30653). To run the sample code below you also need a connection string to the sample Northwind database that ships with MS SQL. \r\n\r\n#### Hello, world\r\n\r\nInstall edge and edge-sql modules:\r\n\r\n```\r\nnpm install edge\r\nnpm install edge-sql\r\n```\r\n\r\nSet the connection string as an environment variable (your connection string may be different):\r\n\r\n```\r\nset EDGE_SQL_CONNECTION_STRING=Data Source=localhost;Initial Catalog=Northwind;Integrated Security=True\r\n```\r\n\r\nIn your server.js:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar getTop10Products = edge.func('sql', function () {/*\r\n    select top 10 * from Products\r\n*/});\r\n\r\ngetTop10Products(null, function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n    console.log(result[0].ProductName);\r\n    console.log(result[1].ReorderLevel);\r\n});\r\n```\r\n\r\nRun and enjoy:\r\n\r\n```\r\nC:\\projects\\edge\\samples>node server.js\r\n[ { ProductID: 10,\r\n    ProductName: 'New Ikura',\r\n    SupplierID: 4,\r\n    CategoryID: 8,\r\n    QuantityPerUnit: '12 - 200 ml jars',\r\n    UnitPrice: '31.000',\r\n    UnitsInStock: 31,\r\n    UnitsOnOrder: 0,\r\n    ReorderLevel: 0,\r\n    Discontinued: false },\r\n    ...\r\n]\r\nNew Ikura\r\n12\r\n```\r\n\r\n#### Parameterized queries\r\n\r\nYou can construct a parameterized query once and provide parameter values on a per-call basis:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar getProduct = edge.func('sql', function () {/*\r\n    select * from Products \r\n    where ProductId = @myProductId\r\n*/});\r\n\r\ngetProduct({ myProductId: 10 }, function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\n\r\n#### Basic CRUD support: select, update, insert, delete\r\n\r\nThe four basic CRUD operations are supported. For example, here is how an update can look like:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar updateProductName = edge.func('sql', function () {/*\r\n    update Products\r\n    set ProductName = @newName \r\n    where ProductId = @myProductId\r\n*/});\r\n\r\nupdateProductName({ myProductId: 10, newName: 'New Ikura' }, function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\n\r\n### How to: support for other CLR languages\r\n\r\nEdge.js can work with any pre-compiled CLR assembly that contains the `Func<object,Task<object>>` delegate. Out of the box, Edge.js also allows you to embed C# source code in a Node.js application and compile it on the fly. \r\n\r\nTo enable compilation of other CLR languages (e.g. F#) at runtime, or to support domain specific languages (DSLs) like T-SQL, you can use the compiler composability model provided by Edge.js. Please read the [add support for a CLR language](https://github.com/tjanczuk/edge/wiki/Add-support-for-a-CLR-language) guide to get started. \r\n\r\n### How to: exceptions\r\n\r\nEdge.js marshals Node.js errors and exceptions to .NET as well as .NET exceptions to Node.js. \r\n\r\nCLR exceptions thrown in .NET code invoked from Node.js are marshalled as the `error` parameter to the Node.js callback function. Consider this example:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar clrFunc = edge.func(function () {/*\r\n    async (dynamic input) => {\r\n        throw new Exception(\"Sample exception\");\r\n    }\r\n*/});\r\n\r\nclrFunc(null, function (error, result) {\r\n    if (error) {\r\n\t\tconsole.log('Is Error?', error instanceof Error);\r\n\t\tconsole.log('-----------------');\r\n\t\tconsole.log(util.inspect(error, showHidden=true, depth=99, colorize=false));\r\n\t\treturn;\r\n\t}\r\n});\r\n```\r\n\r\nRunning this Node.js application shows that the CLR exception was indeed received by the Node.js callback. The `error` parameter contains an Error object having most of the properties of the Exceptions copied over:\r\n```\r\nIs Error? true\r\n-----------------\r\n{ [System.AggregateException: One or more errors occurred.]\r\n  message: 'One or more errors occurred.',\r\n  name: 'System.AggregateException',\r\n  InnerExceptions: 'System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]',\r\n  Message: 'One or more errors occurred.',\r\n  Data: 'System.Collections.ListDictionaryInternal',\r\n  InnerException:\r\n   { [System.Exception: Sample exception]\r\n     message: 'Sample exception',\r\n     name: 'System.Exception',\r\n     Message: 'Sample exception',\r\n     Data: 'System.Collections.ListDictionaryInternal',\r\n     TargetSite: 'System.Reflection.RuntimeMethodInfo',\r\n     StackTrace: '   at Startup.<<Invoke>b__0>d__2.MoveNext() in c:\\\\Users\\\\User.Name\\\\Source\\\\Repos\\\\eCash2\\\\test\\\\edge2.js:line 7\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\\r\\n   at Startup.<Invoke>d__4.MoveNext() in c:\\\\Users\\\\User.Name\\\\Source\\\\Repos\\\\eCash2\\\\test\\\\edge2.js:line 5',\r\n     Source: 'cp2luegt',\r\n     HResult: -2146233088 },\r\n  HResult: -2146233088 }\r\n```\r\nThe exception is copied back as Error object like every normal result object from the .NET world to JavaScript. \r\nTherefore all properties and their values are available on the Error object.\r\n\r\nAdditionally, the following happens during the mapping:\r\n* To represent the Exception type, its full name is stored as `name`.\r\n* To follow the [JavaScript convention for Errors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error), the `Message` is also stored as the property `message`.\r\n* `System::Reflection::RuntimeMethodInfo`s are not copied to avoid stack overflows\r\n\r\n```\r\n$>node sample.js\r\n\r\nEdge.js:58\r\n    edge.callClrFunc(appId, data, callback);\r\n                     ^\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. \r\n---> System.Exception: Sample exception\r\n   at Startup.Invoke(Object input) in sample.cs:line 12\r\n``` \r\n\r\nJavaScript exceptions thrown in Node.js code invoked from .NET are wrapped in a CLR exception and cause the asynchronous `Task<object>` to complete with a failure. Errors passed by Node.js code invoked from .NET code to the callback function's `error` parameter have the same effect. Consider this example:\r\n\r\n```javascript\r\nvar edge = require('edge');\r\n\r\nvar multiplyBy2 = edge.func(function () {/*\r\n    async (dynamic input) => {\r\n        var aFunctionThatThrows = (Func<object, Task<object>>)input.aFunctionThatThrows;\r\n        try {\r\n            var aResult = await aFunctionThatThrows(null);\r\n        }\r\n        catch(Exception e)\r\n        {\r\n            Console.WriteLine(e);\r\n        }\r\n\r\n        return null;\r\n    }\r\n*/});\r\n\r\nvar payload = {\r\n    someParameter: 'arbitrary parameter',\r\n    aFunctionThatThrows: function (data, callback) {\r\n        throw new Error('Sample JavaScript error');\r\n    }\r\n};\r\n\r\nmultiplyBy2(payload, function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});\r\n```\r\n\r\nRunning the code shows the .NET code receiving a CLR exception as a result of the Node.js function throwing a JavaScript error. The exception shows the complete stack trace, including the part that executed in the Node.js code:\r\n\r\n```\r\n$>node sample.js\r\nSystem.Exception: Error: Sample JavaScript error\r\n    at payload.aFunctionThatThrows (sample.js:7:11)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Edge.Sample.Startup.<Invoke>d__0.MoveNext()\r\n```\r\n\r\n### How to: app.config\r\n\r\nWhen running C# code within Node.js app, the app config file is node.exe.config and should be located right next to the node.exe file.\r\n\r\n### How to: debugging\r\n\r\n**NOTE** This is Windows-only functionality.\r\n\r\nOn Windows, you can debug the .NET code running as part of your Node.js application by attaching a managed code debugger (e.g. Visual Studio) to node.exe. You can debug .NET code in a pre-compiled CLR assembly as well C# literals embedded in the application and compiled by Edge.js at runtime. \r\n\r\n#### Debugging pre-compiled .NET code\r\n\r\nIf you have integrated .NET code into a Node.js application using a pre-compiled CLR assembly like this:\r\n\r\n```javascript\r\nvar hello = edge.func('My.Assembly.dll');\r\n```\r\n\r\nthen the best way to debug your .NET code is to attach a managed code debugger (e.g. Visual Studio) to the node.exe process. Since the node.exe process runs both native and managed code, make sure to select managed code type as target:\r\n\r\n![debug](https://f.cloud.github.com/assets/822369/190564/a41bab2c-7efb-11e2-878f-82ae2325876c.PNG)\r\n\r\nFrom there, you can set breakpoints in your .NET code and the debugger will stop when they are reached.\r\n\r\n#### Debugging embedded C# code\r\n\r\nDebugging embedded C# code (on Windows) requires that `EDGE_CS_DEBUG` environment variable is set in the environment of the node.exe process:\r\n\r\n```\r\nset EDGE_CS_DEBUG=1\r\n```\r\n\r\nWithout this setting (the default), Edge.js will not generate debugging information when compiling embedded C# code.\r\n\r\nYou can debug C# code embedded into a Node.js application using a reference to a *.cs or *.csx file:\r\n\r\n```javascript\r\nvar hello = edge.func('MyClass.cs');\r\n```\r\n\r\nYou can also debug C# code embedded directly into a *.js file using the function comment syntax:\r\n\r\n```javscript\r\nvar hello = edge.func(function () {/*\r\n    async (input) =>\r\n    {\r\n        System.Diagnostics.Debugger.Break();\r\n        var result = \".NET welcomes \" + input.ToString();\r\n        return result;\r\n    }\r\n*/});\r\n```\r\n\r\nYou *cannot* debug C# code embedded as a simple string literal:\r\n\r\n```javascript\r\nvar hello = edge.func('async (input) => { return 2 * (int)input; }');\r\n```\r\n\r\nAfter setting `EDGE_CS_DEBUG=1` environment variable before starting node.exe and attaching the managed debugger to the node.exe process, you can set breakpoints in C# code (which may appear as a JavaScript comment), or use `System.Diagnostics.Debugger.Break()` to break into the debugger from .NET code. \r\n\r\n![debug-inline](https://f.cloud.github.com/assets/822369/326781/923d870c-9b4a-11e2-8f45-201a6431afbf.PNG)\r\n\r\n### Performance\r\n\r\nRead more about [performance of Edge.js on the wiki](https://github.com/tjanczuk/edge/wiki/Performance). Here is the gist of the latency (smaller is better):\r\n\r\n![edgejs-performance1](https://f.cloud.github.com/assets/822369/486393/645f696a-b920-11e2-8a20-9fa6932bb092.png)\r\n\r\n### Building on Windows\r\n\r\nYou must have Visual Studio 2015 toolset, Python 2.7.x, and node-gyp installed for building.\r\n\r\nTo build and test the project against all supported versions of Node.js in x86 and x64 flavors, run the following:\r\n\r\n```\r\ntools\\buildall.bat\r\ntest\\testall.bat\r\nnpm run jshint\r\n```\r\n\r\nTo build one of the versions of Node.js officially released by [Node.js](http://nodejs.org/dist), do the following:\r\n\r\n```\r\ncd tools\r\nbuild.bat release 6.4.0\r\n```\r\n\r\nNote: the Node.js version number you provide must be version number corresponding to one of the subdirectories of http://nodejs.org/dist. The command will build both x32 and x64 architectures (assuming you use x64 machine). The command will also copy the edge\\_\\*.node executables to appropriate locations under lib\\native directory where they are looked up from at runtime. The `npm install` step copies the C standard library shared DLL to the location of the edge\\_\\*.node files for the component to be ready to go.\r\n\r\nTo build the C++\\CLI native extension using the version of Node.js installed on your machine, issue the following command:\r\n\r\n```\r\nnpm install -g node-gyp\r\nnode-gyp configure --msvs_version=2015\r\nnode-gyp build -debug\r\n```\r\n\r\nYou can then set the `EDGE_NATIVE` environment variable to the fully qualified file name of the built edge_\\*.node binary (edge\\_nativeclr.node if you're using the native CLR runtime or edge\\_coreclr.node if you're using .NET Core). It is useful during development, for example:\r\n\r\n```\r\nset EDGE_NATIVE=C:\\projects\\edge\\build\\Debug\\edge_nativeclr.node\r\n``` \r\n\r\nYou can also set the `EDGE_DEBUG` environment variable to 1 to have the edge module generate debug traces to the console when it runs.\r\n\r\n### Running tests\r\n\r\nYou must have mocha installed on the system. Then:\r\n\r\n```\r\nnpm test\r\n```\r\n\r\nor, from the root of the enlistment:\r\n\r\n```\r\nmocha -R spec\r\n```\r\n\r\n**NOTE** in environments with both desktop CLR/Mono and .NET Core installed, tests will by default use desktop CLR/Mono. To run tests against .NET Core, use: \r\n\r\n```\r\nEDGE_USE_CORECLR=1 npm test\r\n```\r\n\r\n#### Node.js version targeting on Windows\r\n\r\n**NOTE** this is Windows only functionality.\r\n\r\nIf you want to run tests after building against a specific version of Node.js that one of the previous builds used, issue the following command:\r\n\r\n```\r\ncd test\r\ntest.bat ia32 0.10.0\r\n```\r\n\r\nWhich will run the tests using Node.js x86 v0.10.0. Similarly:\r\n\r\n```\r\ncd test\r\ntest.bat x64 0.8.22\r\n```\r\n\r\nWould run tests against Node.js 0.8.22 on x64 architecture.\r\n\r\nLastly, you can run jshint on the project with:\r\n\r\n```\r\nnpm run jshint\r\n```\r\n\r\n### Building on OSX\r\n\r\nPrerequisities:\r\n\r\n* [Homebrew](http://brew.sh/)  \r\n* [Mono x64](http://www.mono-project.com/download/#download-mac) and/or [.NET Core](https://dotnet.github.io/getting-started/) - see below  \r\n* [Node.js x64](http://nodejs.org/) (tested with v4.1.1)  \r\n\r\nYou can use Edge.js on OSX with either Mono or .NET Core installed, or both.\r\n\r\nIf you choose to [install Mono](http://www.mono-project.com/download/#download-mac), select the universal installer to make sure you get the x64 version. Edge.js requires Mono x64.  If you choose to install .NET Core, follow the steps [here](https://www.microsoft.com/net/core#macosx)\r\n\r\nThen install and build Edge.js:\r\n\r\n```bash\r\nbrew install pkg-config\r\nnpm install edge\r\n```\r\n\r\n**NOTE** if the build process complains about being unable to locate Mono libraries, you may need to specify the search path explicitly. This may be installation dependent, but in most cases will look like: \r\n\r\n```bash\r\nPKG_CONFIG_PATH=/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig \\\r\n  npm install edge\r\n```\r\n\r\nIf you installed both Mono and .NET Core, by default Edge will use Mono. You opt in to using .NET Core with the `EDGE_USE_CORECLR` environment variable: \r\n\r\n```bash\r\nEDGE_USE_CORECLR=1 node myapp.js\r\n```\r\n\r\n#### Building on OSX (advanced)\r\n\r\nTo build edge from a clone of the repository or source code:\r\n\r\n```bash\r\nnode-gyp configure build\r\n```\r\n\r\nTo build a debug build instead of release, you need to:\r\n\r\n```bash\r\nnode-gyp configure build -debug\r\nexport EDGE_NATIVE=/Users/tomek/edge/build/Debug/edge_nativeclr.node\r\n```\r\n\r\n### Building on Linux \r\n\r\nFor a normative set of steps to set up Edge.js on Linux with both Mono and CoreCLR please refer to the [Dockerfile](https://github.com/tjanczuk/edge/blob/master/Dockerfile). You can also use the ready-made [Docker image](#docker). \r\n\r\n### Using .NET Core\r\n\r\nIf you have only .NET Core installed on your system and not Mono, you can run Edge with no changes.  However, if you have both runtimes installed, Edge will automatically use Mono unless directed otherwise.  To use .NET Core in a dual-runtime environment, set the `EDGE_USE_CORECLR=1` environment variable when starting node, i.e.\r\n\r\n```bash\r\nEDGE_USE_CORECLR=1 node sample.js\r\n```\r\n\r\nEdge will try to find the .NET Core runtime in the following locations:\r\n\r\n * The path in the `CORECLR_DIR` environment variable, if provided\r\n * The current directory\r\n * The directory containing `edge_*.node`\r\n * Directories in the `PATH` environment variable.  Once a directory containing the `dotnet` executable is located, we then do the following to decide which version of the framework (you can have several installed at once) to load\r\n\t * If the `CORECLR_VERSION` environment variable was specified, we try to load that version\r\n\t * Else, if the project.json/*.deps.json has a reference to `Microsoft.NETCore.App`, indicating that it was built for a specific framework version, we try to load that version\r\n\t * Otherwise, we pick the maximum installed version\r\n  \r\nSo, if the CLR is another location or you want to use a version of the CLR other than the default that you've set, the best way to specify that is through the `CORECLR_DIR` or `CORECLR_VERSION` environment variables, i.e.\r\n\r\n```bash\r\nEDGE_USE_CORECLR=1 \\\r\nCORECLR_DIR=/usr/share/dotnet/dnx-coreclr-linux-x64.1.0.0-beta6-11944 \\\r\nnode sample.js\r\n```\r\n\r\n## Scripting Node.js from CLR\r\n\r\nIf you are writing a CLR application (e.g. a C# console application or ASP.NET web app), this section explains how you include and run Node.js code in your app. Currently it works on Windows using desktop CLR, but support for MacOS, and Linux as well as .NET Core is coming soon. \r\n\r\n### What you need\r\n\r\nYou need Windows with:\r\n\r\n* [.NET 4.5](http://www.microsoft.com/en-us/download/details.aspx?id=30653)  \r\n* [Edge.js NuGet package](https://www.nuget.org/packages/Edge.js)  \r\n* [Node.js](http://nodejs.org) (optional, if you want to use additional NPM packages)\r\n\r\nEdge.js support for scripting Node.js ships as a NuGet Package called `Edge.js`. It comes with everything you need to get started writing applications for x86 and x64 architectures. However, if you want to use additional Node.js packages from NPM, you must separately install Node.js runtime to access the NPM package manager. Edge.js NuGet package has been developed and tested with Node.js v6.5.0. Older Edge.js packages exist for prior versions of Node.js. If you choose a different version of Node.js to install NPM packages, your mileage can vary. \r\n\r\n**NOTE** you cannot use native Node.js extensions when scripting Node.js from CLR using Edge. \r\n\r\nYou can install the [Edge.js NuGet package](https://www.nuget.org/packages/Edge.js) using the Visual Studio built-in NuGet package management functionality or using the stand-alone [NuGet client](http://docs.nuget.org/docs/start-here/installing-nuget). \r\n\r\n### How to: Node.js hello, world\r\n\r\nCreate a .NET 4.5 Console Application in Visual Studio. Add the Edge.js NuGet package to the project. Then in your code:\r\n\r\n```c#\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing EdgeJs;\r\n\r\nclass Program\r\n{\r\n    public static async Task Start()\r\n    {\r\n        var func = Edge.Func(@\"\r\n            return function (data, callback) {\r\n                callback(null, 'Node.js welcomes ' + data);\r\n            }\r\n        \");\r\n\r\n        Console.WriteLine(await func(\".NET\"));\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        Start().Wait();\r\n    }\r\n}\r\n```\r\n\r\nCompile and run:\r\n\r\n```\r\nC:\\project\\sample\\bin\\Debug> sample.exe\r\nNode.js welcomes .NET\r\n```\r\n\r\n### How to: integrate Node.js code into CLR code\r\n\r\nThe Edge.js NuGet package contains a single managed assembly `EdgeJs.dll` with a single class `EdgeJs.Edge` exposing a single static function `Func`. The function accepts a string containing code in Node.js that constructs and *returns* a JavaScript function. The JavaScript function must have the signature required by Edge.js's prescriptive interop pattern: it must accept one parameter and a callback, and the callback must be called with an error and one return value: \r\n\r\n```c#\r\nvar func = Edge.Func(@\"\r\n    return function (data, callback) {\r\n        callback(null, 'Hello, ' + data);\r\n    }\r\n\");\r\n```\r\n\r\nEdge.js creates a `Func<object,Task<object>>` delegate in CLR that allows .NET code to call the Node.js function asynchronously. You can use the standard TPL mechanisms or the async/await keywords to conveniently await completion of the asynchornous Node.js function:\r\n\r\n```c#\r\nvar result = await func(\".NET\");\r\n// result == \"Hello, .NET\"\r\n```\r\n\r\nNote that the Node.js code snippet is not a function *definition*. Instead it must create and *return* a function instance. This allows you to initialize and maintain encapsulated Node.js state associated with the instance of the created function. The initialization code will execute only once when you call `Edge.Func`. Conceptually this is similar to defining a Node.js module that exports a single function (by returning it to the caller).  For example:\r\n\r\n```c#\r\nvar increment = Edge.Func(@\"\r\n    var current = 0;\r\n\r\n    return function (data, callback) {\r\n        current += data;\r\n        callback(null, current);\r\n    }\r\n\");\r\n\r\nConsole.WriteLine(await increment(4)); // outputs 4\r\nConsole.WriteLine(await increment(7)); // outputs 11\r\n```\r\n\r\nUsing multiline C# string literals is convenient for short Node.js code snippets, but you may want to store larger Node.js code in its own `*.js` file or files. \r\n\r\nOne pattern is to store your Node.js code in a `myfunc.js` file:\r\n\r\n```javascript\r\nreturn function (data, callback) {\r\n    callback(null, 'Node.js welcomes ' + data);\r\n}\r\n```\r\n\r\nAnd then load such file into memory with `File`:\r\n\r\n```c#\r\nvar func = Edge.Func(File.ReadAllText(\"myfunc.js\"));\r\n```\r\n\r\nAnother pattern is to define a Node.js module that itself is a function:\r\n\r\n```javascript\r\nmodule.exports = function (data, callback) {\r\n    callback(null, 'Node.js welcomes ' + data);\r\n};\r\n```\r\n\r\nAnd then load and return this module with a short snippet of Node.js:\r\n\r\n```c#\r\nvar func = Edge.Func(@\"return require('./../myfunc.js')\");\r\n```\r\n\r\n(Note the relative location of the file).\r\n\r\n### How to: use Node.js built-in modules\r\n\r\nYou can use Node.js built-in modules out of the box. For example, you can set up a Node.js HTTP server hosted in a .NET application and call it from C#:\r\n\r\n```c#\r\nvar createHttpServer = Edge.Func(@\"\r\n    var http = require('http');\r\n\r\n    return function (port, cb) {\r\n        var server = http.createServer(function (req, res) {\r\n            res.end('Hello, world! ' + new Date());\r\n        }).listen(port, cb);\r\n    };\r\n\");\r\n\r\nawait createHttpServer(8080);\r\nConsole.WriteLine(await new WebClient().DownloadStringTaskAsync(\"http://localhost:8080\"));\r\n```\r\n\r\n### How to: use external Node.js modules\r\n\r\nYou can use external Node.js modules, for example modules installed from NPM. \r\n\r\nNote: Most Node.js modules are written in JavaScript and will execute in Edge as-is. However, some Node.js external modules are native binary modules, rebuilt by NPM on module installation to suit your local execution environment. Native binary modules will not run in Edge unless they are rebuilt to link against the NodeJS dll that Edge uses.\r\n\r\nTo install modules from NPM, you must first [install Node.js](http://nodejs.org) on your machine and use the `npm` package manager that comes with the Node.js installation. NPM modules must be installed in the directory where your build system places the Edge.js NuGet package (most likely the same location as the rest of your application binaries), or any ancestor directory. Alternatively, you can install NPM modules globally on the machine using `npm install -g`:\r\n\r\n```\r\nC:\\projects\\websockets> npm install ws\r\n...\r\nws@0.4.31 node_modules\\ws\r\n├── tinycolor@0.0.1\r\n├── options@0.0.5\r\n├── nan@0.3.2\r\n└── commander@0.6.1\r\n```\r\n\r\nYou can then use the installed `ws` module to create a WebSocket server inside of a .NET application:\r\n\r\n```c#\r\nclass Program\r\n{\r\n    public static async void Start()\r\n    {\r\n        var createWebSocketServer = Edge.Func(@\"\r\n            var WebSocketServer = require('ws').Server;\r\n\r\n            return function (port, cb) {\r\n                var wss = new WebSocketServer({ port: port });\r\n                wss.on('connection', function (ws) {\r\n                    ws.on('message', function (message) {\r\n                        ws.send(message.toUpperCase());\r\n                    });\r\n                    ws.send('Hello!');\r\n                });\r\n                cb();\r\n            };\r\n        \");\r\n\r\n        await createWebSocketServer(8080);\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        Task.Run((Action)Start);\r\n        new ManualResetEvent(false).WaitOne();\r\n    }\r\n}\r\n```\r\n\r\nThis WebSocket server sends a *Hello* message to the client when a new connection is established, and then echos a capitalized version of every message it receives back to the client. You can test this webserver with the `wscat` tool included with the `ws` module. To make it convenient to use, first install the `ws` module globally:\r\n\r\n```\r\nnpm install ws -g\r\n```\r\n\r\nThen start the .NET application conatining the WebSocket server and establish a connection to it with `wscat`:\r\n\r\n```\r\nC:\\projects\\websockets> wscat -c ws://localhost:8080/\r\n\r\nconnected (press CTRL+C to quit)\r\n\r\n< Hello!\r\n> foo\r\n< FOO\r\n> bar\r\n< BAR\r\n```\r\n\r\nA self-contained Node.js WebSocket server, even if running within a .NET application, is rather unexciting. After all, the same could be accomplished with a stand-alone Node.js process. Ideally you could extablish a WebSocket server in Node.js, but handle the messages in .NET. Let's do it - read on. \r\n\r\n### How to: handle Node.js events in .NET\r\n\r\nIt is often useful to handle certain events raised by the Node.js code within .NET. For example, you may want to establish a WebSocket server in Node.js, and handle the incoming messages in the .NET part of your application. This can be accomplished by passig a .NET callback function to Node.js when the the WebSocket server is created:\r\n\r\n```c#\r\nclass Program\r\n{\r\n    public static async void Start()\r\n    {\r\n        // Define an event handler to be called for every message from the client\r\n\r\n        var onMessage = (Func<object, Task<object>>)(async (message) =>\r\n        {\r\n            return \"Received string of length \" + ((string)message).Length;\r\n        });\r\n\r\n        // The WebSocket server delegates handling of messages from clients\r\n        // to the supplied .NET handler\r\n\r\n        var createWebSocketServer = Edge.Func(@\"\r\n            var WebSocketServer = require('ws').Server;\r\n\r\n            return function (options, cb) {\r\n                var wss = new WebSocketServer({ port: options.port });\r\n                wss.on('connection', function (ws) {\r\n                    ws.on('message', function (message) {\r\n                        options.onMessage(message, function (error, result) {\r\n                            if (error) throw error;\r\n                            ws.send(result);\r\n                        });\r\n                    });\r\n                    ws.send('Hello!');\r\n                });\r\n                cb();\r\n            };\r\n        \");\r\n\r\n        // Create a WebSocket server on a specific TCP port and using the .NET event handler\r\n\r\n        await createWebSocketServer(new\r\n        {\r\n            port = 8080,\r\n            onMessage = onMessage\r\n        });\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        Task.Run((Action)Start);\r\n        new ManualResetEvent(false).WaitOne();\r\n    }\r\n}\r\n```\r\n\r\nUsing `wscat`, you can verify the .NET handler is indeed invoked for every websocket message:\r\n\r\n```\r\nC:\\projects\\websockets> wscat -c ws://localhost:8080/\r\n\r\nconnected (press CTRL+C to quit)\r\n\r\n< Hello!\r\n> Foo\r\n< Received string of length 3\r\n> FooBar\r\n< Received string of length 6\r\n```\r\n\r\nThis example shows how Edge.js can create JavaScript proxies to .NET functions and marshal calls across the V8/CLR boundary in-process. Read more about [data marshaling between Node.js and CLR](#how-to-marshal-data-between-c-and-nodejs).\r\n\r\n### How to: expose Node.js state to .NET\r\n\r\nIn the previous example [a Node.js HTTP server was created and started from .NET](#how-to-use-nodejs-built-in-modules). Suppose at some point you want to stop the HTTP server from your .NET code. Given that all references to it are embedded within Node.js code, it is not possible. However, just as Edge.js can [pass a .NET function to Node.js](#how-to-handle-nodejs-events-in-net), it also can export a Node.js function to .NET. Moreover, that function can be implemented as a closure over Node.js state. This is how it would work:\r\n\r\n```c#\r\nvar createHttpServer = Edge.Func(@\"\r\n    var http = require('http');\r\n\r\n    return function (port, cb) {\r\n        var server = http.createServer(function (req, res) {\r\n            res.end('Hello, world! ' + new Date());\r\n        }).listen(port, function (error) {\r\n            cb(error, function (data, cb) {\r\n                server.close();\r\n                cb();\r\n            });\r\n        });\r\n    };\r\n\");\r\n\r\nvar closeHttpServer = (Func<object,Task<object>>)await createHttpServer(8080);\r\nConsole.WriteLine(await new WebClient().DownloadStringTaskAsync(\"http://localhost:8080\"));\r\nawait closeHttpServer(null);\r\n```\r\n\r\nNotice how the `createHttpServer` function, in addition to starting an HTTP server in Node.js, is also returning a .NET proxy to a JavaScript function that allows that server to be stopped. \r\n\r\n### How to: use Node.js in ASP.NET web applications\r\n\r\nUsing Node.js via Edge.js in ASP.NET web applications is no different than in a .NET console application. The Edge.js NuGet package must be referenced in your ASP.NET web application. If you are using any external Node.js modules, the entire `node_modules` subdirectory structure must be binplaced to the `bin` folder of you web application, and deployed that way to the server. \r\n\r\n### How to: debug Node.js code running in a CLR application\r\n\r\nThe `EDGE_NODE_PARAMS` environment variable allows you to specify any options that are normally passed via command line to the node executable. This includes the `--debug` options necessary","created":"2017-04-05T07:32:54.452Z","modified":"2017-04-08T18:54:20.129Z","lastPublisher":{"name":"agracio","email":"antonas.graciovas@outlook.com"},"owners":[{"name":"agracio","email":"antonas.graciovas@outlook.com"}],"other":{"_attachments":{},"_from":"publish","_id":"@agracio/edge","_nodeVersion":"6.9.4","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/edge-6.5.6.tgz_1491379996401_0.9600587442982942"},"_npmUser":{"name":"agracio","email":"antonas.graciovas@outlook.com"},"_npmVersion":"3.10.10","_rev":"5-0e279f2251e51d27debd80107af16098","_shasum":"4328302f9157b8b65a36e8ca1905be264aadb6eb","author":{"name":"Tomasz Janczuk","email":"tomasz@janczuk.org","url":"http://tomasz.janczuk.org"},"bugs":{"url":"http://github.com/agracio/edge/issues"},"directories":{},"dist-tags":{"latest":"6.5.6"},"dist":{"shasum":"4328302f9157b8b65a36e8ca1905be264aadb6eb","tarball":"https://registry.npmjs.org/@agracio/edge/-/edge-6.5.6.tgz"},"maintainers":[{"name":"agracio","email":"antonas.graciovas@outlook.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-08T18:54:20.129Z","created":"2017-04-05T07:32:54.452Z","6.5.3":"2017-04-05T07:32:54.452Z","6.5.5":"2017-04-05T08:05:04.446Z","6.5.6":"2017-04-05T08:13:17.192Z"}}}