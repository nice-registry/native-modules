{"name":"electron-media-service","version":"0.2.2","description":"OS Media Service integration for Electron apps","main":"src/index.js","license":"MIT","devDependencies":{"chai":"^3.5.0","electron-mocha":"^3.4.0","electron-rebuild":"^1.5.7","eslint":"^3.19.0","eslint-config-airbnb-base":"^11.1.3","eslint-plugin-import":"^2.2.0","node-gyp":"^3.6.0"},"dependencies":{"bindings":"^1.2.1","nan":"^2.6.2","semver":"^5.3.0"},"scripts":{"build":"node-gyp rebuild","lint":"eslint src","test":"npm run lint","install":"node-gyp rebuild"},"gypfile":true,"gitHead":"49d7e0d19bba28744a8481ba4c809ed417678b83","versions":[{"number":"0.2.0","date":"2017-04-15T03:37:11.156Z"},{"number":"0.2.1","date":"2017-04-17T03:51:39.276Z"},{"number":"0.2.2","date":"2017-04-17T03:54:44.489Z"}],"readme":"Electron Media Service\n---------------------------\n\n[![Build Status](https://travis-ci.org/MarshallOfSound/electron-media-service.svg?branch=master)](https://travis-ci.org/MarshallOfSound/electron-media-service)\n[![npm version](https://badge.fury.io/js/electron-media-service.svg)](https://www.npmjs.com/package/electron-media-service)\n[![npm](https://img.shields.io/npm/dt/electron-media-service.svg?maxAge=2592000)](https://www.npmjs.com/package/electron-media-service)\n[![license](https://img.shields.io/github/license/MarshallOfSound/electron-media-service.svg?maxAge=2592000)](https://github.com/GPMDP/electron-devtools-installer/blob/master/LICENSE)\n![status](https://img.shields.io/badge/Status-%20Ready%20for%20Awesome-red.svg)\n\nThis is an easy way to get OS level media integration cross-platform in Electron, it hooks\ninto the following system API's.\n\n| Platform | API | Requirements |\n|----------|-----|--------------|\n| `darwin` | [`MPRemoteCommandCenter`](https://developer.apple.com/reference/mediaplayer/mpremotecommandcenter?language=objc) and [`MPNowPlayingInfoCenter`](https://developer.apple.com/reference/mediaplayer/mpnowplayinginfocenter?language=objc) | macOS 10.12.1+ |\n| `win32` *Coming Soon* | [`MediaTransportControls`](https://msdn.microsoft.com/en-us/library/windows/desktop/dn892355(v=vs.85).aspx) | Windows 10+ |\n| `linux` *Coming Soon* | [`DBus`](https://dbus.freedesktop.org/doc/dbus-specification.html) | Well... DBus :D |\n\nAll you have to do to get all this awesome for you is\n\n```js\nimport MediaService from 'electron-media-service';\n\nconst myService = new MediaService();\n\nmyService.startService();\nmyService.on('play', () => playSomething());\nmyService.on('pause', () => pauseSomething());\nmyService.setMetaData({\n  title: 'Never Gonna Give You Up',\n  // Other track meta data here\n});\n```\n\n## What does it look like?\n\n### macOS\n\n![macOS](macOS.png)\n\n## Methods\n\n### `myService.startService()`\n\nStarts the media service my registering the application with the system, no other methods\nor events will work until this method is called.  It's a good idea to give users an option\nto not start the service as it can be annoying for some users especially on Windows 10.\n\n### `myService.stopService()`\n\nAttempts to unregister the service from the system, sometimes a full relaunch is required\nto unregister an application but this method tries it's hardest.\n\n### `myService.isStarted()`\n\nReturns `Boolean`, whether the service is started yet or not.  If you forget whether you\nstarted it or not you can always call this method to check.\n\n### `myService.setMetaData(meta)`\n\n* `meta` Object - The current tracks MetaData\n  * `title` String - The title of the track\n  * `artist` String - The name of the artist\n  * `album` String - The name of the album\n  * `albumArt` String - HTTP url to an image for the album art\n  * `state` String - One of `playing`, `paused` or `stopped`\n  * `id` Number - A unique ID for this track, can be randomly generated as it doesn't really affect anything\n  * `currentTime` Number - Progress through the track in milliseconds\n  * `duration` Number - Total length of the track in milliseconds\n\n## Events\n\n### `myService.on('play')`\n\nFired when the user or the system requests the track to start playing\n\n### `myService.on('pause')`\n\nFired when the user or the system requests the track to pause\n\n### `myService.on('playPause')`\n\nFired when the user or the system requests the track to toggle between playing and paused\n\n### `myService.on('next')`\n\nFired when the user or the system requests the player to skip to the next track\n\n### `myService.on('previous')`\n\nFired when the user or the system requests the player to skip back to the previous track\n\n### `myService.on('seek')`\n\nFired when the user or the system requests the player to seek through the track to the given time.\n\nThe target time will be given in milliseconds as the first argument to the event like so.\n\n```js\nmyService.on('seek', (to) => {\n  console.log(`We should seek to ${to}ms`)\n})\n```\n\n## What happens on unsupported platforms?\n\nWe automatically give you a noop `MediaService` class, all methods do nothing and\nno events are ever fired.  This allows you to not worry about supported platforms\nand just write code.  Call whatever methods you want and nothing will break.\n\nLicense\n-------\n\nThe MIT License (MIT)\n\nCopyright (c) 2017 Samuel Attard\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","created":"2017-04-15T03:37:11.156Z","modified":"2017-04-17T03:54:44.489Z","lastPublisher":{"name":"marshallofsound","email":"samuel.r.attard@gmail.com"},"owners":[{"name":"marshallofsound","email":"samuel.r.attard@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"electron-media-service","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/electron-media-service-0.2.2.tgz_1492401283128_0.5290562591981143"},"_npmUser":{"name":"marshallofsound","email":"samuel.r.attard@gmail.com"},"_npmVersion":"3.10.8","_rev":"3-e7c9326a56e9a89e0bcf194896f15399","_shasum":"086108787d426ab5b6fb07bd4aae1ba840ae7ca7","author":{"name":"Samuel Attard"},"directories":{},"dist-tags":{"latest":"0.2.2"},"dist":{"shasum":"086108787d426ab5b6fb07bd4aae1ba840ae7ca7","tarball":"https://registry.npmjs.org/electron-media-service/-/electron-media-service-0.2.2.tgz"},"maintainers":[{"name":"marshallofsound","email":"samuel.r.attard@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-17T03:54:44.489Z","created":"2017-04-15T03:37:11.156Z","0.2.0":"2017-04-15T03:37:11.156Z","0.2.1":"2017-04-17T03:51:39.276Z","0.2.2":"2017-04-17T03:54:44.489Z"}}}