{"name":"git-utils","description":"A package for using Git repositories","version":"5.0.0","license":"MIT","repository":"https://github.com/atom/git-utils","homepage":"http://atom.github.io/git-utils","keywords":["git","libgit2","dvcs","vcs"],"main":"./lib/git.js","devDependencies":{"grunt":"~0.4.0","grunt-contrib-coffee":"~0.9.0","grunt-shell":"~0.2.1","grunt-cli":"~0.1.6","wrench":"~1.4.4","temp":"~0.5.0","underscore":"~1.5.2","jasmine-focused":"^1.0.4","node-cpplint":"~0.1.5","grunt-coffeelint":"0.0.6"},"dependencies":{"nan":"^2.0.0","fs-plus":"^3.0.0"},"scripts":{"prepublish":"grunt clean coffee lint","test":"grunt test","install":"node-gyp rebuild"},"gypfile":true,"gitHead":"307ba1a9bf4d22afd483dbe01858de9c46c637c0","versions":[{"number":"0.1.0","date":"2013-03-09T20:44:01.567Z"},{"number":"0.2.0","date":"2013-03-09T22:33:28.450Z"},{"number":"0.3.0","date":"2013-03-10T05:23:06.354Z"},{"number":"0.4.0","date":"2013-03-10T18:28:39.103Z"},{"number":"0.5.0","date":"2013-03-13T16:04:56.485Z"},{"number":"0.6.0","date":"2013-03-17T22:06:43.508Z"},{"number":"0.7.0","date":"2013-03-20T23:51:32.605Z"},{"number":"0.8.0","date":"2013-03-26T03:17:36.089Z"},{"number":"0.9.0","date":"2013-03-29T12:27:15.061Z"},{"number":"0.10.0","date":"2013-03-29T15:37:25.563Z"},{"number":"0.11.0","date":"2013-03-29T15:46:33.393Z"},{"number":"0.12.0","date":"2013-04-09T19:01:32.085Z"},{"number":"0.13.0","date":"2013-04-09T22:22:35.561Z"},{"number":"0.14.0","date":"2013-04-12T17:56:18.749Z"},{"number":"0.15.0","date":"2013-04-25T22:28:46.948Z"},{"number":"0.16.0","date":"2013-05-01T00:40:05.686Z"},{"number":"0.17.0","date":"2013-05-13T23:55:33.943Z"},{"number":"0.18.0","date":"2013-05-16T23:26:20.782Z"},{"number":"0.19.0","date":"2013-06-25T03:21:33.482Z"},{"number":"0.20.0","date":"2013-07-08T04:07:38.397Z"},{"number":"0.21.0","date":"2013-07-10T21:50:52.939Z"},{"number":"0.22.0","date":"2013-07-11T20:47:54.775Z"},{"number":"0.23.0","date":"2013-07-11T21:28:27.560Z"},{"number":"0.24.0","date":"2013-07-26T15:37:22.645Z"},{"number":"0.25.0","date":"2013-10-02T17:01:57.562Z"},{"number":"0.26.0","date":"2013-10-04T22:39:42.625Z"},{"number":"0.27.0","date":"2013-10-23T15:47:12.237Z"},{"number":"0.28.0","date":"2013-10-28T16:05:53.532Z"},{"number":"0.29.0","date":"2013-11-01T19:10:32.441Z"},{"number":"0.30.0","date":"2013-12-26T22:11:33.119Z"},{"number":"0.31.0","date":"2014-01-03T16:30:56.935Z"},{"number":"0.32.0","date":"2014-01-03T21:28:54.284Z"},{"number":"0.33.0","date":"2014-01-03T21:34:39.808Z"},{"number":"0.33.1","date":"2014-01-16T16:36:48.789Z"},{"number":"0.34.0","date":"2014-01-22T22:11:37.262Z"},{"number":"1.0.0","date":"2014-02-07T20:24:45.365Z"},{"number":"1.0.1","date":"2014-03-20T17:51:33.838Z"},{"number":"1.1.0","date":"2014-03-20T19:31:03.779Z"},{"number":"1.1.1","date":"2014-03-21T00:02:06.384Z"},{"number":"1.2.0","date":"2014-03-28T18:56:58.737Z"},{"number":"1.2.1","date":"2014-03-31T18:07:43.974Z"},{"number":"1.2.2","date":"2014-04-02T16:38:53.400Z"},{"number":"1.3.0","date":"2014-05-01T21:08:52.642Z"},{"number":"1.4.0","date":"2014-05-27T17:24:01.510Z"},{"number":"1.4.1","date":"2014-06-18T18:38:22.162Z"},{"number":"1.5.0","date":"2014-06-30T09:51:41.787Z"},{"number":"1.5.1","date":"2014-06-30T10:02:17.733Z"},{"number":"1.5.2","date":"2014-06-30T10:10:45.426Z"},{"number":"2.0.0","date":"2014-07-01T02:24:19.320Z"},{"number":"1.6.0","date":"2014-07-21T23:01:05.465Z"},{"number":"2.1.0","date":"2014-07-22T02:12:48.736Z"},{"number":"2.1.1","date":"2014-07-24T17:53:01.948Z"},{"number":"2.1.2","date":"2014-07-29T23:04:03.515Z"},{"number":"2.1.3","date":"2014-07-29T23:31:16.934Z"},{"number":"2.1.4","date":"2014-08-08T01:48:36.958Z"},{"number":"2.1.5","date":"2014-10-02T16:16:28.376Z"},{"number":"2.2.0","date":"2014-12-12T20:57:47.551Z"},{"number":"2.3.0","date":"2015-01-28T00:17:41.663Z"},{"number":"3.0.0","date":"2015-01-28T21:28:23.302Z"},{"number":"3.0.1","date":"2015-06-09T15:52:32.594Z"},{"number":"4.0.0","date":"2015-09-11T09:16:18.670Z"},{"number":"4.0.1","date":"2015-09-22T04:42:21.691Z"},{"number":"4.0.2","date":"2015-09-22T04:48:41.841Z"},{"number":"4.0.3","date":"2015-09-22T04:55:34.255Z"},{"number":"4.0.4","date":"2015-09-22T05:09:05.177Z"},{"number":"4.0.5","date":"2015-09-22T05:17:06.962Z"},{"number":"4.0.6-0","date":"2015-11-05T20:31:56.643Z"},{"number":"4.0.6","date":"2015-11-05T21:33:50.018Z"},{"number":"4.0.7","date":"2015-11-06T04:34:24.984Z"},{"number":"4.0.8","date":"2016-01-01T19:43:40.480Z"},{"number":"4.1.0","date":"2016-01-04T21:26:02.476Z"},{"number":"4.1.2","date":"2016-02-10T19:16:11.180Z"},{"number":"4.1.3","date":"2016-11-22T00:56:15.815Z"},{"number":"4.1.4","date":"2016-11-22T03:54:25.498Z"},{"number":"5.0.0","date":"2017-03-06T10:41:29.801Z"}],"readme":"# Git Node module [![Build Status](https://travis-ci.org/atom/git-utils.svg?branch=master)](https://travis-ci.org/atom/git-utils)\n\nHelpers for working with Git repositories built natively on top of\n[libgit2](http://libgit2.github.com).\n\n## Installing\n\n```sh\nnpm install git-utils\n```\n\n## Building\n  * Clone the repository with the `--recurse` option to get the libgit2\n    submodule\n  * Run `npm install`\n  * Run `grunt` to compile the native and CoffeeScript code\n  * Run `grunt test` to run the specs\n\n## Docs\n\n### git.open(path)\n\nOpen the repository at the given path.  This will return `null` if the\nrepository at the given path does not exist or cannot be opened.\n\n```coffeescript\ngit = require 'git-utils'\n\nrepository = git.open('/Users/me/repos/node')\n```\n\nThe opened repository will have a `submodules` property that will be an object\nof paths mapped to submodule {Repository} objects. The path keys will be\nrelative to the opened repository's working directory.\n\n### Repository.checkoutHead(path)\n\nRestore the contents of a path in the working directory and index to the\nversion at HEAD. Similar to running `git reset HEAD -- <path>` and then a\n`git checkout HEAD -- <path>`.\n\n`path` - The string repository-relative path to checkout.\n\nReturns `true` if the checkout was successful, `false` otherwise.\n\n### Repository.checkoutReference(reference, [create])\n\nChecks out a branch in your repository.\n\n`reference` - The string reference to checkout\n`create` - A Boolean value which, if `true` creates the new `reference` if it doesn't exist.\n\nReturns `true` if the checkout was successful, `false` otherwise.\n\n### Repository.getAheadBehindCount(branch)\n\nGet the number of commits the branch is ahead/behind the remote branch it\nis tracking.  Similar to the commit numbers reported by `git status` when a\nremote tracking branch exists.\n\n`branch` - The branch name to lookup ahead/behind counts for. (default: `HEAD`)\n\nReturns an object with `ahead` and `behind` keys pointing to integer values\nthat will always be >= 0.\n\n### Repository.getCommitCount(fromCommit, toCommit)\n\nGet the number of commits between `fromCommit` and `toCommit`.\n\n`fromCommit` - The string commit SHA-1 to start the rev walk at.\n\n`toCommit` - The string commit SHA-1 to end the rev walk at.\n\nReturns the number of commits between the two, always >= 0.\n\n### Repository.getConfigValue(key)\n\nGet the config value of the given key.\n\n`key` - The string key to retrieve the value for.\n\nReturns the configuration value, may be `null`.\n\n### Repository.setConfigValue(key, value)\n\nGet the config value of the given key.\n\n`key` - The string key to set in the config.\n\n`value` - The string value to set in the config for the given key.\n\nReturns `true` if setting the config value was successful, `false` otherwise.\n\n### Repository.getDiffStats(path)\n\nGet the number of lines added and removed comparing the working directory\ncontents of the given path to the HEAD version of the given path.\n\n`path` - The string repository-relative path to diff.\n\nReturns an object with `added` and `deleted` keys pointing to integer values\nthat always be >= 0.\n\n### Repository.getHeadBlob(path)\n\nGet the blob contents of the given path at HEAD. Similar to\n`git show HEAD:<path>`.\n\n`path` - The string repository-relative path.\n\nReturns the string contents of the HEAD version of the path.\n\n### Repository.getHead()\n\nGet the reference or SHA-1 that HEAD points to such as `refs/heads/master`\nor a full SHA-1 if the repository is in a detached HEAD state.\n\nReturns the string reference name or SHA-1.\n\n### Repository.getIndexBlob(path)\n\nGet the blob contents of the given path in the index. Similar to\n`git show :<path>`.\n\n`path` - The string repository-relative path.\n\nReturns the string contents of the index version of the path.\n\n### Repository.getLineDiffs(path, text, [options])\n\nGet the line diffs comparing the HEAD version of the given path and the given\ntext.\n\n`path` - The string repository-relative path.\n\n`text` - The string text to diff the HEAD contents of the path against.\n\n`options` - An optional object with the following keys:\n\n  * `ignoreEolWhitespace` - `true` to ignore any whitespace diffs at the end of\n    lines.\n  * `useIndex` - `true` to compare against the index version instead of the HEAD\n    version.\n\nReturns an array of objects that have `oldStart`, `oldLines`, `newStart`, and\n`newLines` keys pointing to integer values, may be `null` if the diff fails.\n\n### Repository.getLineDiffDetails(path, text, [options])\n\nGet the line diff details comparing the HEAD version of the given path and the given\ntext.\n\nTakes the same arguments as `getLineDiffs`.\n\nReturns an array of objects which represent an old or new line in a diff. Every\nobject has `oldStart`, `oldLines`, `newStart`, `newLines`, `oldLineNumber` and\n`newLineNumber` keys pointing to integer values, and a `line` key pointing to the\nrespective line content. May be `null` if the diff fails.\n\n### Repository.getMergeBase(commit1, commit2)\n\nGet the merge base of two commits.\n\n`commit1` - The string SHA-1 of the first commit.\n\n`commit2` - The string SHA-1 of the second commit.\n\nReturns the string SHA-1 of the merge base of `commit1` and `commit2` or `null`\nif there isn't one.\n\n### Repository.getPath()\n\nGet the path of the repository.\n\nReturns the string absolute path of the opened repository.\n\n### Repository.getReferences()\n\nGets all the local and remote references.\n\nReturns an object with three keys: `heads`, `remotes`, and `tags`.\nEach key can be an array of strings containing the reference names.\n\n### Repository.getReferenceTarget(ref)\n\nGet the target of the given reference.\n\n`ref` - The string reference.\n\nReturns the string target of the given reference.\n\n### Repository.getShortHead()\n\nGet a possibly shortened version of value returns by `getHead()`. This will\nremove leading segments of `refs/heads`, `refs/tags`, or `refs/remotes` and will\nalso shorten the SHA-1 of a detached HEAD to 7 characters.\n\nReturns a string shortened reference name or SHA-1.\n\n### Repository.getStatus([path])\n\nGet the status of a single path or all paths in the repository.  This will not\ninclude ignored paths.\n\n`path` - An optional repository-relative path to limit the status reporting to.\n\nReturns an integer status number if a path is specified and returns an object\nwith path keys and integer status values if no path is specified.\n\n### Repository.getUpstreamBranch([branch])\n\nGet the upstream branch of the given branch.\n\n`branch` - The branch to find the upstream branch of (default: `HEAD`)\n\nReturns the string upstream branch reference name.\n\n### Repository.getWorkingDirectory()\n\nGet the working directory of the repository.\n\nReturns the string absolute path to the repository's working directory.\n\n### Repository.isIgnored(path)\n\nGet the ignored status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is ignored, `false` otherwise.\n\n### Repository.isPathModified(path)\n\nGet the modified status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is modified, `false` otherwise.\n\n### Repository.isPathNew(path)\n\nGet the new status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is new, `false` otherwise.\n\n### Repository.isPathDeleted(path)\n\nGet the deleted status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is deleted, `false` otherwise.\n\n### Repository.isPathStaged(path)\n\nGet the staged status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is staged in the index, `false` otherwise.\n\n### Repository.isStatusIgnored(status)\n\nCheck if a status value represents an ignored path.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a ignored one, `false` otherwise.\n\n### Repository.isStatusModified(status)\n\nCheck if a status value represents a modified path.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a modified one, `false` otherwise.\n\n### Repository.isStatusNew(status)\n\nCheck if a status value represents a new path.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a new one, `false` otherwise.\n\n### Repository.isStatusDeleted(status)\n\nCheck if a status value represents a deleted path.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a deleted one, `false` otherwise.\n\n### Repository.isStatusStaged(status)\n\nCheck if a status value represents a changed that is staged in the index.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a staged one, `false` otherwise.\n\n### Repository.isSubmodule(path)\n\nCheck if the path is a submodule in the index.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is a submodule, `false` otherwise.\n\n### Repository.refreshIndex()\n\nReread the index to update any values that have changed since the last time the\nindex was read.\n\n### Repository.relativize(path)\n\nRelativize the given path to the repository's working directory.\n\n`path` - The string path to relativize.\n\nReturns a repository-relative path if the given path is prefixed with the\nrepository's working directory path.\n\n### Repository.isWorkingDirectory(path)\n\nIs the given path the repository's working directory?\n\nIt is better to call this method than comparing a path directly against\nthe value of `getWorkingDirectory()` since this method handles slash\nnormalization on Windows, case insensitive filesystems, and symlinked\nrepositories.\n\n`path` - The string path to check.\n\nReturns `true` if the given path is the repository's working directory,\nfalse otherwise.\n\n### Repository.release()\n\nRelease the repository and close all file handles it has open.  No other methods\ncan be called on the `Repository` object once it has been released.\n\n### Repository.submoduleForPath(path)\n\nGet the repository for the submodule that the path is located in.\n\n`path` - The absolute or repository-relative string path.\n\nReturns a `Repository` or `null` if the path isn't in a submodule.\n\n### Repository.add(path)\n\nStage the changes in `path` into the repository's index. Clear any conflict state\nassociated with `path`.\n\n`path` - A repository-relative string path.\n\nRaises an `Error` if the path isn't readable or if another exception occurs.\n","starsCount":4,"created":"2013-03-09T20:44:00.794Z","modified":"2017-05-22T14:58:05.324Z","lastPublisher":{"name":"as-cii","email":"as-cii@github.com"},"owners":[{"email":"atom@github.com","name":"atom-team"},{"email":"as-cii@github.com","name":"as-cii"},{"email":"damieng@gmail.com","name":"damieng"},{"email":"joshaber@gmail.com","name":"joshaber"},{"email":"izuzak@gmail.com","name":"izuzak"},{"email":"kevinsawicki@gmail.com","name":"kevinsawicki"},{"email":"probablycorey@gmail.com","name":"probablycorey"},{"email":"zcbenz@gmail.com","name":"zcbenz"},{"email":"nathan@github.com","name":"nathansobo"},{"email":"ogle.ben@gmail.com","name":"benogle"}],"other":{"_attachments":{},"_from":".","_id":"git-utils","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/git-utils-5.0.0.tgz_1488796886565_0.42462476110085845"},"_npmUser":{"name":"as-cii","email":"as-cii@github.com"},"_npmVersion":"3.10.8","_rev":"8-f6738ca6b1cd3fccaca6315acf5480eb","_shasum":"f4df74201bdff21c7301083e7e02ce3de6bd637c","author":{"name":"Kevin Sawicki","email":"kevin@github.com"},"bugs":{"url":"https://github.com/atom/git-utils/issues"},"contributors":[{"name":"Garen J. Torikian","email":"gjtorikian@gmail.com"}],"directories":{},"dist-tags":{"latest":"5.0.0"},"dist":{"shasum":"f4df74201bdff21c7301083e7e02ce3de6bd637c","tarball":"https://registry.npmjs.org/git-utils/-/git-utils-5.0.0.tgz"},"maintainers":[{"email":"atom@github.com","name":"atom-team"},{"email":"as-cii@github.com","name":"as-cii"},{"email":"damieng@gmail.com","name":"damieng"},{"email":"joshaber@gmail.com","name":"joshaber"},{"email":"izuzak@gmail.com","name":"izuzak"},{"email":"kevinsawicki@gmail.com","name":"kevinsawicki"},{"email":"probablycorey@gmail.com","name":"probablycorey"},{"email":"zcbenz@gmail.com","name":"zcbenz"},{"email":"nathan@github.com","name":"nathansobo"},{"email":"ogle.ben@gmail.com","name":"benogle"}],"readmeFilename":"README.md","time":{"modified":"2017-05-22T14:58:05.324Z","created":"2013-03-09T20:44:00.794Z","0.1.0":"2013-03-09T20:44:01.567Z","0.2.0":"2013-03-09T22:33:28.450Z","0.3.0":"2013-03-10T05:23:06.354Z","0.4.0":"2013-03-10T18:28:39.103Z","0.5.0":"2013-03-13T16:04:56.485Z","0.6.0":"2013-03-17T22:06:43.508Z","0.7.0":"2013-03-20T23:51:32.605Z","0.8.0":"2013-03-26T03:17:36.089Z","0.9.0":"2013-03-29T12:27:15.061Z","0.10.0":"2013-03-29T15:37:25.563Z","0.11.0":"2013-03-29T15:46:33.393Z","0.12.0":"2013-04-09T19:01:32.085Z","0.13.0":"2013-04-09T22:22:35.561Z","0.14.0":"2013-04-12T17:56:18.749Z","0.15.0":"2013-04-25T22:28:46.948Z","0.16.0":"2013-05-01T00:40:05.686Z","0.17.0":"2013-05-13T23:55:33.943Z","0.18.0":"2013-05-16T23:26:20.782Z","0.19.0":"2013-06-25T03:21:33.482Z","0.20.0":"2013-07-08T04:07:38.397Z","0.21.0":"2013-07-10T21:50:52.939Z","0.22.0":"2013-07-11T20:47:54.775Z","0.23.0":"2013-07-11T21:28:27.560Z","0.24.0":"2013-07-26T15:37:22.645Z","0.25.0":"2013-10-02T17:01:57.562Z","0.26.0":"2013-10-04T22:39:42.625Z","0.27.0":"2013-10-23T15:47:12.237Z","0.28.0":"2013-10-28T16:05:53.532Z","0.29.0":"2013-11-01T19:10:32.441Z","0.30.0":"2013-12-26T22:11:33.119Z","0.31.0":"2014-01-03T16:30:56.935Z","0.32.0":"2014-01-03T21:28:54.284Z","0.33.0":"2014-01-03T21:34:39.808Z","0.33.1":"2014-01-16T16:36:48.789Z","0.34.0":"2014-01-22T22:11:37.262Z","1.0.0":"2014-02-07T20:24:45.365Z","1.0.1":"2014-03-20T17:51:33.838Z","1.1.0":"2014-03-20T19:31:03.779Z","1.1.1":"2014-03-21T00:02:06.384Z","1.2.0":"2014-03-28T18:56:58.737Z","1.2.1":"2014-03-31T18:07:43.974Z","1.2.2":"2014-04-02T16:38:53.400Z","1.3.0":"2014-05-01T21:08:52.642Z","1.4.0":"2014-05-27T17:24:01.510Z","1.4.1":"2014-06-18T18:38:22.162Z","1.5.0":"2014-06-30T09:51:41.787Z","1.5.1":"2014-06-30T10:02:17.733Z","1.5.2":"2014-06-30T10:10:45.426Z","2.0.0":"2014-07-01T02:24:19.320Z","1.6.0":"2014-07-21T23:01:05.465Z","2.1.0":"2014-07-22T02:12:48.736Z","2.1.1":"2014-07-24T17:53:01.948Z","2.1.2":"2014-07-29T23:04:03.515Z","2.1.3":"2014-07-29T23:31:16.934Z","2.1.4":"2014-08-08T01:48:36.958Z","2.1.5":"2014-10-02T16:16:28.376Z","2.2.0":"2014-12-12T20:57:47.551Z","2.3.0":"2015-01-28T00:17:41.663Z","3.0.0":"2015-01-28T21:28:23.302Z","3.0.1":"2015-06-09T15:52:32.594Z","4.0.0":"2015-09-11T09:16:18.670Z","4.0.1":"2015-09-22T04:42:21.691Z","4.0.2":"2015-09-22T04:48:41.841Z","4.0.3":"2015-09-22T04:55:34.255Z","4.0.4":"2015-09-22T05:09:05.177Z","4.0.5":"2015-09-22T05:17:06.962Z","4.0.6-0":"2015-11-05T20:31:56.643Z","4.0.6":"2015-11-05T21:33:50.018Z","4.0.7":"2015-11-06T04:34:24.984Z","4.0.8":"2016-01-01T19:43:40.480Z","4.1.0":"2016-01-04T21:26:02.476Z","4.1.2":"2016-02-10T19:16:11.180Z","4.1.3":"2016-11-22T00:56:15.815Z","4.1.4":"2016-11-22T03:54:25.498Z","5.0.0":"2017-03-06T10:41:29.801Z"},"users":{"brentonhouse":true,"demian85":true,"subying":true,"dzbo":true}}}