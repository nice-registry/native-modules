{"name":"mmap-object","description":"Wrap a shared memory-mapped file in a plain old object.","main":"lib/mmap-object","scripts":{"test":"mocha test/test-*","install":"node-pre-gyp install --fallback-to-build"},"binary":{"module_name":"mmap-object","module_path":"./lib","host":"https://github.com/allenluce/mmap-object/releases/download/{version}"},"version":"1.3.5","repository":"https://github.com/allenluce/mmap-object","license":"ISC","gypfile":true,"dependencies":{"nan":"^2.6.2","node-pre-gyp":"^0.6.36"},"devDependencies":{"chai":"^4.0.2","mocha":"^3.4.2","node-pre-gyp-github":"^1.3.1","temp":"^0.8.3","which":"^1.2.14"},"gitHead":"461a86634352ca02ac3a4cb010b13eb49971aac4","homepage":"https://github.com/allenluce/mmap-object#readme","versions":[{"number":"1.0.0","date":"2016-02-09T00:13:06.818Z"},{"number":"1.0.1","date":"2016-02-09T22:17:01.381Z"},{"number":"1.0.2","date":"2016-02-10T00:14:33.448Z"},{"number":"1.0.3","date":"2016-02-19T05:11:26.244Z"},{"number":"1.0.4","date":"2016-02-22T23:53:34.339Z"},{"number":"1.0.5","date":"2016-02-25T01:30:23.594Z"},{"number":"1.0.6","date":"2016-02-25T19:30:02.671Z"},{"number":"1.0.7","date":"2016-02-25T21:49:17.429Z"},{"number":"1.0.8","date":"2016-02-29T22:14:09.204Z"},{"number":"1.0.9","date":"2016-03-02T20:27:46.726Z"},{"number":"1.0.10","date":"2016-03-03T17:21:17.103Z"},{"number":"1.0.12","date":"2016-04-06T16:28:40.463Z"},{"number":"1.0.13","date":"2016-04-20T18:38:19.625Z"},{"number":"1.1.0","date":"2016-09-22T19:09:49.943Z"},{"number":"1.1.1","date":"2017-01-13T21:23:11.737Z"},{"number":"1.2.0","date":"2017-01-23T18:17:17.856Z"},{"number":"1.3.0","date":"2017-01-24T00:08:28.263Z"},{"number":"2.0.0","date":"2017-02-01T02:48:32.804Z"},{"number":"1.3.1","date":"2017-02-14T03:30:43.506Z"},{"number":"1.3.2","date":"2017-02-16T21:00:44.339Z"},{"number":"1.3.3","date":"2017-03-16T23:39:32.292Z"},{"number":"1.3.4","date":"2017-05-01T14:11:28.597Z"},{"number":"1.3.5","date":"2017-07-06T20:27:25.602Z"}],"readme":"# Shared Memory Objects\n\n[![Build Status](https://travis-ci.org/allenluce/mmap-object.svg?branch=master)](https://travis-ci.org/allenluce/mmap-object)\n\nSuper-fast file-based sharing of Javascript objects among multiple\nprocesses.\n\nThis module maps Javascript objects into shared memory for\nsimultaneous access by different Node processes running on the same\nmachine. Shared memory is loaded\nvia [mmap](https://en.wikipedia.org/wiki/Mmap).  Object access is\nmediated by Boost's unordered map class so object property access are\nspeedy.\n\nData is lazily loaded piece-by-piece as needed so opening even a huge\nfile takes no time at all.\n\nThere are two modes:\n\n## Unshared Write-only Mode\n\nA single process creates a new file which is mapped to a Javascript\nobject. Setting properties on this object writes those properties to\nthe file. You *can* read from the object within this mode but sharing\nan object in write-only mode with other processes is certain to result\nin crashes.\n\n## Shared Read-only mode\n\nOpen an existing file for reading. Multiple processes can safely open\nthis file. Opening is lightning fast and only a single copy remains in\nmemory.\n\n## Requirements\n\nBinaries are provided for OSX and Linux for various node versions\n(check the releases page to see which). If a binary is not provided\nfor your platform, you will need Boost and and a C++11 compliant\ncompiler (like GCC 4.8 or better) to build the module.\n\n## Installation\n\n    npm install mmap-object\n\n## Usage\n\n```javascript\n// Write a file\nconst Shared = require('mmap-object')\n\nconst shared_object = new Shared.Create('filename')\n\nshared_object['new_key'] = 'some value'\nshared_object.new_property = 'some other value'\n\n// Erase a key\ndelete shared_object['new_key']\n\nshared_object.close()\n\n// Read a file\nconst read_only_shared_object = new Shared.Open('filename')\n\nconsole.log(`My value is ${read_only_shared_object.new_key}`)\n```\n\n## API\n\n### new Create(path, [file_size], [initial_bucket_count], [max_file_size])\n\nCreates a new file mapped into shared memory. Returns an object that\nprovides access to the shared memory. Throws an exception on error.\n\n__Arguments__\n\n* `path` - The path of the file to create\n* `file_size` - *Optional* The initial size of the file in\n  kilobytes. If more space is needed, the file will automatically be\n  grown to a larger size. Minimum is 500 bytes. Defaults to 5\n  megabytes.\n* `initial_bucket_count` - *Optional* The number of buckets to\n  allocate initially. This is passed to the underlying\n  [Boost unordered_map](http://www.boost.org/doc/libs/1_38_0/doc/html/boost/unordered_map.html).\n  Defaults to 1024. Set this to the number of keys you expect to write.\n* `max_file_size` - *Optional* The largest the file is allowed to grow\n  in kilobites. If data is added beyond this limit, an exception is\n  thrown.  Defaults to 5 gigabytes.\n\n__Example__\n\n```js\n// Create a 500K map for 300 objects.\nconst obj = new Shared.Create('/tmp/sharedmem', 500, 300)\n```\n\n### new Open(path)\n\nMaps an existing file into shared memory. Returns an object that\nprovides read-only access to the object contained in the file. Throws\nan exception on error. Any number of processes can open the same file\nbut only a single copy will reside in memory. Uses `mmap` under the\ncovers, so only those parts of the file that are actually accessed\nwill be loaded.\n\n__Arguments__\n\n* `path` - The path of the file to open\n\n__Example__\n\n```js\n// Open up that shared file\nconst obj = new Shared.Open('/tmp/sharedmem')\n```\n\n### close()\n\nUnmaps a previously created or opened file. If the file was most\nrecently opened with `Create()`, `close()` will first shrink the file\nto remove any unneeded space that may have been allocated.\n\nIt's important to close your unused shared files in long-running\nprocesses. Not doing so keeps shared memory from being freed.\n\nThe closing of very large objects (a few gigabytes and up) may take\nsome time (hundreds to thousands of milliseconds). To prevent blocking\nthe main thread, pass a callback to `close()`. The call to `close()`\nwill return immediately while the callback will be called after the\nunderlying `munmap()` operation completes. Any error will be given as\nthe first argument to the callback.\n\n__Example__\n\n```js\nobj.close(function (err) {\n  if (err) {\n    console.error(`Error closing object: ${err}`)\n  }\n})\n```\n\n### isData()\n\nWhen iterating, use `isData()` to tell if a particular key is real\ndata or one of the underlying methods on the shared object:\n\n```js\nconst obj = new Shared.Open('/tmp/sharedmem')\n\nfor (let key in obj) {\n  if (obj.isData(key)) { // Only show actual data\n      console.log(key + ': ' + obj[key])\n  }\n}\n```\n\n\n### isOpen()\n\nReturn true if this object is currently open.\n\n### isClosed()\n\nReturn true if this object has been closed.\n\n### get_free_memory()\n\nNumber of bytes of free storage left in the shared object file.\n\n### get_size()\n\nThe size of the storage in the shared object file, in bytes.\n\n### bucket_count()\n\nThe number of buckets currently allocated in the underlying hash structure.\n\n### max_bucket_count()\n\nThe maximum number of buckets that can be allocated in the underlying hash structure.\n\n### load_factor()\n\nThe average number of elements per bucket.\n\n### max_load_factor()\n\nThe current maximum load factor.\n\n## Unit tests\n\n    npm test\n\n## Limitations\n\n_It is strongly recommended_ to pass in the number of keys you expect\nto write when creating the object with `Create`. If you don't do this,\nthe object will resize as you fill it up. This can be a very\ntime-consuming process and can result in fragmentation within the\nshared memory object and a larger final file size.\n\nObject values may be only string or number values. Attempting to set\na different type value results in an exception.\n\nSymbols are not supported as properties.\n\n## Publishing a binary release\n\nTo make a new binary release:\n\n- Edit package.json. Increment the `version` property.\n- `node-pre-gyp rebuild`\n- `node-pre-gyp package`\n- `node-pre-gyp-github publish`\n- `npm publish`\n\nYou will need a `NODE_PRE_GYP_GITHUB_TOKEN` with `repo:status`,\n`repo_deployment` and `public_repo` access to the target repo. You'll\nalso need write access to the npm repo.\n\n## MSVS build prerequisites\n\nSet up [Boost](http://www.boost.org/).\n\nSet BOOST_ROOT environment variable.\n\n```\nbootstrap\nb2 --build-type=complete\n```\n","starsCount":1,"created":"2016-02-09T00:13:06.818Z","modified":"2017-07-06T20:27:25.602Z","lastPublisher":{"name":"allenluce","email":"allen@npm.con.com"},"owners":[{"name":"allenluce","email":"allen@npm.con.com"}],"other":{"_attachments":{},"_id":"mmap-object","_nodeVersion":"8.1.3","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/mmap-object-1.3.5.tgz_1499372844545_0.06743980385363102"},"_npmUser":{"name":"allenluce","email":"allen@npm.con.com"},"_npmVersion":"5.0.3","_rev":"10-47c0d3630fc95e15708002c9a1bfc9de","author":{"name":"Allen Luce"},"bugs":{"url":"https://github.com/allenluce/mmap-object/issues"},"directories":{},"dist-tags":{"latest":"1.3.5","next":"2.0.0"},"dist":{"integrity":"sha512-sCYAkc0PaeRE6d5pyWX393VSk5fmhyhtH2gjrt4DFA/O0hb+YHb8fXJ9gXQqj4n/f0Gx59Q3SBeXsIPJj3ihoA==","shasum":"46242eed8c11244724d50173b968722ddd3ce4c8","tarball":"https://registry.npmjs.org/mmap-object/-/mmap-object-1.3.5.tgz"},"maintainers":[{"name":"allenluce","email":"allen@npm.con.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-06T20:27:25.602Z","created":"2016-02-09T00:13:06.818Z","1.0.0":"2016-02-09T00:13:06.818Z","1.0.1":"2016-02-09T22:17:01.381Z","1.0.2":"2016-02-10T00:14:33.448Z","1.0.3":"2016-02-19T05:11:26.244Z","1.0.4":"2016-02-22T23:53:34.339Z","1.0.5":"2016-02-25T01:30:23.594Z","1.0.6":"2016-02-25T19:30:02.671Z","1.0.7":"2016-02-25T21:49:17.429Z","1.0.8":"2016-02-29T22:14:09.204Z","1.0.9":"2016-03-02T20:27:46.726Z","1.0.10":"2016-03-03T17:21:17.103Z","1.0.12":"2016-04-06T16:28:40.463Z","1.0.13":"2016-04-20T18:38:19.625Z","1.1.0":"2016-09-22T19:09:49.943Z","1.1.1":"2017-01-13T21:23:11.737Z","1.2.0":"2017-01-23T18:17:17.856Z","1.3.0":"2017-01-24T00:08:28.263Z","2.0.0":"2017-02-01T02:48:32.804Z","1.3.1":"2017-02-14T03:30:43.506Z","1.3.2":"2017-02-16T21:00:44.339Z","1.3.3":"2017-03-16T23:39:32.292Z","1.3.4":"2017-05-01T14:11:28.597Z","1.3.5":"2017-07-06T20:27:25.602Z"},"users":{"rexchen":true}}}