{"name":"gs-node-lmdb","description":"Node binding for LMDB, the Lightning Memory-Mapped Database","license":"MIT","keywords":["lmdb","database","mdb","lightning","binding"],"repository":"https://github.com/Venemo/node-lmdb","version":"0.7.8","main":"./index.js","scripts":{"test":"mocha test/**.test.js --recursive","benchmark":"node ./benchmark/index.js","install":"node-gyp rebuild"},"dependencies":{"bindings":"*","nan":"^2.4"},"devDependencies":{"benchmark":"^2.1.0","chai":"^3.5.0","mkdirp":"^0.5.1","mocha":"^2.5.3","rimraf":"^2.5.2"},"gypfile":true,"gitHead":"74e27b277af569902b07e57a277f916f059e56f5","homepage":"https://github.com/Venemo/node-lmdb#readme","versions":[{"number":"0.7.8","date":"2016-10-27T11:59:42.696Z"}],"readme":"About gs-lmdb\n=============\n\nThis is an experimental, friendly fork of the original node-lmdb package. All of its changes are gonna be contributed back to the original module once they stabilizes.\n\nnode-lmdb\n=========\n\nThis is a node.js binding for LMDB, an extremely fast and lightweight transactional key-value store database.\n\nAbout\n-----\n\n### About this module\n\nThe aim of this node module is to provide bindings so that people can use LMDB from their node applications, aiming for a simple and clean API which is on par with the LMDB API but tries to apply javascript patterns and naming conventions as much as possible to make users feel familiar about it.\n\nWe support **zero-copy** retrieval of **string** and **binary** values. Binary values are operated on via the Node.js `Buffer` API.\n\n### About LMDB\n\nHere are the main highlights of LMDB, for more, visit http://symas.com/mdb :)\n\n* Key-value store, NoSQL\n* In-process, no need to squeeze your data through a socket\n* Support for transactions and multiple databases in the same environment\n* Support for multi-threaded and multi-process use\n* Zero-copy lookup (memory map)\n\n### Supported platforms\n\n* Tested and works on Linux (author uses Fedora 20)\n* Tested and works on Mac OS X - see https://github.com/Venemo/node-lmdb/issues/3\n* **Not yet tested** on Windows - see https://github.com/Venemo/node-lmdb/issues/2\n\n### License info\n\nThe `node-lmdb` code is licensed to you under the terms of the MIT license. LMDB itself is licensed under its own OpenLDAP public license (which is similarly permissive).\n\nUsage\n-----\n\n### Introduction\n\n#### Step 0: require the module\n\nJust like with any other node module, the first step is to `require()` the module.\n\n```javascript\nvar lmdb = require('node-lmdb');\n```\n\n#### Step 1: create an environment\n\n`Env` represents a database environment. You can create one with the `new` operator and after that, you must open it before you can use it.\n`open()` accepts an object literal in which you can specify the configuration options for the environment.\n\n```javascript\nvar env = new lmdb.Env();\nenv.open({\n    path: __dirname + \"/mydata\",\n    mapSize: 2*1024*1024*1024, // maximum database size\n    maxDbs: 3\n});\n```\n\nClose the environment when you no longer need it.\n\n```javascript\nenv.close();\n```\n\n#### Step 2: open one or more databases\n\nAn environment (`Env`) can contain one or more databases. Open a database with `env.openDbi()` which takes an object literal with which you can configure your database.\n\n```javascript\nvar dbi = env.openDbi({\n    name: \"myPrettyDatabase\",\n    create: true // will create if database did not exist\n})\n```\n\nClose the database when you no longer need it.\n\n```javascript\ndbi.close();\n```\n\n#### Step 3: use transactions\n\nThe basic unit of work in LMDB is a transaction, which is called `Txn` for short. Here is how you operate with your data.\nEvery piece of data in LMDB is referred to by a **key**.\nYou can use the methods `getString()`, `getBinary()`, `getNumber()` and `getBoolean()` to retrieve something,\n`putString()`, `putBinary()`, `putNumber()` and `putBoolean()` to store something and `del()` to delete something.\n\nCurrently **only string, binary, number and boolean values are supported**, use `JSON.stringify` and `JSON.parse` for complex data structures.\nBecause of the nature of LMDB, the data returned by `txn.getStringUnsafe()` and `txn.getBinaryUnsafe()` is only valid until the next `put` operation or the end of the transaction. Safer methods `txn.getBinary()` and `txn.getString()` will be garbage collected when there are no references to it.\n\n**IMPORTANT:** always close your transactions with `abort()` or `commit()` when you are done with them.\n\n```javascript\nvar txn = env.beginTxn();\nvar value = txn.getString(dbi, 1);\n\nconsole.log(value);\n\nif (value === null) {\n    txn.putString(dbi, 1, \"Hello world!\");\n}\nelse {\n    txn.del(dbi, 1);\n}\n\ntxn.putString(dbi, 2, \"Yes, it's this simple!\");\ntxn.commit();\n```\n\n### Basic concepts\n\nLMDB has four different entities:\n\n* `Env` represents a full database environment. The same environment can be used by multiple processes, but a particular `Env` object **must** be used by one process only. You can operate with the same environment from multiple threads.\n* `Dbi` represents a sub-database which belongs to a database environment. The same environment can contain either multiple named databases (if you specify a string name) or an unnamed database (if you specify `null` instead of a name).\n* `Txn` represents a transaction. Multiple threads can open transactions for the same `Env`, but a particular `Txn` object **must** only be accessed by one thread, and only one `Txn` object can be used on a thread at a time. (NOTE: The `noTls` option in the environment will change this behaviour for *read-only* transactions, so that a thread can then create any number of *read-only* transactions and any number of threads can access the same *read-only* transaction.) Note that **only one** *write* transaction can be open in an environment in any given time. `env.beginTxn()` will simply block until the previous one is either `commit()`ted or `abort()`ed.\n* `Cursor` objects can be used to iterate through multiple keys in the same database.\n\nHere is how you use LMDB in a typical scenario:\n\n* You create an `Env` and `open()` it with the desired configuration options.\n* You open a `Dbi` by calling `env.openDbi()` and passing the database configuration options.\n* Now you can create `Txn`s with `env.beginTxn()` and operate on the database through a transaction by calling `txn.getString()`, `txn.putString()` etc.\n* When you are done, you should either `abort()` or `commit()` your transactions and `close()` your databases and environment.\n\n### Examples\n\nYou can find some in the source tree. There are some basic examples and I intend to create some advanced ones too.\n\nThe basic examples we currently have:\n\n* `examples/1-env.js` - shows basic usage of `Env`, `Dbi` and `Txn` operating on string values\n* `examples/2-datatypes.js` - shows how to use various data types for your data\n* `examples/3-multiple-transactions.js` - shows how LMDB will behave if you operate with multiple transactions\n* `examples/4-cursors.js` - shows how to work with cursors on a basic database\n* `examples/5-dupsort.js` - shows how to use a `dupSort` database with cursors\n* `examples/6-asyncio.js` - shows how to use the fastest (but also most dangerous) way for async IO\n* `examples/7-largedb.js` - shows how to work with an insanely large database\n* `examples/8-multiple-cursors-single-transactions.js` - shows how to use multiple cursors with a single transaction\n* `examples/9-unnamed-db.js` - shows how to use an unnamed database\n\nAdvanced examples:\n\n* `examples/advanced1-indexing.js` - this is a module pattern example which demonstrates the implementation of a search engine prototype\n* *More will come later, so don't forget to check back!*\n\n### Limitations of node-lmdb\n\n* **Only string, binary, number and boolean values are supported.** If you want to store complex data structures, use `JSON.stringify` before putting it into the database and `JSON.parse` when you retrieve the data.\n* **Only string and unsigned integer keys are supported.** Default is string, specify `keyIsUint32: true` to `openDbi` for unsigned integer. It would make the API too complicated to support more data types for keys.\n* Because of the nature of LMDB, the data returned by `txn.getStringUnsafe()` and `txn.getBinaryUnsafe()` is **only valid until the next `put` operation or the end of the transaction**. If you need to use the data *later*, you can use the `txn.getBinary()` and `txn.getString()` methods.\n* Fixed address map (called `MDB_FIXEDMAP` in C) features are **not exposed** by this binding because they are highly experimental\n* Not all functions are wrapped by the binding yet. If there's one that you would like to see, drop me a line.\n\nContributing\n------------\n\nIf you find problems with this module, open an issue on GitHub.\nAlso feel free to send me pull requests. Contributions are more than welcome! :)\n\n### Building the module\n\nLMDB is bundled in `node-lmdb` so you can simply build this module using `node-gyp`.\n\n```bash\n# Install node-gyp globally (needs admin permissions)\nnpm -g install node-gyp\n\n# Clone node-lmdb\ngit clone git@github.com:Venemo/node-lmdb.git\n\n# Build\ncd node-lmdb\nnode-gyp configure\nnode-gyp build\n```\n\n### Managing the LMDB dependency\n\n```bash\n# Adding upstream LMDB as remote\ngit remote add lmdb https://github.com/LMDB/lmdb.git\n# Fetch new remote\ngit fetch lmdb\n# Adding the subtree (when it's not there yet)\ngit subtree add  --prefix=dependencies/lmdb lmdb HEAD --squash\n# Updating the subtree (when already added)\ngit subtree pull --prefix=dependencies/lmdb lmdb HEAD --squash\n```\n\n### Developer FAQ\n\n#### How fast is this stuff?\n\nLMDB is one of the fastest databases on the planet, because it's **in-process** and **zero-copy**, which means it runs within your app, and not somewhere else,\nso it doesn't push your data through sockets and can retrieve your data without copying it in memory.\n\nWe don't have any benchmarks for node-lmdb but you can enjoy a detailed benchmark of LMDB here: http://symas.com/mdb/microbench/\nobviously, the V8 wrapper will have some negative impact on performance, but I wouldn't expect a significant difference.\n\n#### Why is the code so ugly?\n\nUnfortunately, writing C++ addons to Node.js (and V8) requires a special pattern (as described in their docs) which most developers might find ugly.\nFortunately, we've done this work for you so you can enjoy LMDB without the need to code C++.\n\n#### How does this module work?\n\nIt glues together LMDB and Node.js with a native Node.js addon that wraps the LMDB C API.\n\nZero-copy is implemented for string and binary values via a V8 custom external string resource and the Node.js Buffer class.\n\n#### How did you do it?\n\nThese are the places I got my knowledge when developing node-lmdb:\n\n* V8 reference documentation: http://bespin.cz/~ondras/html/\n* Node.js C++ addons documentation: http://nodejs.org/api/addons.html\n* LMDB documentation: http://symas.com/mdb/doc/\n","created":"2016-10-27T11:59:42.696Z","modified":"2016-10-27T11:59:42.696Z","lastPublisher":{"name":"unbornchikken","email":"gabor.mezo@outlook.com"},"owners":[{"name":"unbornchikken","email":"gabor.mezo@outlook.com"}],"other":{"_attachments":{},"_from":".","_id":"gs-node-lmdb","_nodeVersion":"4.2.4","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/gs-node-lmdb-0.7.8.tgz_1477569580250_0.29657274461351335"},"_npmUser":{"name":"unbornchikken","email":"gabor.mezo@outlook.com"},"_npmVersion":"3.10.5","_rev":"1-371c4be3830813ba2dbf5cb8f7e41923","_shasum":"63cc41f4f38d44e6d579adef5c3fb94209212c03","author":{"name":"Timur Kristóf","email":"venemo@fedoraproject.org"},"bugs":{"url":"https://github.com/Venemo/node-lmdb/issues"},"contributors":[{"name":"Timur Kristóf","email":"venemo@fedoraproject.org"},{"name":"Erich Ocean","email":"erich@xygroup.co"},{"name":"Braydon Fuller","email":"courier@braydon.com"},{"name":"Gabor Mezo","email":"gmezo@graphisoft.com"}],"directories":{},"dist-tags":{"latest":"0.7.8"},"dist":{"shasum":"63cc41f4f38d44e6d579adef5c3fb94209212c03","tarball":"http://registry.npmjs.org/gs-node-lmdb/-/gs-node-lmdb-0.7.8.tgz"},"maintainers":[{"name":"unbornchikken","email":"gabor.mezo@outlook.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-27T11:59:42.696Z","created":"2016-10-27T11:59:42.696Z","0.7.8":"2016-10-27T11:59:42.696Z"}}}