{"name":"linux-device","version":"1.0.18","description":"Native addon to communicate with linux devices (can also be used for sockets or FIFOs)","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","install":"node-gyp rebuild"},"repository":"https://github.com/athombv/node-linux-device","keywords":["ioctl","fs","dev","device","read","write","event","async","non-blocking"],"license":"ISC","gypfile":true,"bin":{"linux-device":"./bin/remote-device-server"},"homepage":"https://github.com/athombv/node-linux-device#readme","dependencies":{"bindings":"^1.2.1","nan":"^2.1.0","node-gyp":"^3.2.1","socket.io":"1.7.2","socket.io-client":"1.7.2"},"gitHead":"57fbf0530cb9ac9fce8ed83c2b877a88f0aae137","versions":[{"number":"1.0.0","date":"2015-12-03T22:27:12.342Z"},{"number":"1.0.1","date":"2015-12-03T22:31:42.767Z"},{"number":"1.0.2","date":"2015-12-03T22:57:48.755Z"},{"number":"1.0.3","date":"2015-12-15T22:48:05.904Z"},{"number":"1.0.4","date":"2016-07-12T12:16:13.820Z"},{"number":"1.0.5","date":"2016-07-18T19:38:44.294Z"},{"number":"1.0.6","date":"2016-07-25T13:14:22.649Z"},{"number":"1.0.7","date":"2016-07-26T18:33:23.897Z"},{"number":"1.0.8","date":"2016-10-24T15:35:37.701Z"},{"number":"1.0.9","date":"2017-01-18T11:36:04.922Z"},{"number":"1.0.10","date":"2017-01-18T15:06:59.526Z"},{"number":"1.0.11","date":"2017-01-19T13:39:31.575Z"},{"number":"1.0.12","date":"2017-01-19T16:07:18.407Z"},{"number":"1.0.13","date":"2017-04-03T16:15:17.611Z"},{"number":"1.0.15","date":"2017-06-20T14:36:06.465Z"},{"number":"1.0.16","date":"2017-06-20T14:37:43.719Z"},{"number":"1.0.17","date":"2017-07-12T11:58:56.304Z"},{"number":"1.0.18","date":"2017-07-24T15:56:41.240Z"}],"readme":"# node-linux-device\nNative addon to communicate with linux devices (can also be used for sockets or FIFOs). \nAll read and write operations are done in separate threads, resulting in higher performance compared to NodeJS filesystem functions\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install linux-device\n```\n\nAPI\n--------\n\n**new DeviceHandle(String path, Boolean enableWrite, Number objectSize, [Number minimalObjectSize,] Function callback(Error err, Buffer data) )**\n\nCreates a new DeviceHandle instance.\n\n - `Path` A path to a file or device\n - `enableWrite` True if file should be opened in write mode\n - `objectSize` Maximal size in bytes for each callback event\n - `minimalObjectSize` Minimal size in bytes for each callback event (defaults to ObjectSize)\n - `callback(Error err, Buffer data)` Callback function that is invoked whenever data of `objectSize` is available.\n\n**DeviceHandle.write(Buffer data [, Object opts], Function callback(Error err) )**\n\nWrites data to the device or file.\n\n- `data` A buffer containing the data to write (append)\n- `opts` [optional] An object containing write options. Supported values are `repetitions` and `interval`\n- `callback(Error err)` Callback function containing an optional error while writing.\n\n**DeviceHandle.ioctl(Number direction, Number type, Number cmd [, Buffer buffer])**\n\nPerforms an `ioctl` on the open device. Linux only.\n\n- `direction` Either `DeviceHandle.IOCTL_READ`, `DeviceHandle.IOCTL_WRITE`, `DeviceHandle.IOCTL_RW` or `DeviceHandle.IOCTL_NONE`\n- `type` The type of the ioctl\n- `cmd` The command number of the ioctl\n- `buffer` [optional] A buffer containing in and/or output of the ioctl\n\n**DeviceHandle.ioctl_raw(Number cmd [, Buffer buffer])**\n\nPerforms a raw `ioctl` on the open device. Usage is discouraged. Linux only.\n\n- `cmd` The command number of the ioctl, including direction, type and cmd\n- `buffer` [optional] A buffer containing in and/or output of the ioctl\n\n**DeviceHandle.close([Function callback()])**\n\nCloses the current device and invoke callback when the device is closed.\n\n- `callback()` [optional] A callback function\n\nExamples\n--------\n\n\n```\nvar DeviceHandle = require('linux-device');\n\nvar LIRC_IOCTL_TYPE = \"i\".charCodeAt(0);\nvar LIRC_IOCTL_SET_SEND_CARRIER = 0x13;\nvar LIRC_INTERVAL_SIZE = 4;\n\n//Open device\nvar device = new DeviceHandle('/dev/lirc0', true, LIRC_INTERVAL_SIZE, function(err, data) {\n\tif(err) return console.log(\"ERROR:\", err);\n\tconsole.log(\"received interval:\", data.readUInt32LE(0).toString(16));\n});\n\n//Sets the IR carrier frequency\nfunction setCarrier(carrier) {\n\tvar buffer = new Buffer(4);\n\tbuffer.writeUInt32LE(carrier, 0);\n\ttry {\n\t\tdevice.ioctl(DeviceHandle.IOCTL_WRITE, \n\t\t\t\tLIRC_IOCTL_TYPE, LIRC_IOCTL_SET_SEND_CARRIER, buffer);\n\t} catch(e) {\n\t\tconsole.log(\"An error occurred while performing lirc ioctl:\", e);\n\t}\n}\n\n//Transmits IR data through LIRC\nfunction writeLircData(data, callback) {\n\tif(!(data instanceof Buffer)) {\n\t\tthrow new Error(\"data must be an instance of Buffer\");\n\t}\n\tvar buffer = new Buffer(data.length*LIRC_INTERVAL_SIZE);\n\tdata.forEach(function(interval, i) {\n\t\tbuffer.writeUInt32LE(interval, i*LIRC_INTERVAL_SIZE);\n\t}\n\tdevice.write(data, callback);\n}\n\n//set the IR carrier frequency\nsetCarrier(38000);\n\n//Transmit an IR beam every 2 seconds\nvar interval = setInterval(function() {\n\twriteLircData([100,200,100,200,100], function() {\n\t\tconsole.log(\"IR beam transmitted!\");\n\t});\n}, 2000);\n\n//close the device after 20 seconds\nsetTimeout(function() {\n\tclearInterval(interval);\n\tconsole.log(\"Closing device...\");\n\tdevice.close(function() {\n\t\tconsole.log(\"Device closed!\");\n\t});\n}, 20000);\n\n```","created":"2015-12-03T22:27:12.342Z","modified":"2017-07-24T15:56:41.240Z","lastPublisher":{"name":"jeroenvollenbrock","email":"jeroen@athom.com"},"owners":[{"name":"jeroenvollenbrock","email":"jeroen@athom.com"}],"other":{"_attachments":{},"_id":"linux-device","_nodeVersion":"8.1.3","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/linux-device-1.0.18.tgz_1500911800239_0.6465776832774282"},"_npmUser":{"name":"jeroenvollenbrock","email":"jeroen@athom.com"},"_npmVersion":"5.1.0","_rev":"11-1876c86ecc23efab774aa1c12665fd26","author":{"name":"Jeroen Vollenbrock","email":"jeroen@athom.com"},"bugs":{"url":"https://github.com/athombv/node-linux-device/issues"},"directories":{},"dist-tags":{"latest":"1.0.18"},"dist":{"integrity":"sha512-kt/ToVn9kipXGR/vl4HE40LiHVVd1B4E0N2Br3q4xE7P+DAgcU8O/j02xvxrl24ivGIJEucEcG8tgu7GzegWbg==","shasum":"7623cede104ba9d7ccb459197400372e4bc11b4c","tarball":"https://registry.npmjs.org/linux-device/-/linux-device-1.0.18.tgz"},"maintainers":[{"name":"jeroenvollenbrock","email":"jeroen@athom.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-24T15:56:41.240Z","created":"2015-12-03T22:27:12.342Z","1.0.0":"2015-12-03T22:27:12.342Z","1.0.1":"2015-12-03T22:31:42.767Z","1.0.2":"2015-12-03T22:57:48.755Z","1.0.3":"2015-12-15T22:48:05.904Z","1.0.4":"2016-07-12T12:16:13.820Z","1.0.5":"2016-07-18T19:38:44.294Z","1.0.6":"2016-07-25T13:14:22.649Z","1.0.7":"2016-07-26T18:33:23.897Z","1.0.8":"2016-10-24T15:35:37.701Z","1.0.9":"2017-01-18T11:36:04.922Z","1.0.10":"2017-01-18T15:06:59.526Z","1.0.11":"2017-01-19T13:39:31.575Z","1.0.12":"2017-01-19T16:07:18.407Z","1.0.13":"2017-04-03T16:15:17.611Z","1.0.15":"2017-06-20T14:36:06.465Z","1.0.16":"2017-06-20T14:37:43.719Z","1.0.17":"2017-07-12T11:58:56.304Z","1.0.18":"2017-07-24T15:56:41.240Z"}}}