{"name":"marker-index","version":"4.0.1","description":"A data structure to track logical text annotations.","main":"dist/native/marker-index.js","scripts":{"test":"npm run standard && node_modules/.bin/mocha ./test/helpers/setup  test/marker-index.test.js","tdd":"npm run standard && node_modules/.bin/electron-mocha --renderer --interactive --recursive ./test/helpers/setup  test/marker-index.test.js","profile":"npm run standard && node_modules/.bin/electron-mocha --renderer --interactive --recursive ./test/helpers/setup  test/marker-index.profile.js","benchmark":"npm run standard && node test/marker-index.benchmark.js","prepublish":"npm run standard && npm run clean && npm run build","standard":"standard --recursive src test","build":"babel src --out-dir dist","clean":"rm -rf dist","install":"node-gyp rebuild"},"repository":"https://github.com/atom/marker-index","keywords":["patch data-structure"],"license":"MIT","homepage":"https://github.com/atom/marker-index","devDependencies":{"babel":"^5.0.0","babel-eslint":"^4.0.5","chai":"^2.0.0","electron-mocha":"git://github.com/nathansobo/electron-mocha.git#interactive-option","electron-prebuilt":"^0.30.1","mocha":"^2.1.0","standard":"^4.5.4"},"dependencies":{"nan":"^2.1.0","random-seed":"^0.2.0"},"standard":{"parser":"babel-eslint","global":["describe","it","assert"]},"gypfile":true,"gitHead":"2e8971238b70f74c77944fe2a4d49c195ff67d4c","versions":[{"number":"1.0.0","date":"2015-09-25T03:52:54.379Z"},{"number":"1.0.1","date":"2015-09-25T03:57:28.917Z"},{"number":"1.0.2","date":"2015-09-25T15:19:44.623Z"},{"number":"1.0.3","date":"2015-09-25T17:56:32.001Z"},{"number":"2.0.0","date":"2015-10-22T22:51:55.687Z"},{"number":"2.1.0","date":"2015-11-03T19:28:38.530Z"},{"number":"2.1.1","date":"2015-11-16T07:33:33.819Z"},{"number":"3.0.0","date":"2015-11-20T02:54:26.710Z"},{"number":"3.0.1","date":"2015-11-20T03:05:09.940Z"},{"number":"3.0.2","date":"2015-11-20T05:48:59.622Z"},{"number":"3.0.3","date":"2015-11-23T18:30:29.492Z"},{"number":"3.0.4","date":"2015-11-24T13:39:57.910Z"},{"number":"3.1.0-0","date":"2015-12-16T22:40:41.363Z"},{"number":"3.1.0-1","date":"2015-12-16T23:03:33.205Z"},{"number":"3.1.0","date":"2015-12-17T03:52:39.188Z"},{"number":"4.0.0","date":"2016-04-13T11:47:31.698Z"},{"number":"4.0.1","date":"2016-08-24T22:24:03.723Z"}],"readme":"# marker-index\n\nThis module is used by Atom to efficiently track logical locations in a text buffer as the contents of the buffer are changed.\n\n## Example\n\n```js\nimport MarkerIndex from 'marker-index'\n\nlet index = new MarkerIndex\n\n// associate a marker id with two ordered start and end points\nindex.insert(1, {row: 2, column: 5}, {row: 4, column: 10})\n// splice represents a change to the text file\n// you pass it a starting point, then points representing the old and new extent\nindex.splice({row: 3, column: 5}, {row: 0, column: 0}, {row: 1, column: 0})\n// the marker's end point was updated by the splice\nindex.getEnd(1) // => {row: 5, column: 10}\n```\n\n## `MarkerIndex` API\n\n### `insert (id, start, end)`\n\nAssociates the given non-negative integer with a range represented by two `{row: number, column: number}` objects.\n\n### `splice (start, oldExtent, newExtent)`\n\nUpdate the locations of all markers based on the description of a change to the text. The range of the replaced text is described by *traversing* from `start` by `oldExtent`. The range of the new text is described by *traversing* from `start` to `newExtent`.\n\n*Traversal* means that beginning with the `start` location, we arrive at a new location by performing X line feeds and carriage returns and then walk forward Y columns, where X is the `row` of the given traversal extent and Y is its `column`. So basically `start`, `oldExtent`, and `newExtent` describe two ranges in the file, basically the spatial before and after effects of a change.\n\nThis method returns an object that describes what markers were *invalidated* by the change based on various invalidation strategies. If a marker is in a set for a given strategy, it was invalidated according to that strategy. The strategies are as follows:\n\n* `touch` Contains markers that the change touched in any way.\n* `inside` Contains markers that the change touched, but not markers with endpoints immediately adjacent to the change.\n* `overlap` Contains markers that had one or both of their endpoints surrounded by the change.\n* `surround` Contains markers that had both endpoints surrounded by the change.\n\n### `setExclusive (markerId, boolean)`\n\nThis method allows to control the behavior of a marker when splices start and/or end at the marker's endpoints.\n\nBy default, we consider markers to be *inclusive*: that is, splices exactly at the beginning of the marked range will be considered to begin inside the marker (meaning that the marker's start position **will not** move), and splices exactly at the end of the marked range will be considered to end inside the marker (meaning that the marker's end position **will** move). \n\n*Exclusive* markers, on the other hand, exhibit a slightly different behavior: in fact, splices exactly at the beginning of the marked range will be considered to begin outside the marker (meaning that the marker's start position **will** move), and splices exactly at the end of the marked range will be considered to end outside the marker (meaning that the marker's end position **will not** move).\n\nPlease note that, independently of whether a marker is inclusive or exclusive, its end **will always** be moved when its start gets moved as a result of a splice.\n\n### `isExclusive (markerId)`\n\nReturns whether the given marker id has been set to behave exclusively via `setExclusive`.\n\n### `delete (markerId)`\n\nRemoves the specified marker from the index.\n\n### `getRange (markerId)`\n\nReturns the range for the given marker id, in the form of an object with `start` and `end` points.\n\n### `getStart (markerId)`\n\nReturns a `{row: number, column: number}` object representing the start of the specified marker.\n\n### `getEnd (markerId)`\n\nReturns a `{row: number, column: number}` object representing the end of the specified marker.\n\n### `dump ()`\n\nReturns the current location of every marker in the index, represented as an object mapping marker ids to range objects. For example:\n\n```js\n{\n  '1': {start: {row: 2, column: 5}, end: {row: 5, column: 10}},\n  '2': {start: {row: 4, column: 10}, end: {row: 6, column: 3}}\n}\n```\n\n### `findIntersecting (start, end = start)`\n\nReturns a set with the ids of all markers intersecting the specified point range.\n\n### `findContaining (start, end = start)`\n\nReturns a set with the ids of all markers intersecting the specified point range.\n\n### `findContainedIn (start, end)`\n\nReturns a set with the ids of all markers contained in the specified point range.\n\n### `findStartingIn (start, end)`\n\nReturns a set with the ids of all markers starting in the specified point range.\n\n### `findEndingIn (start, end)`\n\nReturns a set with the ids of all markers ending in the specified point range.\n\n### `findStartingAt (position)`\n\nReturns a set with the ids of all markers starting at the specified point.\n\n### `findEndingAt (position)`\n\nReturns a set with the ids of all markers ending at the specified point.\n","created":"2015-09-25T03:52:54.379Z","modified":"2017-05-22T16:35:34.806Z","lastPublisher":{"name":"maxbrunsfeld","email":"maxbrunsfeld@gmail.com"},"owners":[{"email":"atom@github.com","name":"atom-team"},{"email":"as-cii@github.com","name":"as-cii"},{"email":"maxbrunsfeld@gmail.com","name":"maxbrunsfeld"},{"email":"nathan@github.com","name":"nathansobo"}],"other":{"_attachments":{},"_from":".","_id":"marker-index","_nodeVersion":"5.12.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/marker-index-4.0.1.tgz_1472077443485_0.025103125721216202"},"_npmUser":{"name":"maxbrunsfeld","email":"maxbrunsfeld@gmail.com"},"_npmVersion":"3.8.6","_rev":"2-68f59e8b4643db42d3b89c61b2b71b95","_shasum":"d147ef42fc29f226297de96ba044d818d1285495","author":{"name":"Nathan Sobo","email":"nathan@github.com"},"bugs":{"url":"https://github.com/atom/marker-index/issues"},"directories":{},"dist-tags":{"latest":"4.0.1"},"dist":{"shasum":"d147ef42fc29f226297de96ba044d818d1285495","tarball":"http://registry.npmjs.org/marker-index/-/marker-index-4.0.1.tgz"},"maintainers":[{"email":"atom@github.com","name":"atom-team"},{"email":"as-cii@github.com","name":"as-cii"},{"email":"maxbrunsfeld@gmail.com","name":"maxbrunsfeld"},{"email":"nathan@github.com","name":"nathansobo"}],"readmeFilename":"README.md","time":{"modified":"2017-05-22T16:35:34.806Z","created":"2015-09-25T03:52:54.379Z","1.0.0":"2015-09-25T03:52:54.379Z","1.0.1":"2015-09-25T03:57:28.917Z","1.0.2":"2015-09-25T15:19:44.623Z","1.0.3":"2015-09-25T17:56:32.001Z","2.0.0":"2015-10-22T22:51:55.687Z","2.1.0":"2015-11-03T19:28:38.530Z","2.1.1":"2015-11-16T07:33:33.819Z","3.0.0":"2015-11-20T02:54:26.710Z","3.0.1":"2015-11-20T03:05:09.940Z","3.0.2":"2015-11-20T05:48:59.622Z","3.0.3":"2015-11-23T18:30:29.492Z","3.0.4":"2015-11-24T13:39:57.910Z","3.1.0-0":"2015-12-16T22:40:41.363Z","3.1.0-1":"2015-12-16T23:03:33.205Z","3.1.0":"2015-12-17T03:52:39.188Z","4.0.0":"2016-04-13T11:47:31.698Z","4.0.1":"2016-08-24T22:24:03.723Z"}}}