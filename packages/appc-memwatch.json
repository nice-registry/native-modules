{"name":"appc-memwatch","description":"Keep an eye on your memory usage, and discover and isolate leaks.","version":"0.3.3","engines":{"node":">= 0.8.0"},"repository":"https://github.com/appcelerator/appc-memwatch","main":"include.js","gypfile":true,"license":"WTFPL","licenses":[{"type":"wtfpl"}],"scripts":{"test":"mocha tests --reporter spec","install":"node-gyp rebuild"},"os":["!win32"],"devDependencies":{"mocha":"^2.3.2","should":"^7.1.0"},"dependencies":{"bindings":"^1.2.1","nan":"^2.0.9"},"gitHead":"4a68490d9ad20bf1e9ce0763324c2bc27e5fb33d","homepage":"https://github.com/appcelerator/appc-memwatch","versions":[{"number":"0.2.7","date":"2015-08-10T19:22:47.077Z"},{"number":"0.2.8","date":"2015-08-10T21:05:19.681Z"},{"number":"0.2.9","date":"2015-08-10T21:27:05.263Z"},{"number":"0.2.10","date":"2015-08-10T21:40:42.052Z"},{"number":"0.2.11","date":"2015-08-10T21:44:46.685Z"},{"number":"0.3.0","date":"2015-09-09T07:38:19.042Z"},{"number":"0.3.1","date":"2015-09-09T07:39:13.265Z"},{"number":"0.3.2","date":"2015-09-09T07:55:38.139Z"},{"number":"0.3.3","date":"2015-09-17T15:45:27.743Z"}],"readme":"Leak Detection and Heap Diffing for Node.JS [![Build Status](https://travis-ci.org/appcelerator/appc-memwatch.svg)](https://travis-ci.org/appcelerator/appc-memwatch)\n============================================================\n\n\t> This is a fork of memwatch which has been re-written to work with NAN 2.0 and Node 4.0+\n\tby [Jeff Haynie](http://github.com/jhaynie). All changes retain their same copyright.\n\n`appc-memwatch` is here to help you detect and find memory leaks in\nNode.JS code.  It provides:\n\n- A `leak` event, emitted when it appears your code is leaking memory.\n\n- A `stats` event, emitted occasionally, giving you\n  data describing your heap usage and trends over time.\n\n- A `HeapDiff` class that lets you compare the state of your heap between\n  two points in time, telling you what has been allocated, and what\n  has been released.\n\n\nInstallation\n------------\n\n- `npm install appc-memwatch`\n\nor\n\n- `git clone git://github.com/appcelerator/appc-memwatch.git`\n\n\nDescription\n-----------\n\nThere are a growing number of tools for debugging and profiling memory\nusage in Node.JS applications, but there is still a need for a\nplatform-independent native module that requires no special\ninstrumentation.  This module attempts to satisfy that need.\n\nTo get started, import `appc-memwatch` like so:\n\n```javascript\nvar memwatch = require('appc-memwatch');\n```\n\n### Leak Detection\n\nYou can then subscribe to `leak` events.  A `leak` event will be\nemitted when your heap usage has increased for five consecutive\ngarbage collections:\n\n```javascript\nmemwatch.on('leak', function(info) { ... });\n```\n\nThe `info` object will look something like:\n\n```javascript\n{ start: Fri, 29 Jun 2012 14:12:13 GMT,\n  end: Fri, 29 Jun 2012 14:12:33 GMT,\n  growth: 67984,\n  reason: 'heap growth over 5 consecutive GCs (20s) - 11.67 mb/hr' }\n```\n\n\n### Heap Usage\n\nThe best way to evaluate your memory footprint is to look at heap\nusage right aver V8 performs garbage collection.  `memwatch` does\nexactly this - it checks heap usage only after GC to give you a stable\nbaseline of your actual memory usage.\n\nWhen V8 performs a garbage collection (technically, we're talking\nabout a full GC with heap compaction), `memwatch` will emit a `stats`\nevent.\n\n```javascript\nmemwatch.on('stats', function(stats) { ... });\n```\n\nThe `stats` data will look something like this:\n\n```javascript\n{\n  \"num_full_gc\": 17,\n  \"num_inc_gc\": 8,\n  \"heap_compactions\": 8,\n  \"estimated_base\": 2592568,\n  \"current_base\": 2592568,\n  \"min\": 2499912,\n  \"max\": 2592568,\n  \"usage_trend\": 0\n}\n```\n\n`estimated_base` and `usage_trend` are tracked over time.  If usage\ntrend is consistently positive, it indicates that your base heap size\nis continuously growing and you might have a leak.\n\nV8 has its own idea of when it's best to perform a GC, and under a\nheavy load, it may defer this action for some time.  To aid in\nspeedier debugging, `memwatch` provides a `gc()` method to force V8 to\ndo a full GC and heap compaction.\n\n\n### Heap Diffing\n\nSo far we have seen how `memwatch` can aid in leak detection.  For\nleak isolation, it provides a `HeapDiff` class that takes two snapshots\nand computes a diff between them.  For example:\n\n```javascript\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\n\n// do some things ...\n\n// Take the second snapshot and compute the diff\nvar diff = hd.end();\n```\n\nThe contents of `diff` will look something like:\n\n```javascript\n{\n  \"before\": { \"nodes\": 11625, \"size_bytes\": 1869904, \"size\": \"1.78 mb\" },\n  \"after\":  { \"nodes\": 21435, \"size_bytes\": 2119136, \"size\": \"2.02 mb\" },\n  \"change\": { \"size_bytes\": 249232, \"size\": \"243.39 kb\", \"freed_nodes\": 197,\n    \"allocated_nodes\": 10007,\n    \"details\": [\n      { \"what\": \"String\",\n        \"size_bytes\": -2120,  \"size\": \"-2.07 kb\",  \"+\": 3,    \"-\": 62\n      },\n      { \"what\": \"Array\",\n        \"size_bytes\": 66687,  \"size\": \"65.13 kb\",  \"+\": 4,    \"-\": 78\n      },\n      { \"what\": \"LeakingClass\",\n        \"size_bytes\": 239952, \"size\": \"234.33 kb\", \"+\": 9998, \"-\": 0\n      }\n    ]\n  }\n```\n\nThe diff shows that during the sample period, the total number of\nallocated `String` and `Array` classes decreased, but `Leaking Class`\ngrew by 9998 allocations.  Hmmm.\n\nYou can use `HeapDiff` in your `on('stats')` callback; even though it\ntakes a memory snapshot, which triggers a V8 GC, it will not trigger\nthe `stats` event itself.  Because that would be silly.\n\n\nFuture Work\n-----------\n\nPlease see the Issues to share suggestions and contribute!\n\n\nLicense\n-------\n\nhttp://wtfpl.org\n","created":"2015-08-10T19:22:47.077Z","modified":"2015-09-17T15:45:27.743Z","lastPublisher":{"name":"jhaynie","email":"jhaynie@appcelerator.com"},"owners":[{"name":"jhaynie","email":"jhaynie@appcelerator.com"}],"other":{"_attachments":{},"_from":".","_id":"appc-memwatch","_nodeVersion":"0.12.7","_npmUser":{"name":"jhaynie","email":"jhaynie@appcelerator.com"},"_npmVersion":"2.11.3","_rev":"1-6c7e9b9babf53962b96b0bab1a4b501b","_shasum":"d80ef0cff7a3746807c5162fca802eb257c4556d","author":{"name":"Lloyd Hilaiel","url":"http://lloyd.io"},"bugs":{"url":"https://github.com/appcelerator/appc-memwatch/issues"},"contributors":[{"name":"Jed Parsons","url":"@jedp"},{"name":"Jeff Haynie","url":"@jhaynie"},{"name":"Justin Matthews","url":"@jmatthewsr-ms"}],"directories":{},"dist-tags":{"latest":"0.3.3"},"dist":{"shasum":"d80ef0cff7a3746807c5162fca802eb257c4556d","tarball":"http://registry.npmjs.org/appc-memwatch/-/appc-memwatch-0.3.3.tgz"},"maintainers":[{"name":"jhaynie","email":"jhaynie@appcelerator.com"}],"readmeFilename":"README.md","time":{"modified":"2015-09-17T15:45:27.743Z","created":"2015-08-10T19:22:47.077Z","0.2.7":"2015-08-10T19:22:47.077Z","0.2.8":"2015-08-10T21:05:19.681Z","0.2.9":"2015-08-10T21:27:05.263Z","0.2.10":"2015-08-10T21:40:42.052Z","0.2.11":"2015-08-10T21:44:46.685Z","0.3.0":"2015-09-09T07:38:19.042Z","0.3.1":"2015-09-09T07:39:13.265Z","0.3.2":"2015-09-09T07:55:38.139Z","0.3.3":"2015-09-17T15:45:27.743Z"}}}