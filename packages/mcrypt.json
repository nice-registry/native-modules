{"name":"mcrypt","version":"0.1.12","description":"MCrypt bindings","keywords":["mcrypt","crypto"],"homepage":"https://github.com/tugrul/node-mcrypt","license":"MIT","repository":"https://github.com/tugrul/node-mcrypt","scripts":{"test":"mocha","install":"node-gyp rebuild --release"},"engines":{"node":">=0.10.16"},"dependencies":{"nan":"^2.3.3"},"devDependencies":{"mocha":"^2.3.3","node-gyp":"*"},"main":"./build/Release/mcrypt","gitHead":"24c3764a6a4a1753fd16b182a5e38cc54ccf63df","versions":[{"number":"0.0.1","date":"2013-09-20T03:50:19.392Z"},{"number":"0.0.2","date":"2013-09-20T03:52:46.122Z"},{"number":"0.0.3","date":"2013-09-22T23:20:52.145Z"},{"number":"0.0.4","date":"2013-10-10T20:22:51.874Z"},{"number":"0.0.5","date":"2013-12-26T22:43:47.361Z"},{"number":"0.0.6","date":"2014-01-10T11:53:05.830Z"},{"number":"0.0.7","date":"2014-04-20T16:43:52.834Z"},{"number":"0.0.8","date":"2015-01-18T17:06:16.713Z"},{"number":"0.0.9","date":"2015-01-18T18:32:01.846Z"},{"number":"0.0.10","date":"2015-01-21T15:33:51.453Z"},{"number":"0.0.11","date":"2015-01-31T14:29:46.253Z"},{"number":"0.0.12","date":"2015-02-28T19:47:05.488Z"},{"number":"0.0.13","date":"2015-03-01T22:36:25.845Z"},{"number":"0.0.14","date":"2015-07-20T11:57:15.465Z"},{"number":"0.0.15","date":"2015-08-01T11:50:22.821Z"},{"number":"0.1.1","date":"2015-08-17T12:11:51.640Z"},{"number":"0.1.2","date":"2015-08-17T14:48:22.994Z"},{"number":"0.1.3","date":"2015-09-17T11:32:26.361Z"},{"number":"0.1.4","date":"2015-11-06T01:18:28.119Z"},{"number":"0.1.5","date":"2015-11-06T11:59:12.200Z"},{"number":"0.1.6","date":"2015-11-10T14:02:51.881Z"},{"number":"0.1.7","date":"2015-11-11T00:13:25.465Z"},{"number":"0.1.8","date":"2015-11-15T13:47:52.548Z"},{"number":"0.1.9","date":"2015-11-19T12:28:14.958Z"},{"number":"0.1.10","date":"2016-01-26T12:03:57.060Z"},{"number":"0.1.11","date":"2016-05-27T17:01:00.772Z"},{"number":"0.1.12","date":"2016-11-30T09:39:45.269Z"}],"readme":"# node-mcrypt [![Build Status](https://travis-ci.org/tugrul/node-mcrypt.svg)](https://travis-ci.org/tugrul/node-mcrypt)\n\nMCrypt bindings for Node.js\n\n## Install\n\n```\nnpm install mcrypt\n```\n\n## Introduction\n\nAlright! There is already OpenSSL extension bundled with Node.js but there are something wrong with some traditional encryption algorithms on OpenSSL.\n\nI tried to decrypt ciphertext of AES and DES algorithms using OpenSSL but i get the garbage outputs. There are some reasons with OpenSSL like null padding.\n\nAlso i saw same issues on the stackoverflow.com. Some people encountered with same problems.\n\nThis extension provide the cipher and decipher operations via `libmcrypt` and compatible with Java Crypto and PHP MCrypt consequently.\n\nYou should start with import the package like\n\n```javascript\nvar mcrypt = require('mcrypt');\n```\n\nThere are 3 exposed common functions in the package. These functions are `getAlgorithmNames()`, `getModeNames()` and `MCrypt()` constructor function. Also there are some functions under the prototype of `MCrypt()` constructor function.\n\n### getAlgorithmNames() : Array\n\n`getAlgorithmNames()` returns an array that contains available algorithm names.\n\n```javascript\nvar mcrypt = require('mcrypt');\n\nvar algos = mcrypt.getAlgorithmNames();\nconsole.log(algos);\n```\n\nExpected result like that\n\n```\n[ 'cast-128', 'gost', 'rijndael-128', 'twofish', 'arcfour', 'cast-256', 'loki97', 'rijndael-192', 'saferplus', 'wake', 'blowfish-compat', 'des', 'rijndael-256', 'serpent', 'xtea', 'blowfish', 'enigma', 'rc2', 'tripledes' ]\n```\n\n### getModeNames() : Array\n\n`getModeNames()` returns an array that contains available mode names.\n\n```javascript\nvar mcrypt = require('mcrypt');\n\nvar algos = mcrypt.getModeNames();\nconsole.log(algos);\n```\n\nExpected result like that\n```\n[ 'cbc', 'cfb', 'ctr', 'ecb', 'ncfb', 'nofb', 'ofb', 'stream' ]\n```\n\n### MCrypt(algorithm, mode) : Object\n\n`MCrypt(algorithm, mode)` is a constructor function to create object for cipher and decipher operations. \n`algorithm` is a required parameter and one of the values of array returned by `getAlgorithmNames()`. \n`mode` is required parameter and one of the values of array returned by `getModeNames()`.\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar desEcb = new MCrypt('des', 'ecb');\n```\n\nThere are some prototype functions to make cipher decipher operations and to identify algorithm properties.\n\n#### open(key [, iv])\n\nWe are need to `open()` with a key for `decrypt()` and `encrypt()` operations also we should set an iv if required by algorithm in other case `iv` is optional parameter.\n`key` and `iv` should be string or Buffer\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar desEcb = new MCrypt('des', 'ecb');\ndesEcb.open('madepass'); // we are set the key\n```\n\n#### encrypt(plaintext) : Buffer\n\n`encrypt()` returns a Buffer object that contains ciphertext of `plaintext` parameter. `plaintext` parameter should be `string` or `Buffer`\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar desEcb = new MCrypt('des', 'ecb');\ndesEcb.open('madepass'); // we are set the key\n\nvar ciphertext = desEcb.encrypt('this is top secret message!');\nconsole.log(ciphertext.toString('base64'));\n```\n\nExpected result like that\n\n```\nfkJnIgtiH8nsGDryyuIsmyf5vABMGStlpACfKCTifvA=\n```\n\n#### decrypt(ciphertext) : Buffer\n\n`decrypt()` returns a Buffer object that contains plaintext of `ciphertext` parameter. `ciphertext` parameter should be `Buffer`\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar desEcb = new MCrypt('des', 'ecb');\ndesEcb.open('madepass'); // we are set the key\n\nvar plaintext = desEcb.decrypt(new Buffer('fkJnIgtiH8nsGDryyuIsmyf5vABMGStlpACfKCTifvA=', 'base64'));\nconsole.log(plaintext.toString());\n```\n\nExpected result like that\n\n```\nthis is top secret message!\n```\n\n#### generateIv() : Buffer\n\n`generateIv()` function generates IV randomly.\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nvar iv = blowfishCfb.generateIv();\n\nblowfishCfb.open('somekey', iv);\n\nvar ciphertext = blowfishCfb.encrypt('sometext');\n\nconsole.log(Buffer.concat([iv, ciphertext]).toString('base64'));\n```\n\n#### validateKeySize(Boolean)\n`validateKeySize()` is a function to disable or enable key size validation on `open()`\n\n```javascript\nvar mc = new MCrypt('blowfish', 'ecb');\nmc.validateKeySize(false); // disable key size checking\nmc.open('typeconfig.sys^_-');\n```\n\n#### validateIvSize(Boolean)\n`validateIvSize()` is a function to disable or enable iv size validation on `open()`\n\n```javascript\nvar mc = new MCrypt('rijndael-256', 'cbc');\nmc.validateIvSize(false); // disable iv size checking\nmc.open('$verysec$retkey$', 'foobar');\n```\n\n#### selfTest() : Boolean\n\n`selfTest()` is an utility function to make test algorithm internally and returns boolean value of status\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.selfTest());\n```\n\n#### isBlockAlgorithmMode() : Boolean\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.isBlockAlgorithmMode());\n```\n\n#### isBlockAlgorithm() : Boolean\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.isBlockAlgorithm());\n```\n\n#### isBlockMode() : Boolean\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.isBlockMode());\n```\n\n#### getBlockSize() : Number\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.getBlockSize());\n```\n\n#### getKeySize() : Number\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.getKeySize());\n```\n\n#### getSupportedKeySizes() : Array\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.getSupportedKeySizes());\n```\n\n#### getIvSize() : Number\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.getIvSize());\n```\n\n#### hasIv() : Boolean\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.hasIv());\n```\n\n#### getAlgorithmName() : String\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.getAlgorithmName());\n```\n\n#### getModeName() : String\n\n```javascript\nvar MCrypt = require('mcrypt').MCrypt;\n\nvar blowfishCfb = new MCrypt('blowfish', 'cfb');\nconsole.log(blowfishCfb.getModeName());\n```\n\n","starsCount":4,"created":"2013-09-20T03:50:14.955Z","modified":"2016-11-30T09:39:45.269Z","lastPublisher":{"name":"tugrul","email":"tugrultopuz@gmail.com"},"owners":[{"name":"tugrul","email":"tugrultopuz@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"mcrypt","_nodeVersion":"4.4.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mcrypt-0.1.12.tgz_1480498783045_0.8888154765591025"},"_npmUser":{"name":"tugrul","email":"tugrultopuz@gmail.com"},"_npmVersion":"2.15.5","_rev":"2-2b22eec8e054887561c30aff91e359fd","_shasum":"35df058545fa1a3948d175f73061c6ebc1f62bd7","author":{"name":"TuÄŸrul Topuz","email":"tugrultopuz@gmail.com"},"bugs":{"url":"https://github.com/tugrul/node-mcrypt/issues"},"directories":{},"dist-tags":{"latest":"0.1.12"},"dist":{"shasum":"35df058545fa1a3948d175f73061c6ebc1f62bd7","tarball":"http://registry.npmjs.org/mcrypt/-/mcrypt-0.1.12.tgz"},"maintainers":[{"name":"tugrul","email":"tugrultopuz@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-30T09:39:45.269Z","created":"2013-09-20T03:50:14.955Z","0.0.1":"2013-09-20T03:50:19.392Z","0.0.2":"2013-09-20T03:52:46.122Z","0.0.3":"2013-09-22T23:20:52.145Z","0.0.4":"2013-10-10T20:22:51.874Z","0.0.5":"2013-12-26T22:43:47.361Z","0.0.6":"2014-01-10T11:53:05.830Z","0.0.7":"2014-04-20T16:43:52.834Z","0.0.8":"2015-01-18T17:06:16.713Z","0.0.9":"2015-01-18T18:32:01.846Z","0.0.10":"2015-01-21T15:33:51.453Z","0.0.11":"2015-01-31T14:29:46.253Z","0.0.12":"2015-02-28T19:47:05.488Z","0.0.13":"2015-03-01T22:36:25.845Z","0.0.14":"2015-07-20T11:57:15.465Z","0.0.15":"2015-08-01T11:50:22.821Z","0.1.1":"2015-08-17T12:11:51.640Z","0.1.2":"2015-08-17T14:48:22.994Z","0.1.3":"2015-09-17T11:32:26.361Z","0.1.4":"2015-11-06T01:18:28.119Z","0.1.5":"2015-11-06T11:59:12.200Z","0.1.6":"2015-11-10T14:02:51.881Z","0.1.7":"2015-11-11T00:13:25.465Z","0.1.8":"2015-11-15T13:47:52.548Z","0.1.9":"2015-11-19T12:28:14.958Z","0.1.10":"2016-01-26T12:03:57.060Z","0.1.11":"2016-05-27T17:01:00.772Z","0.1.12":"2016-11-30T09:39:45.269Z"},"users":{"brentonhouse":true,"jsolis":true,"wangshijun":true,"wangnan0610":true}}}