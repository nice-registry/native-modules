{"name":"chromecaster-lib","version":"0.4.1","description":"Library for casting audio from your OS X/Linux computer to Chromecast","main":"index.js","scripts":{"build":"babel lib -d out","install":"node-gyp rebuild"},"repository":"https://github.com/melchor629/node-chromecaster-lib","license":"ISC","dependencies":{"bindings":"^1.2.1","castv2-client":"^1.1.2","mdns":"^2.3.3","nan":"^2.4.0"},"devDependencies":{"babel-cli":"^6.9.0","babel-preset-es2015":"^6.9.0"},"gypfile":true,"gitHead":"f08addb6fef5f37d9bfba7991260c538fa52f66a","homepage":"https://github.com/melchor629/node-chromecaster-lib#readme","versions":[{"number":"0.1.0","date":"2016-05-06T11:00:31.847Z"},{"number":"0.1.2","date":"2016-05-06T15:25:08.467Z"},{"number":"0.1.3","date":"2016-05-06T18:01:27.871Z"},{"number":"0.2.0","date":"2016-05-08T10:07:23.487Z"},{"number":"0.3.0","date":"2016-05-11T17:06:18.716Z"},{"number":"0.3.1","date":"2016-05-23T14:39:28.402Z"},{"number":"0.3.2","date":"2016-05-23T16:03:52.354Z"},{"number":"0.3.3","date":"2016-08-01T14:47:34.301Z"},{"number":"0.3.4","date":"2016-08-03T12:30:48.266Z"},{"number":"0.3.5","date":"2016-08-04T13:10:42.910Z"},{"number":"0.3.6","date":"2016-08-04T16:46:47.539Z"},{"number":"0.3.7","date":"2016-08-15T09:44:24.446Z"},{"number":"0.3.8","date":"2016-08-15T15:05:24.124Z"},{"number":"0.4.0","date":"2016-08-19T16:23:03.123Z"},{"number":"0.4.1","date":"2017-05-11T15:32:03.581Z"}],"readme":"node-chromecaster-lib\n===================\nA library to send your input sound to the Chromecast.\n\nOffers a simple way to get audio from system, discovering Chromecasts and sending audio to it. Audio codec is in your hands.\n\nThis version is in (_truly_) beta, so any help is welcome.\n\nFor implement audio capturing from Windows, **pull requests are welcome**. Right now, is a really basic form of capturing audio using WASAPI\nand may have some bugs or bad performance.\n\nInstallation\n----------------\nThis library currently only works on OS X and Linux (Windows is experimental).\n```\n$ npm install chromecaster-lib\n```\n\n**Linux Users**: You must install *libpulse-dev* and *libavahi-compat-libdnssd-dev* packages before installing this one.\n\n**Windows Users**:\n - You must install Apple \"Bonjour SDK for Windows\" (look for it on Google), and check for the variable `BONJOUR_SDK_HOME` in your CMD.\n - If you have problems compiling this library (or one of its dependencies), [see this issue](https://github.com/nodejs/node-gyp/issues/972).\n - Only supported sample rate is the one configured on Sound panel, other sample rates\n will make the `AudioInput.open()` to fail (_limitation of WASAPI_).\n\nExample\n------------\nAn example is the [CLI I created](https://github.com/melchor629/node-chromecaster-cli) to simply pass audio to the Chromecast via mp3 stream.\n\nAnother, quick, example (_using lame encoder_):\n\n```javascript\nconst AudioInput = require('chromecaster-lib').AudioInput;\nconst Webcast = require('chromecaster-lib').Webcast;\nconst ChromecastDiscover = require('chromecaster-lib').ChromecastDiscover;\nconst lame = require('lame');\n\nlet cd = new ChromecastDiscover();\ncd.on('deviceUp', function(name) {\n    cd.stop();\n    let client = cd.createClient(name);\n    let encoder = new lame.Encoder({\n        channels: 2,\n        bitDepth: 16,\n        sampleRate: 44100,\n        bitRate: 320,\n        outSampleRate: 44100,\n        mode: lame.JOINTSTEREO\n    });\n    let audioInput = new AudioInput();\n    let webcast = new Webcast({ port: 8080 });\n\n    audioInput.on('data', encoder.write.bind(encoder));\n    encoder.on('data', webcast.write.bind(webcast));\n\n    client.setWebcast(webcast);\n    client.connect((err, status) => {\n        if(err) {\n            console.log(\"Could not connect to CA: %s\", err);\n        } else {\n            console.log(\"Connected to CA\");\n        }\n    });\n});\ncd.start();\n```\n\nAPI\n-----\n## AudioInput\ninherits from EventEmitter\n\n**constructor([options])**\nCreates the object passing some options. `options` object can contain the following fields, and its default values\n\n- `samplerate` *Sample rate of the input audio stream. Valid values are: 44100, 48000, 88200, 96000* [44100]\n- `bps` *Bitdepth for sample. Could be 8, 16, 24, 32* [16]\n- `channels` *Number of channels of the stream, 1 (mono) or 2 (stereo)* [2]\n- `deviceName` *name of the device which capture the audio* [system default]\n- `timePerFrame` *number of milliseconds to capture per frame* [100ms]\n\nNOTE: Invalid values in the above options, will derive to default value.\n\nNOTE: For `deviceName`, try with values from `AudioInput.getDevices()`.\n\n**Number open()**\nOpens the Input Audio Stream. If the return value is different from 0, then an error has occurred. In this case, see `AudioInput.Error`.\n\n**close()**\nCloses the Input Stream, in case it was opened.\n\n**pause()**\n(Un)Pauses the Input Stream.\n\n**Boolean isOpen()**\nReturns `true` if the stream is open, `false` otherwise.\n\n**Boolean isPaused()**\nReturns `true` if the stream is open and paused, or is closed.\n\n**event 'data'**\nEvery processed frame, will be emitted on this event. Event has only one argument: the interleaved audio buffer.\n\n### String AudioInput.Error(Number)\nConverts the error returned in `Number AudioInput.open()` into a string.\n\n### [String] AudioInput.getDevices()\nReturns the devices available in the system. Useful to change the input device\nwhen creating an `AudioInput`.\n\n## Webcast\ninherits from stream.Writable\n\n**constructor([options])**\nCreates a web server to send the input audio to the Chromecast (_or something else_), and opens the server. The options object and its default values:\n\n- `port` *port to listen on* [3000]\n- `contentType` *MIME type of the input stream* [audio/mp3]\n\n**stop()**\nCloses the server\n\n**write(buffer [, encoding, cbk])**\nWrites some bytes to the clients that are listening. Encoding is usually omitted.\n\n**get localIp**\nObtains the ip of the machine in the local network\n\n**get contentType**\nObtains the contentType of the input stream, that is, the stream that will output to the server.\n\n**get port**\nGets the port the server is listening on.\n\n**event 'connect'**\nWhen some client is connected to the local web server. The event passes three arguments:\n\n - id: _some kind of id for the client connected_ the position on the internal clients array\n - req: _req object from express.js_\n - res: _res object from express.js_\n\n**event 'disconnect'**\nWhen a client closes the connexion, this event is emitted passing the before mentioned _id_.\n\n## ChromecastDiscover\ninherits from events.EventEmitter\n\n**constructor()**\nPrepares the discovering of Chromecasts. No options required.\n\n**start()**\nStarts searching for Chromecasts.\n\n**stop()**\nStops searching Chromecasts.\n\n**String getDeviceAddress(name)**\nGets the IP address of the device named.\n\n**String getDeviceNameForNumber(number)**\nGets the device number for the nth device that was found. `number` goes from 0 to devicesFound - 1.\n\n**forEachClient(cbk)**\nDoes a forEach on every device found passing its name to the callback.\n\n**ChromecastClient createClient(name)**\nCreates a ChromecastDevice object for the named device.\n\n**event 'deviceUp'**\nEvent emitted when a device has been found. Argument is the name of the device.\n\n**event 'deviceDown'**\nEvent emitted when a device has been disconnected. Argument is the name of the device.\n\n## ChromecastDevice\ninherits from events.EventEmitter\n\n**constructor(device)**\nIs not recommended create ChromecastDevices directly, use instead `ChromecastDiscover.createClient()`.\n\n**setWebcast(webcast)**\nSets the `Webcast` object that your are using. Is a **mandatory** call this method before  calling `connect` .\n\n**connect(cbk)**\n**connect(streamName, cbk)**\nConnects to the Chromecast device and sets its stream name to `streamName` of default name (`Chromecaster lib stream`). Callback have a signature of `function(err, status)`.\n\nAny error in the connexion, is reported calling the callback with `err` set to the error.\n\nIf the connexion succeeds, `cbk` will be called with `err` set to `null` and with the status of the device. The device will play automatically.\n\n**getVolume(cbk)**\nGets the volume of the device asynchronously. The signature of `cbk` is `function(err, volume)` where `volume` is a number between 0 and 1. If the client is not connected, `err` and `volume` are null.\n\n**setVolume(volume [, cbk])**\nSets the volume of the device asynchronously.  Volume is a number [0,1]. Values not in the range are clamped. The signature of `cbk` is `function(err, volume)` where `volume` is a number between 0 and 1. If the client is not connected, `err` and `volume` are null.\n\n**isMuted(cbk)**\nGets if the device is muted or not asynchronously. `cbk` has signature of `function(err, muted)`.\n\n**setMute(muted [, cbk])**\nChange mute of the device asynchronously. `cbk` has signature of `function(err, muted)`.\n\n**play([cbk])**\nNotifies the Chromecast to start playing. By default, the Chromecast is always playing.\n\n**pause([cbk])**\nNotifies the Chromecast to pause the stream.\n\n**stop([cbk])**\nNotifies the Chromecast to stop the stream.\n\n**close()**\nStops the stream and closes the connexion to the device.\n","starsCount":1,"created":"2016-05-06T11:00:31.847Z","modified":"2017-05-11T15:32:03.581Z","lastPublisher":{"name":"melchor9000","email":"melchor9000@gmail.com"},"owners":[{"name":"melchor9000","email":"melchor9000@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"chromecaster-lib","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/chromecaster-lib-0.4.1.tgz_1494516721460_0.23640560102649033"},"_npmUser":{"name":"melchor9000","email":"melchor9000@gmail.com"},"_npmVersion":"4.6.1","_rev":"3-3ca12ef0620e671177cd445b04a57a91","_shasum":"00d5e97ab11197299b0def22428fd766666301cb","author":{"name":"melchor9000"},"bugs":{"url":"https://github.com/melchor629/node-chromecaster-lib/issues"},"directories":{},"dist-tags":{"latest":"0.4.1"},"dist":{"shasum":"00d5e97ab11197299b0def22428fd766666301cb","tarball":"https://registry.npmjs.org/chromecaster-lib/-/chromecaster-lib-0.4.1.tgz"},"maintainers":[{"name":"melchor9000","email":"melchor9000@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-11T15:32:03.581Z","created":"2016-05-06T11:00:31.847Z","0.1.0":"2016-05-06T11:00:31.847Z","0.1.2":"2016-05-06T15:25:08.467Z","0.1.3":"2016-05-06T18:01:27.871Z","0.2.0":"2016-05-08T10:07:23.487Z","0.3.0":"2016-05-11T17:06:18.716Z","0.3.1":"2016-05-23T14:39:28.402Z","0.3.2":"2016-05-23T16:03:52.354Z","0.3.3":"2016-08-01T14:47:34.301Z","0.3.4":"2016-08-03T12:30:48.266Z","0.3.5":"2016-08-04T13:10:42.910Z","0.3.6":"2016-08-04T16:46:47.539Z","0.3.7":"2016-08-15T09:44:24.446Z","0.3.8":"2016-08-15T15:05:24.124Z","0.4.0":"2016-08-19T16:23:03.123Z","0.4.1":"2017-05-11T15:32:03.581Z"},"users":{"jamet":true}}}