{"name":"magicklib-native","description":"NodeJS native bindings for ImageMagick's Magick++ library","keywords":["gfx","imagemagick","magick++","quantize","resize","convert"],"version":"0.1.2","license":"MIT","homepage":"http://github.com/royaltm/node-magicklib-native","repository":"https://github.com/royaltm/node-magicklib-native","scripts":{"test":"tap ./test/test.*.js","install":"node-gyp rebuild"},"main":"magick.js","engines":{"node":">=0.10.0"},"dependencies":{"nan":"~1.3.0"},"devDependencies":{"tap":"*","async":"*","ben":"*","colors":"*"},"gypfile":true,"gitHead":"365679ec276ded2a3d4104dab1566a0c86e49caf","versions":[{"number":"0.1.0","date":"2015-01-07T00:14:03.402Z"},{"number":"0.1.1","date":"2015-01-07T00:22:37.168Z"},{"number":"0.1.2","date":"2015-01-09T21:23:18.693Z"}],"readme":"ImageMagick library\n===================\n\nImageMagick Magick++ library bindings for versatile programatic image manipulation.\n\n[![Build Status][BS img]][Build Status]\n\nThis is another [approach][node-imagemagick-native] to bring image manipulation capabilities to nodejs.\nHowever conceptually it's more like [this][node-graphicsmagick]. You know, \"same same, but different\".\n\nWARNING:\n\nThis is work in progress...\n\n\nMagicklib provides an `Image` object which can be manipulated in both sync and async mode.\nThe async mode is triggered either by providing callback to utility method as the last argument or\nby calling image.begin() to start batch mode.\n\n##Example\n\n###Synchronous example\n\n```js\n  var Image = require(\"magicklib-native\").Image\n```\n\n```js\n  var im = new Image(\"magick.png\")\n  fs.writeFileSync(\"magick.jpg\",\n    im.resize(100,100, \"aspectfill greater\").\n      extent(100,100, \"center\").\n      blur(0.3).\n      format(\"JPEG\").\n      quality(80).\n      write()\n  );\n  im.close() // free resources before gc does\n```\n\n###Asynchronous batch example\n\n```js\n  fs.readFile(\"magick.png\", function(err, blob) {\n    // bail on err\n    new Image().\n      begin().\n      read(blob).\n      resize(100,100, \"aspectfill\").\n      extent(100,100, \"center\").\n      blur(0.3).\n      format(\"JPEG\").\n      quality(80).\n      write(function(err, blob) {\n        // bail on err\n        fs.writeFile(\"magick.jpg\", blob, function(err) {\n          // done\n        });\n      });\n      // in batch mode image is being closed by default\n  });\n```\n\nTo enable batch-only mode:\n\n```js\n  var im = new Image({batch: true}); // or\n  // no im.begin() needed anymore\n  // and no more synchronous calls\n  im.batch = true;                   // or\n  im.prop({batch: true});            // or\n  im.begin(true);\n```\n\nTo disable batch-only mode:\n\n```js\n  var im = new Image({batch: false}); // or\n  im.batch = false;                   // or\n  im.prop({batch: false});            // or\n  im.end(false); // this also ends any pending commands\n```\n\n###Copy copy\n\nImages may be copied to perform different transformations without reloading from file or blob.\n\n```js\n  var im = new Image(blob);\n\n  var blobsmall = im.copy().\n    sharpen(0.2).\n    resize(\"100x100\").\n    write();\n\n  var blobmedium = im.copy().\n    blur(0.2).\n    resize(\"300x300^\").\n    write();\n```\n\n###Streams\n\n\n```js\n  var im = new Image({batch: true}).\n    format(\"JPEG\").\n    quality(80).\n    resize(100, 100, \"aspectfill\").\n    extent(100, 100, \"center\")\n\n  // create write stream\n\n  fs.createReadStream(\"image.jpg\").\n    pipe(im.createWriteStream());\n\n  // create read stream\n\n  im.blur(1).createReadStream().pipe(\n    fs.createWriteStream(\"out100x100aspectfill_blurred.jpg\")\n  );\n\n  im.end(function(err, image) {\n    // all transformations done and sent down the stream\n  });\n\n```\n\nAsynchronous copy + stream == read once, convert many\n\n```js\n  var im = new Image({batch: true, autoClose: false}).\n    copy(true). // must be here otherwise restore() will restore empty image\n    format(\"JPEG\").\n    quality(80).\n    resize(100, 100, \"aspectfill\").\n    extent(100, 100, \"center\")\n\n  fs.createReadStream(\"image.jpg\").\n    pipe( im.createConvertStream() ).\n    pipe( fs.createWriteStream(\"out100x100.jpg\") );\n\n  // create as many read streams as needed\n\n  im.restore().  // restore copy\n    resize(300, 500).\n    createReadStream().pipe(\n      fs.createWriteStream(\"out300x500.jpg\")\n    );\n\n  im.restore().  // restore copy\n    sharpen(2).\n    // a sugar for createReadStream().pipe()\n    pipe(\n      fs.createWriteStream(\"sharpened.jpg\")\n    );\n\n  im.close(true); // auto-close image after transformations\n```\n\nBoth write and convert streams insert blob reader at the front of the batch queue.\n\n\nTo turn autoCopy mode on:\n\n```js\n  var im = new Image({src: buffer, autoCopy: true}); // or\n  im.autoCopy = true;                                // or\n  im.prop({autoCopy: true});                         // or\n  im.copy(true);\n```\n\n###Save memory, auto-close\n\nImage is being closed automatically after finishing batch by default,\nso rss won't grow like crazy between gc sessions.\n\n```js\n  var im = new Image({batch: true});\n  im.autoClose == true;\n  im.read(blob).\n    blur(0.5).\n    write(function(err, blob) {\n      // play with blob\n    }).\n    crop(200, 200, 50, 50).\n    end(function(err, im) {\n      setImmediate(function() {\n        // im is closed by now to free Magick memory as soon as possible\n        im.empty == true\n        im.size() // => [0, 0]\n      });\n      // im is not yet closed, you can play more with it\n      im.empty == false\n    });\n```\n\nTo turn off auto close:\n\n```js\n  new Image({autoClose: false}); // or\n  im.autoClose = false;          // or\n  im.prop({autoClose: false});   // or\n  im.close(false);\n\n  // to close manually\n  // batch or sync\n  im.close();\n  // async\n  im.close(function(err, im) { /*...*/ });\n```\n\nClosing image doesn't mean one can't use instantiated JS object anymore.\nOn the contrary - close() simply destroys internal Magick memory associated with Image,\nbringing back JS object to its pristine state as if new magick.Image() was called.\n\nSo yes, one can re-use closed images.\n\n## Installation\n\n### Unix\n\nRequires [ImageMagick][imagemagick-install-source] at least v6.8.7 C++ library and headers.\n\n* [Linux][imagemagick-download-linux]\n\n```\n  $ sudo yum install ImageMagick-c++-devel\n```\n\nor\n\n```\n  $ sudo apt-get install libmagick++-dev\n```\n\n* [OS X][imagemagick-download-maxosx]\n\n```\n  brew install imagemagick\n```\n\nMagick++-config should be in PATH.\n\n```\n  $ npm install magicklib-native\n```\n\nAccording to [imagemagick-native][node-imagemagick-native-install]\n\n* RHEL/CentOS: If the version of ImageMagick required is not available in RPM repository, please try the `-last` version offered by Les RPM de Remi, for example:\n\n```\n  $ sudo yum remove -y ImageMagick\n  $ sudo yum install -y http://rpms.famillecollet.com/enterprise/remi-release-6.rpm\n  $ sudo yum install -y --enablerepo=remi ImageMagick-last-c++-devel\n```\n\n* Mac OS X: You might need to install `pkgconfig` first:\n\n```\n  $ brew install pkgconfig\n```\n\n### Windows\n\nTested on Windows 7 x64, Vista x64 and XP x86.\n\n1. Install Python >= 2.7.3\n\n2. Install [Visual Studio C++ 2010 Express][vs-2010-express-download] or (Windows 7/8 only) [Microsoft Visual Studio C++ 2012/13][vs-2012-express-download]\n\n3. (VS 2010 and 64-bit only) [Install Windows 7 64-bit SDK][win-7-64bit-sdk-download] and [compiler update for the Windows SDK 7.1][cusp-win-sdk-71-download]\n\n4. Install [ImageMagick Q16/Q8 x64/x86 dll][imagemagick-download-windows] and please remember to check \"Install development headers and libraries for C and C++\" during install. \"-static\" library versions won't work.\n\nSee [node-gyp installation][node-gyp-troubleshooting] for general troubleshooting.\n\n```\n  $ npm install magicklib-native\n```\n\n##API\n\nSee [API.md](API.md) for more.\n\n##Performance\n\n```\n  node --expose-gc test/bench.js test/test.image.jpg\n```\n\n##TODO\n\n- (much) more Magick++ methods\n\n[node-graphicsmagick]: https://github.com/networkimprov/node-graphicsmagick\n[node-imagemagick-native]: https://github.com/mash/node-imagemagick-native\n[imagemagick-install-source]: http://www.imagemagick.org/script/install-source.php#unix\n[imagemagick-download-linux]: http://www.imagemagick.org/script/binary-releases.php#unix\n[imagemagick-download-maxosx]: http://www.imagemagick.org/script/binary-releases.php#macosx\n[imagemagick-download-windows]: http://www.imagemagick.org/script/binary-releases.php#windows\n[node-imagemagick-native-install]: https://github.com/mash/node-imagemagick-native/#user-content-installation\n[vs-2010-express-download]: http://go.microsoft.com/?linkid=9709949\n[vs-2012-express-download]: http://go.microsoft.com/?linkid=9816758\n[win-7-64bit-sdk-download]: http://www.microsoft.com/en-us/download/details.aspx?id=8279\n[cusp-win-sdk-71-download]: http://www.microsoft.com/en-us/download/details.aspx?id=4422\n[node-gyp-troubleshooting]: https://github.com/TooTallNate/node-gyp#installation\n[Build Status]: https://travis-ci.org/royaltm/node-magicklib-native\n[BS img]: https://travis-ci.org/royaltm/node-magicklib-native.svg\n","created":"2015-01-07T00:14:03.402Z","modified":"2015-01-09T21:23:18.693Z","lastPublisher":{"name":"royaltm","email":"royal@yeondir.com"},"owners":[{"name":"royaltm","email":"royal@yeondir.com"}],"other":{"_attachments":{},"_from":".","_id":"magicklib-native","_npmUser":{"name":"royaltm","email":"royal@yeondir.com"},"_npmVersion":"1.4.28","_rev":"1-5efe849b3006ff7684633ce8ee800f6a","_shasum":"c631a796a797fc8bfd39a75589294e1ba2a280bf","author":{"name":"Rafa≈Ç Michalski","email":"royal@yeondir.com"},"bugs":{"url":"https://github.com/royaltm/node-magicklib-native/issues"},"contributors":[],"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"c631a796a797fc8bfd39a75589294e1ba2a280bf","tarball":"http://registry.npmjs.org/magicklib-native/-/magicklib-native-0.1.2.tgz"},"maintainers":[{"name":"royaltm","email":"royal@yeondir.com"}],"readmeFilename":"README.md","time":{"modified":"2015-01-09T21:23:18.693Z","created":"2015-01-07T00:14:03.402Z","0.1.0":"2015-01-07T00:14:03.402Z","0.1.1":"2015-01-07T00:22:37.168Z","0.1.2":"2015-01-09T21:23:18.693Z"}}}