{"name":"pcap","version":"2.0.1","description":"raw packet capture, decoding, and analysis","main":"./pcap","repository":"https://github.com/mranney/node_pcap","dependencies":{"nan":"~1.6.1","socketwatcher":"git://github.com/zerouid/node-socketwatcher.git"},"scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"cf5f918eb50b893112de9cb40721b19d77c1392d","homepage":"https://github.com/mranney/node_pcap","versions":[{"number":"0.0.2","date":"2011-01-31T23:33:37.155Z"},{"number":"0.0.3","date":"2011-01-31T23:33:37.155Z"},{"number":"0.0.4","date":"2011-01-31T23:33:37.155Z"},{"number":"0.0.5","date":"2011-01-31T23:33:37.155Z"},{"number":"0.0.6","date":"2011-01-31T23:33:37.155Z"},{"number":"0.0.7","date":"2011-01-31T23:33:37.155Z"},{"number":"0.1.1","date":"2011-01-31T23:33:37.155Z"},{"number":"0.1.4","date":"2011-01-31T23:33:37.155Z"},{"number":"0.1.5","date":"2011-01-31T23:33:37.155Z"},{"number":"0.1.6","date":"2011-01-31T23:33:37.155Z"},{"number":"0.1.7","date":"2011-01-31T23:33:37.155Z"},{"number":"0.1.8","date":"2011-01-31T23:33:37.155Z"},{"number":"0.1.9","date":"2011-01-31T23:33:37.155Z"},{"number":"0.2.0","date":"2011-01-31T23:33:37.155Z"},{"number":"0.2.1","date":"2011-01-31T23:33:37.155Z"},{"number":"0.2.2","date":"2011-01-31T23:33:37.155Z"},{"number":"0.2.3","date":"2011-01-31T23:33:37.155Z"},{"number":"0.2.4","date":"2011-01-31T23:33:37.155Z"},{"number":"0.2.6","date":"2011-01-31T23:33:37.155Z"},{"number":"0.2.7","date":"2011-01-31T23:33:37.155Z"},{"number":"0.2.8","date":"2011-03-02T07:08:30.547Z"},{"number":"0.3.0","date":"2012-01-15T07:40:38.043Z"},{"number":"0.3.1","date":"2013-04-02T17:15:56.108Z"},{"number":"0.3.2","date":"2013-04-09T17:52:49.861Z"},{"number":"0.3.3","date":"2013-04-21T12:33:18.842Z"},{"number":"0.4.0","date":"2013-06-12T11:33:51.358Z"},{"number":"0.4.1","date":"2013-06-17T11:50:26.447Z"},{"number":"1.0.0","date":"2013-08-28T12:16:35.199Z"},{"number":"1.0.1","date":"2013-10-04T18:48:42.652Z"},{"number":"1.1.0","date":"2014-01-13T20:14:26.120Z"},{"number":"1.2.0","date":"2014-02-28T09:46:22.765Z"},{"number":"2.0.0","date":"2015-02-01T02:01:11.768Z"},{"number":"2.0.1","date":"2015-02-10T21:34:31.277Z"}],"readme":"node_pcap\n=========\n\nThis is a set of bindings from `libpcap` to node as well as some useful libraries to decode, print, and\nanalyze packets.  `libpcap` is a packet capture library used by programs like `tcpdump` and `wireshark`.\nIt has been tested on OSX and Linux.\n\n`node_pcap` is useful for many things, but it does not yet understand all common protocols.  Common reasons\nto use this package are\n[http_trace](https://github.com/mranney/http_trace), and\n[htracr](https://github.com/mnot/htracr).\n\n## Why capture packets in JavaScript?\n\nThere are already many tools for capturing, decoding, and analyzing packets.  Many of them are thoroughly\ntested and very fast.  Why would anybody want to do such low level things like packet capture and analysis\nin JavaScript?  A few reasons:\n\n* JavaScript makes writing event-based programs very natural.  Each packet that is captured generates an\nevent, and as higher level protocols are decoded, they might generate events as well.  Writing code to handle\nthese events is much easier and more readable with anonymous functions and closures.\n\n* node makes handling binary data in JavaScript fast and efficient with its Buffer class.  Decoding packets involves\na lot of binary slicing and dicing which can be awkward with JavaScript strings.\n\n* Writing servers that capture packets, process them somehow, and then serve the processed data up in some way is\nvery straightforward in node.\n\n* Node has a very good HTTP parser that is used to progressively decode HTTP sessions.\n\n## Installation\n\nYou will need `libpcap` installed.  Most OSX machines seem to have it.  All major Linux distributions have it available\neither by default or with a package like `libpcap-dev`.\n\nThe easiest way to get `node_pcap` and its tools is with `npm`:\n\n    npm install pcap\n\nIf you want to hack on the source code, you can get it from github.  Clone the repo like this:\n\n    git clone git://github.com/mranney/node_pcap.git\n\nTo compile the native code bindings, do this:\n\n    cd node_pcap\n    node-gyp configure build\n\nAssuming it built without errors, you should be able to run the examples and then write your own packet\ncapture programs.\n\n\n## Usage\n\nThere are several example programs that show how to use `node_pcap`.  These examples are best documentation.\nTry them out and see what they do.\n\nTo use this library in your own program, `pcap.js` and `pcap_binding.node` must be in `NODE_PATH`.  `npm` \ntakes care of this automatically.\n\n### Starting a capture session\n\nTo start a capture session, call `pcap.createSession` with an interface name and a pcap filter string:\n\n    var pcap = require('pcap'),\n        pcap_session = pcap.createSession(interface, filter);\n\n`interface` is the name of the interface on which to capture packets.  If passed an empty string, `libpcap`\nwill try to pick a \"default\" interface, which is often just the first one in some list and not what you want.\n\n`filter` is a pcap filter expression, see `pcap-filter(7)` for more information.  An empty string will capture\nall packets visible on the interface.\n\nNote that `node_pcap` always opens the interface in promiscuous mode, which generally requires running as root.\nUnless you are recklessly roaming about as root already, you'll probably want to start your node program like this:\n\n    sudo node test.js\n\n`pcap_session` is an `EventEmitter` that emits a `packet` event.  The only argument to the callback will be a\n`Buffer` object with the raw bytes returned by `libpcap`.\n\nListening for packets:\n\n    pcap_session.on('packet', function (raw_packet) {\n        // do some stuff with a raw packet\n    });\n\nTo convert `raw_packet` into a JavaScript object that is easy to work with, decode it:\n    \n    var packet = pcap.decode.packet(raw_packet);\n\nThe protocol stack is exposed as a nested set of objects.  For example, the TCP destination port is part of TCP\nwhich is encapsulated within IP, which is encapsulated within a link layer.  Access it like this:\n\n    packet.link.ip.tcp.dport\n\nThis structure is easy to explore with `sys.inspect`.\n\n### TCP Analysis\n\nTCP can be analyzed by feeding the packets into a `TCP_tracker` and then listening for `start` and `end` events.\n\n    var pcap = require('pcap'),\n        tcp_tracker = new pcap.TCP_tracker(),\n        pcap_session = pcap.createSession(interface, \"ip proto \\\\tcp\");\n\n    tcp_tracker.on('start', function (session) {\n        console.log(\"Start of TCP session between \" + session.src_name + \" and \" + session.dst_name);\n    });\n\n    tcp_tracker.on('end', function (session) {\n        console.log(\"End of TCP session between \" + session.src_name + \" and \" + session.dst_name);\n    });\n\n    pcap_session.on('packet', function (raw_packet) {\n        var packet = pcap.decode.packet(raw_packet);\n        tcp_tracker.track_packet(packet);\n    });\n\nYou must only send IPv4 TCP packets to the TCP tracker.  Explore the `session` object with `sys.inspect` to\nsee the wonderful things it can do for you.  Hopefully the names of the properties are self-explanatory:\n\n    { src: '10.51.2.130:55965'\n    , dst: '75.119.207.0:80'\n    , syn_time: 1280425738896.771\n    , state: 'ESTAB'\n    , key: '10.51.2.130:55965-75.119.207.0:80'\n    , send_isn: 2869922608\n    , send_window_scale: 8\n    , send_packets: { '2869922609': 1280425738896.771 }\n    , send_acks: { '1063203923': 1280425738911.618 }\n    , send_retrans: {}\n    , send_next_seq: 2869922609\n    , send_acked_seq: null\n    , send_bytes_ip: 60\n    , send_bytes_tcp: 108\n    , send_bytes_payload: 144\n    , recv_isn: 1063203922\n    , recv_window_scale: 128\n    , recv_packets: { '1063203923': 1280425738911.536 }\n    , recv_acks: { '2869922609': 1280425738911.536 }\n    , recv_retrans: {}\n    , recv_next_seq: null\n    , recv_acked_seq: null\n    , recv_bytes_ip: 20\n    , recv_bytes_tcp: 40\n    , recv_bytes_payload: 0\n    , src_name: '10.51.2.130:55965'\n    , dst_name: '75.119.207.0:80'\n    , current_cap_time: 1280425738911.65\n\n### HTTP Analysis\n\nThe `TCP_tracker` also detects and decodes HTTP on all streams it receives.  If HTTP is detected, several\nnew events will be emitted: \n\n* `http request`: function(session, http)\n* `http request body`: function(session, http, data)\n\n    Note that `data` is a node Buffer object sliced from the original packet.  If you want to use it past the\n    current tick, you'll need to make a copy somehow.\n\n* `http request complete`: function(session, http)\n* `http response`: function(session, http)\n* `http response body`: function(session, http, data)\n\n    `data` is a Buffer slice.  See above.\n\n* `http response complete`: function(session, http)\n\nSee `http_trace` for an example of how to use these events to decode HTTP.\n\n### WebSocket Analysis\n\nThe `TCP_tracker` further detects and decodes WebSocket traffic on all streams it receives.\n\n* `websocket upgrade`: function(session, http)\n* `websocket message`: function(session, dir, message)\n\nSee `http_trace` for an example of how to use these events to decode WebSocket.\n\n    \n## Some Common Problems\n\n### TCP Segmentation Offload - TSO\n\nTSO is a technique that modern operating systems use to offload the burden of IP/TCP header computation to \nthe network hardware.  It also reduces the number of times that data is moved data between the kernel and the\nnetwork hardware.  TSO saves CPU when sending data that is larger than a single IP packet.\n\nThis is amazing and wonderful, but it does make some kinds of packet sniffing more difficult.  In many cases,\nit is important to see the exact packets that are sent, but if the network hardware is sending the packets, \nthese are not available to `libpcap`.  The solution is to disable TSO.\n\nOSX:\n\n    sudo sysctl -w net.inet.tcp.tso=0\n    \nLinux (substitute correct interface name):\n\n    sudo ethtool -K eth0 tso off\n\nThe symptoms of needing to disable TSO are messages like, \"Received ACK for packet we didn't see get sent\".\n\n### IPv6\n\nSadly, `node_pcap` does not know how to decode IPv6 packets yet.  Often when capturing traffic to `localhost`, IPv6 traffic\nwill arrive surprisingly, even though you were expecting IPv4.  A common case is the hostname `localhost`, which many client programs will\nresolve to the IPv6 address `::1` and then will try `127.0.0.1`.  Until we get IPv6 decode support, a `libpcap` filter can be\nset to only see IPv4 traffic:\n\n    sudo http_trace lo0 \"ip proto \\tcp\"\n    \nThe backslash is important.  The pcap filter language has an ambiguity with the word \"tcp\", so by escaping it,\nyou'll get the correct interpretation for this case.\n\n### Dropped packets\n\nThere are several levels of buffering involved in capturing packets.  Sometimes these buffers fill up, and\nyou'll drop packets.  If this happens, it becomes difficult to reconstruct higher level protocols.  The best\nway to keep the buffers from filling up is to use pcap filters to only consider traffic that you need to decode.\nThe pcap filters are very efficient and run close to the kernel where they can process high packet rates.\n\nIf the pcap filters are set correctly and `libpcap` still drops packets, it is possible to increase `libpcap`'s\nbuffer size.  At the moment, this requires changing `pcap_binding.cc`.  Look for `pcap_set_buffer_size()` and\nset to a larger value.\n\n## examples/simple_capture\n\nThis program captures packets and prints them using the built in simple printer.  Here's a sample of it's output.\nIn another window I ran `curl nodejs.org`.\n\n    mjr:~/work/node_pcap$ sudo node examples/simple_capture.js en1 \"\"\n    libpcap version 1.0.0\n    en0 no address\n    * en1 10.240.0.133/255.255.255.0\n    lo0 127.0.0.1/255.0.0.0\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 10.240.0.1 ARP request 10.240.0.133\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c 10.240.0.133 ARP reply 10.240.0.1 hwaddr 00:18:39:ff:f9:1c\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c 10.240.0.133:53808 -> 97.107.132.72:80 TCP len 64\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c 10.240.0.133:57052 -> 10.240.0.1:53 DNS question 133.0.240.10.in-addr.arpa PTR\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c 10.240.0.133:57052 -> 10.240.0.1:53 DNS question 72.132.107.97.in-addr.arpa PTR\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c 10.240.0.133:57052 -> 10.240.0.1:53 DNS question 1.0.240.10.in-addr.arpa PTR\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 10.240.0.1:53 -> 10.240.0.133:57052 DNS answer 133.0.240.10.in-addr.arpa PTR\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 10.240.0.1:53 -> rv-mjr2.ranney.com:57052 DNS answer 72.132.107.97.in-addr.arpa PTR\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 10.240.0.1:53 -> rv-mjr2.ranney.com:57052 DNS answer 1.0.240.10.in-addr.arpa PTR\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 60\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c rv-mjr2.ranney.com:53808 -> tinyclouds.org:80 TCP len 52\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c rv-mjr2.ranney.com:53808 -> tinyclouds.org:80 TCP len 196\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 52\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 1500\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 1500\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c rv-mjr2.ranney.com:53808 -> tinyclouds.org:80 TCP len 52\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 1500\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c rv-mjr2.ranney.com:53808 -> tinyclouds.org:80 TCP len 52\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 1500\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 1500\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c rv-mjr2.ranney.com:53808 -> tinyclouds.org:80 TCP len 52\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 1500\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c rv-mjr2.ranney.com:53808 -> tinyclouds.org:80 TCP len 52\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 1500\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 337\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c rv-mjr2.ranney.com:53808 -> tinyclouds.org:80 TCP len 52\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c rv-mjr2.ranney.com:53808 -> tinyclouds.org:80 TCP len 52\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c rv-mjr2.ranney.com:53808 -> tinyclouds.org:80 TCP len 52\n    00:18:39:ff:f9:1c -> 00:1f:5b:ce:3e:29 tinyclouds.org:80 -> rv-mjr2.ranney.com:53808 TCP len 52\n    00:1f:5b:ce:3e:29 -> 00:18:39:ff:f9:1c rv-mjr2.ranney.com:53808 -> tinyclouds.org:80 TCP len 52\n\n\n## Output from `session.findalldevs`:\n\n    [ { name: 'en0'\n      , addresses: \n         [ { addr: '10.51.2.183'\n           , netmask: '255.255.255.0'\n           , broadaddr: '10.51.2.255'\n           }\n         ]\n      }\n    , { name: 'fw0', addresses: [] }\n    , { name: 'en1', addresses: [] }\n    , { name: 'lo0'\n      , addresses: [ { addr: '127.0.0.1', netmask: '255.0.0.0' } ]\n      , flags: 'PCAP_IF_LOOPBACK'\n      }\n    ]\n\n\n### Deep decode of `curl nodejs.org`:\n\nRunning `sys.inspect` on the first three decoded packets of this TCP session.\n\nFirst packet, TCP SYN:\n\n    { ethernet: \n       { dhost: '00:18:39:ff:f9:1c'\n       , shost: '00:1f:5b:ce:3e:29'\n       , ethertype: 2048\n       , ip: \n          { version: 4\n          , header_length: 5\n          , diffserv: 0\n          , total_length: 64\n          , identification: 49042\n          , flags: { reserved: 0, df: 1, mf: 0 }\n          , fragment_offset: 0\n          , ttl: 64\n          , protocol: 6\n          , header_checksum: 35325\n          , saddr: '10.240.0.133'\n          , daddr: '97.107.132.72'\n          , protocol_name: 'TCP'\n          , tcp: \n             { sport: 57230\n             , dport: 80\n             , seqno: 4179361823\n             , ackno: 1540242985\n             , data_offset: 11\n             , reserved: 0\n             , flags: \n                { cwr: 0\n                , ece: 0\n                , urg: 0\n                , ack: 0\n                , psh: 0\n                , rst: 0\n                , syn: 1\n                , fin: 0\n                }\n             , window_size: 65535\n             , checksum: 2601\n             , urgent_pointer: 0\n             , payload_offset: 78\n             , payload: { length: 0 }\n             }\n          }\n       }\n    , pcap_header: \n       { time: Sat, 22 May 2010 07:48:40 GMT\n       , tv_sec: 1274514520\n       , tv_usec: 820479\n       , caplen: 78\n       , len: 78\n       , link_type: 'LINKTYPE_ETHERNET'\n       }\n    }\n    \nSecond packet, TCP SYN+ACK:\n\n    { ethernet: \n       { dhost: '00:1f:5b:ce:3e:29'\n       , shost: '00:18:39:ff:f9:1c'\n       , ethertype: 2048\n       , ip: \n          { version: 4\n          , header_length: 5\n          , diffserv: 32\n          , total_length: 60\n          , identification: 0\n          , flags: { reserved: 0, df: 1, mf: 0 }\n          , fragment_offset: 0\n          , ttl: 48\n          , protocol: 6\n          , header_checksum: 22900\n          , saddr: '97.107.132.72'\n          , daddr: '10.240.0.133'\n          , protocol_name: 'TCP'\n          , tcp: \n             { sport: 80\n             , dport: 57230\n             , seqno: 1042874392\n             , ackno: 973076764\n             , data_offset: 10\n             , reserved: 0\n             , flags: \n                { cwr: 0\n                , ece: 0\n                , urg: 0\n                , ack: 1\n                , psh: 0\n                , rst: 0\n                , syn: 1\n                , fin: 0\n                }\n             , window_size: 5792\n             , checksum: 35930\n             , urgent_pointer: 0\n             , payload_offset: 74\n             , payload: { length: 0 }\n             }\n          }\n       }\n    , pcap_header: \n       { time: Sat, 22 May 2010 07:48:40 GMT\n       , tv_sec: 1274514520\n       , tv_usec: 915980\n       , caplen: 74\n       , len: 74\n       , link_type: 'LINKTYPE_ETHERNET'\n       }\n    }\n\nThird packet, TCP ACK, 3-way handshake is now complete:\n\n    { ethernet: \n       { dhost: '00:18:39:ff:f9:1c'\n       , shost: '00:1f:5b:ce:3e:29'\n       , ethertype: 2048\n       , ip: \n          { version: 4\n          , header_length: 5\n          , diffserv: 0\n          , total_length: 52\n          , identification: 39874\n          , flags: { reserved: 0, df: 1, mf: 0 }\n          , fragment_offset: 0\n          , ttl: 64\n          , protocol: 6\n          , header_checksum: 44505\n          , saddr: '10.240.0.133'\n          , daddr: '97.107.132.72'\n          , protocol_name: 'TCP'\n          , tcp: \n             { sport: 57230\n             , dport: 80\n             , seqno: 4179361823\n             , ackno: 1540242985\n             , data_offset: 8\n             , reserved: 0\n             , flags: \n                { cwr: 0\n                , ece: 0\n                , urg: 0\n                , ack: 1\n                , psh: 0\n                , rst: 0\n                , syn: 0\n                , fin: 0\n                }\n             , window_size: 65535\n             , checksum: 53698\n             , urgent_pointer: 0\n             , payload_offset: 66\n             , payload: { length: 0 }\n             }\n          }\n       }\n    , pcap_header: \n       { time: Sat, 22 May 2010 07:48:40 GMT\n       , tv_sec: 1274514520\n       , tv_usec: 916054\n       , caplen: 66\n       , len: 66\n       , link_type: 'LINKTYPE_ETHERNET'\n       }\n    }\n\n## Help Wanted\n\nI want to build up decoders and printers for all popular protocols.  Patches are welcome.\n\n\n## LICENSE - \"MIT License\"\n\nCopyright (c) 2010 Matthew Ranney, http://ranney.com/\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n","starsCount":11,"created":"2011-01-31T23:33:37.155Z","modified":"2017-05-17T03:04:39.655Z","lastPublisher":{"name":"mjr","email":"mjr@ranney.com"},"owners":[{"name":"mjr","email":"mjr@ranney.com"},{"name":"ujjwalt","email":"ujjwalthaakar@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"pcap","_nodeVersion":"0.10.32","_npmUser":{"name":"mjr","email":"mjr@ranney.com"},"_npmVersion":"2.4.1","_rev":"4-1f12bb5a7574416582339af7065f366c","_shasum":"1c516248117a7a1ecadb39819477947645a87730","author":{"name":"Matt Ranney","email":"mjr@ranney.com"},"bugs":{"url":"https://github.com/mranney/node_pcap/issues"},"directories":{},"dist-tags":{"latest":"2.0.1"},"dist":{"shasum":"1c516248117a7a1ecadb39819477947645a87730","tarball":"http://registry.npmjs.org/pcap/-/pcap-2.0.1.tgz"},"maintainers":[{"name":"mjr","email":"mjr@ranney.com"},{"name":"ujjwalt","email":"ujjwalthaakar@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-17T03:04:39.655Z","created":"2011-01-31T23:33:37.155Z","0.0.2":"2011-01-31T23:33:37.155Z","0.0.3":"2011-01-31T23:33:37.155Z","0.0.4":"2011-01-31T23:33:37.155Z","0.0.5":"2011-01-31T23:33:37.155Z","0.0.6":"2011-01-31T23:33:37.155Z","0.0.7":"2011-01-31T23:33:37.155Z","0.1.1":"2011-01-31T23:33:37.155Z","0.1.4":"2011-01-31T23:33:37.155Z","0.1.5":"2011-01-31T23:33:37.155Z","0.1.6":"2011-01-31T23:33:37.155Z","0.1.7":"2011-01-31T23:33:37.155Z","0.1.8":"2011-01-31T23:33:37.155Z","0.1.9":"2011-01-31T23:33:37.155Z","0.2.0":"2011-01-31T23:33:37.155Z","0.2.1":"2011-01-31T23:33:37.155Z","0.2.2":"2011-01-31T23:33:37.155Z","0.2.3":"2011-01-31T23:33:37.155Z","0.2.4":"2011-01-31T23:33:37.155Z","0.2.6":"2011-01-31T23:33:37.155Z","0.2.7":"2011-01-31T23:33:37.155Z","0.2.8":"2011-03-02T07:08:30.547Z","0.3.0":"2012-01-15T07:40:38.043Z","0.3.1":"2013-04-02T17:15:56.108Z","0.3.2":"2013-04-09T17:52:49.861Z","0.3.3":"2013-04-21T12:33:18.842Z","0.4.0":"2013-06-12T11:33:51.358Z","0.4.1":"2013-06-17T11:50:26.447Z","1.0.0":"2013-08-28T12:16:35.199Z","1.0.1":"2013-10-04T18:48:42.652Z","1.1.0":"2014-01-13T20:14:26.120Z","1.2.0":"2014-02-28T09:46:22.765Z","2.0.0":"2015-02-01T02:01:11.768Z","2.0.1":"2015-02-10T21:34:31.277Z"},"users":{"smiledawgg":true,"msmiley":true,"edin-m":true,"wouldgo":true,"linton":true,"limingv5":true,"magemagic":true,"piecioshka":true,"cantidio":true,"adriancmiranda":true,"juangotama":true}}}