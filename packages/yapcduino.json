{"name":"yapcduino","version":"1.1.0","description":"Yet another nodejs library for pcduino (extends jheising's node.pcduino but provide simple API and some extra function).","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","install":"node-gyp rebuild"},"repository":"https://github.com/zenozeng/yapcduino.js","keywords":["pcduino","softpwm"],"license":"LGPL","dependencies":{"nan":"^1.8.4"},"gypfile":true,"gitHead":"23487d9781b9fe9886a9c53c9d820e863a83a92b","versions":[{"number":"0.1.0","date":"2015-05-14T03:28:18.519Z"},{"number":"0.2.0","date":"2015-05-14T06:34:47.627Z"},{"number":"0.3.0","date":"2015-05-14T11:47:15.276Z"},{"number":"0.5.0","date":"2015-05-15T17:46:46.360Z"},{"number":"0.5.1","date":"2015-05-16T03:28:45.321Z"},{"number":"0.6.1","date":"2015-05-24T09:06:44.887Z"},{"number":"0.7.1","date":"2015-05-26T05:15:21.674Z"},{"number":"0.8.0","date":"2015-05-26T21:16:35.953Z"},{"number":"0.8.1","date":"2015-05-26T21:29:10.158Z"},{"number":"0.9.0","date":"2015-05-26T21:44:00.055Z"},{"number":"0.9.1","date":"2015-05-26T21:57:26.526Z"},{"number":"0.9.2","date":"2015-05-27T04:41:17.630Z"},{"number":"0.9.3","date":"2015-05-27T08:02:30.657Z"},{"number":"0.10.0","date":"2015-05-27T11:45:35.854Z"},{"number":"1.0.0","date":"2015-05-27T12:15:13.641Z"},{"number":"1.0.1","date":"2015-07-07T06:58:22.720Z"},{"number":"1.0.2","date":"2015-07-07T11:57:49.740Z"},{"number":"1.0.3","date":"2015-07-08T11:38:14.037Z"},{"number":"1.0.4","date":"2015-07-08T14:21:39.013Z"},{"number":"1.1.0","date":"2015-07-14T15:46:36.235Z"}],"readme":"# yapcduino.js\n\nYet another nodejs library for pcduino built for modern nodejs and provide more arduino functions and wrapper.\n\nYapcduino should work in Node.js 0.10 and 0.12 as well as io.js.\n\n## Install\n\n```bash\nnpm install yapcduino --save\n```\n\n## Usage\n\n### Basic Features\n\n```javascript\nvar p = require('yapcduino');\np.pinMode(10, p.INPUT); // Set pin #10 to input\np.pinMode(10, p.INPUT_PULLUP); // Set pin #10 to input with pull-up\nvar ret = p.digitalRead(10);\n```\n\n```javascript\np.pinMode(0, p.OUTPUT);\np.digitalWrite(0, p.HIGH);\np.digitalWrite(0, p.LOW);\n```\n\n```javascript\n// Note: only 3, 5, 6, 9, 10, and 11 are PWM pins\np.analogWrite(3, 16);\nvar ret = p.analogRead(3);\n```\n\n### Global Mode\n\nSometimes it's silly to write all this functions with a prefix.\nSince yapcduino@0.9.0, we have introduced global mode.\n\n```javascript\nrequire('yapcduino')({global: true});\npinMode(0, OUTPUT);\ndigitalWrite(0, HIGH);\n```\n\n### Arduino Binding\n\nThe following functions are provided using Node.js's Nan binding.\nAnd can be called like `pcduino.pinMode(0, pcduino.OUTPUT)`\n\n```c\nvoid pinMode(uint8_t, uint8_t);\nvoid digitalWrite(uint8_t, uint8_t);\nint digitalRead(uint8_t);\nint analogRead(uint8_t);\n/*\n * only pin (3/5/6/9/10/11) can be used as analog\n */\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t, int);\n/*\n * pin(3/9/10/11) support frequency[125-2000]Hz @different dutycycle\n * pin(5/6) support frequency[195,260,390,520,781] @256 dutycycle\n */\nint pwmfreq_set(uint8_t pin, unsigned int freq);\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long);\nvoid delayMicroseconds(unsigned int us);\nvoid delaySched(unsigned long);\nvoid delayMicrosecondsSched(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n```\n\n### Constants\n\n```\nHIGH: 0x1,\nLOW: 0x0,\n\nINPUT: 0x0,\nOUTPUT: 0x1,\nINPUT_PULLUP: 0x2,\n\nLSBFIRST: 0,\nMSBFIRST: 1,\n\nCHANGE: 1,\nFALLING: 2,\nRISING: 3\n```\n\n### Servo\n\n```javascript\nrequire('yapcduino')({global: true});\nvar s = new Servo(3, {type: 'SG90'}); // available types: ['SG90']\nfor(var i = 1; i <= 180; i += 5) {\n    Native.delay(100);\n    console.log(i);\n    s.write(i);\n}\ns.stop();\n```\n\n#### jsdoc\n\n```javascript\n/**\n * Construct a Servo object\n *\n * Note: pin(3/9/10/11) support frequency[125-2000]Hz @different dutycycle\n *       pin(5/6) support frequency[195,260,390,520,781] @256 dutycycle\n *\n * @param {Int} pin - pwm pin to use (only 3, 5, 6, 9, 10, and 11)\n * @param {Object} options - Options for servo\n * @param {String} options.type - Type of your servo, available types: ['default', 'SG90']\n * @param {Int} options.minPWM - PWM Value for angle 0, optional if options.type defined\n * @param {Int} options.maxPWM - PWM Value for angle max, optional if options.type defined\n * @param {Int} options.maxAngle - Max angle to reach, defaults 180, optional if options.type defined\n * @param {Int} options.frequency - Frequency, defaults to 390, optional if options.type defined\n */\nfunction Servo(pin, options) {}\n\n/**\n * Set angle to given angle\n *\n * @param {Int} angle - Angle in degree\n */\nServo.prototype.write = function(angle) {}\n\n/**\n * Return current angle\n */\nServo.prototype.read = function() {}\n\n/**\n * Stop Servo\n */\nServo.prototype.stop = function() {}\n```\n\n### SoftPWM (Powered by pthread)\n\nUse your GPIO pin to fake PWM pin using CPU.\n\n**Improtant**: SoftPWM may not be stable enough for your **servo**, which expects a pulse over a very tight range. Use SoftPWM in servo may cause positions jumps.\n\n```javascript\nvar pin = 0;\nvar pwm = new SoftPWM(pin);\nvar dutyCycle = 0.5;\npwm.write(dutyCycle, {frequency: 980, loops: Infinity}); // run the PWM forever\n// everything done? stop and unset this.pin\n// Note: after detach, you have to attach(pin) before call write or read\npwm.detach();\n```\n\n```javascript\nvar pin = 0;\nvar pwm = new SoftPWM(pin);\nvar dutyCycle = 0.5;\nvar us = 20 * 1000; // 500HZ\npwm.write(dutyCycle, {period: us, loops: 1000});\n// Get count of loops of the pin since last write (useful for stepping motor)\nvar count = pwm.getLoopCount();\n```\n\n#### jsdoc\n\n```javascript\nfunction SoftPWM(pin) {}\n\n/**\n * Attach the SoftPWM instance to a new pin\n *\n */\nSoftPWM.prototype.attach = function(pin) {}\n\n/**\n * Detach the SoftPWM instance from original pin (will unset output of original pin and set this.pin to null)\n *\n */\nSoftPWM.prototype.detach = function() {}\n\n/**\n * Get count of loops of the pin since last write\n *\n */\nSoftPWM.prototype.getLoopCount = function() {}\n\n/**\n * Writes a PWM wave to a p in (using digitalWrite).\n * To stop, simply call pwm.write(0)\n *\n * @see http://www.arduino.cc/en/Tutorial/PWM\n * @see http://www.arduino.cc/en/Reference/analogWrite\n * @param {Float} dutyCycle - Duty Cycle [0, 1]\n * @param {Object} options - Options for PWM\n * @param {Int} options.period - Period (in us), defaults to 20 * 1000\n * @param {Int} options.frequency - Frequency, period will be ignored if frequency set\n * @param {Number} options.loops - (loops to live) How many loops should it run, defaults to Infinity (actually is 2147483647), note that -1 will be converted to 2147483647\n * @param {Bool} options.sync - Whether to run it in sync mode, defaults to false\n */\nSoftPWM.prototype.write = function(dutyCycle, options) {}\n\n/**\n * Read last set dutyCycle (will return undefined if not set)\n *\n */\nSoftPWM.prototype.read = function() {}\n```\n\n## Source\n\nThe src/arduino comes from https://github.com/pcduino/c_environment\n\n## Authors\n\n- Zeno Zeng \\<zenoofzeng@gmail.com\\>\n\n- Senorsen \\<sen@senorsen.com\\>\n\n## Changelog\n\nSee: https://github.com/zenozeng/yapcduino.js/releases\n\n## Links\n\n- [How can I kill a particular thread of a process?](http://unix.stackexchange.com/questions/1066/how-can-i-kill-a-particular-thread-of-a-process)\n","created":"2015-05-14T03:28:18.519Z","modified":"2015-07-14T15:46:36.235Z","lastPublisher":{"name":"zenozeng","email":"zenoofzeng@gmail.com"},"owners":[{"name":"zenozeng","email":"zenoofzeng@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"yapcduino","_npmUser":{"name":"zenozeng","email":"zenoofzeng@gmail.com"},"_npmVersion":"1.4.21","_rev":"1-948df6d1173c864c1522113329689cdb","_shasum":"806fcff836bce4009ab182e8f6bdd948297d8b62","author":{"name":"Zeno Zeng"},"bugs":{"url":"https://github.com/zenozeng/yapcduino.js/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"806fcff836bce4009ab182e8f6bdd948297d8b62","tarball":"http://registry.npmjs.org/yapcduino/-/yapcduino-1.1.0.tgz"},"maintainers":[{"name":"zenozeng","email":"zenoofzeng@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-07-14T15:46:36.235Z","created":"2015-05-14T03:28:18.519Z","0.1.0":"2015-05-14T03:28:18.519Z","0.2.0":"2015-05-14T06:34:47.627Z","0.3.0":"2015-05-14T11:47:15.276Z","0.5.0":"2015-05-15T17:46:46.360Z","0.5.1":"2015-05-16T03:28:45.321Z","0.6.1":"2015-05-24T09:06:44.887Z","0.7.1":"2015-05-26T05:15:21.674Z","0.8.0":"2015-05-26T21:16:35.953Z","0.8.1":"2015-05-26T21:29:10.158Z","0.9.0":"2015-05-26T21:44:00.055Z","0.9.1":"2015-05-26T21:57:26.526Z","0.9.2":"2015-05-27T04:41:17.630Z","0.9.3":"2015-05-27T08:02:30.657Z","0.10.0":"2015-05-27T11:45:35.854Z","1.0.0":"2015-05-27T12:15:13.641Z","1.0.1":"2015-07-07T06:58:22.720Z","1.0.2":"2015-07-07T11:57:49.740Z","1.0.3":"2015-07-08T11:38:14.037Z","1.0.4":"2015-07-08T14:21:39.013Z","1.1.0":"2015-07-14T15:46:36.235Z"}}}