{"name":"snowboy-detect","version":"1.0.5","description":"Snowboy is a customizable hotword detection engine","main":"lib/node/index.js","scripts":{"install":"node-gyp rebuild"},"license":"ISC","dependencies":{"bindings":"^1.2.1","nan":"^2.4.0","node-gyp":"^3.4.0"},"gitHead":"d2beec0abf779efb8abaf6ec41624e5b831cc937","gypfile":true,"deprecated":"Use npmjs.org/snowboy instead","versions":[{"number":"1.0.4","date":"2016-09-09T19:05:34.360Z"},{"number":"1.0.5","date":"2016-09-10T09:59:51.071Z"}],"readme":"# Snowboy Hotword Detection\n\nby [KITT.AI](http://kitt.ai).\n\n[Home Page](https://snowboy.kitt.ai)\n\n[Full Documentation](http://docs.kitt.ai/snowboy)\n\n\nVersion: 1.0.4 (7/13/2016)\n\nSnowboy is a customizable hotword detection engine for you to create your own\nhotword like \"OK Google\" or \"Alexa\". It is powered by deep neural networks and\nhas the following properties:\n\n* **highly customizable**: you can freely define your own magic phrase here –\nlet it be “open sesame”, “garage door open”, or “hello dreamhouse”, you name it.\n\n* **always listening** but protects your privacy: Snowboy does not use Internet\nand does *not* stream your voice to the cloud.\n\n* light-weight and **embedded**: it even runs on a Raspberry Pi and consumes\nless than 10% CPU on the weakest Pi (single-core 700MHz ARMv6).\n\n* Apache licensed!\n\nCurrently Snowboy supports:\n\n* all versions of Raspberry Pi (with Raspbian based on Debian Jessie 8.0)\n* 64bit Mac OS X\n* 64bit Ubuntu (12.04 and 14.04)\n* iOS\n* Android\n\nIt ships in the form of a **C++ library** with language-dependent wrappers\ngenerated by SWIG. We welcome wrappers for new languages -- feel free to send a\npull request!\n\nIf you want support on other hardware/OS, please send your request to\n[snowboy@kitt.ai](mailto:snowboy.kitt.ai)\n\n## Precompiled Binaries with Python Demo\n* 64 bit Ubuntu [12.04](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/ubuntu1204-x86_64-1.0.4.tar.bz2)\n  / [14.04](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/ubuntu1404-x86_64-1.0.4.tar.bz2)\n* [MacOS X](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/osx-x86_64-1.0.4.tar.bz2)\n* Raspberry Pi with Raspbian 8.0, all versions\n  ([1/2/3/Zero](https://s3-us-west-2.amazonaws.com/snowboy/snowboy-releases/rpi-arm-raspbian-8.0-1.0.4.tar.bz2))\n  \nIf you want to compile a version against your own environment/language, read on.\n\n## Dependencies\n\nSnowboy's Python wrapper uses PortAudio to access your device's microphone.\n\n### Mac OS X\n\n`brew` install `swig`, `sox`, `portaudio` and its Python binding `pyaudio`:\n\n    brew install swig portaudio sox\n    pip install pyaudio\n\nIf you don't have Homebrew installed, please download it [here](http://brew.sh/). If you don't have `pip`, you can install it [here](https://pip.pypa.io/en/stable/installing/).\n\nMake sure that you can record audio with your microphone:\n\n    rec t.wav\n\n### Ubuntu/Raspberry Pi\n\nFirst `apt-get` install `swig`, `sox`, `portaudio` and its Python binding `pyaudio`:\n\n    sudo apt-get install swig3.0 python-pyaudio python3-pyaudio sox\n    pip install pyaudio\n    \nThen install the `atlas` matrix computing library:\n\n    sudo apt-get install libatlas-base-dev\n    \nMake sure that you can record audio with your microphone:\n\n    rec t.wav\n        \nIf you need extra setup on your audio (especially on a Raspberry Pi), please see the [full documentation](http://docs.kitt.ai/snowboy).\n\n## Compile a Python Wrapper\n\n    cd swig/Python\n    make\n\nSWIG will generate a `_snowboydetect.so` file and a simple (but hard-to-read) python wrapper `snowboydetect.py`. We have provided a higher level python wrapper `snowboydecoder.py` on top of that.\n    \nFeel free to adapt the `Makefile` in `swig/Python` to your own system's setting if you cannot `make` it.\n\n\n## Compile an iOS Wrapper\n\nUsing Snowboy library in Objective-C does not really require a wrapper. It is basically the same as using C++ library in Objective-C. We have compiled a \"fat\" static library for iOS devices, see the library here `lib/ios/libsnowboy-detect.a`.\n\nTo initialize Snowboy detector in Objective-C:\n\n    snowboy::SnowboyDetect* snowboyDetector = new snowboy::SnowboyDetect(\n        std::string([[[NSBundle mainBundle]pathForResource:@\"common\" ofType:@\"res\"] UTF8String]),\n        std::string([[[NSBundle mainBundle]pathForResource:@\"snowboy\" ofType:@\"umdl\"] UTF8String]));\n    snowboyDetector->SetSensitivity(\"0.45\");        // Sensitivity for each hotword\n    snowboyDetector->SetAudioGain(2.0);             // Audio gain for detection\n\nTo run hotword detection in Objective-C:\n\n    int result = snowboyDetector->RunDetection(buffer[0], bufferSize);  // buffer[0] is a float array\n\nYou may want to play with the frequency of the calls to `RunDetection()`, which controls the CPU usage and the detection latency.\n\n## Compile an Android Wrapper\n\n    cd swig/Android\n    # Make sure you set up the NDKROOT variable in Makefile before you run.\n    # We have only tested with NDK version r11c.\n    make\n\nUsing Snowboy library on Android devices is a little bit tricky. We have only tested with NDK version r11c. We do not support r12 yet because of the removal of armeabi-v7a-hard ABI in r12. We have compiled Snowboy using Android's cross-compilation toolchain for ARMV7 architecture, see the library here `lib/android/armv7a/libsnowboy-detect.a`. We then use SWIG to generate the Java wrapper, and use Android's cross-compilation toolchain to generate the corresponding JNI libraries. After running `make`, two directories will be created: `java` and `jniLibs`. Copy these two directories to your Android app directory (e.g., `app/src/main/`) and you should be able to call Snowboy funcitons within Java.\n\nTo initialize Snowboy detector in Java:\n\n    # Assume you put the model related files under /sdcard/snowboy/\n    SnowboyDetect snowboyDetector = new SnowboyDetect(\"/sdcard/snowboy/common.res\",\n                                                      \"/sdcard/snowboy/snowboy.umdl\");\n    snowboyDetector.SetSensitivity(\"0.45\");         // Sensitivity for each hotword\n    snowboyDetector.SetAudioGain(2.0);              // Audio gain for detection\n\nTo run hotword detection in Java:\n\n    int result = snowboyDetector.RunDetection(buffer, buffer.length);   // buffer is a short array.\n\nYou may want to play with the frequency of the calls to `RunDetection()`, which controls the CPU usage and the detection latency.\n\n## Quick Start for Python Demo\n\nGo to the `examples/Python` folder and open your python console:\n\n    In [1]: import snowboydecoder\n    \n    In [2]: def detected_callback():\n       ....:     print \"hotword detected\"\n       ....:\n    \n    In [3]: detector = snowboydecoder.HotwordDetector(\"resources/snowboy.umdl\", sensitivity=0.5, audio_gain=1)\n    \n    In [4]: detector.start(detected_callback)\n    \nThen speak \"snowboy\" to your microphone to see whetheer Snowboy detects you.\n\nThe `snowboy.umdl` file is a \"universal\" model that detect different people speaking \"snowboy\". If you want other hotwords, please go to [snowboy.kitt.ai](https://snowboy.kitt.ai) to record, train and downloand your own personal model (a `.pmdl` file).\n\nWhen `sensitiviy` is higher, the hotword gets more easily triggered. But you might get more false alarms.\n\n`audio_gain` controls whether to increase (>1) or decrease (<1) input volume.\n\nTwo demo files `demo.py` and `demo2.py` are provided to show more usages.\n\nNote: if you see the following error:\n\n    TypeError: __init__() got an unexpected keyword argument 'model_str'\n    \nYou are probably using an old version of SWIG. Please upgrade. We have tested with SWIG version 3.0.7 and 3.0.8.\n\n## Advanced Usages & Demos\n\nSee [Full Documentation](http://docs.kitt.ai/snowboy).\n\n## Change Log\n\n**v1.0.4, 7/13/2016**\n\n* Updated universal `snowboy.umdl` model to make it more robust.\n* Various improvements to speed up the detection.\n* Bug fixes.\n\n**v1.0.3, 6/4/2016**\n\n* Updated universal `snowboy.umdl` model to make it more robust in non-speech environment.\n* Fixed bug when using float as input data.\n* Added library support for Android ARMV7 architecture.\n* Added library for iOS.\n\n**v1.0.2, 5/24/2016**\n\n* Updated universal `snowboy.umdl` model\n* added C++ examples, docs will come in next release.\n\n**v1.0.1, 5/16/2016**\n\n* VAD now returns -2 on silence, -1 on error, 0 on voice and >0 on triggered models\n* added static library for Raspberry Pi in case people want to compile themselves instead of using the binary version\n\n**v1.0.0, 5/10/2016**\n\n* initial release\n","created":"2016-09-09T19:05:34.360Z","modified":"2016-09-14T19:11:44.582Z","lastPublisher":{"name":"hexeo","email":"dev@hexeo.be"},"owners":[{"name":"hexeo","email":"dev@hexeo.be"}],"other":{"_attachments":{},"_from":".","_id":"snowboy-detect","_nodeVersion":"6.3.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/snowboy-detect-1.0.5.tgz_1473501588214_0.11460298718884587"},"_npmUser":{"name":"hexeo","email":"dev@hexeo.be"},"_npmVersion":"3.10.3","_rev":"1-73c12db82b71d4cb1aa7e645bfae9f55","_shasum":"0cc9dd8afb7e44fd59e7bd814c14932617d5d25a","author":{"name":"Kitt-AI","email":"snowboy@kitt.ai"},"contributors":[{"name":"Leandre Gohy","email":"leandre.gohy@hexeo.be"}],"directories":{},"dist-tags":{"latest":"1.0.5"},"dist":{"shasum":"0cc9dd8afb7e44fd59e7bd814c14932617d5d25a","tarball":"http://registry.npmjs.org/snowboy-detect/-/snowboy-detect-1.0.5.tgz"},"maintainers":[{"name":"hexeo","email":"dev@hexeo.be"}],"readmeFilename":"README.md","time":{"modified":"2016-09-14T19:11:44.582Z","created":"2016-09-09T19:05:34.360Z","1.0.4":"2016-09-09T19:05:34.360Z","1.0.5":"2016-09-10T09:59:51.071Z"}}}