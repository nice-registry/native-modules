{"name":"nfqueue","version":"0.3.1","description":"Netfilter nfqueue binding","main":"./nfqueue","repository":"https://github.com/atoy40/node-nfqueue","keywords":["nfqueue","queue","linux","netfilter","iptables"],"dependencies":{"nan":"^2.2.0"},"scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"479800bb0f5050f96b001ae5ce68ea8d23a870dc","homepage":"https://github.com/atoy40/node-nfqueue#readme","versions":[{"number":"0.0.1","date":"2014-04-15T08:20:39.346Z"},{"number":"0.0.2","date":"2014-04-15T10:53:02.052Z"},{"number":"0.0.3","date":"2014-04-15T15:20:05.378Z"},{"number":"0.0.4","date":"2015-01-21T13:53:59.947Z"},{"number":"0.1.0","date":"2015-01-21T16:40:42.113Z"},{"number":"0.2.0","date":"2015-09-04T07:59:29.330Z"},{"number":"0.3.0","date":"2016-02-09T09:15:14.196Z"},{"number":"0.3.1","date":"2016-06-07T09:50:03.408Z"}],"readme":"node-nfqueue\n============\n\nThis is a node.js binding to the linux netfilter NFQUEUE. It allows to filter packets thought a javascript program.\nThis is done asynchronously using libuv poll.\n\n## Example\n\nThis small example allow one packet every two, and display IP header informations using the pcap binding to decode the payload (payload is provided as a javascript Buffer object by the wrapper, and this is what pcap library handle too)\n```js\nvar nfq = require('nfqueue');\nvar IPv4 = require('pcap/decode/ipv4');\nvar counter = 0;\n\nnfq.createQueueHandler(1, function(nfpacket) {\n  console.log(\"-- packet received --\");\n  console.log(JSON.stringify(nfpacket.info, null, 2));\n\n  // Decode the raw payload using pcap library\n  var packet = new IPv4().decode(nfpacket.payload, 0);\n  // Protocol numbers, for example: 1 - ICMP, 6 - TCP, 17 - UDP\n  console.log(\n    \"src=\" + packet.saddr + \", dst=\" + packet.daddr\n    + \", proto=\" + packet.protocol\n  );\n\n  // Set packet verdict. Second parameter set the packet mark.\n  nfpacket.setVerdict((counter++ % 2) ? nfq.NF_DROP : nfq.NF_ACCEPT);\n\n  // Or modify packet and set updated payload\n  // nfpacket.setVerdict(nfq.NF_ACCEPT, null, nfpacket.payload);\n});\n```\nFor an icmp packet, and a nfqueuing in INPUT chain of filter table, it'll output something looking like :\n\n    packet received\n    {\n      \"len\": 84,\n      \"id\": 3,\n      \"nfmark\": 0,\n      \"indev\": 2,\n      \"physindev\": 0,\n      \"outdev\": 0,\n      \"physoutdev\": 0,\n      \"indev_name\": \"eth0\",\n      \"physintdev_name\": \"*\",\n      \"outdev_name\": \"*\",\n      \"physoutdev_name\": \"*\"\n    }\n    src=10.33.15.1, dst=10.0.2.15, proto=1\n\nBe careful, you must be root to open nfqueue handles. Here is an iptables command example to add a rule sending icmp to nfqueue #1 :\n\n    sudo iptables -I INPUT 1 -p icmp -j NFQUEUE --queue-num 1\n\n## Requirements\n  - Linux kernel >= 2.6.30\n\n## Troubleshooting\n\n### Performance and ENOBUFS (No buffer space available)\n\nWith a large number of packets in the queue happens that the queue is destroyed due to a read error from the socket\n\n```sh\nrecvfrom(20, 0x7fffab1d5b70, 65535, 0, 0, 0) = -1 ENOBUFS (No buffer space available)\n```\nrecv() may return -1 and errno is set to ENOBUFS in case that your application is not fast enough to retrieve the packets from the kernel.\n\nBy default to avoid queue destroy we use socket option NETLINK_NO_ENOBUFS, it allows ignore packets instead destroy socket with error.\nhttps://patchwork.ozlabs.org/patch/24919/\n\nTo avoid packet loss you may increase default socket buffer size up to your need when create queue.\n```js\nnfq.createQueueHandler(1, 67108864, function() {});\n```\nDefault socket buffer size: 65535.\n\nTo improve your libnetfilter_queue application in terms of performance, you may consider the following tweaks:\n\n- increase the default socket buffer size.\nset nice value of your process to -20 (maximum priority).\n- set the CPU affinity of your process to a spare core that is not used to handle NIC interruptions.\n- use --queue-balance option in NFQUEUE target for multi-threaded apps (it requires Linux kernel >= 2.6.31).\n\nhttp://www.netfilter.org/projects/libnetfilter_queue/doxygen/index.html\n\n## Author and license\n\nCopyright (C) 2014  Anthony Hinsinger\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n","starsCount":1,"created":"2014-04-15T08:20:39.346Z","modified":"2016-06-07T09:50:03.408Z","lastPublisher":{"name":"atoy40","email":"anthony.hinsinger@gmail.com"},"owners":[{"name":"atoy40","email":"anthony.hinsinger@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"nfqueue","_nodeVersion":"4.2.6","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nfqueue-0.3.1.tgz_1465293000965_0.6807835316285491"},"_npmUser":{"name":"atoy40","email":"anthony.hinsinger@gmail.com"},"_npmVersion":"3.5.2","_rev":"1-8a5c55baebd61239b145d9c4335dd8eb","_shasum":"ef6d632a242d38345e76e237d7fb9b60d64a2381","author":{"name":"Anthony Hinsinger","email":"anthony.hinsinger@gmail.com"},"bugs":{"url":"https://github.com/atoy40/node-nfqueue/issues"},"contributors":[{"name":"Aleksandr Komlev"}],"directories":{},"dist-tags":{"latest":"0.3.1"},"dist":{"shasum":"ef6d632a242d38345e76e237d7fb9b60d64a2381","tarball":"http://registry.npmjs.org/nfqueue/-/nfqueue-0.3.1.tgz"},"maintainers":[{"name":"atoy40","email":"anthony.hinsinger@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-06-07T09:50:03.408Z","created":"2014-04-15T08:20:39.346Z","0.0.1":"2014-04-15T08:20:39.346Z","0.0.2":"2014-04-15T10:53:02.052Z","0.0.3":"2014-04-15T15:20:05.378Z","0.0.4":"2015-01-21T13:53:59.947Z","0.1.0":"2015-01-21T16:40:42.113Z","0.2.0":"2015-09-04T07:59:29.330Z","0.3.0":"2016-02-09T09:15:14.196Z","0.3.1":"2016-06-07T09:50:03.408Z"},"users":{"atoy40":true}}}