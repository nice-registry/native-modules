{"name":"epoll","version":"0.1.22","description":"A low-level Node.js binding for the Linux epoll API","main":"epoll.js","scripts":{"test":"echo \"Tests can only be run manually from the command line.\" && exit 1","install":"node-gyp rebuild"},"repository":"https://github.com/fivdi/epoll","engines":{"node":">=0.10.0"},"dependencies":{"bindings":"~1.2.1","nan":"~2.6.2"},"keywords":["epoll","epollpri","poll","pollpri","gpio","interrupt","linux"],"license":"MIT","gypfile":true,"gitHead":"1d3a1173be8ccb39a02ae599f8720a9dd6bfbdc5","homepage":"https://github.com/fivdi/epoll#readme","versions":[{"number":"0.0.1","date":"2013-09-21T23:06:03.039Z"},{"number":"0.0.2","date":"2013-09-22T10:48:58.231Z"},{"number":"0.0.3","date":"2013-09-25T19:00:41.223Z"},{"number":"0.0.4","date":"2013-09-25T19:23:28.749Z"},{"number":"0.0.5","date":"2013-09-25T19:29:54.414Z"},{"number":"0.0.6","date":"2013-10-01T10:48:09.148Z"},{"number":"0.0.7","date":"2013-10-05T09:17:31.984Z"},{"number":"0.0.8","date":"2013-10-14T19:23:54.876Z"},{"number":"0.1.0","date":"2013-11-18T16:24:41.864Z"},{"number":"0.1.1","date":"2013-11-18T23:44:41.576Z"},{"number":"0.1.2","date":"2013-11-21T19:57:03.416Z"},{"number":"0.1.3","date":"2014-03-23T20:22:18.347Z"},{"number":"0.1.4","date":"2014-04-18T14:06:48.807Z"},{"number":"0.1.5","date":"2014-05-04T21:42:59.118Z"},{"number":"0.1.7","date":"2014-05-29T12:13:27.378Z"},{"number":"0.1.8","date":"2014-07-12T08:38:06.031Z"},{"number":"0.1.9","date":"2014-08-09T19:36:52.677Z"},{"number":"0.1.10","date":"2014-11-02T06:12:21.211Z"},{"number":"0.1.11","date":"2015-01-17T20:03:07.402Z"},{"number":"0.1.12","date":"2015-02-10T20:37:53.422Z"},{"number":"0.1.13","date":"2015-05-07T17:57:47.829Z"},{"number":"0.1.14","date":"2015-08-24T18:43:24.572Z"},{"number":"0.1.15","date":"2015-08-24T21:08:10.889Z"},{"number":"0.1.16","date":"2015-10-10T20:13:46.712Z"},{"number":"0.1.17","date":"2016-01-29T19:38:06.220Z"},{"number":"0.1.18","date":"2016-04-27T19:54:33.027Z"},{"number":"0.1.19","date":"2016-05-03T21:35:23.932Z"},{"number":"0.1.20","date":"2016-07-22T21:12:29.289Z"},{"number":"0.1.21","date":"2017-02-12T08:00:28.917Z"},{"number":"0.1.22","date":"2017-06-18T19:02:54.111Z"}],"readme":"## epoll\n\nA low-level **Node.js** binding for the Linux epoll API for monitoring multiple\nfile descriptors to see if I/O is possible on any of them.\n\nThis module was initially written to detect EPOLLPRI events indicating that\nurgent data is available for reading. EPOLLPRI events are triggered by\ninterrupt generating [GPIO](https://www.kernel.org/doc/Documentation/gpio/)\npins. The epoll module is used by [onoff](https://github.com/fivdi/onoff)\nto detect such interrupts.\n\nepoll supports Node.js versions 0.10, 0.12, 4, 5, 6, 7 and 8.\n\n## Installation\n\nNote that epoll can only be installed successfully on Linux systems. Attempting\nto install epoll on other systems will result in compile errors.\n\n    $ npm install epoll\n\nIf you're using Node.js v4 or higher and seeing lots of compile errors when\ninstalling epoll, it's very likely that gcc/g++ 4.8 or higher are not\ninstalled. See\n[Node.js v4 and native addons](https://github.com/fivdi/onoff/wiki/Node.js-v4-and-native-addons)\nfor details.\n\nIf you're using Node.js v0.10.29 on the Raspberry Pi and seeing a compile\nerror saying that `‘REPLACE_INVALID_UTF8’ is not a member of ‘v8::String’`\nsee [Node.js v0.10.29 and native addons on the Raspberry Pi](https://github.com/fivdi/onoff/wiki/Node.js-v0.10.29-and-native-addons-on-the-Raspberry-Pi).\n\nIf you're using Node.js v0.10.29 on the BeagleBone Black and seeing a compile\nerror saying that `‘REPLACE_INVALID_UTF8’ is not a member of ‘v8::String’`\nsee [Node.js v0.10.29 and native addons on the BeagleBone Black](https://github.com/fivdi/onoff/wiki/Node.js-v0.10.29-and-native-addons-on-the-BeagleBone-Black).\n\n## API\n\n  * Epoll(callback) - Constructor. The callback is called when epoll events\n    occur and it gets three arguments (err, fd, events).\n  * add(fd, events) - Register file descriptor fd for the event types specified\n    by events.\n  * remove(fd) - Deregister file descriptor fd.\n  * modify(fd, events) - Change the event types associated with file descriptor\n    fd to those specified by events.\n  * close() - Deregisters all file descriptors and free resources.\n\nEvent Types\n\n  * Epoll.EPOLLIN\n  * Epoll.EPOLLOUT\n  * Epoll.EPOLLRDHUP\n  * Epoll.EPOLLPRI\n  * Epoll.EPOLLERR\n  * Epoll.EPOLLHUP\n  * Epoll.EPOLLET\n  * Epoll.EPOLLONESHOT\n\nEvent types can be combined with | when calling add or modify. For example,\nEpoll.EPOLLPRI | Epoll.EPOLLONESHOT could be passed to add to detect a single\nGPIO interrupt.\n\n## Example - Watching Buttons\n\nThe following example shows how epoll can be used to detect interrupts from a\nmomentary push-button connected to GPIO #4 (pin P1-7) on the Raspberry Pi.\nThe source code is available in the [example directory]\n(https://github.com/fivdi/epoll/tree/master/example/watch-button) and can\neasily be modified for using a different GPIO on the Pi or a different platform\nsuch as the BeagleBone.\n\nThe first step is to export GPIO #4 as an interrupt generating input using\nthe export bash script from the examples directory.\n\n    $ [sudo] ./export\n\nexport:\n```bash\n#!/bin/sh\necho 4 > /sys/class/gpio/export\necho in > /sys/class/gpio/gpio4/direction\necho both > /sys/class/gpio/gpio4/edge\n```\n\nThen run watch-button to be notified every time the button is pressed and\nreleased. If there is no hardware debounce circuit for the push-button, contact\nbounce issues are very likely to be visible on the console output.\nwatch-button terminates automatically after 30 seconds.\n\n    $ [sudo] node watch-button\n\nwatch-button:\n```js\nvar Epoll = require('../../build/Release/epoll').Epoll,\n  fs = require('fs'),\n  valuefd = fs.openSync('/sys/class/gpio/gpio4/value', 'r'),\n  buffer = new Buffer(1);\n\n// Create a new Epoll. The callback is the interrupt handler.\nvar poller = new Epoll(function (err, fd, events) {\n  // Read GPIO value file. Reading also clears the interrupt.\n  fs.readSync(fd, buffer, 0, 1, 0);\n  console.log(buffer.toString() === '1' ? 'released' : 'pressed');\n});\n\n// Read the GPIO value file before watching to\n// prevent an initial unauthentic interrupt.\nfs.readSync(valuefd, buffer, 0, 1, 0);\n\n// Start watching for interrupts.\npoller.add(valuefd, Epoll.EPOLLPRI);\n\n// Stop watching after 30 seconds.\nsetTimeout(function () {\n  poller.remove(valuefd).close();\n}, 30000);\n```\n\nWhen watch-button has terminated, GPIO #4 can be unexported using the\nunexport bash script.\n\n    $ [sudo] ./unexport\n\nunexport:\n```bash\n#!/bin/sh\necho 4 > /sys/class/gpio/unexport\n```\n\n## Example - Interrupts Per Second\n\nThe following example shows how epoll can be used to determine the number of\nhardware interrupts that can be handled per second on the Raspberry Pi.\nThe source code is available in the [example directory]\n(https://github.com/fivdi/epoll/tree/master/example/interrupts-per-second) and\ncan easily be modified to use different GPIOs on the Raspberry Pi or a\ndifferent platform such as the BeagleBone.\n\nIn this example, GPIO #7 is wired to one end of a 1kΩ current limiting\nresistor and GPIO #8 is wired to the other end of the resistor. GPIO #7 is an\ninput and GPIO #8 is an output.\n\nThe first step is to export GPIOs #7 and #8 using the export bash script from\nthe examples directory.\n\n    $ [sudo] ./export\n\nexport:\n```bash\n#!/bin/sh\necho 7 > /sys/class/gpio/export\necho 8 > /sys/class/gpio/export\necho in > /sys/class/gpio/gpio7/direction\necho both > /sys/class/gpio/gpio7/edge\necho out > /sys/class/gpio/gpio8/direction\n```\n\nThen run interrupts-per-second. interrupts-per-second toggles the state of the\noutput every time it detects an interrupt on the input. Each toggle will\ntrigger the next interrupt. After five seconds, interrupts-per-second prints\nthe number of interrupts it detected per second.\n\n    $ [sudo] node interrupts-per-second\n\ninterrupts-per-second:\n```js\nvar Epoll = require('../../build/Release/epoll').Epoll,\n  fs = require('fs'),\n  inputfd = fs.openSync('/sys/class/gpio/gpio7/value', 'r+'),\n  outputfd = fs.openSync('/sys/class/gpio/gpio8/value', 'r+'),\n  value = new Buffer(1),  // The three Buffers here are global\n  zero = new Buffer('0'), // to improve performance.\n  one = new Buffer('1'),\n  count = 0,\n  time;\n\n// Create a new Epoll. The callback is the interrupt handler.\nvar poller = new Epoll(function (err, fd, events) {\n  var nextValue;\n\n  count++;\n\n  // Read GPIO value file. Reading also clears the interrupt.\n  fs.readSync(inputfd, value, 0, 1, 0);\n\n  // Toggle GPIO value. This will eventually result\n  // in the next interrupt being triggered.\n  nextValue = value[0] === zero[0] ? one : zero;\n  fs.writeSync(outputfd, nextValue, 0, nextValue.length, 0);\n});\n\ntime = process.hrtime(); // Get start time.\n\n// Start watching for interrupts. This will trigger the first interrupt\n// as the value file already has data waiting for a read.\npoller.add(inputfd, Epoll.EPOLLPRI);\n\n// Print interrupt rate to console after 5 seconds.\nsetTimeout(function () {\n  var rate;\n\n  time = process.hrtime(time); // Get run time.\n  rate = Math.floor(count / (time[0] + time[1] / 1E9));\n  console.log(rate + ' interrupts per second');\n\n  // Stop watching.\n  poller.remove(inputfd).close();\n}, 5000);\n```\n\nWhen interrupts-per-second has terminated, GPIOs #7 and #8 can be unexported\nusing the unexport bash script.\n\n    $ [sudo] ./unexport\n\nunexport:\n```bash\n#!/bin/sh\necho 7 > /sys/class/gpio/unexport\necho 8 > /sys/class/gpio/unexport\n```\n\nHere are some results from the \"Interrupts Per Second\" example.\n\n**BeagleBone, 720MHz, Ångström v2012.12, Kernel 3.8.13, epoll v0.0.6:**\n\nNode.js | Interrupts / Second\n:---: | ---:\nv0.11.7 | 7152\nv0.10.20 | 5861\nv0.8.22 | 6098\n\n**BeagleBone Black, 1GHz, Debian, Kernel 3.8.13, epoll v0.1.11:**\n\nNode.js | Interrupts / Second\n:---: | ---:\nv0.10.25 | 9133\n\n**Raspberry Pi, 700Mhz, Raspbian, Kernel 3.2.27+, epoll v0.0.6:**\n\nNode.js | Interrupts / Second\n:---: | ---:\nv0.11.07 | 4071\nv0.10.16 | 3530\nv0.8.14 | 3591\n\n**Raspberry Pi 2, 900Mhz, Raspbian, Kernel 3.18.5-v7+, epoll v0.1.11:**\n\nNode.js | Interrupts / Second\n:---: | ---:\nv0.10.36 | 10438\n\n","created":"2013-09-21T23:05:59.427Z","modified":"2017-06-18T19:02:54.111Z","lastPublisher":{"name":"fivdi","email":"fivdiweb@gmail.com"},"owners":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"epoll","_nodeVersion":"6.2.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/epoll-0.1.22.tgz_1497812573009_0.238171414937824"},"_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"_npmVersion":"3.9.5","_rev":"3-26cb717195c1e1cd774abb9ecead9798","_shasum":"1ab9a637cff11a20970c888b1ca2178b64cf5291","author":{"name":"fivdi"},"bugs":{"url":"https://github.com/fivdi/epoll/issues"},"directories":{"example":"example","test":"test"},"dist-tags":{"latest":"0.1.22"},"dist":{"shasum":"1ab9a637cff11a20970c888b1ca2178b64cf5291","tarball":"https://registry.npmjs.org/epoll/-/epoll-0.1.22.tgz"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-18T19:02:54.111Z","created":"2013-09-21T23:05:59.427Z","0.0.1":"2013-09-21T23:06:03.039Z","0.0.2":"2013-09-22T10:48:58.231Z","0.0.3":"2013-09-25T19:00:41.223Z","0.0.4":"2013-09-25T19:23:28.749Z","0.0.5":"2013-09-25T19:29:54.414Z","0.0.6":"2013-10-01T10:48:09.148Z","0.0.7":"2013-10-05T09:17:31.984Z","0.0.8":"2013-10-14T19:23:54.876Z","0.1.0":"2013-11-18T16:24:41.864Z","0.1.1":"2013-11-18T23:44:41.576Z","0.1.2":"2013-11-21T19:57:03.416Z","0.1.3":"2014-03-23T20:22:18.347Z","0.1.4":"2014-04-18T14:06:48.807Z","0.1.5":"2014-05-04T21:42:59.118Z","0.1.7":"2014-05-29T12:13:27.378Z","0.1.8":"2014-07-12T08:38:06.031Z","0.1.9":"2014-08-09T19:36:52.677Z","0.1.10":"2014-11-02T06:12:21.211Z","0.1.11":"2015-01-17T20:03:07.402Z","0.1.12":"2015-02-10T20:37:53.422Z","0.1.13":"2015-05-07T17:57:47.829Z","0.1.14":"2015-08-24T18:43:24.572Z","0.1.15":"2015-08-24T21:08:10.889Z","0.1.16":"2015-10-10T20:13:46.712Z","0.1.17":"2016-01-29T19:38:06.220Z","0.1.18":"2016-04-27T19:54:33.027Z","0.1.19":"2016-05-03T21:35:23.932Z","0.1.20":"2016-07-22T21:12:29.289Z","0.1.21":"2017-02-12T08:00:28.917Z","0.1.22":"2017-06-18T19:02:54.111Z"}}}