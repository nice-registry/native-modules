{"name":"pkcs11js","version":"1.0.9","description":"A Node.js implementation of the PKCS#11 2.3 interface","repository":"https://github.com/PeculiarVentures/pkcs11js","keywords":["pkcs11","token","rsa","ecdsa","aes","crypto","smartcard","token"],"main":"index.js","types":"index.d.ts","scripts":{"clean":"rm -rf build/ buildjs/ coverage/ .nyc_output/ npm-debug.log npm-debug.log.*","prepublish":"npm run build","install":"npm run build","test":"mocha","build":"node-gyp configure build","pub":"npm version patch && npm publish && git push","sync":"git ac && git pull --rebase && git push","coverage":"nyc npm test","precoveragehtml":"npm run coverage","coveragehtml":"nyc report -r html","watch":"watch 'npm run coveragehtml' lib/ src/ test/","live":"live-server -q --port=4005 --ignorePattern='(js|css|png)$' coverage","predev":"if [ ! -f coverage/index.html ]; then mkdir coverage; cp .waiting.html coverage/index.html; fi","dev":"npm-run-all -p --silent watch live","coveralls":"nyc report --reporter=text-lcov | coveralls"},"license":"MIT","dependencies":{"@types/node":"^6.0.63","nan":"^2.5.1"},"devDependencies":{"@types/mocha":"^2.2.32","live-server":"^1","mocha":"^3","node-gyp":"^3.4.0","npm-run-all":"^3","nyc":"^8","typescript":"^2","watch":"^0"},"gitHead":"d073d5baaceb5b872569412fb228134b971ea7f7","homepage":"https://github.com/PeculiarVentures/pkcs11js#readme","versions":[{"number":"1.0.0","date":"2016-08-03T22:10:39.130Z"},{"number":"1.0.1","date":"2016-08-04T21:57:14.444Z"},{"number":"1.0.2","date":"2016-08-06T06:09:55.110Z"},{"number":"1.0.3","date":"2016-08-07T22:07:05.876Z"},{"number":"1.0.4","date":"2016-11-14T07:49:02.603Z"},{"number":"1.0.5","date":"2016-11-14T08:07:02.268Z"},{"number":"1.0.6","date":"2016-11-14T20:13:59.502Z"},{"number":"1.0.7","date":"2017-02-20T13:08:59.077Z"},{"number":"1.0.8","date":"2017-04-03T11:34:35.882Z"},{"number":"1.0.9","date":"2017-06-01T10:57:16.214Z"}],"readme":"# PKCS11js\r\n\r\n[![license](https://img.shields.io/badge/license-MIT-green.svg?style=flat)](https://raw.githubusercontent.com/PeculiarVentures/graphene/master/LICENSE)\r\n[![Build Status](https://travis-ci.org/PeculiarVentures/pkcs11js.svg?branch=master)](https://travis-ci.org/PeculiarVentures/pkcs11js)\r\n[![Coverage Status](https://coveralls.io/repos/github/PeculiarVentures/pkcs11js/badge.svg?branch=master)](https://coveralls.io/github/PeculiarVentures/pkcs11js?branch=master)\r\n[![npm version](https://badge.fury.io/js/pkcs11js.svg)](https://badge.fury.io/js/pkcs11js)\r\n\r\n[![NPM](https://nodei.co/npm-dl/pkcs11js.png?months=2&height=2)](https://nodei.co/npm/pkcs11js/)\r\n\r\n\r\nWe make a package called [Graphene](https://github.com/PeculiarVentures/graphene), it provides a simplistic Object Oriented interface for interacting with PKCS#11 devices, for most people this is the right level to build on. In some cases you may want to interact directly with the PKCS#11 API, if so PKCS11js is the package for you.\r\n\r\nPKCS#11 (also known as CryptoKI or PKCS11) is the standard interface for interacting with hardware crypto devices such as Smart Cards and Hardware Security Modules (HSMs). \r\n\r\nThis was developed to the PKCS#11 2.3 specification, the 2.4 headers were not availible at the time we created this, it should be easy enough to extend it for the new version at a later date.\r\n\r\nIt has been tested with :\r\n- [SoftHSM2](https://www.opendnssec.org/softhsm/)\r\n- [Thales NShield](https://www.thales-esecurity.com/products-and-services/products-and-services/hardware-security-modules/general-purpose-hsms/nshield-solo)\r\n- [Safenet Luna HSMs](http://www.safenet-inc.com/)\r\n- [RuToken](http://www.rutoken.ru/)\r\n\r\n**NOTE:** For testing purposes it may be easier to work with SoftHSM2 which is a software implementation of PKCS#11 based on OpenSSL or Botan.\r\n\r\n\r\n## Installation\r\n\r\n```\r\n$ npm install pkcs11js\r\n```\r\n\r\n### Install SoftHSM2\r\n\r\n- For OSX see the [instructions here](https://github.com/opendnssec/SoftHSMv2/blob/develop/OSX-NOTES.md)\r\n- For linux [instructions here](https://github.com/opendnssec/SoftHSMv2/blob/develop/README.md)\r\n\r\n\r\n## Examples\r\n\r\n### Example #1\r\n\r\n```javascript\r\nvar pkcs11js = require(\"pkcs11js\");\r\n\r\nvar pkcs11 = new pkcs11js.PKCS11();\r\npkcs11.load(\"/usr/local/lib/softhsm/libsofthsm2.so\");\r\n\r\npkcs11.C_Initialize();\r\n\r\ntry {\r\n    // Getting info about PKCS11 Module\r\n    var module_info = pkcs11.C_GetInfo();\r\n\r\n    // Getting list of slots\r\n    var slots = pkcs11.C_GetSlotList(true);\r\n    var slot = slots[0];\r\n\r\n    // Getting info about slot\r\n    var slot_info = pkcs11.C_GetSlotInfo(slot);\r\n    // Getting info about token\r\n    var token_info = pkcs11.C_GetTokenInfo(slot);\r\n\r\n    // Getting info about Mechanism\r\n    var mechs = pkcs11.C_GetMechanismList(slot);\r\n    var mech_info = pkcs11.C_GetMechanismInfo(slot, mechs[0]);\r\n\r\n    var session = pkcs11.C_OpenSession(slot, pkcs11js.CKF_RW_SESSION | pkcs11js.CKF_SERIAL_SESSION);\r\n\r\n    // Getting info about Session\r\n    var info = pkcs11.C_GetSessionInfo(session);\r\n    pkcs11.C_Login(session, 1, \"password\");\r\n\r\n    /**\r\n    * Your app code here\r\n    */\r\n    \r\n    pkcs11.C_Logout(session);\r\n    pkcs11.C_CloseSession(session);\r\n}\r\ncatch(e){\r\n    console.error(e);\r\n}\r\nfinally {\r\n    pkcs11.C_Finalize();\r\n}\r\n```\r\n\r\n### Example #2\r\n\r\nGenerating secret key using AES mechanism\r\n\r\n```javascript\r\nvar template = [\r\n    { type: pkcs11js.CKA_CLASS, value: pkcs11js.CKO_SECRET_KEY },\r\n    { type: pkcs11js.CKA_TOKEN, value: false },\r\n    { type: pkcs11js.CKA_LABEL, value: \"My AES Key\" },\r\n    { type: pkcs11js.CKA_VALUE_LEN, value: 256 / 8 },\r\n    { type: pkcs11js.CKA_ENCRYPT, value: true },\r\n    { type: pkcs11js.CKA_DECRYPT, value: true },\r\n];\r\nvar key = pkcs11.C_GenerateKey(session, { mechanism: pkcs11js.CKM_AES_KEY_GEN }, template);\r\n```\r\n\r\n### Example #3\r\n\r\nGenerating key pair using RSA-PKCS1 mechanism\r\n\r\n```javascript\r\nvar publicKeyTemplate = [\r\n    { type: pkcs11js.CKA_CLASS, value: pkcs11js.CKO_PUBLIC_KEY },\r\n    { type: pkcs11js.CKA_TOKEN, value: false },\r\n    { type: pkcs11js.CKA_LABEL, value: \"My RSA Public Key\" },\r\n    { type: pkcs11js.CKA_PUBLIC_EXPONENT, value: new Buffer([1, 0, 1]) },\r\n    { type: pkcs11js.CKA_MODULUS_BITS, value: 2048 },\r\n    { type: pkcs11js.CKA_VERIFY, value: true }\r\n];\r\nvar privateKeyTemplate = [\r\n    { type: pkcs11js.CKA_CLASS, value: pkcs11js.CKO_PRIVATE_KEY },\r\n    { type: pkcs11js.CKA_TOKEN, value: false },\r\n    { type: pkcs11js.CKA_LABEL, value: \"My RSA Private Key\" },\r\n    { type: pkcs11js.CKA_SIGN, value: true },\r\n];\r\nvar keys = pkcs11.C_GenerateKeyPair(session, { mechanism: pkcs11js.CKM_RSA_PKCS_KEY_PAIR_GEN }, publicKeyTemplate, privateKeyTemplate);\r\n```\r\n\r\n### Example #4\r\n\r\nGenerating key pair using ECDSA mechanism\r\n\r\n```javascript\r\nvar publicKeyTemplate = [\r\n    { type: pkcs11js.CKA_CLASS, value: pkcs11js.CKO_PUBLIC_KEY },\r\n    { type: pkcs11js.CKA_TOKEN, value: false },\r\n    { type: pkcs11js.CKA_LABEL, value: \"My EC Public Key\" },\r\n    { type: pkcs11js.CKA_EC_PARAMS, value: new Buffer(\"06082A8648CE3D030107\", \"hex\") }, // secp256r1\r\n];\r\nvar privateKeyTemplate = [\r\n    { type: pkcs11js.CKA_CLASS, value: pkcs11js.CKO_PRIVATE_KEY },\r\n    { type: pkcs11js.CKA_TOKEN, value: false },\r\n    { type: pkcs11js.CKA_LABEL, value: \"My EC Private Key\" },\r\n    { type: pkcs11js.CKA_DERIVE, value: true },\r\n];\r\nvar keys = pkcs11.C_GenerateKeyPair(session, { mechanism: pkcs11js.CKM_EC_KEY_PAIR_GEN }, publicKeyTemplate, privateKeyTemplate);\r\n```\r\n\r\n### Example #4\r\n\r\nWorking with Object\r\n\r\n```javascript\r\nvar nObject = pkcs11.C_CreateObject(session, [\r\n    { type: pkcs11js.CKA_CLASS, value: pkcs11js.CKO_DATA },\r\n    { type: pkcs11js.CKA_TOKEN, value: false },\r\n    { type: pkcs11js.CKA_PRIVATE, value: false },\r\n    { type: pkcs11js.CKA_LABEL, value: \"My custom data\" },\r\n]);\r\n\r\n// Updating lable of Object\r\npkcs11.C_SetAttributeValue(session, nObject, [{ type: pkcs11js.CKA_LABEL, value: nObjetcLabel + \"!!!\" }]);\r\n\r\n// Getting attribute value\r\nvar label = pkcs11.C_GetAttributeValue(session, nObject, [\r\n    { type: pkcs11js.CKA_LABEL },\r\n    { type: pkcs11js.CKA_TOKEN }\r\n]);\r\nconsole.log(label[0].value.toString()); // My custom data!!!\r\nconsole.log(!!label[1].value[0]; // false\r\n\r\n// Copying Object\r\nvar cObject = pkcs11.C_CopyObject(session, nObject, [\r\n    { type: pkcs11js.CKA_CLASS},\r\n    { type: pkcs11js.CKA_TOKEN},\r\n    { type: pkcs11js.CKA_PRIVATE},\r\n    { type: pkcs11js.CKA_LABEL},\r\n])\r\n\r\n// Removing Object\r\npkcs11.C_DestroyObject(session, cObject);\r\n```\r\n\r\n### Example #4\r\n\r\nSearching objects\r\n\r\n**NOTE:** If template is not setted for C_FindObjectsInit, then C_FindObjects returns all objects from slot  \r\n\r\n```javascript\r\npkcs11.C_FindObjectsInit(session, [{ type: pkcs11js.CKA_CLASS, value: pkcs11js.CKO_DATA }]);\r\nvar hObject = pkcs11.C_FindObjects(session);\r\nwhile (hObject) {\r\n    var attrs = pkcs11.C_GetAttributeValue(session, hObject, [\r\n        { type: pkcs11js.CKA_CLASS },\r\n        { type: pkcs11js.CKA_TOKEN },\r\n        { type: pkcs11js.CKA_LABEL }\r\n    ]);\r\n    // Output info for objects from token only\r\n    if (attrs[1].value[0]){\r\n        console.log(`Object #${hObject}: ${attrs[2].value.toString()}`);\r\n    }\r\n    hObject = pkcs11.C_FindObjects(session);\r\n}\r\npkcs11.C_FindObjectsFinal(session);\r\n```\r\n\r\n### Example #5\r\n\r\nGenerating random values\r\n\r\n```javascript\r\nvar random = pkcs11.C_GenerateRandom(session, new Buffer(20));\r\nconsole.log(random.toString(\"hex\"));\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nvar random = new Buffer(20);\r\npkcs11.C_GenerateRandom(session, random);\r\nconsole.log(random.toString(\"hex\"));\r\n```\r\n\r\n### Example #6\r\n\r\nDigest\r\n\r\n```javascript\r\npkcs11.C_DigestInit(_session, { mechanism: pkcs11js.CKM_SHA256 });\r\n\r\npkcs11.C_DigestUpdate(session, new Buffer(\"Incomming message 1\"));\r\npkcs11.C_DigestUpdate(session, new Buffer(\"Incomming message N\"));\r\n\r\nvar digest = pkcs11.C_DigestFinal(_session, Buffer(256 / 8));\r\n\r\nconsole.log(digest.toString(\"hex\"));\r\n```\r\n\r\n### Example #7\r\n\r\nSigning data\r\n\r\n```javascript\r\npkcs11.C_SignInit(session, { mechanism: pkcs11js.CKM_SHA256_RSA_PKCS }, keys.privateKey);\r\n\r\npkcs11.C_SignUpdate(session, new Buffer(\"Incomming message 1\"));\r\npkcs11.C_SignUpdate(session, new Buffer(\"Incomming message N\"));\r\n\r\nvar signature = pkcs11.C_SignFinal(session, Buffer(256));\r\n```\r\n\r\nVerifying data\r\n\r\n```javascript\r\npkcs11.C_VerifyInit(session, { mechanism: pkcs11js.CKM_SHA256_RSA_PKCS }, keys.publicKey);\r\n\r\npkcs11.C_VerifyUpdate(session, new Buffer(\"Incomming message 1\"));\r\npkcs11.C_VerifyUpdate(session, new Buffer(\"Incomming message N\"));\r\n\r\nvar verify = pkcs11.C_VerifyFinal(session, signature);\r\n```\r\n\r\n### Example #8\r\n\r\nEncrypting data with AES-CBC mechanism\r\n\r\n```javascript\r\nvar cbc_param = pkcs11.C_GenerateRandom(new Buffer(16));\r\n\r\npkcs11.C_EncryptInit(\r\n    session,\r\n    {\r\n        mechanism: pkcs11js.CKM_AES_CBC,\r\n        parameter: cbc_param\r\n    },\r\n    secretKey\r\n);\r\n\r\nvar enc = new Buffer(0);\r\nenc = Buffer.concat([enc, pkcs11.C_EncryptUpdate(session, new Buffer(\"Incomming data 1\"), new Buffer(16))]);\r\nenc = Buffer.concat([enc, pkcs11.C_EncryptUpdate(session, new Buffer(\"Incomming data N\"), new Buffer(16))]);\r\nenc = Buffer.concat([enc, pkcs11.C_EncryptFinal(session, new Buffer(16))]);\r\n\r\nconsole.log(enc.toString(\"hex\"));\r\n```\r\n\r\nDecrypting data with AES-CBC mechanism\r\n\r\n```javascript\r\npkcs11.C_DecryptInit(\r\n    session,\r\n    {\r\n        mechanism: pkcs11js.CKM_AES_CBC,\r\n        parameter: cbc_param\r\n    },\r\n    secretKey\r\n);\r\n\r\nvar dec = new Buffer(0);\r\ndec = Buffer.concat([dec, pkcs11.C_DecryptUpdate(session, enc, new Buffer(32))]);\r\ndec = Buffer.concat([dec, pkcs11.C_DecryptFinal(session, new Buffer(16))]);\r\n\r\nconsole.log(dec.toString());\r\n```\r\n\r\n### Example #9\r\n\r\nDeriving key with ECDH mechanism\r\n\r\n```javascript\r\n// Recieve public data from EC public key\r\nvar attrs = pkcs11.C_GetAttributeValue(session, publicKeyEC, [{ type: pkcs11js.CKA_EC_POINT }])\r\nvar ec = attrs[0].value;\r\n\r\nvar derivedKey = pkcs11.C_DeriveKey(\r\n    session,\r\n    {\r\n        mechanism: pkcs11js.CKM_ECDH1_DERIVE,\r\n        parameter: {\r\n            type: pkcs11js.CK_PARAMS_EC_DH,\r\n            kdf: 2,\r\n            publicData: ec\r\n        }\r\n    },\r\n    privateKeyEC,\r\n    [\r\n        { type: pkcs11js.CKA_CLASS, value: pkcs11js.CKO_SECRET_KEY },\r\n        { type: pkcs11js.CKA_TOKEN, value: false },\r\n        { type: pkcs11js.CKA_KEY_TYPE, value: pkcs11js.CKK_AES },\r\n        { type: pkcs11js.CKA_LABEL, value: \"Derived AES key\" },\r\n        { type: pkcs11js.CKA_ENCRYPT, value: true },\r\n        { type: pkcs11js.CKA_VALUE_LEN, value: 256 / 8 }\r\n    ]\r\n);\r\n```\r\n\r\n## Suitability\r\nAt this time this solution should be considered suitable for research and experimentation, further code and security review is needed before utilization in a production application.\r\n\r\n## Bug Reporting\r\nPlease report bugs either as pull requests or as issues in the issue tracker. Graphene has a full disclosure vulnerability policy. Please do NOT attempt to report any security vulnerability in this code privately to anybody.\r\n\r\n## Related\r\n- [PKCS #11 2.40 Specification](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/pkcs11-curr-v2.40.html)\r\n- [Many PKCS #11 Specifications](http://www.cryptsoft.com/pkcs11doc/)\r\n- [Attacking and Fixing PKCS#11 Security Tokens](http://www.lsv.ens-cachan.fr/Publis/PAPERS/PDF/BCFS-ccs10.pdf)\r\n- [PERL PKCS #11 binding](https://github.com/dotse/p5-crypt-pkcs11)\r\n- [.NET PKCS #11 binding](https://github.com/jariq/Pkcs11Interop)\r\n- [Ruby PKCS #11 binding](https://github.com/larskanis/pkcs11)\r\n- [OCaml PKCS #11 binding](https://github.com/ANSSI-FR/caml-crush)\r\n- [OCaml PKCS #11 CLI](https://github.com/ANSSI-FR/opkcs11-tool)\r\n- [Go PKCS #11 binding](https://github.com/miekg/pkcs11) \r\n- [PKCS #11 Admin](http://www.pkcs11admin.net)\r\n- [Node.js Foreign Function Interface](https://github.com/node-ffi/node-ffi)\r\n- [GOST PKCS#11 constants](https://github.com/romanovskiy-k/pkcs11/blob/master/rtpkcs11t.h)\r\n- [PKCS#11 logging proxy module](https://github.com/jariq/pkcs11-logger)\r\n- [PKCS#11 Proxy](https://github.com/iksaif/pkcs11-proxy)\r\n- [PKCS#11 Tests](https://github.com/google/pkcs11test)\r\n- [OpenCryptoKi](http://sourceforge.net/projects/opencryptoki/)\r\n- [SoftHSM](https://www.opendnssec.org/softhsm/)\r\n- [SofHSM2 for Windows](https://github.com/disig/SoftHSM2-for-Windows/)\r\n- [node-pcsc](https://github.com/santigimeno/node-pcsclite)\r\n- [PKCS#11 URIs](https://tools.ietf.org/html/rfc7512)\r\n- [Key Length Recommendations](http://www.keylength.com/en/compare/)\r\n\r\n\r\n","starsCount":1,"created":"2016-08-03T22:10:39.130Z","modified":"2017-06-01T10:57:16.214Z","lastPublisher":{"name":"microshine","email":"microshine@mail.ru"},"owners":[{"name":"microshine","email":"microshine@mail.ru"},{"name":"peculiarventures","email":"info@peculiarventures.com"}],"other":{"_attachments":{},"_from":".","_id":"pkcs11js","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pkcs11js-1.0.9.tgz_1496314634993_0.044717908604070544"},"_npmUser":{"name":"microshine","email":"microshine@mail.ru"},"_npmVersion":"4.5.0","_rev":"7-637e1a20e37aceb0c112b3945e1e8f39","_shasum":"6d787a0713cc554ed60971d9d6e30542624ea583","author":{"name":"PeculiarVentures"},"bugs":{"url":"https://github.com/PeculiarVentures/pkcs11js/issues"},"directories":{},"dist-tags":{"latest":"1.0.9"},"dist":{"shasum":"6d787a0713cc554ed60971d9d6e30542624ea583","tarball":"https://registry.npmjs.org/pkcs11js/-/pkcs11js-1.0.9.tgz"},"maintainers":[{"name":"microshine","email":"microshine@mail.ru"},{"name":"peculiarventures","email":"info@peculiarventures.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-01T10:57:16.214Z","created":"2016-08-03T22:10:39.130Z","1.0.0":"2016-08-03T22:10:39.130Z","1.0.1":"2016-08-04T21:57:14.444Z","1.0.2":"2016-08-06T06:09:55.110Z","1.0.3":"2016-08-07T22:07:05.876Z","1.0.4":"2016-11-14T07:49:02.603Z","1.0.5":"2016-11-14T08:07:02.268Z","1.0.6":"2016-11-14T20:13:59.502Z","1.0.7":"2017-02-20T13:08:59.077Z","1.0.8":"2017-04-03T11:34:35.882Z","1.0.9":"2017-06-01T10:57:16.214Z"},"users":{"ph4r05":true}}}