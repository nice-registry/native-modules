{"name":"bridjs","version":"0.5.6","description":"V8 bindings for dyncall, and BridJ-like API for nodejs.","keywords":["dyncall","ffi","native binding","BridJ"],"main":"./lib/bridjs","repository":"https://github.com/jiahansu/BridJS","engines":{"node":">=0.12.2"},"dependencies":{"myclass":">=1.0.2","log4js":">=0.6.9","amdefine":">=1.0.0","xregexp":"3.1.1","nan":">=2.4.0"},"devDependencies":{"myclass":">=1.0.2","log4js":">=0.6.9","amdefine":">=1.0.0","xregexp":"3.1.1","nan":">=2.4.0"},"browser":{"os":false},"gypfile":true,"homepage":"https://github.com/jiahansu/BridJS/","scripts":{"install":"node-gyp rebuild"},"gitHead":"b16844f90d7b8042dcfdf2beb04d145843fd9820","versions":[{"number":"0.1.7-1","date":"2014-01-06T14:57:29.798Z"},{"number":"0.1.7-2","date":"2014-01-06T15:17:07.946Z"},{"number":"0.1.7-3","date":"2014-01-06T15:22:15.644Z"},{"number":"0.1.8-1","date":"2014-02-25T10:40:46.461Z"},{"number":"0.1.8-2","date":"2014-03-01T01:30:40.380Z"},{"number":"0.2.0-1","date":"2015-05-08T08:28:12.556Z"},{"number":"0.2.0-2","date":"2015-05-08T08:49:15.042Z"},{"number":"0.2.0-3","date":"2015-05-08T08:50:50.967Z"},{"number":"0.2.0-4","date":"2015-05-08T09:04:49.481Z"},{"number":"0.2.0-5","date":"2015-05-08T09:09:57.848Z"},{"number":"0.2.0-6","date":"2015-05-08T09:17:57.775Z"},{"number":"0.2.0-7","date":"2015-05-08T10:41:58.230Z"},{"number":"0.2.0-8","date":"2015-05-10T01:37:09.067Z"},{"number":"0.2.0-9","date":"2015-05-10T11:13:00.512Z"},{"number":"0.1.9-1","date":"2015-05-11T03:47:37.166Z"},{"number":"0.1.9-2","date":"2015-05-11T03:49:42.722Z"},{"number":"0.1.9-3","date":"2015-05-11T03:58:48.951Z"},{"number":"0.2.1-1","date":"2015-05-24T13:09:35.135Z"},{"number":"0.3.1-1","date":"2015-08-03T03:13:02.803Z"},{"number":"0.3.2-1","date":"2015-08-04T09:45:36.324Z"},{"number":"0.3.2-2","date":"2015-08-04T11:44:19.202Z"},{"number":"0.3.2-3","date":"2015-08-05T08:03:46.872Z"},{"number":"0.3.2-4","date":"2015-08-05T08:57:22.260Z"},{"number":"0.3.2-5","date":"2015-08-05T10:35:04.656Z"},{"number":"0.3.3-1","date":"2015-08-10T06:45:48.479Z"},{"number":"0.3.3-2","date":"2015-08-22T07:36:48.949Z"},{"number":"0.3.3-3","date":"2015-08-22T07:39:00.660Z"},{"number":"0.3.3-4","date":"2015-09-01T08:03:51.762Z"},{"number":"0.3.3-5","date":"2015-09-01T08:29:39.532Z"},{"number":"0.3.4-1","date":"2015-09-11T08:57:58.804Z"},{"number":"0.3.4-2","date":"2015-09-11T09:24:38.115Z"},{"number":"0.3.4-3","date":"2015-09-11T15:00:01.404Z"},{"number":"0.3.4-4","date":"2015-10-11T15:40:23.732Z"},{"number":"0.3.4-5","date":"2016-05-23T08:43:04.590Z"},{"number":"0.3.5","date":"2016-08-03T03:31:53.381Z"},{"number":"0.3.6","date":"2016-09-14T01:12:10.739Z"},{"number":"0.3.7","date":"2016-09-14T07:26:36.649Z"},{"number":"0.3.8","date":"2016-09-14T07:44:35.285Z"},{"number":"0.3.9","date":"2016-09-14T07:51:49.214Z"},{"number":"0.5.0","date":"2016-09-14T08:24:21.951Z"},{"number":"0.5.2","date":"2016-09-21T02:21:53.348Z"},{"number":"0.5.3","date":"2016-09-23T09:45:48.329Z"},{"number":"0.5.4","date":"2016-09-26T01:36:29.618Z"},{"number":"0.5.5","date":"2016-09-27T15:28:44.905Z"},{"number":"0.5.6","date":"2016-10-11T07:14:21.841Z"}],"readme":"BridJS\n======\nBridJS is a [BridJ](http://bridj.googlecode.com)-like API for runtime binding C function and struct without writing any extra native code.\n\n###Key features\n* BridJS binds native function at runtime, you never need to compile any extra native code \n* Uncompromized speed and power by [dyncall](http://www.dyncall.org/)\n* Support implicit type wrapping/unwrapping (struct<->pointer and string<->number etc... )\n* Support complex struct type (sub-struct and array field), and access theme straightforwadly.\n* Execute any native function either by synchronous or by asynchronous way\n* Whatever the native callbacks are invoked by any other thread, BridJS always forward callback to V8's default thread \n\n###Limitation\nLike [BridJ](http://bridj.googlecode.com), BridJS also has some limitations:\n* Pass structs by value not supported yet (neither as function arguments nor as function return values)\n* BridJS does **not support** C++, COM, Objective-C...\n\n###Requirement\n* [nodejs](http://nodejs.org/) v0.10.8 or higher\n* Windows x64, Linux x86/x64 & Mac OSX\n\n###Installation\nIf node.js version is higher or equal than v0.12.0:\n``` bash\nnpm install bridjs\n```\nIf node.js version is lower or equal than v0.10.38:\n``` bash\nnpm install bridjs@0.1.9-3\n```\n\n###Tutorial\n####1. C function\n-------------\nIf C code is something like this:\n``` bash\ndouble testMultiplyFunction(const int16_t w, const int32_t x,const long y, const LONGLONG z, const double e);\n``` \n\nYou can define JavaScript prototype like this:\n``` bash\nvar bridjs = require('bridjs');\n\nvar NativeModule = bridjs.defineModule({\n    testMultiplyFunction:  bridjs.defineFunction(\"double testMultiplyFunction(int16_t,int32_t ,long ,longlong , double)\")\n    }, libraryPath);\n    \nvar nativeModule = new NativeModule();\n\nvar result = nativeModule.testMultiplyFunction(2,2,2,2,2.5);\n``` \nBind C function API\n``` bash\nbridjs.defineModule({\n  functionName1: bridjs.DefineFunction(returnType, arg0Type, arg2Type...),\n  //Or\n  functionName2: bridjs.DefineFunction(\"function declaration in C\"),\n  ...\n},libraryFile);\n``` \n####2. C struct\n---------------\nIf C code is something like this:\n``` bash\ntypedef struct{\n  double x;\n  double y;\n  double z;\n} Point3d;\n\ntydef struct{\n  char x;\n  Point3d y;\n  char str[10];\n} ComplexStruct\n\ndouble testComplexStructFunction(const ComplexStruct* pTestStruct)\n``` \t\nYou can define JavaScript prototype like this:\n``` bash\nvar Point3d = bridjs.defineStruct({\n    x : {type: \"double\", order: 0},\n    y : {type: \"double\", order: 1},\n    z : {type: \"double\", order: 2}\n});\n\nvar ComplexStruct = bridjs.defineStruct({\n    x:{type: \"char\", order: 0},\n    y:{type: Point3d, order: 1},\n    z:{type: \"char[10]\", order: 2}\n});\n\nvar NativeModule = bridjs.defineModule({\n    testComplexStructFunction : bridjs.defineFunction(\"double testComplexStructFunction(ComplexStruct*)\"}, libraryPath);\n\nvar complexStruct = new ComplexStruct();\nvar nativeModule = new NativeModule();\n\ncomplexStruct.x = 's';\ncomplexStruct.y.x = 2;\ncomplexStruct.str.set(3) = 's';\n\nvar result = nativeModule.testComplexStructFunction(bridjs.byPointer(complexStruct));\n\n``` \nBind C struct API\n``` bash\nbridjs.defineStruct({\n    element1 : bridjs.structField(elementType,order),\n    //Or\n    element2 : {type: \"<elementType>\", order: <order>},\n    element3 : bridjs.structArrayField(arrayType,arrayLength,order)\n    ...\n});\n``` \n####3. Invoke native function asynchronously\n--------------------------------------------\n``` bash\n/*You can execute any native function asynchronously (not in default thread), and get return value from callback*/\nbridjs.aysnc(nativeModule).testMultiplyFunction(2,2,2,2,2.5, function(returnValue){\n    console.log(\"Return value = \"+returnValue)\n});\n```\nAsync execute native function API\n``` bash\nbridjs.async(moduleInstance).function(param1, param2,....callbackFunction);\n```\n####4. C function pointer\n-------------------------\nIf C code is something like this:\n``` bash\ntypedef double (*MultiplyCallbackFunction)(const int16_t w, const int32_t x,const long y, const LONGLONG z, const double e);\nvoid testCallbackFunction(MultiplyCallbackFunction callbackFunction);\n```\nYou can define JavaScript prototype like this:\n``` bash\nvar callbackFunctionDefine = bridjs.defineFunction(\"double (int16_t, int32_t, long, longlong, double)\");\n\nvar callback = bridjs.newCallback(callbackFunctionDefine, function(w, x, y, z, e) {\n        console.log(\"Callback function was invoked\");\n    \n        return w*x*y*z*e;\n});\n\nvar NativeModule = bridjs.defineModule({\n    testCallbackFunction : bridjs.defineFunction(\"void testCallbackFunction(MultiplyCallbackFunction callbackFunction)\", {MultiplyCallbackFunction:callbackFunctionDefine})\n    }, libraryPath);\n\nvar nativeModule = new NativeModule();\n\nnativeModule.testAsyncCallbackFunction(callback);    \n```\nCreate function pointer API\n``` bash\nbridjs.newCallback(functionSignature,callbackFunction);\n```\n####5. Pass primitive type by pointer\n-------------------------------------\nIf C code is something like this:\n``` bash\nconst double* testValuePassByPointerFunction(const double *returnValue);\n```\nYou can define JavaScript prototype like this:\n``` bash\nvar NativeModule = bridjs.defineModule({\n    testValuePassByPointerFunction:  bridjs.defineFunction(\"double* testValuePassByPointerFunction(double*)\")\n    }, libraryPath);\n\nvar nativeDouble = new bridjs.NativeValue.double(2.5);  \n\nvar nativeModule = new NativeModule();\n\nvar returnNativeDouble = nativeModule.testValuePassByPointerFunction(bridjs.byPointer(nativeDouble));    \n\nvar result = returnNativeDouble.get();\n```\n\n###License\n\nBSD License. See the `LICENSE` file.\n","starsCount":1,"created":"2014-01-06T14:57:13.406Z","modified":"2016-10-11T07:14:21.841Z","lastPublisher":{"name":"jiahan","email":"jiahan.su@gmail.com"},"owners":[{"name":"jiahan","email":"jiahan.su@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"bridjs","_nodeVersion":"6.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/bridjs-0.5.6.tgz_1476170061595_0.5788208700250834"},"_npmUser":{"name":"jiahan","email":"jiahan.su@gmail.com"},"_npmVersion":"3.10.7","_rev":"1-3760337a76ff08de58da14d7d8df07fd","_shasum":"44d55136c09fd5d2ec71161573ae45991b1bc4d8","author":{"name":"Jia-Han Su","email":"jiahan.su@gmail.com"},"bugs":{"url":"https://github.com/jiahansu/BridJS/issues"},"directories":{"deps":"deps","src":"src","sample":"sample","test":"test","lib":"lib"},"dist-tags":{"latest":"0.5.6"},"dist":{"shasum":"44d55136c09fd5d2ec71161573ae45991b1bc4d8","tarball":"http://registry.npmjs.org/bridjs/-/bridjs-0.5.6.tgz"},"maintainers":[{"name":"jiahan","email":"jiahan.su@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-11T07:14:21.841Z","created":"2014-01-06T14:57:13.406Z","0.1.7-1":"2014-01-06T14:57:29.798Z","0.1.7-2":"2014-01-06T15:17:07.946Z","0.1.7-3":"2014-01-06T15:22:15.644Z","0.1.8-1":"2014-02-25T10:40:46.461Z","0.1.8-2":"2014-03-01T01:30:40.380Z","0.2.0-1":"2015-05-08T08:28:12.556Z","0.2.0-2":"2015-05-08T08:49:15.042Z","0.2.0-3":"2015-05-08T08:50:50.967Z","0.2.0-4":"2015-05-08T09:04:49.481Z","0.2.0-5":"2015-05-08T09:09:57.848Z","0.2.0-6":"2015-05-08T09:17:57.775Z","0.2.0-7":"2015-05-08T10:41:58.230Z","0.2.0-8":"2015-05-10T01:37:09.067Z","0.2.0-9":"2015-05-10T11:13:00.512Z","0.1.9-1":"2015-05-11T03:47:37.166Z","0.1.9-2":"2015-05-11T03:49:42.722Z","0.1.9-3":"2015-05-11T03:58:48.951Z","0.2.1-1":"2015-05-24T13:09:35.135Z","0.3.1-1":"2015-08-03T03:13:02.803Z","0.3.2-1":"2015-08-04T09:45:36.324Z","0.3.2-2":"2015-08-04T11:44:19.202Z","0.3.2-3":"2015-08-05T08:03:46.872Z","0.3.2-4":"2015-08-05T08:57:22.260Z","0.3.2-5":"2015-08-05T10:35:04.656Z","0.3.3-1":"2015-08-10T06:45:48.479Z","0.3.3-2":"2015-08-22T07:36:48.949Z","0.3.3-3":"2015-08-22T07:39:00.660Z","0.3.3-4":"2015-09-01T08:03:51.762Z","0.3.3-5":"2015-09-01T08:29:39.532Z","0.3.4-1":"2015-09-11T08:57:58.804Z","0.3.4-2":"2015-09-11T09:24:38.115Z","0.3.4-3":"2015-09-11T15:00:01.404Z","0.3.4-4":"2015-10-11T15:40:23.732Z","0.3.4-5":"2016-05-23T08:43:04.590Z","0.3.5":"2016-08-03T03:31:53.381Z","0.3.6":"2016-09-14T01:12:10.739Z","0.3.7":"2016-09-14T07:26:36.649Z","0.3.8":"2016-09-14T07:44:35.285Z","0.3.9":"2016-09-14T07:51:49.214Z","0.5.0":"2016-09-14T08:24:21.951Z","0.5.2":"2016-09-21T02:21:53.348Z","0.5.3":"2016-09-23T09:45:48.329Z","0.5.4":"2016-09-26T01:36:29.618Z","0.5.5":"2016-09-27T15:28:44.905Z","0.5.6":"2016-10-11T07:14:21.841Z"},"users":{"jiahan":true}}}