{"name":"recommender","version":"3.0.0","description":"A node native addon with recommentaion utils","main":"./build/Release/recommender","scripts":{"pretest":"cd ./demo && npm i","test":"cd ./demo && mocha ./tests.js","benchmarks":"cd ./demo && npm i && node benchmarks.js","clear:demo":"rm -rf ./demo/node_modules","compile:demo":"cd ./demo && npm i","install":"node-gyp rebuild"},"gypfile":true,"license":"MIT","repository":"https://github.com/D-Andreev/recommender-addon","homepage":"https://github.com/D-Andreev/recommender-addon#readme","keywords":["recommendation","tfidf","collaborative","filtering","recommender","addon","node","native"],"dependencies":{"nan":"^2.3.3"},"devDependencies":{"chai":"^3.5.0","mocha":"^3.2.0"},"gitHead":"8086d77d9275bf5a88168b0f95ba37a8a365b291","versions":[{"number":"1.0.0","date":"2017-04-16T21:50:34.292Z"},{"number":"1.0.1","date":"2017-04-17T01:54:31.553Z"},{"number":"1.1.0","date":"2017-04-17T14:39:04.817Z"},{"number":"1.1.1","date":"2017-04-17T20:40:32.456Z"},{"number":"1.1.2","date":"2017-05-14T17:22:08.792Z"},{"number":"1.2.0","date":"2017-05-15T23:11:31.516Z"},{"number":"1.3.0","date":"2017-05-16T15:04:04.473Z"},{"number":"1.3.1","date":"2017-05-20T11:52:07.594Z"},{"number":"1.4.0","date":"2017-05-20T17:31:03.466Z"},{"number":"1.4.1","date":"2017-05-20T17:59:38.892Z"},{"number":"1.4.2","date":"2017-05-20T18:45:25.428Z"},{"number":"2.0.0","date":"2017-05-20T19:41:49.838Z"},{"number":"2.0.1","date":"2017-05-21T00:31:35.933Z"},{"number":"2.0.2","date":"2017-05-21T13:01:47.083Z"},{"number":"2.0.3","date":"2017-05-21T21:02:15.245Z"},{"number":"2.0.4","date":"2017-05-21T22:00:27.002Z"},{"number":"2.0.5","date":"2017-05-30T20:03:43.052Z"},{"number":"3.0.0","date":"2017-05-31T11:32:14.860Z"}],"readme":"Recommender\r\n===============================\r\n\r\n`recommender` is a node addon with utility functions, which can help when building a recommender system. It contains implementations of [`tf-idf`](https://en.wikipedia.org/wiki/Tf%E2%80%93idf), [`Collaborative Filtering`](https://en.wikipedia.org/wiki/Collaborative_filtering) and `Global Baseline Approach` which are commonly used in recommendation systems. Each of the API methods have a **sync** and an **async** variation. **Using the async methods is highly recommended**, because they work in new threads and do not block the event loop. \r\n\r\n[![NPM](https://nodei.co/npm/recommender.png?downloads=true&downloadRank=true)](https://nodei.co/npm/recommender/)\r\n\r\n[![Build Status](https://travis-ci.org/D-Andreev/recommender-addon.svg?branch=master)](https://travis-ci.org/D-Andreev/recommender-addon) [![NPM version](https://badge.fury.io/js/badge-list.svg)](https://www.npmjs.com/package/recommender) [![Open Source Love](https://badges.frapsoft.com/os/mit/mit.svg?v=102)](https://github.com/D-Andreev/recommender-addon/blob/master/LICENSE)\r\n\r\n * **[Installation](#Installation)**\r\n * **[Usage](#Usage)**\r\n * **[API](#API)**\r\n * **[Run examples and benchmarks](#Run-examples)**\r\n * **[Changelog](#Changelog)**\r\n * **[Contributing](#Contributing)**\r\n * **[License](#License)**\r\n\r\n<a name=\"Installation\"></a>\r\n# Installation\r\n - `npm i recommender`\r\n\r\n<a name=\"Usage\"></a>\r\n\r\n## Usage\r\n\r\n### TF-IDF\r\nThe input of TF-IDF is a search query and a collection of documents. It finds how important a word is to a document in a collection. Then using cosine similarity we can get the most similar documents to the search query and make recommendations.\r\n```js\r\nvar recommender = require('recommender');\r\n\r\nvar query = 'get current date time javascript';\r\nvar documents = [\r\n    'get the current date and time in javascript',\r\n    'get the current date and time in python',\r\n    'something very different',\r\n    'what is the time now'\r\n];\r\nrecommender.tfidf(query, documents, (sortedDocs) => {\r\n    console.log(sortedDocs);\r\n    // Output:\r\n    /**\r\n        get the current date and time in javascript\r\n        get the current date and time in python\r\n    \twhat is the time now\r\n        something very different\r\n    */     \r\n});\r\n```\r\nThe `tfidf` method also accepts paths to the files where our query and documents are. We can create a text file for the query - `search_query.txt` with content:\r\n```\r\nget current date time javascript\r\n```\r\nAnd this into `documents.txt`. Every document is seperated by a new line and every word is separated by space.\r\n```\r\nget the current date and time in javascript\r\nget the current date and time in python\r\nsomething very different\r\nwhat is the time now\r\n```\r\n```js\r\nvar recommender = require('recommender');\r\n\r\nvar queryPath = './search_query.txt';\r\nvar documentsPath = './documents.txt';\r\n\r\nrecommender.tfidf(queryPath, documentsPath, (sortedDocs) => {\r\n    console.log(sortedDocs);\r\n    // Output:\r\n    /**\r\n        get the current date and time in javascript\r\n        get the current date and time in python\r\n    \twhat is the time now\r\n        something very different\r\n    */   \r\n});\r\n```\r\n\r\nWe can also pass `filterStopWords` which is optional and `false` by default. If `filterStopWords` is `true` those words will be filtered out and not considered when calculating similarity. Stop-words are those words that appear very commonly across the documents, therefore loosing their representativeness and don't contribute to the meaning of the text. i.e (`a`, `about`, `the`, `if`, `it`, `is`...). The full stop words list can be viewed [here](https://github.com/D-Andreev/recommender-addon/blob/master/include/Constants.h#L8).\r\n```js\r\nbool filterStopWords = true;\r\nvar sortedDocs = recommender.tfidf(queryPath, documentsPath, filterStopWords, calback);\r\n```\r\n\r\n### Collaborative filtering\r\nThe input for collaborative filtering is a table with user ratings. Consider the following example.\r\n```\r\n       HP1   HP2   HP3   TW   SW1   SW2   SW3\r\n   A   4     0     0     1     1     0     0\r\n   B   5     5     4     0     0     0     0\r\n   C   0     0     0     2     4     5     0\r\n   D   3     0     0     0     0     0     3\r\n```\r\n`A`, `B`, `C` and `D` are users. `HP1` (Harry Potter 1), `TW` (Twilight), `SW1` (Star Wars 1) are movies.  A rating of `0` means that the user has not rated the movie. In this example ratings range from `1` to `5`, but they can be in any system (i.e. 1-10). The predicted rating of user `A` for `HP2`, using collaborative filtering is `4`. Aside from the ratings table we need to pass the row index and column index for the rating we wish to predict.\r\n```js\r\nvar recommender = require('recommender');\r\nvar ratings = [\r\n    [ 4, 0, 0, 1, 1, 0, 0 ],\r\n\t[ 5, 5, 4, 0, 0, 0, 0 ],\r\n\t[ 0, 0, 0, 2, 4, 5, 0 ],\r\n\t[ 3, 0, 0, 0, 0, 0, 3 ]\r\n];\r\nvar movieIndex = 0;\r\nvar userIndex = 4;\r\n// We are predicting the rating of U05 for M1.\r\nvar predictedRating = recommender.getRatingPrediction(ratings, movieIndex, userIndex, (predictedRating) => {\r\n    console.log(predictedRating);\r\n// Output: 4\r\n});\r\n```\r\nThere are pros and cons of using only the collaborative filtering method to predict ratings.\r\n* Pros\r\n    * Works for any kind of items (i.e. movies, songs, books etc..). No need for feature selection, you just need a matrix with ratings.\r\n* Cons\r\n    * [`Cold start problem`](https://en.wikipedia.org/wiki/Cold_start). At the beginning of your recommendation system no users have rated anything yet, your utility matrix will be empty, so no ratings can be predicted.\r\n    * `Sparsity`. Most of the times your user/ratings matrix is very sparse. There are many items and many users, but users have only rated several items, so it's hard to find users that have rated the same items.\r\n    * `First rater problem`. When a new item is added, there are no ratings for it yet, so it can't be recommended to anyone.\r\n    * `Popularity bias`. Also known as [The Harry Potter Effect.](http://recsyswiki.com/wiki/Harry_Potter_effect) The most popular items are recommended the most. So for example a movie like `Harry Potter` is a very popular item and it is recommended to a lot of people, but it is not that interesting and clouds some of the unique recommendations which could be shown to a user.\r\nGenrally when building recommender systems, for more exact results it is best to use a [Hybrid recommender system](https://en.wikipedia.org/wiki/Recommender_system#Hybrid_recommender_systems), instead off just using only collaborative filtering or only content based filtering.\r\n\r\n### Global Baseline Approach\r\nThis approach is quite useful when your ratings table is sparse, and there aren't users who rated the same item. Typically with collaborative filtering you would need other users, that rated the same item.\r\nConsider the following utility matrix with ratings:\r\n```\r\n       HP1   HP2   HP3   TW   SW1   SW2   SW3\r\n   A   4     0     0     1     1     0     0\r\n   B   5     5     4     0     0     0     0\r\n   C   0     0     0     2     4     5     0\r\n   D   3     0     0     0     0     0     3\r\n```\r\n`A`, `B`, `C` and `D` are users. `HP1` (Harry Potter 1), `TW` (Twilight), `SW1` (Star Wars 1) are movies. The predicted rating of user `A` for `HP2`, using the global baseline approach is `3.6363636363636362`.\r\n```js\r\nvar recommender = require('recommender');\r\nvar ratings = [\r\n    [ 4, 0, 0, 1, 1, 0, 0 ],\r\n\t[ 5, 5, 4, 0, 0, 0, 0 ],\r\n\t[ 0, 0, 0, 2, 4, 5, 0 ],\r\n\t[ 3, 0, 0, 0, 0, 0, 3 ]\r\n];\r\nvar userIndex = 0;\r\nvar movieIndex = 1;\r\n// We are predicting the rating of A for HP2.\r\nvar predictedRating = recommender.getGlobalBaselineRatingPrediction(ratings, userIndex, movieIndex, (predictedRating) => {\r\n    console.log(predictedRating);\r\n// Output: 3.6363636363636362\r\n});\r\n```\r\n<a name=\"API\"></a>\r\n### API\r\n* **[recommender.tfidf(`query`, `documents`, `useStopWords`, [`callback`])](#tfidf-arrays)**\r\n* **[recommender.tfidf(`searchQueryFilePath`, `documentsFilePath`, `useStopWords`, [`callback`])](#tfidf-files)**\r\n* **[recommender.getRatingPrediction(`ratings`, `rowIndex`, `colIndex`, [`callback`])](#get-r-p)**\r\n* **[recommender.getGlobalBaselineRatingPrediction(`ratings`, `rowIndex`, `colIndex`, [`callback`])](#get-g-b)**\r\n* **[recommender.getTopCFRecommendations(`ratings`, `rowIndex`, [`options`], [`callback`])](#get-top-cf)**\r\n<a name=\"tfidf-arrays\"></a>\r\n##### recommender.tfidf(`query`, `documents`, `useStopWords`, [`callback`])\r\n###### Arguments\r\n* `query` - A string with the query. *(Required)*\r\n* `documents` - An array of strings with the documents. *(Required)*\r\n* `filterStopWords` - A boolean to filter out the stop words or not. *(Optional)* *(Default: `false`)*\r\n* `callback` - A function with callback. *(Optional)*\r\n###### Returns\r\nAn array of strings with the sorted by similarity documents.\r\n```js\r\n[\r\n    'get the current date and time in javascript',\r\n    'get the current date and time in python',\r\n    'what is the time now',\r\n    'something very different'\r\n]\r\n```\r\n###### Examples\r\n```js\r\nvar recommender = require('recommender');\r\n\r\nvar query = \"get current date time javascript\";\r\nvar documents = [\r\n    'get the current date and time in javascript',\r\n    'get the current date and time in python',\r\n    'something very different',\r\n    'what is the time now'\r\n];\r\nbool filterStopWords = true;\r\nrecommender.tfidf(query, documents, filterStopWords, (sortedDocs) => {\r\n    // use sorted docs here....\r\n});\r\n```\r\n<a name=\"tfidf-files\"></a>\r\n##### recommender.tfidf(`queryFilePath`, `documentsFilePath`, `useStopWords`, [`callback`])\r\n###### Arguments\r\n* `queryFilePath` - A string with the file path to the search query text file. *(Required)*\r\n* `documentsFilePath` - A string with the file path to the documents text file. *(Required)*\r\n* `filterStopWords` - A boolean to filter out the stop words or not. *(Optional)* *(Default: `false`)*\r\n* `callback` - A function with callback. *(Optional)*\r\n###### Returns\r\nAn array of strings with the sorted by similarity documents.\r\n```js\r\n[\r\n    'get the current date and time in javascript',\r\n    'get the current date and time in python',\r\n    'what is the time now',\r\n    'something very different'\r\n]\r\n```\r\n###### Examples\r\n```js\r\nvar recommender = require('recommender');\r\n\r\nvar queryFilePath = './search_query.txt';\r\nvar documentsFilePath = './documents.txt';\r\nbool filterStopWords = true;\r\nvar weights = recommender.tfidf(queryFilePath, documentsFilePath, filterStopWords, (sortedDocs) => {\r\n    // use sorted docs here...\r\n});\r\n```\r\n<a name=\"get-r-p\"></a>\r\n##### recommender.getRatingPrediction(`ratings`, `rowIndex`, `colIndex`, [`callback`])\r\n###### Arguments\r\n* `ratings` - A two dimensional array with numbers representing the ratings. *(Required)*\r\n* `rowIndex` - An integer with the index of the target row for prediction. *(Required)*\r\n* `colIndex` - An integer with the index of the target column for prediction. *(Required)*\r\n* `callback` - A function with callback. *(optional)*\r\n###### Returns\r\nA float number with the predicted rating.\r\n###### Examples\r\n```js\r\nvar recommender = require('recommender');\r\n\r\nvar ratings = [\r\n    [ 1, 0, 3, 0, 0, 5, 0, 0, 5, 0, 4, 0 ],\r\n\t[ 0, 0, 5, 4, 0, 0, 4, 0, 0, 2, 1, 3 ],\r\n\t[ 2, 4, 0, 1, 2, 0, 3, 0, 4, 3, 5, 0 ],\r\n\t[ 0, 2, 4, 0, 5, 0, 0, 4, 0, 0, 2, 0 ],\r\n\t[ 0, 0, 4, 3, 4, 2, 0, 0, 0, 0, 2, 5 ],\r\n\t[ 1, 0, 3, 0, 3, 0, 0, 2, 0, 0, 4, 0 ]\r\n];\r\nvar rowIndex = 0;\r\nvar colIndex = 4;\r\nrecommender.getRatingPrediction(ratings, rowIndex, colIndex, (predictedRating) => {\r\n    // predictedRating is 3.329569404588411\r\n});\r\n```\r\n<a name=\"get-g-b\"></a>\r\n##### recommender.getGlobalBaselineRatingPrediction(`ratings`, `rowIndex`, `colIndex`, [`callback`])\r\n###### Arguments\r\n* `ratings` - A two dimensional array with numbers representing the ratings. *(Required)*\r\n* `rowIndex` - An integer with the index of the target row for prediction. *(Required)*\r\n* `colIndex` - An integer with the index of the target column for prediction. *(Required)*\r\n* `callback` - A function with callback. *(optional)*\r\n###### Returns\r\nA float number with the predicted rating.\r\n###### Examples\r\n```js\r\nvar recommender = require('recommender');\r\nvar ratings = [\r\n    [ 4, 0, 0, 1, 1, 0, 0 ],\r\n    [ 5, 5, 4, 0, 0, 0, 0 ],\r\n    [ 0, 0, 0, 2, 4, 5, 0 ],\r\n    [ 3, 0, 0, 0, 0, 0, 3 ]\r\n];\r\nvar userIndex = 0;\r\nvar movieIndex = 1;\r\nrecommender.getGlobalBaselineRatingPrediction(ratings, userIndex, movieIndex, (predictedRating) => {\r\n    // predictedRating is 3.6363636363636362\r\n});\r\n```\r\n<a name=\"get-top-cf\"></a>\r\n##### recommender.getTopCFRecommendations(`ratings`, `rowIndex`, [`options`], [`callback`])\r\n###### Arguments\r\n* `ratings` - A two dimensional array with numbers representing the ratings. *(Required)*\r\n* `rowIndex` - An integer with the index of the target row for prediction. *(Required)*\r\n* `options` - An object with options. *(Optional)*\r\n\t- `limit` - A number with a limit for the results. *(Optional)* *(Default: 100)*\r\n\t- `includeRatedItems` - A boolean to indicate wether already rated items by the user should be included in the results. *(Optional)* *(Default: false)*\r\n* `callback` - A function with callback. *(optional)*\r\n###### Returns\r\nAn array of objects. Each object contains the item id and the predicted rating. The array is sorted by rating.\r\n###### Examples\r\n```js\r\nvar recommender = require('recommender');\r\nvar ratings = [\r\n    [ 4, 0, 0, 1, 1, 0, 0 ],\r\n    [ 5, 5, 4, 0, 0, 0, 0 ],\r\n    [ 0, 0, 0, 2, 4, 5, 0 ],\r\n    [ 3, 0, 0, 0, 0, 0, 3 ]\r\n];\r\n// We are getting the top recommendations for the first user.\r\nrecommender.getTopCFRecommendations(ratings, 0, (recommendations) => {\r\n    console.log(recommendations);\r\n    /*\r\n    [\r\n        { itemId: 1, rating: 4.4907920453550085 },\r\n        { itemId: 2, rating: 3.5926336362840074 },\r\n        { itemId: 5, rating: 0.5092079546449908 },\r\n        { itemId: 6, rating: 0 }\r\n    ]\r\n    */\r\n\r\n// Or we can pass options parameter.\r\nrecommender.getTopCFRecommendations(ratings, 0, {limit: 3}, (recommendations) => {\r\n    console.log(recommendations);\r\n    /*\r\n    [\r\n        { itemId: 1, rating: 4.4907920453550085 },\r\n        { itemId: 2, rating: 3.5926336362840074 },\r\n        { itemId: 5, rating: 0.5092079546449908 }\r\n    ]\r\n    */\r\n});\r\n```\r\n### Run examples and benchmarks\r\n- Clone the repo.\r\n- `npm i` in the main folder.\r\n- `npm i` in `/demo` folder.\r\n- `node index.js` to run the examples.\r\n- `node benchmarks.js` to run the benchmarks.\r\n\r\nCan be viewed [here](https://github.com/D-Andreev/recommender-addon/blob/master/demo/benchmarks.js). \r\n```\r\ntfidf*100000: 14471.830ms\r\nratingPrediction*100000: 3782.905ms\r\ngetGlobalBaselineRatingPrediction*100000: 3235.675ms\r\ngetTopCFRecommendations*100000: 5171.741ms\r\ntfidf*100000: 14506.219ms\r\nratingPrediction*100000: 3761.865ms\r\ngetGlobalBaselineRatingPrediction*100000: 3279.035ms\r\ngetTopCFRecommendations*100000: 5130.438ms\r\n```\r\n\r\n### Contributing\r\nPull requests are welcome.\r\n\r\n### Changelog\r\nFor complete changelog [click here](https://github.com/D-Andreev/recommender-addon/blob/master/CHANGELOG.md).\r\n\r\n### License\r\nMIT License\r\n\r\nCopyright (c) 2017 Dimitar Andreev\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n[![forthebadge](http://forthebadge.com/images/badges/contains-technical-debt.svg)](http://forthebadge.com) [![forthebadge](http://forthebadge.com/images/badges/check-it-out.svg)](http://forthebadge.com) [![forthebadge](http://forthebadge.com/images/badges/no-ragrets.svg)](http://forthebadge.com) [![forthebadge](http://forthebadge.com/images/badges/winter-is-coming.svg)](http://forthebadge.com) [![forthebadge](http://forthebadge.com/images/badges/powered-by-jeffs-keyboard.svg)](http://forthebadge.com)\r\n[![forthebadge](http://forthebadge.com/images/badges/compatibility-ie-6.svg)](http://forthebadge.com)\r\n","created":"2017-04-16T21:50:34.292Z","modified":"2017-05-31T11:32:14.860Z","lastPublisher":{"name":"d_andreev","email":"d.andreev90@gmail.com"},"owners":[{"name":"d_andreev","email":"d.andreev90@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"recommender","_nodeVersion":"7.0.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/recommender-3.0.0.tgz_1496230333732_0.33003805950284004"},"_npmUser":{"name":"d_andreev","email":"d.andreev90@gmail.com"},"_npmVersion":"3.10.8","_rev":"18-46259ada08a3ef99b5193d867cf89e03","_shasum":"265619a3b5f7ab23c5983999939bcd82d92e6c31","author":{"name":"Dimitar Andreev","email":"d.andreev90@gmail.com"},"bugs":{"url":"https://github.com/D-Andreev/recommender-addon/issues"},"directories":{},"dist-tags":{"latest":"3.0.0"},"dist":{"shasum":"265619a3b5f7ab23c5983999939bcd82d92e6c31","tarball":"https://registry.npmjs.org/recommender/-/recommender-3.0.0.tgz"},"maintainers":[{"name":"d_andreev","email":"d.andreev90@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-31T11:32:14.860Z","created":"2017-04-16T21:50:34.292Z","1.0.0":"2017-04-16T21:50:34.292Z","1.0.1":"2017-04-17T01:54:31.553Z","1.1.0":"2017-04-17T14:39:04.817Z","1.1.1":"2017-04-17T20:40:32.456Z","1.1.2":"2017-05-14T17:22:08.792Z","1.2.0":"2017-05-15T23:11:31.516Z","1.3.0":"2017-05-16T15:04:04.473Z","1.3.1":"2017-05-20T11:52:07.594Z","1.4.0":"2017-05-20T17:31:03.466Z","1.4.1":"2017-05-20T17:59:38.892Z","1.4.2":"2017-05-20T18:45:25.428Z","2.0.0":"2017-05-20T19:41:49.838Z","2.0.1":"2017-05-21T00:31:35.933Z","2.0.2":"2017-05-21T13:01:47.083Z","2.0.3":"2017-05-21T21:02:15.245Z","2.0.4":"2017-05-21T22:00:27.002Z","2.0.5":"2017-05-30T20:03:43.052Z","3.0.0":"2017-05-31T11:32:14.860Z"}}}