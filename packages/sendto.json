{"name":"sendto","version":"1.0.3","description":"unix datagram sendto with accommodating buffer size","dependencies":{"nan":"2.6.2"},"devDependencies":{"recvfrom":"1.0.1","tape":"3.5","tap-spec":"2.2"},"repository":"https://github.com/reqshark/sendto","scripts":{"test":"node test | tap-spec","install":"node-gyp rebuild"},"homepage":"http://req.link","keywords":["datagram","recvfrom","sendto","unix","native","binding","addon"],"license":"MIT","gypfile":true,"gitHead":"ea12b8180c0f530c26bac31a9cd7e4c5bc2fb9a7","versions":[{"number":"0.0.1","date":"2017-05-06T09:45:05.865Z"},{"number":"0.0.2","date":"2017-05-06T15:32:53.918Z"},{"number":"1.0.0","date":"2017-05-08T10:30:08.205Z"},{"number":"1.0.1","date":"2017-05-11T04:08:55.973Z"},{"number":"1.0.2","date":"2017-05-12T03:14:13.286Z"},{"number":"1.0.3","date":"2017-05-12T20:13:32.296Z"}],"readme":"# sendto\n[![Build Status](https://travis-ci.org/reqshark/sendto.svg?branch=master)](https://travis-ci.org/reqshark/sendto)\n\nunix datagrams on osx have system send buffer limits of `2048` bytes.\n\nthis module performs a posix `sendto()` but first sets socket option `SO_SNDBUF`, raising the send limit size up to the size of whatever node buffer you pass.\n\n```bash\nnpm i sendto\nnode -e \"require('sendto')('/tmp/a', Buffer('hello'))\"\n```\n\n### sendto(*string*, *buffer*)\n\npass a unix datagram socket path and then the buffer, something like:\n\n```js\nconst sendto = require('sendto')\nconst str = 'some buffer bigger than this'\nsendto('/tmp/mysocketpath', Buffer(str) )\n```\n\n*special note on `sendto(str, Buffer)`. there are two ways to interrupt or force node process to exit:*\n\n* not giving node buffer\n\n* to an addressable sockname on `recv` side (bind the `recv()` first before `sendto()`)\n\n#### my ideas on that:\n\nimplicit coercion seems to be preferred by JavaScript over type checking, i.e. convert input to a buffer for the user. And where there's no socket address, we should probably back-off and retry to send later. Or emit JavaScript error event about the missing addressable path. Probably overkill to do a JS error, since the native `perror()` call already does some descriptive noise about it, though less catchable in JS\n","created":"2017-05-06T09:45:05.865Z","modified":"2017-05-12T20:13:32.296Z","lastPublisher":{"name":"reqshark","email":"bent@nothingsatisfies.com"},"owners":[{"name":"reqshark","email":"bent@nothingsatisfies.com"}],"other":{"_attachments":{},"_from":".","_id":"sendto","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/sendto-1.0.3.tgz_1494620010168_0.9807677296921611"},"_npmUser":{"name":"reqshark","email":"bent@nothingsatisfies.com"},"_npmVersion":"4.2.0","_rev":"6-6b25d5699543d8b665c7b09a324425e9","_shasum":"49d6b319a2101c0ac35c044cb065a69f907d5e01","author":{"name":"Bent Cardan","email":"bent@nothingsatisfies.com","url":"http://req.link"},"bugs":{"url":"https://github.com/reqshark/sendto/issues"},"directories":{},"dist-tags":{"latest":"1.0.3"},"dist":{"shasum":"49d6b319a2101c0ac35c044cb065a69f907d5e01","tarball":"https://registry.npmjs.org/sendto/-/sendto-1.0.3.tgz"},"maintainers":[{"name":"reqshark","email":"bent@nothingsatisfies.com"}],"readmeFilename":"readme.markdown","time":{"modified":"2017-05-12T20:13:32.296Z","created":"2017-05-06T09:45:05.865Z","0.0.1":"2017-05-06T09:45:05.865Z","0.0.2":"2017-05-06T15:32:53.918Z","1.0.0":"2017-05-08T10:30:08.205Z","1.0.1":"2017-05-11T04:08:55.973Z","1.0.2":"2017-05-12T03:14:13.286Z","1.0.3":"2017-05-12T20:13:32.296Z"}}}