{"name":"gelatin","version":"0.2.0","description":"Bindings for g-speak's libPlasma, a message-passing framework","keywords":["plasma","g-speak","oblong"],"license":"MIT","files":["/src","/lib","binding.gyp","g-seek.py"],"repository":"https://github.com/Oblong/gelatin","scripts":{"doc":"jsdoc -c doc/conf.json -d doc/out lib/*.js","justthetest":"tap test/*.js","preversion":"npm test","test":"node-gyp build && npm run justthetest","test-debug":"node-gyp build --debug && GELATIN_DEBUG=1 npm run justthetest","install":"node-gyp rebuild"},"dependencies":{"nan":"^2.3.1"},"devDependencies":{"eslint":"^3.13.0","eslint-config-google":"^0.7.1","jsdoc":"^3.4.0","tap":"^5.4.2"},"main":"lib/index.js","gypfile":true,"engines":{"node":">= 4.2.0"},"os":["darwin","linux"],"gitHead":"9890fa21c2837afaeb23d87cf62f85b7e2ad93bf","homepage":"https://github.com/Oblong/gelatin#readme","versions":[{"number":"0.1.0","date":"2016-08-12T01:34:46.705Z"},{"number":"0.1.1","date":"2016-08-16T00:24:28.650Z"},{"number":"0.1.2","date":"2017-06-29T19:15:08.556Z"},{"number":"0.2.0","date":"2017-07-17T23:06:33.024Z"}],"readme":"# gelatin\n\nlibPlasma bindings/implementation for Node.js.  Work in progress.\n\n[![npm version](https://badge.fury.io/js/gelatin.svg)](https://badge.fury.io/js/gelatin)\n\n## g-speak version\n\nSince it has a native component, gelatin requires the g-speak platform to be\ninstalled wherever it's used.  At build/`npm install` time, the version of\ng-speak used is determined this way:\n\n1. If `GELATIN_G_SPEAK_HOME` is set in the environment, use that path to look\n   up g-speak.  For example, `GELATIN_G_SPEAK_HOME=/opt/oblong/g-speak3.26 npm\n   install` will build/link against g-speak 3.26.\n2. Otherwise, look up the most recent compatible version of g-speak in\n   `/opt/oblong`.\n\n## examples\n\nCheck the `examples/` directory for some commented examples of using gelatin.\n`examples/wandsplit.js` is quite practical (inspired by a real-world use case)\nand uses the most gelatin features of the examples.\n\n\n```js\nconst util = require('util');\nconst peek = require('gelatin').peek;\n\nconst pool = process.argv[2];\n\nfunction main() {\n  if (!pool) {\n    console.error('pool argument required.');\n    process.exitCode = 1;\n    return;\n  }\n\n  const p = peek(pool);\n\n  p.on('data', (protein) => {\n    console.log('metabolized protein with descrips:', protein.descrips);\n    if (protein.descrips.indexOf('hangup') >= 0) {\n      p.end();\n    }\n  });\n  p.on('error', (err) => {\n    console.error(`peek error: ${util.inspect(err)}`);\n  });\n\n  console.log('now deposit/poke a protein to pool', pool);\n}\n\nmain();\n```\n\n\n## API documentation\n\nTo generate API documentation from the source repo:\n\n```\nnpm install\nnpm run doc\n```\n\nThe documentation will be available at `doc/out/index.html`\n\n## type conversions\n\nConversions are defined for converting JavaScript values to Slaw values, and\nfor converting Slaw values to JavaScript's values.  For JavaScript's primitive\ntypes, these are:\n\n| Javascript type/value            | Slaw type/value                |\n|----------------------------------|--------------------------------|\n| null (`null`)                    | (null)                         |\n| undefined (`void 0`)             | (null)                         |\n| boolean (`true`)                 | boolean                        |\n| number (`-5` or `23` or `4.56`)  | unt32/int32/float64 (see note) |\n| string (`\"hello world\"`)         | string                         |\n\nNumeric conversions are a pain because, where slaw has a plethora of numeric\ntypes, JavaScript (from a high-level perspective) has just one number type:\ndouble-precision float.  JavaScript does, under the hood, support `int32_t` and\n`uint32_t` representations of certain numbers (see, for example\n[](http://www.ecma-international.org/ecma-262/5.1/#sec-11.7)), and when a\nJavaScript number is represented this way its slaw conversion is to the\nappropriate slaw number type.  But it's not always obvious which representation\na JavaScript number has, so be careful.  Note also that conversions from slaw\n`int64`/`unt64` to JavaScript number values *may be lossy*.\n\nFor object types and the special `Slaw.nil` value, the conversions are:\n\n| Javascript type/value                                | Slaw type/value |\n|------------------------------------------------------|-----------------|\n| Map (`new Map([[\"hello\", 123]])`)                    | map             |\n| Array (`[ true, false ]`)                            | list            |\n| gelatin.Slaw.nil (`gelatin.Slaw.nil`)                | nil             |\n| gelatin.Vect (`new gelatin.Vect([0.0, 1.0, 0.])`)    | v3float64       |\n| gelatin.Vect2 (`new gelatin.Vect2([0.0, 1.0])`)      | v2float64       |\n| gelatin.Vect4 (`new gelatin.Vect4([0, 1, 2, 3])`)    | v4float64       |\n| gelatin.Protein (`new gelatin.Protein([\"foo\"], {})`) | protein         |\n| Object (other) (`{foo: 123}`) (note: only *from* JS) | map             |\n\nComposite values like Maps and Arrays convert each of their elements to slaw.\nFor convenience, it's possible to create a slaw map using a \"Plain Old\nJavaScript Object\", but a slaw map always converts to a JavaScript Map value.\n\n## compatibility\n\ngelatin officially supports the Node.JS v4.2 \"Argon\" LTS release on Linux and\nOS X/macOS.  Unofficially, gelatin also tries its best to support the latest\nNode versions released through Homebrew for OS X/macOS.\n\n## copyright & license\n\nCopyright (c) 2016 Oblong Industries, Inc. Code released under\n[the MIT license](LICENSE.txt).\n","created":"2016-08-12T01:34:46.705Z","modified":"2017-07-17T23:06:33.024Z","lastPublisher":{"name":"oblong","email":"platform.pub@oblong.com"},"owners":[{"name":"oblong","email":"platform.pub@oblong.com"}],"other":{"_attachments":{},"_from":".","_id":"gelatin","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gelatin-0.2.0.tgz_1500332792878_0.2753476486541331"},"_npmUser":{"name":"oblong","email":"platform.pub@oblong.com"},"_npmVersion":"4.2.0","_rev":"3-97e34101b2df80ace1eff7350bafea41","_shasum":"3b76778547eadd8fdf4feb1c78bf7ad64aa3a253","author":{"name":"Oblong Industries, Inc.","email":"platform.pub@oblong.com"},"bugs":{"url":"https://github.com/Oblong/gelatin/issues"},"directories":{"lib":"./lib","examples":"./examples"},"dist-tags":{"latest":"0.2.0"},"dist":{"shasum":"3b76778547eadd8fdf4feb1c78bf7ad64aa3a253","tarball":"https://registry.npmjs.org/gelatin/-/gelatin-0.2.0.tgz"},"maintainers":[{"name":"oblong","email":"platform.pub@oblong.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-17T23:06:33.024Z","created":"2016-08-12T01:34:46.705Z","0.1.0":"2016-08-12T01:34:46.705Z","0.1.1":"2016-08-16T00:24:28.650Z","0.1.2":"2017-06-29T19:15:08.556Z","0.2.0":"2017-07-17T23:06:33.024Z"}}}