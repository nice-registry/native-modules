{"name":"lru-addon","version":"1.1.0","description":"a native LRU cache implementation","gypfile":true,"repository":"https://github.com/denghongcai/node-lru-addon","devDependencies":{"chai":"latest","mocha":"latest","coffee-script":"latest"},"scripts":{"valgrind":"valgrind --leak-check=full --show-possibly-lost=no node --expose-gc --trace-gc node_modules/mocha/bin/_mocha -R spec --compilers coffee:coffee-script/register","test":"mocha","install":"node-gyp rebuild"},"dependencies":{"nan":"*"},"gitHead":"be6308f4c48f1cda02d8ad1f5cded75227c5f063","homepage":"https://github.com/denghongcai/node-lru-addon#readme","versions":[{"number":"1.0.1","date":"2015-08-10T01:41:12.996Z"},{"number":"1.0.2","date":"2015-08-14T02:07:21.159Z"},{"number":"1.0.3","date":"2015-08-14T05:45:31.730Z"},{"number":"1.0.4","date":"2015-08-15T14:38:32.212Z"},{"number":"1.0.5","date":"2015-08-15T14:43:49.044Z"},{"number":"1.0.6","date":"2016-11-01T08:50:33.457Z"},{"number":"1.1.0","date":"2016-12-17T18:56:14.459Z"}],"readme":"node-lru-addon\n===============\n[![Build Status](https://travis-ci.org/denghongcai/node-lru-addon.svg?branch=master)](https://travis-ci.org/denghongcai/node-lru-addon)\n\nThis is an implementation of a simple in-memory cache for node.js, supporting LRU (least-recently-used) eviction\nand TTL expirations.\n\nIt was developed as an alternative to the (excellent) [node-lru-cache](https://github.com/isaacs/node-lru-cache)\nlibrary for use with hashes with a very large number of items. V8 normally does a good job of optimizing the\nin-memory representation of objects, but it isn't optimized for an object that holds a huge amount of data.\nWhen you add a very large number of properties (particularly with non-integer keys) to an object, performance\nbegins to suffer.\n\nRather than rely on V8 to figure out what we're trying to do, `node-lru-native` is a light wrapper around\n`std::unordered_map` from C++11. A `std::list` is used to track accesses so we can evict the least-recently-used\nitem when necessary.\n\nBased on the [node-hashtable](https://github.com/isaacbwagner/node-hashtable) library by Issac Wagner.\n\nBecause original code is no longer maintained, I update this code and publish it as a new name `lru-addon`\n\n# Usage\n\nInstall via npm:\n\n```\n$ npm install lru-addon\n```\n\nThen:\n\n```javascript\nvar LRUCache = require('lru-addon');\nvar cache = new LRUCache({ maxElements: 1000 });\ncache.set('some-key', 42);\nvar value = cache.get('some-key');\n```\n\nIf you'd like to tinker, you can build the extension using [node-gyp](https://github.com/TooTallNate/node-gyp):\n\n```\n$ npm install -g node-gyp\n$ node-gyp configure\n$ node-gyp build\n```\n\n# Benchmark\n\nSee `benchmark` folder for a extremly simple test. You can do it by yourself aslo.\n\n# Configuration\n\nTo configure the cache, you can pass a hash to the `LRUCache` constructor with the following options:\n\n```\nvar cache = new LRUCache({\n\n  // The maximum number of items to add to the cache before evicting the least-recently-used item.\n  // Default: 0, meaning there is no maximum.\n  maxElements: 10000,\n\n  // The maximum age (in milliseconds) of an item.\n  // The item will be removed if get() is called and the item is too old.\n  // Default: 0, meaning items will never expire.\n  maxAge: 60000,\n\n  // The initial number of items for which space should be allocated.\n  // The cache will resize dynamically if necessary.\n  size: 1000,\n\n  // The maximum load factor for buckets in the unordered_map.\n  // Typically you won't need to change this.\n  maxLoadFactor: 2.0\n\n});\n```\n\n# API\n\n## set(key, value)\n\nAdds the specified item to the cache with the specified key.\n\n## get(key)\n\nReturns the item with the specified key, or `undefined` if no item exists with that key.\n\n## remove(key)\n\nRemoves the item with the specified key if it exists.\n\n## keys([subkey])\n\nGet all keys from cache. If `subkey` parameter is present, then it returns only keys that contain `subkey`.\n\n## clear()\n\nRemoves all items from the cache.\n\n## size()\n\nReturns the number of items in the cache.\n\n## stats()\n\nReturns a hash containing internal information about the cache.\n\n# Changelog\n- 1.0.4 -- Support Windows\n- 1.0.3 -- Support io.js 3.0\n- 1.0.0 -- Publish a new package\n- 0.4.0 -- Use nan to across node version\n- 0.3.0 -- Changed memory allocation strategy, fixed issue where remove() would do a seek through the LRU list, code cleanup\n- 0.2.0 -- Fixed issue where maxAge-based removal would result in a seek through the LRU list\n- 0.1.0 -- Initial release\n","starsCount":1,"created":"2015-08-10T01:41:12.996Z","modified":"2016-12-17T18:56:14.459Z","lastPublisher":{"name":"denghongcai","email":"admin@dhchouse.com"},"owners":[{"name":"denghongcai","email":"admin@dhchouse.com"}],"other":{"_attachments":{},"_from":".","_id":"lru-addon","_nodeVersion":"4.6.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/lru-addon-1.1.0.tgz_1482000973815_0.8578254403546453"},"_npmUser":{"name":"denghongcai","email":"admin@dhchouse.com"},"_npmVersion":"3.10.8","_rev":"3-c7fc01ae6e43c05049754feb728da118","_shasum":"5a8b146b181f638e104a90e33ad2ec5604a0f710","bugs":{"url":"https://github.com/denghongcai/node-lru-addon/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"5a8b146b181f638e104a90e33ad2ec5604a0f710","tarball":"http://registry.npmjs.org/lru-addon/-/lru-addon-1.1.0.tgz"},"maintainers":[{"name":"denghongcai","email":"admin@dhchouse.com"}],"readmeFilename":"README.md","time":{"modified":"2016-12-17T18:56:14.459Z","created":"2015-08-10T01:41:12.996Z","1.0.1":"2015-08-10T01:41:12.996Z","1.0.2":"2015-08-14T02:07:21.159Z","1.0.3":"2015-08-14T05:45:31.730Z","1.0.4":"2015-08-15T14:38:32.212Z","1.0.5":"2015-08-15T14:43:49.044Z","1.0.6":"2016-11-01T08:50:33.457Z","1.1.0":"2016-12-17T18:56:14.459Z"},"users":{"fanazhe":true}}}