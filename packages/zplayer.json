{"name":"zplayer","description":"a mp3 stream player","keywords":["mp3","stream","player","pcm","audio","sound","music","output","speaker","headphone","alsa","coreaudio","openal","sdl","portaudio","jack","oss","pulse","mpg123"],"license":"MIT","version":"0.4.1","repository":"https://github.com/zinw/zPlayer","homepage":"https://github.com/zinw/zPlayer","main":"./index.js","scripts":{"test":"node-gyp rebuild --mpg123-backend=dummy && mocha --reporter spec","install":"node-gyp rebuild"},"dependencies":{"bindings":"^1.2.1","debug":"^2.2.0","nan":"^2.2.0","readable-stream":"^2.0.5","inherits":"^2.0.1","xtend":"^4.0.1","audio-through":"^2.1.1"},"devDependencies":{"mocha":"^2.1.0"},"gypfile":true,"gitHead":"4e1688d4c3dcad6bbd2ad964120de912cc71a8b7","versions":[{"number":"0.4.0","date":"2016-12-27T13:07:59.253Z"},{"number":"0.4.1","date":"2016-12-28T12:46:56.109Z"}],"readme":"node-speaker\n============\n### Output [PCM audio][pcm] data to the speakers\n[![Build Status](https://secure.travis-ci.org/TooTallNate/node-speaker.svg)](https://travis-ci.org/TooTallNate/node-speaker)\n[![Build Status](https://ci.appveyor.com/api/projects/status/wix7wml3v55670kw?svg=true)](https://ci.appveyor.com/project/TooTallNate/node-speaker)\n\n\nA Writable stream instance that accepts [PCM audio][pcm] data and outputs it\nto the speakers. The output is backed by `mpg123`'s audio output modules, which\nin turn use any number of audio backends commonly found on Operating Systems\nthese days.\n\n\nInstallation\n------------\n\nSimply compile and install `node-speaker` using `npm`:\n\n``` bash\n$ npm install speaker\n```\n\nOn Debian/Ubuntu, the [ALSA][alsa] backend is selected by default, so be sure\nto have the `alsa.h` header file in place:\n\n``` bash\n$ sudo apt-get install libasound2-dev\n```\n\n\nExample\n-------\n\nHere's an example of piping `stdin` to the speaker, which should be 2 channel,\n16-bit audio at 44,100 samples per second (a.k.a CD quality audio).\n\n``` javascript\nvar Speaker = require('speaker');\n\n// Create the Speaker instance\nvar speaker = new Speaker({\n  channels: 2,          // 2 channels\n  bitDepth: 16,         // 16-bit samples\n  sampleRate: 44100     // 44,100 Hz sample rate\n});\n\n// PCM data from stdin gets piped into the speaker\nprocess.stdin.pipe(speaker);\n```\n\n\nAPI\n---\n\n`require('speaker')` directly returns the `Speaker` constructor. It is the only\ninterface exported by `node-speaker`.\n\n### new Speaker([ format ]) -> Speaker instance;\n\nCreates a new `Speaker` instance, which is a writable stream that you can pipe\nPCM audio data to. The optional `format` object may contain any of the `Writable`\nbase class options, as well as any of these PCM formatting options:\n\n  * `channels` - The number of audio channels. PCM data must be interleaved. Defaults to `2`.\n  * `bitDepth` - The number of bits per sample. Defaults to `16` (16-bit).\n  * `sampleRate` - The number of samples per second per channel. Defaults to `44100`.\n  * `signed` - Boolean specifying if the samples are signed or unsigned. Defaults to `true` when bit depth is 8-bit, `false` otherwise.\n  * `float` - Boolean specifying if the samples are floating-point values. Defaults to `false`.\n  * `samplesPerFrame` - The number of samples to send to the audio backend at a time. You likely don't need to mess with this value. Defaults to `1024`.\n\n#### \"open\" event\n\nFired when the backend `open()` call has completed. This happens once the first\n`write()` call happens on the speaker instance.\n\n#### \"flush\" event\n\nFired after the speaker instance has had `end()` called, and after the audio data\nhas been flushed to the speakers.\n\n#### \"close\" event\n\nFired after the \"flush\" event, after the backend `close()` call has completed.\nThis speaker instance is essentially finished after this point.\n\n\nAudio Backend Selection\n-----------------------\n\n`node-speaker` is backed by `mpg123`'s \"output modules\", which in turn use one of\nmany popular audio backends like ALSA, OSS, SDL, and lots more. The default\nbackends for each operating system are described in the table below:\n\n| **Operating System** | **Audio Backend** | **Description**\n|:---------------------|:------------------|:----------------------------------\n| Linux                | `alsa`            | Output audio using [Advanced Linux Sound Architecture (ALSA)][alsa].\n| Mac OS X             | `coreaudio`       | Output audio using Mac OS X's CoreAudio.\n| Windows              | `win32`           | Audio output for Windows (winmm).\n| Solaris              | `sun`             | Audio output for Sun Audio.\n\nTo manually override the default backend, pass the `--mpg123-backend` switch to\n`npm`/`node-gyp`:\n\n``` bash\n$ npm install speaker --mpg123-backend=openal\n```\n\n[pcm]: http://en.wikipedia.org/wiki/Pulse-code_modulation\n[alsa]: http://www.alsa-project.org/\n","created":"2016-12-27T13:07:59.253Z","modified":"2016-12-28T12:46:56.109Z","lastPublisher":{"name":"zinway","email":"zinway@qq.com"},"owners":[{"name":"zinway","email":"zinway@qq.com"}],"other":{"_attachments":{},"_from":".","_id":"zplayer","_nodeVersion":"7.3.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/zplayer-0.4.1.tgz_1482929213762_0.045744880801066756"},"_npmUser":{"name":"zinway","email":"zinway@qq.com"},"_npmVersion":"3.10.10","_rev":"2-409f26675c8c8c417487a8e9d1ffebd9","_shasum":"bd0b91bcb5014235ae26322e99e66e8c0788f9a3","author":{"name":"Zinway Liu","email":"z@zin.so","url":"http://zin.so/"},"bugs":{"url":"https://github.com/zinw/zPlayer/issues"},"directories":{},"dist-tags":{"latest":"0.4.1"},"dist":{"shasum":"bd0b91bcb5014235ae26322e99e66e8c0788f9a3","tarball":"http://registry.npmjs.org/zplayer/-/zplayer-0.4.1.tgz"},"maintainers":[{"name":"zinway","email":"zinway@qq.com"}],"readmeFilename":"README.md","time":{"modified":"2016-12-28T12:46:56.109Z","created":"2016-12-27T13:07:59.253Z","0.4.0":"2016-12-27T13:07:59.253Z","0.4.1":"2016-12-28T12:46:56.109Z"}}}