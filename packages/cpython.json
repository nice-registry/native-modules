{"name":"cpython","version":"0.10.1","description":"Native bindings to run python in its native interpreter.","main":"index.js","dependencies":{"bindings":"^1.2.1","glob":"^7.0.3","nan":"^2.3.5"},"devDependencies":{"istanbul":"^0.4.3","tape":"^4.5.1"},"bin":{"ncpy":"./bin/cpython","node-cpython":"./bin/cpython"},"scripts":{"dev":"nodemon -e js --exec \"./node_modules/tape/bin/tape 'tests/**/*.spec.js'\"","clone":"git clone -b 2.7 --depth=1 https://github.com/python/cpython deps/python/2.7","clean":"rm -rf deps/python/2.7/{Doc,Demo,.git,bzignore,.gitignore,.hgeol,.hgignore,.hgtouch,README}","deep-clean":"rm -rf deps/python/2.7","lint":"standard lib/**/*.js","test":"istanbul cover ./node_modules/tape/bin/tape 'tests/**/*.spec.js'","posttest":"(istanbul check-coverage --statements 80 --branches 65 --functions 55 --lines 80 && rm -rf coverage) || echo Look at 'coverage/lcov-report/index.html' to find out more","docs":"jsdoc2md lib/node-cpython.js > docs/API.md && node -e \"var fs = require('fs');fs.writeFile('README.md', fs.readFileSync('docs/README.md'));['docs/README.md', 'docs/API.md', 'docs/LICENSE.md'].forEach(function(el){fs.appendFileSync('README.md',fs.readFileSync(el))})\"","preinstall":"node install.js","install":"node-gyp rebuild"},"repository":"https://github.com/eljefedelrodeodeljefe/node-cpython","keywords":["bindings","native","cpython","python"],"license":"MIT","gypfile":true,"homepage":"https://github.com/eljefedelrodeodeljefe/node-cpython#readme","gitHead":"a6e5414fa4c089c30135c3a7db3eaf1e1d600f68","versions":[{"number":"0.1.2-alpha","date":"2015-05-03T19:49:55.910Z"},{"number":"0.1.4-alpha","date":"2015-05-03T20:10:06.367Z"},{"number":"0.1.5-alpha","date":"2015-05-03T20:17:23.727Z"},{"number":"0.1.6-alpha","date":"2015-05-03T20:32:19.676Z"},{"number":"0.1.9-alpha","date":"2015-05-07T17:07:59.876Z"},{"number":"0.1.10-alpha","date":"2015-05-07T17:21:16.658Z"},{"number":"0.1.11-alpha","date":"2015-05-07T17:47:24.089Z"},{"number":"0.2.12-alpha","date":"2015-05-11T18:35:34.097Z"},{"number":"0.3.1-beta","date":"2015-05-23T17:39:36.726Z"},{"number":"0.3.3-alpha.1","date":"2015-10-18T23:32:18.495Z"},{"number":"0.3.4-alpha.1","date":"2015-10-19T03:56:16.523Z"},{"number":"0.3.5-alpha.1","date":"2015-10-19T04:02:10.522Z"},{"number":"0.3.7-alpha.1","date":"2015-10-19T18:03:05.947Z"},{"number":"0.3.8-alpha.1","date":"2015-10-19T19:03:24.730Z"},{"number":"0.5.2-beta.1","date":"2015-10-31T15:05:47.474Z"},{"number":"0.5.3-beta.1","date":"2015-10-31T15:26:26.514Z"},{"number":"0.5.4-beta.1","date":"2015-10-31T17:41:28.894Z"},{"number":"0.5.5-beta.1","date":"2015-10-31T19:12:36.845Z"},{"number":"0.6.0-beta.2","date":"2015-11-01T00:37:48.516Z"},{"number":"0.6.1-beta.2","date":"2015-11-01T01:54:17.754Z"},{"number":"0.7.0-beta.3","date":"2015-11-14T19:31:33.175Z"},{"number":"0.8.1-rc.1","date":"2015-11-28T20:40:52.297Z"},{"number":"0.8.2-rc.1","date":"2015-11-28T23:11:19.411Z"},{"number":"0.8.3-rc.1","date":"2015-11-29T23:01:49.019Z"},{"number":"0.9.0-rc.2","date":"2015-11-30T22:25:47.095Z"},{"number":"0.9.1-rc.3","date":"2016-03-29T16:56:14.872Z"},{"number":"0.10.0","date":"2016-05-23T20:41:15.276Z"},{"number":"0.10.1","date":"2016-05-31T15:45:07.097Z"}],"readme":"# node-cpython\n\nNative bindings to run python in its native interpreter.\n\nThis Library is in rc status. **Do only use if you know what you do**\n\n[![Build Status](https://travis-ci.org/eljefedelrodeodeljefe/node-cpython.svg?branch=master)](https://travis-ci.org/eljefedelrodeodeljefe/node-cpython) [![Build status](https://ci.appveyor.com/api/projects/status/59q34ua3i457k27x?svg=true)](https://ci.appveyor.com/project/eljefederodeodeljefe/node-cpython) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/) [![Join the chat at https://gitter.im/eljefedelrodeodeljefe/node-cpython](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/eljefedelrodeodeljefe/node-cpython?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![NPM](https://nodei.co/npm-dl/cpython.png?months=6&height=2)](https://nodei.co/npm/cpython/)\n\n## TL;DR\n\nSometimes you want to use Python scripts or even whole libraries, but you don't want to rely on `child_process.exec()` or `child_process.spawn()`. This module initializes the standard Python interpreter and passes Py code to it.\n\n![](http://res.cloudinary.com/jefe-io/image/upload/v1446302782/ncpy_showcase_2_uvlp6b.gif)\n\n## Implementation Status<a name=\"status\"></a>\n| Method | implemented |\n| --- | --- |\n| **Core** |  |\n| .ffi(py_file, fn_name, args, [options], [cb]) | **yes** |\n| .repl() | **yes** |\n| .run() | - |\n| .runSync() | - |\n| .runString(string | **yes** |\n| .simpleString(string, [cb]) | **yes** |\n| .eval() | - |\n| - | - |\n| **Infrastructure** |  |\n| init() | **yes** |\n| initialize() | **yes** |\n| finalize() | **yes** |\n| isInitialized() | **yes** |\n| isFinalized() | **yes** |\n| setProgramName() | - |\n| setArgv() | - |\n| - | - |\n| **Stream API** |  |\n| ffi.require(py_file, [options]) | **yes** |\n| ffi.init(stream) | **yes** |\n| ffi.run(fn_name) | **yes** |\n| ffi.pipe(stream) | **yes** |\n| ffi.on(event) | **yes** |\n\n## Introduction\n\nThe following shall give background information and explain why you want to use this.\n\n### Motivation\n\nIn order to compile C code with [Emscripten](https://github.com/kripken/emscripten) you'd have to run the Python script, which utilizes LLVM. However working with `child_process.exec()` or `chold_process.spawn()` seems odd, since it neither safe nor does it handle errors nor is it platform independent.\nSo in order to run scripts programmatically it seemed a good idea to use the the perfect legit `Python.h` C-header in the standard implementation of Python.\n\n### Overview\n\n### Technical Overview\n\n**Rquirements:**\n* Node 4.0.0+\n\n## Platform\n\nThis module is currently tested on:\n\n| Platform | 0.12 | 3.0 | 4.0 | 5.0 |\n| --- | --- | --- | --- | ---|\n| Mac OS X | - | - | **yes** | **yes**|\n| Linux | - | - | **yes** | **yes**  |\n| Windows | - | - | - | - |\n\n## Roadmap\n\nPlease see [list of the implemented methods](#status) for now.\n\n\n## API\n<a name=\"Ncpy\"></a>\n## Ncpy\n**Kind**: global class  \n\n* [Ncpy](#Ncpy)\n  * [new Ncpy()](#new_Ncpy_new)\n  * [.init(options)](#Ncpy+init) ⇒ <code>Object</code>\n  * [.repl()](#Ncpy+repl)\n  * [.run(glob, Argv, [cb])](#Ncpy+run)\n  * [.runSync(glob, Argv, [cb])](#Ncpy+runSync)\n  * [.runString(string)](#Ncpy+runString)\n  * [.simpleString(str, [flags], [cb])](#Ncpy+simpleString)\n  * [.ffi(file, functionname)](#Ncpy+ffi) ⇒ <code>Callback</code>\n  * [.eval()](#Ncpy+eval)\n  * [.initialize()](#Ncpy+initialize)\n  * [.isInitialized()](#Ncpy+isInitialized) ⇒ <code>Boolean</code>\n  * [.finalize(callback)](#Ncpy+finalize)\n  * [.isFinalized()](#Ncpy+isFinalized) ⇒ <code>Boolean</code>\n  * [.setProgramName(Program)](#Ncpy+setProgramName)\n  * [.setArgv(string)](#Ncpy+setArgv)\n\n<a name=\"new_Ncpy_new\"></a>\n### new Ncpy()\nImplements the Ncpy Python interpreter\n\n<a name=\"Ncpy+init\"></a>\n### ncpy.init(options) ⇒ <code>Object</code>\nintitialze this module from init function rather than over constructor\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n**Returns**: <code>Object</code> - returns itself is chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | object where keys represent toggles of individual features or point to files |\n\n**Example**  \n```js\nconst ncpy = require('node-cpython')\n\nlet options = {\n\t\\/\\* Options go in here \\*\\/\n}\n\nncpy.init(options)\n\\/\\/ available options [here](https://github.com/eljefedelrodeodeljefe/node-cpython#options)\n```\n<a name=\"Ncpy+repl\"></a>\n### ncpy.repl()\nStarts a Python contexts, runs a newline delimited string of python from Node's\n`stdin`, listens for `SIGINT` and finalizes the Python context.\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n<a name=\"Ncpy+run\"></a>\n### ncpy.run(glob, Argv, [cb])\nExecutes any number of Python source code files.\nThis is JS userland API and automates and abstracts many choices of the\nbelow C-API. If you want to have more control, please use the below methods.\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| glob | <code>String</code> &#124; <code>Array.&lt;String&gt;</code> | a glob of valid .py files |\n| Argv | <code>Array</code> | global arguments array |\n| [cb] | <code>Callback</code> | Optional callback |\n\n**Example**  \n```js\n'use strict'\nconst ncpy = require('node-cpython')\n\nncpy.on('error', function(err) {console.log(err)})\n\nncpy.run('[example/**\\/*.py',[2, 10, 'someOtherArg'], function(err) {\n\tconsole.log(err)\n})\n```\n<a name=\"Ncpy+runSync\"></a>\n### ncpy.runSync(glob, Argv, [cb])\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| glob | <code>String</code> &#124; <code>Array.&lt;String&gt;</code> | a glob of valid .py files |\n| Argv | <code>Array</code> | global arguments array |\n| [cb] | <code>Callback</code> | Optional callback |\n\n<a name=\"Ncpy+runString\"></a>\n### ncpy.runString(string)\nExuute a line of Python script\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| string | <code>String</code> | a valid string of Python script |\n\n<a name=\"Ncpy+simpleString\"></a>\n### ncpy.simpleString(str, [flags], [cb])\nExecutes the Python source code from command.\nSee also [Python docs](https://docs.python.org/2/c-api/veryhigh.html#c.PyRun_SimpleStringFlags) for Reference\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| str | <code>string</code> |  | String of python denoted code |\n| [flags] | <code>string</code> &#124; <code>Array.&lt;string&gt;</code> | <code>null</code> | Compiler flag or array of flags for CPython |\n| [cb] | <code>callback</code> |  | Optional callback |\n\n**Example**  \n```js\n'use strict'\nconst ncpy = require('node-cpython')\n\ncpython.on('error', function(err) {console.log(err)})\n\ncpython.simpleString('from time import time,ctime\\nprint 'Today is',ctime(time())\\n')\n```\n<a name=\"Ncpy+ffi\"></a>\n### ncpy.ffi(file, functionname) ⇒ <code>Callback</code>\nThe ffi method serves as entry point for generally executing Python functions\nfrom .py-files. Important to note is, that is branching in two modes, depending\nhow many arguments get passed. If there are arguments it makes a singular call\nto the script, you open and close a whole Python memory contexts for it.\n\nSecond, when called in a chain with the stream API (see below). The context get's\ncreated and only closed on stream end.\n\nUse it accourdingly:\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n**Returns**: <code>Callback</code> - Tailcall with err and res  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| file | <code>String</code> | .py file with function definition |\n| functionname | <code>String</code> | name of function definition |\n\n**Example**  \n```js\nconst ncpy = require('node-cpython')\n\nncpy.ffi('multiplication.py', 'multiply', [ 20, 5], function (err, res) {\n  console.log('ncpy -> easy call to multiply, here');\n  console.log('ncpy -> ' + res + '\\n');\n})\n\tvar Readable = require('stream').Readable;\nvar SomeStream = new Readable({ \"objectMode\": true })\n\nSomeStream.push([1,2])\nSomeStream.push([20,3])\nSomeStream.push([3,40])\nSomeStream.push([4,50])\nSomeStream.push([55,66])\nSomeStream.push(null)\nncpy.ffi\n  // load the python script and intitialize the python interpreter\n  .require('multiplication.py', { path: './examples' })\n  // this expects a stream (in { objectMode: true })\n  .init(SomeStream)\n  // Tell `ncpy` what function to excute.\n  .run('multiply')\n  // add your own transform or any other stream here\n  .pipe()\n  .on('end', function() {\n    console.log('ncpy -> Ending python context here.');\n  })\n```\n<a name=\"Ncpy+eval\"></a>\n### ncpy.eval()\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n<a name=\"Ncpy+initialize\"></a>\n### ncpy.initialize()\ninitialize python context, reserve memory.\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n<a name=\"Ncpy+isInitialized\"></a>\n### ncpy.isInitialized() ⇒ <code>Boolean</code>\nis-check for the interpreter not running\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n**Returns**: <code>Boolean</code> - returns true if Py_isInitialized is ecplictely not 0  \n<a name=\"Ncpy+finalize\"></a>\n### ncpy.finalize(callback)\nFinalize python context, clear memory.\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| callback | <code>callback</code> | for completion of py context |\n\n<a name=\"Ncpy+isFinalized\"></a>\n### ncpy.isFinalized() ⇒ <code>Boolean</code>\nis-check for the interpreter not running\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n**Returns**: <code>Boolean</code> - return true if Py_isInitialized explictely is 0  \n<a name=\"Ncpy+setProgramName\"></a>\n### ncpy.setProgramName(Program)\nset low level python program name (optional)\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Program | <code>string</code> | name. |\n\n<a name=\"Ncpy+setArgv\"></a>\n### ncpy.setArgv(string)\nset low level python argv\n\n**Kind**: instance method of <code>[Ncpy](#Ncpy)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| string | <code>string</code> &#124; <code>Array.&lt;string&gt;</code> | or an array of strings as argv argc is auto computed by the arrays length |\n\n## License\n\nMIT\n","created":"2015-05-03T19:49:55.910Z","modified":"2016-05-31T15:45:07.097Z","lastPublisher":{"name":"eljefederodeodeljefe","email":"devraindance@gmail.com"},"owners":[{"name":"eljefederodeodeljefe","email":"devraindance@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"cpython","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/cpython-0.10.1.tgz_1464709499024_0.4894566659349948"},"_npmUser":{"name":"eljefederodeodeljefe","email":"devraindance@gmail.com"},"_npmVersion":"3.8.9","_rev":"1-7d6d6c97e2dbcd17120bb4d6b9779bd3","_shasum":"bbc51c59230e02b8dfba3de10fd0cfad96d0295f","author":{"name":"Robert Jefe Lindstädt","email":"robert.lindstaedt@gmail.com"},"bugs":{"url":"https://github.com/eljefedelrodeodeljefe/node-cpython/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.10.1"},"dist":{"shasum":"bbc51c59230e02b8dfba3de10fd0cfad96d0295f","tarball":"http://registry.npmjs.org/cpython/-/cpython-0.10.1.tgz"},"maintainers":[{"name":"eljefederodeodeljefe","email":"devraindance@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-05-31T15:45:07.097Z","created":"2015-05-03T19:49:55.910Z","0.1.2-alpha":"2015-05-03T19:49:55.910Z","0.1.4-alpha":"2015-05-03T20:10:06.367Z","0.1.5-alpha":"2015-05-03T20:17:23.727Z","0.1.6-alpha":"2015-05-03T20:32:19.676Z","0.1.9-alpha":"2015-05-07T17:07:59.876Z","0.1.10-alpha":"2015-05-07T17:21:16.658Z","0.1.11-alpha":"2015-05-07T17:47:24.089Z","0.2.12-alpha":"2015-05-11T18:35:34.097Z","0.3.1-beta":"2015-05-23T17:39:36.726Z","0.3.3-alpha.1":"2015-10-18T23:32:18.495Z","0.3.4-alpha.1":"2015-10-19T03:56:16.523Z","0.3.5-alpha.1":"2015-10-19T04:02:10.522Z","0.3.7-alpha.1":"2015-10-19T18:03:05.947Z","0.3.8-alpha.1":"2015-10-19T19:03:24.730Z","0.5.2-beta.1":"2015-10-31T15:05:47.474Z","0.5.3-beta.1":"2015-10-31T15:26:26.514Z","0.5.4-beta.1":"2015-10-31T17:41:28.894Z","0.5.5-beta.1":"2015-10-31T19:12:36.845Z","0.6.0-beta.2":"2015-11-01T00:37:48.516Z","0.6.1-beta.2":"2015-11-01T01:54:17.754Z","0.7.0-beta.3":"2015-11-14T19:31:33.175Z","0.8.1-rc.1":"2015-11-28T20:40:52.297Z","0.8.2-rc.1":"2015-11-28T23:11:19.411Z","0.8.3-rc.1":"2015-11-29T23:01:49.019Z","0.9.0-rc.2":"2015-11-30T22:25:47.095Z","0.9.1-rc.3":"2016-03-29T16:56:14.872Z","0.10.0":"2016-05-23T20:41:15.276Z","0.10.1":"2016-05-31T15:45:07.097Z"}}}