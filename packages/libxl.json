{"name":"libxl","license":"MIT","version":"0.2.20","description":"Node bindings for the libxl library for reading and writing excel (XLS and XLSX) spreadsheets.","keywords":["excel","libxl","spreadsheet"],"homepage":"https://github.com/DirtyHairy/node-libxl","repository":"https://github.com/DirtyHairy/node-libxl","engines":{"node":">=0.10"},"main":"./lib/libxl.js","gypfile":true,"scripts":{"install":"node install-libxl.js && node-gyp rebuild"},"dependencies":{"adm-zip":"~0.4.7","md5":"~2.2.1","nan":"~2.4.0","tar":"~2.2.1","tmp":"~0.0.29"},"devDependencies":{"jshint":"~2.9.3"},"gitHead":"7ba13ad2293752c25489a4312d3d0001b872cad9","versions":[{"number":"0.0.1","date":"2013-11-30T11:52:30.808Z"},{"number":"0.0.2","date":"2013-11-30T12:05:04.041Z"},{"number":"0.0.3","date":"2013-11-30T12:23:35.422Z"},{"number":"0.0.4","date":"2013-11-30T19:09:07.921Z"},{"number":"0.0.5","date":"2013-12-06T15:56:01.998Z"},{"number":"0.0.6","date":"2013-12-09T13:09:23.478Z"},{"number":"0.0.7","date":"2013-12-09T13:36:50.250Z"},{"number":"0.0.8","date":"2014-01-23T09:31:09.664Z"},{"number":"0.0.9","date":"2014-01-23T12:36:50.150Z"},{"number":"0.0.10","date":"2014-05-18T13:19:57.215Z"},{"number":"0.0.11","date":"2014-05-28T21:57:34.006Z"},{"number":"0.0.12","date":"2014-06-06T17:23:19.464Z"},{"number":"0.1.0","date":"2014-06-20T13:24:29.167Z"},{"number":"0.1.1","date":"2014-06-21T22:40:36.731Z"},{"number":"0.1.2","date":"2014-07-11T11:15:47.790Z"},{"number":"0.2.0","date":"2014-07-14T21:19:37.237Z"},{"number":"0.2.1","date":"2014-07-25T15:51:22.623Z"},{"number":"0.2.2","date":"2014-07-30T07:35:54.932Z"},{"number":"0.1.3","date":"2014-07-30T07:37:30.888Z"},{"number":"0.2.3","date":"2014-07-30T07:42:07.079Z"},{"number":"0.2.4","date":"2014-08-25T14:09:04.010Z"},{"number":"0.2.5","date":"2014-08-25T15:02:37.991Z"},{"number":"0.2.6","date":"2014-08-25T15:20:43.503Z"},{"number":"0.2.7","date":"2014-08-28T12:07:03.203Z"},{"number":"0.2.8","date":"2015-01-21T21:44:07.027Z"},{"number":"0.2.9","date":"2015-01-21T23:32:13.434Z"},{"number":"0.2.10","date":"2015-01-21T23:50:36.231Z"},{"number":"0.2.11","date":"2015-02-28T16:45:13.918Z"},{"number":"0.2.12","date":"2015-03-17T13:28:39.616Z"},{"number":"0.2.13","date":"2015-04-11T10:33:18.523Z"},{"number":"0.2.14","date":"2015-04-30T13:54:33.676Z"},{"number":"0.2.15","date":"2015-05-20T09:54:06.910Z"},{"number":"0.2.16","date":"2015-08-28T22:22:59.381Z"},{"number":"0.2.17","date":"2015-09-02T18:39:04.325Z"},{"number":"0.2.18","date":"2016-05-03T22:01:13.232Z"},{"number":"0.2.19","date":"2016-08-05T21:09:35.231Z"},{"number":"0.2.20","date":"2016-10-07T10:34:40.988Z"}],"readme":"[![Build Status](https://travis-ci.org/DirtyHairy/node-libxl.svg?branch=release-0.2)](https://travis-ci.org/DirtyHairy/node-libxl)\n[![npm version](https://badge.fury.io/js/libxl.svg)](https://badge.fury.io/js/libxl)\n# What it is\n\nNode.js bindings for [libxl](http://www.libxl.com/). Node 0.12 and Node 0.10 are\nboth supported, Node 0.11.13 and higher work, too.  Iojs starting with version\n1.0.3 is supported as well (older versions might work).\n\n# Compilation and Installation\n\nPull the library into your project with `npm install libxl`\nand require the module via\n\n    var xl = require('libxl');\n\n## LibXL installation\n\nAs this packages contains only bindings for the libxl library, the library\nitself is required for building and running the bindings.\n\n### Compilation Phase\n\nBefore the bindings are compiled, the `install-libxl.js` script pulls the latest\nversion of the library from the XLware FTP server and unpacks it in `deps/libxl`.\nTherefore, **no separate installation of libxl is necessary for building the\nbindings**.\n\nIf you want to compile the bindings against a particular version of the library\nor if, for some reason, the automatic download fails, you can point the install\nscript to a locally downloaded archive of the SDK by setting the\n`NODE_LIBXL_SDK_ARCHIVE` environment variable.\n\n### Runtime\n\nIn order to load and use the bindings, the libxl library must be available in\nyour dynamic library search path. This is achieved by either\n\n**Copying the library into your system library search path**, e.g. `/usr/lib` on\n  Linux.\n  \n**Copying the library into the working directory** where you run the script which\n  uses the bindings. The name of the library file is `libxl.so` on Linux,\n  `libxl.dylib` on Mac and `libxl.dll` on Windows.\n  \n**Properly setting the `LD_LIBRARY_PATH` (Linux) or `DYLD_LIBRARY_PATH` (Mac)**\n  environment variable. For example, the following command will execute the\n  `demo.js` script in the package directory without requiring libxl to be\n  installed separately\n  \n    LD_LIBRARY_PATH=\"`pwd`/deps/libxl/lib:`pwd`/deps/libxl/lib64:$LD_LIBRARY_PATH\" node demo.js\n\n\n### Overriding the location of the compiled bindings\n\nYou can override the location where the Javascript wrapper looks for the\n`libxl.node` file by setting the `NODE_LIBXL_PATH` environment variable. This\nallows to distribute / deploy an application that uses the bindings to a system\nwhich runs on a different platform / architecture without recompiling the\nbindings there.\n\n# API\n\n## Usage\n\nA new excel document is created via\n\n    var xlsBook = new xl.Book(xl.BOOK_TYPE_XLS);\n\nor\n\n    var xlsxBook = new xl.Book(xl.BOOK_TYPE_XLSX);\n\n(for xlsx documents). The document is written to disk via\n\n    xlsBook.writeSync('file.xls');\n\nor\n\n    xlsBook.write('file.xls', callback);\n\nand read back via\n\n    xlsBook.loadSync('file.xls');\n\nor\n\n    xlsBook.load('file.xls', callback);\n\nwhere `callback` will be called after the operation has completed, receiving an\noptional error object as argument if anything goes wrong.\n\n**IMPORTANT:** See below for additional notes on the async implementation\nof libxl calls.\n\nThe Javascript API closely follows the C++ API described in the\n[libxl documentation](http://www.libxl.com/documentation.html).\nFor example, adding a new sheet and writing two cells works as\n\n    var sheet = xlsBook.addSheet('Sheet 1');\n    sheet.writeStr(1, 0, 'A string');\n    sheet.writeNum(1, 1, 42);\n\nFunctions whose C++ counterpart returns void or an error status\nhave been implemented to return the respective instance, so it\nis possible to chain calls\n\n    sheet\n        .writeStr(1, 0, 'A string');\n        .writeNum(1, 1, 42);\n\nErrors are handled by throwing exceptions.\n\nFunctions that return multiple values by reference in C++ (like\nBook::dateUnpack) return a object with the return values as properties.\n\nSee 'Differences...' below for a more detailed description of the methods whose\nbehavior differs from their C++ counterpart.\n\n**IMPORTANT:** The Javascript API enforces the types defined in its C++\ncounterpart for all function arguments; there is no implicit type casting. For\nexample, passing a number to Sheet::writeStr will throw a TypeError instead of\nsilently converting the string to a number.\n\n## Coverage\n\nThe bindings cover the current (version 3.5.4) libxl API completely.\n\n## Implementation details and differences w.r.t. the C++ API\n\n### Asynchroneous variants of libxl calls\n\nThe async variants of libxl calls implement the standard Node.js API for\nasync functions: a callback is passed as last argument which is called once the\noperation has finished. The first argument of the callback is an error object,\nwhich is `undefined` if the operation completed without errors. Any results are\npassed as additional arguments to the callback.\n\n**IMPORTANT:** While an async operation is pending, other operations (sync or\nasync) on the same book object (and its descendants like sheets, formats and\nfonts) are not allowed and will throw an exception. However, multiple\nsimultaneous operations on different books are allowed.\n\nThe following async functions are available:\n\n* `book.write` / `book.save`, `book.load` are implemented asynchroneously. If\n  you need synchroneous behavior you can use `book.loadSync` etc.\n* `book.writeRaw` / `book.saveRaw`, `book.loadRaw` are implemented\n  asynchroneously. `book.saveRaw` and its alias return the book data as second\n  argument to the supplied callback. Use `book.loadRawSync` & friends for\n  synchroneous behavior.\n* `book.addPicture` has a async version `book.addPictureAsync`. The index of the\n  new picture is passed as the second argument to the callback.\n* `book.getPicture` has a async version `book.getPictureAsync`. Picture type and\n  data are passed to the callback as second and third arguments.\n* `sheet.insertRow` and `sheet.insertCol` are very slow and thus are also\n  available as async implementations `sheet.insertRowAsync` and\n  `sheet.insertColAsync`.\n\n### Interface differences\n\n* `book.write`, `book.writeRaw` and their sync versions are also available as\n  `book.save` etc.\n* `book.loadRaw` / `book.loadRawSync` take a node buffer as argument\n* `book.writeRaw` / `book.writeRawSync` return a node buffer\n* `book.getPicture` returns an object with `type` and `data` properties. The\n  `data` property is a node buffer containing the image data.\n* `book.addPicture` and `book.addPictureAsync` are overloaded and can be called\n   with either a file path or a node buffer, thus implementing both\n  `Book.AddPicture` and `Book.AddPicture2` from the libxl API.\n* `book.dateUnpack`: Returns an object with `year`, `month`,\n  `date`, `hour`, `minute`, `seconds` and `mseconds` properties.\n* `book.colorUnpack`: Returns an object with `red`, `green` and `blue`\n  properties.\n* `book.defaultFont`: Returns an object with `name` and `size` properties.\n* `sheet.readStr` & friends: If `sheet.readXXX` is provided with an object as\n  optional second argument, the cell format is returned in the objects `format`\n  property.\n* `sheet.getMerge`: Returns an object with the `rowFirst`, `rowLast`,\n  `colFirst`, `colLast` properties.\n* `sheet.getPrintFit`: Returns either `false` or an object with the `wPages` and\n  `hPages` properties.\n* `sheet.getNamedRange`: Returns an object with `rowFirst`, `rowLast`,\n  `colFirst`, `colLast` and `hidden` properties.\n* `sheet.namedRange`: Returns an object with `rowFirst`, `rowLast`,\n  `colFirst`, `colLast`, `name`, `scopeId`, and `hidden` properties.\n* `sheet.getTopLeftView`: Returns an object with `row` and `col` properties.\n* `sheet.addrToRowCol`: Returns an object with `row`, `col`, `rowRelative`,\n  `colRelative` properties.\n\n### Other differences\n\n* Book object creation: Books are **not** created via `xlCreateBook` and\n  `xlCreateXMLBook`. Instead, object instances are directly constructed from the\n  `xl.Book` constructor via either `new xl.Book(xl.BOOK_TYPE_XLS)` or `new xl.Book(xl.BOOK_TYPE_XLSX)`\n* Accessing the parent book: sheet, format and font objects hold a reference to\n  their parent book that can be accessed via the `book` property\n\n### Enum constants\n\nAll C enum constants provided by the library are available as constants on the\nlibrary object, e.g.  `xl.NUMFORMAT_DATE` or `xl.PICTURETYPE_PNG`.\n\n## Unlocking the API\n\nIf you have purchased a licence key from XLware, you can call book.setKey in\norder to unlock the library. As an alternative, you can build the key into the\nbindings by modifying `api_key.h` and rebuilding the library via `node-gyp\nrebuild` (you'll have to install node-gyp for this) or `npm install` in the\npackage directory.\n\n# Platform support\n\nThe package supports Linux, Windows and Mac.\n\n# Tests\n\nThe bindings are fully covered with jasmine tests. If you have jasmine-node\ninstalled (via NPM), you can run the suite via\n\n    jasmine-node specs/\n\n# Reporting bugs\n\nPlease report any bugs or feature requests on the github issue tracker.\n\n# Roadmap\n\nAs the API is completely covered, I consider the bindings complete. New releases\nwill only cover new libxl methods and fix bugs. If you identify parts of\nlibxl that are particularily slow, asynchroneous version of those could be added\nas well. Note that only the latest version branch (0.2.x) is maintained and\nsupported.\n\n# Credits\n\n* Torben Fitschen wrote the install script which pulls the\n  necessary libxl SDK before building.\n* Martin Schröder for adding Mac support.\n* Parts if this package were developed during slacktime provided by the awesome folks at\n  [Mayflower GmbH](http://www.mayflower.de)\n* Alexander Makarenko wrote\n  [node-excel-libxl](https://github.com/7eggs/node-excel-libxl)\n  Though node-libxl is rewritten from scratch, this\n  package served as the starting point.\n","starsCount":4,"created":"2013-11-30T11:52:28.117Z","modified":"2016-10-07T10:34:40.988Z","lastPublisher":{"name":"dirtyhairy","email":"cnspeckn@googlemail.com"},"owners":[{"name":"dirtyhairy","email":"cnspeckn@googlemail.com"}],"other":{"_attachments":{},"_from":".","_id":"libxl","_nodeVersion":"4.2.2","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/libxl-0.2.20.tgz_1475836478334_0.9833003410603851"},"_npmUser":{"name":"dirtyhairy","email":"cnspeckn@googlemail.com"},"_npmVersion":"2.14.7","_rev":"1-5fd671a43c7eb9446820fc07d9426b2b","_shasum":"cc729e880f698cabace9d90665b81e182562bcce","author":{"name":"Christian Speckner","email":"cnspeckn@googlemail.com"},"bugs":{"url":"https://github.com/DirtyHairy/node-libxl/issues"},"directories":{},"dist-tags":{"latest":"0.2.20"},"dist":{"shasum":"cc729e880f698cabace9d90665b81e182562bcce","tarball":"http://registry.npmjs.org/libxl/-/libxl-0.2.20.tgz"},"maintainers":[{"name":"dirtyhairy","email":"cnspeckn@googlemail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-07T10:34:40.988Z","created":"2013-11-30T11:52:28.117Z","0.0.1":"2013-11-30T11:52:30.808Z","0.0.2":"2013-11-30T12:05:04.041Z","0.0.3":"2013-11-30T12:23:35.422Z","0.0.4":"2013-11-30T19:09:07.921Z","0.0.5":"2013-12-06T15:56:01.998Z","0.0.6":"2013-12-09T13:09:23.478Z","0.0.7":"2013-12-09T13:36:50.250Z","0.0.8":"2014-01-23T09:31:09.664Z","0.0.9":"2014-01-23T12:36:50.150Z","0.0.10":"2014-05-18T13:19:57.215Z","0.0.11":"2014-05-28T21:57:34.006Z","0.0.12":"2014-06-06T17:23:19.464Z","0.1.0":"2014-06-20T13:24:29.167Z","0.1.1":"2014-06-21T22:40:36.731Z","0.1.2":"2014-07-11T11:15:47.790Z","0.2.0":"2014-07-14T21:19:37.237Z","0.2.1":"2014-07-25T15:51:22.623Z","0.2.2":"2014-07-30T07:35:54.932Z","0.1.3":"2014-07-30T07:37:30.888Z","0.2.3":"2014-07-30T07:42:07.079Z","0.2.4":"2014-08-25T14:09:04.010Z","0.2.5":"2014-08-25T15:02:37.991Z","0.2.6":"2014-08-25T15:20:43.503Z","0.2.7":"2014-08-28T12:07:03.203Z","0.2.8":"2015-01-21T21:44:07.027Z","0.2.9":"2015-01-21T23:32:13.434Z","0.2.10":"2015-01-21T23:50:36.231Z","0.2.11":"2015-02-28T16:45:13.918Z","0.2.12":"2015-03-17T13:28:39.616Z","0.2.13":"2015-04-11T10:33:18.523Z","0.2.14":"2015-04-30T13:54:33.676Z","0.2.15":"2015-05-20T09:54:06.910Z","0.2.16":"2015-08-28T22:22:59.381Z","0.2.17":"2015-09-02T18:39:04.325Z","0.2.18":"2016-05-03T22:01:13.232Z","0.2.19":"2016-08-05T21:09:35.231Z","0.2.20":"2016-10-07T10:34:40.988Z"},"users":{"dirtyhairy":true,"clholzin":true,"balaclark":true,"vzg03566":true}}}