{"name":"node-natnet","version":"0.0.6","description":"Addon for the NatNet SDK.","main":"index.js","dependencies":{"fs-extra":"^3.0.1","nan":"^2.6.2","native-huron":"^0.1.2","node-gyp-build":"^3.2.0"},"devDependencies":{"prebuildify":"^2.4.0","request":"^2.81.0","tape":"^4.6.3","tar-fs":"^1.15.3","travis-logs":"^2.2.3"},"scripts":{"install":"node-gyp-build","compile":"node-gyp build && node scripts/copy.js","recompile":"node-gyp rebuild && node scripts/copy.js","test":"tape test/**/*.js","prebuild":"prebuildify --strip -t electron@1.7.0 -t electron@1.6.11 -t node@8.0.0 -t node@7.0.0 -t node@6.11.0"},"repository":"https://github.com/gerhardberger/node-natnet","license":"MIT","homepage":"https://github.com/gerhardberger/node-natnet","gitHead":"a0e97e5843f53950f5b753dd18fe8a316951234b","versions":[{"number":"0.0.1","date":"2017-06-29T20:19:26.260Z"},{"number":"0.0.2","date":"2017-06-29T20:22:31.869Z"},{"number":"0.0.3","date":"2017-06-30T18:29:45.214Z"},{"number":"0.0.4","date":"2017-07-01T10:42:35.180Z"},{"number":"0.0.5","date":"2017-07-01T11:54:34.828Z"},{"number":"0.0.6","date":"2017-07-03T19:08:05.390Z"}],"readme":"# node-natnet\r\n\r\nA client for the Optitrack NatNet client in Node.js. The implementation uses the official NatNetSDK. Using this module it is possible the gather frame data from the *Motive* software by enabling *Data Streaming* in it.\r\n\r\n<blockquote>\r\n  This module only supports Windows operating systems!\r\n</blockquote>\r\n\r\n## Usage\r\n\r\n``` js\r\nconst { NatNetClient } = require('node-natnet')\r\n\r\nconst client = new NatNetClient()\r\n\r\nclient.initialize({\r\n  local: '127.0.0.1',\r\n  server: '127.0.0.1'\r\n})\r\n\r\nclient.on('frame', data => {\r\n  console.log('Received frame data: ', data)\r\n})\r\n```\r\n\r\n## Install\r\n\r\nInstall from NPM:\r\n\r\n```\r\n$ npm install node-natnet\r\n```\r\n\r\nInstall from the Git repository:\r\n```\r\n$ git clone https://github.com/gerhardberger/node-natnet.git\r\n$ cd node-natnet\r\n$ npm install\r\n```\r\nThen in your code import it with its path: `require('path/to/folder')`.\r\n\r\n### Compiling manually\r\n\r\nThe module comes with prebuilt binaries for various Node.js versions, but if your's not supported, you can compile it manually, by running `npm run compile` inside the `node-natnet` folder after `npm install`.\r\n\r\n## API Reference\r\n\r\n### Methods\r\n\r\n#### `const client = new NatNetClient(type)`\r\n\r\nCreates a new `NatNetClient` instance. `type` is an optional *String* parameter that determines the connection (this can be configured inside *Motive*).\r\n\r\nThe possible connection types are:\r\n- `'unicast'`, default\r\n- `'multicast'`.\r\n\r\n#### `client.initialize(options)`\r\n\r\nInitializes and connects to a NatNet server that can be started in *Motive*.\r\n\r\nThe options object can contain:\r\n- `local`: *String*, the local IP address that the client is running on. **Required.**\r\n- `server`: *String*, the server IP address that the data is streamed to. **Required.**\r\n- `hostCommandPort`: *Number*, the custom command port if there is one. *Optional.*\r\n- `hostDataPort`: *Number*, the custom data port if there is one. *Optional.*\r\n\r\n#### `client.uninitialize()`\r\n\r\nDisconnects the client application from the server.\r\n\r\n### Events\r\n\r\n#### `client.on('frame', callback)`\r\n\r\nThis event is emitted every time there is new frame data received from *Motive*. The rate of this is dependent on the FPS counter in *Motive*.\r\n\r\nThe callback has one parameter which is an object containing the current frame data:\r\n- `id`: The current frame identifier.\r\n- `markerSets`: A named collection of identified markers and the marker positions `{ x, y, z }`.\r\n- `otherMarkers`: List of point cloud solved 3D positions `{ x, y, z }` for all markers in the frame that are not labeled.\r\n- `labeledMarkers`: Ordered, padded, point cloud solved, model filled (where occluded) labeled marker data.\r\n- `latency`: The latency value of the frame.\r\n- `timestamp`: Timing information for the frame.\r\n\r\n### Properties\r\n\r\n#### `client.connected`\r\n\r\nA *Boolean* value that indicates wether the client is connected to the server.\r\n\r\n#### `client.serverDescription`\r\n\r\nFetches the server description through a NatNet command. Returns an *Object*:\r\n- `hostPresent`: *Boolean*\r\n- `hostComputerName`: *String*\r\n- `hostComputerAddress`: *String*\r\n- `hostApp`: *String*\r\n- `appVersion`: *String*\r\n- `natNetVersion`: *String*\r\n\r\n#### `client.dataDescriptions`\r\n\r\nFetches the data descriptions through a NatNet command. Returns an *[Object]*:\r\n- `name`: *String*\r\n- `markerNames`: *String*\r\n","created":"2017-06-29T20:19:26.260Z","modified":"2017-07-03T19:08:05.390Z","lastPublisher":{"name":"gerhardberger","email":"93.morph@gmail.com"},"owners":[{"name":"gerhardberger","email":"93.morph@gmail.com"}],"other":{"_attachments":{},"_id":"node-natnet","_nodeVersion":"8.1.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-natnet-0.0.6.tgz_1499108883467_0.6126489690504968"},"_npmUser":{"name":"gerhardberger","email":"93.morph@gmail.com"},"_npmVersion":"5.0.3","_rev":"6-53b6a1117ad2370a486b232c80d32c0e","author":{"name":"Gellert Hegyi","url":"@gerhardberger"},"bugs":{"url":"https://github.com/gerhardberger/node-natnet/issues"},"directories":{},"dist-tags":{"latest":"0.0.6"},"dist":{"integrity":"sha512-ZUksibMahwp5Z5K+brIuKeszmD0isB0F7S1LPhrdUQFBAs70NFBOj0QNVE5SPjBq7OujpTW5cWBV7mJ9fCvY0A==","shasum":"5f5ddf78eaf7fb76c961787066f4383f740d4066","tarball":"https://registry.npmjs.org/node-natnet/-/node-natnet-0.0.6.tgz"},"maintainers":[{"name":"gerhardberger","email":"93.morph@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-03T19:08:05.390Z","created":"2017-06-29T20:19:26.260Z","0.0.1":"2017-06-29T20:19:26.260Z","0.0.2":"2017-06-29T20:22:31.869Z","0.0.3":"2017-06-30T18:29:45.214Z","0.0.4":"2017-07-01T10:42:35.180Z","0.0.5":"2017-07-01T11:54:34.828Z","0.0.6":"2017-07-03T19:08:05.390Z"}}}