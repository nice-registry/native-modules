{"name":"bignum","version":"0.12.5","description":"Arbitrary-precision integer arithmetic using OpenSSL","main":"./index.js","repository":"https://github.com/justmoon/node-bignum","keywords":["openssl","big","bignum","bigint","integer","arithmetic","precision"],"dependencies":{"nan":"^2.3.4","node-pre-gyp":"~0.6.28"},"devDependencies":{"aws-sdk":"~2.4.0","put":"~0.0.5","standard":"~7.1.2","tap":"~5.7.2"},"scripts":{"install":"node-pre-gyp install --fallback-to-build","test":"standard && tap test/*.js"},"binary":{"host":"https://rvagg-node.s3-us-west-2.amazonaws.com","module_name":"bignum","module_path":"binding/","remote_path":"./{name}/v{version}"},"license":"MIT","gitHead":"9c3254dbf19c8a56679311e68bba0ae64ef4df7a","homepage":"https://github.com/justmoon/node-bignum#readme","versions":[{"number":"0.4.0","date":"2011-11-28T23:58:39.319Z"},{"number":"0.4.1","date":"2011-12-18T09:50:50.475Z"},{"number":"0.5.0","date":"2012-08-10T00:38:13.564Z"},{"number":"0.5.1","date":"2012-08-11T23:34:58.560Z"},{"number":"0.5.2","date":"2012-12-07T06:53:50.345Z"},{"number":"0.5.3","date":"2012-12-07T07:42:44.929Z"},{"number":"0.5.4","date":"2012-12-17T22:22:18.545Z"},{"number":"0.6.0","date":"2013-04-05T14:03:49.529Z"},{"number":"0.6.1","date":"2013-06-02T14:25:33.750Z"},{"number":"0.6.2","date":"2013-09-11T02:59:29.397Z"},{"number":"0.7.0","date":"2014-05-05T02:49:14.169Z"},{"number":"0.8.0","date":"2014-06-26T07:26:59.452Z"},{"number":"0.9.0","date":"2014-06-29T20:59:43.601Z"},{"number":"0.9.1","date":"2015-01-14T21:39:41.337Z"},{"number":"0.9.2","date":"2015-02-18T04:27:30.376Z"},{"number":"0.9.3","date":"2015-05-11T01:08:34.823Z"},{"number":"0.10.0","date":"2015-05-11T07:03:53.776Z"},{"number":"0.10.1","date":"2015-06-18T08:46:12.384Z"},{"number":"0.10.2","date":"2015-06-26T06:01:49.330Z"},{"number":"0.11.0","date":"2015-08-05T18:13:03.214Z"},{"number":"0.12.0","date":"2016-05-31T08:11:15.171Z"},{"number":"0.12.1","date":"2016-06-15T09:05:10.766Z"},{"number":"0.12.2","date":"2016-06-15T10:27:43.868Z"},{"number":"0.12.3","date":"2016-06-16T10:39:21.302Z"},{"number":"0.12.4","date":"2016-06-16T10:44:56.456Z"},{"number":"0.12.5","date":"2016-06-16T10:48:46.287Z"}],"readme":"bignum\n======\n\n[![Travis build status](https://travis-ci.org/justmoon/node-bignum.svg?branch=master)](https://travis-ci.org/justmoon/node-bignum)\n[![AppVeyor build status](https://ci.appveyor.com/api/projects/status/svyho17a4eq2f0a7/branch/master?svg=true)](https://ci.appveyor.com/project/RodVagg/node-bignum/branch/master)\n\nArbitrary precision integral arithmetic for Node.js using\nOpenSSL.\n\nThis library is based on\n[node-bigint](https://github.com/substack/node-bigint) by\n[substack](https://github.com/substack), but instead of using libgmp,\nit uses the builtin bignum functionality provided by OpenSSL. The\nadvantage is that OpenSSL is already part of Node.js, so this\nlibrary does not add any external dependency whatsoever.\n\ndifferences\n===========\n\nWhen switching from node-bigint to node-bignum, please be aware of\nthese differences:\n\n- Bignum rounds towards zero for integer divisions, e.g. `10 / -3 = -3`, whereas bigint\n  rounds towards negative infinity, e.g. `10 / -3 = -4`.\n- nextPrime() is not supported.\n- sqrt() and root() are not supported.\n\n(Patches for the missing functionality are welcome.)\n\nexample\n=======\n\nsimple.js\n---------\n\n```js\nvar bignum = require('bignum');\n\nvar b = bignum('782910138827292261791972728324982')\n    .sub('182373273283402171237474774728373')\n    .div(8)\n;\nconsole.log(b);\n```\n\n***\n    $ node simple.js\n    <Bignum 75067108192986261319312244199576>\n\nperfect.js\n----------\n\nGenerate the perfect numbers:\n\n```js\n// If 2**n-1 is prime, then (2**n-1) * 2**(n-1) is perfect.\nvar bignum = require('bignum');\n\nfor (var n = 0; n < 100; n++) {\n    var p = bignum.pow(2, n).sub(1);\n    if (p.probPrime(50)) {\n        var perfect = p.mul(bignum.pow(2, n - 1));\n        console.log(perfect.toString());\n    }\n}\n```\n\n***\n\n    6\n    28\n    496\n    8128\n    33550336\n    8589869056\n    137438691328\n    2305843008139952128\n    2658455991569831744654692615953842176\n    191561942608236107294793378084303638130997321548169216\n\nmethods[0]\n==========\n\nbignum(n, base=10)\n------------------\n\nCreate a new `bignum` from `n` and a base. `n` can be a string, integer, or\nanother `bignum`.\n\nIf you pass in a string you can set the base that string is encoded in.\n\n.toString(base=10)\n------------------\n\nPrint out the `bignum` instance in the requested base as a string.\n\nbignum.fromBuffer(buf, opts)\n----------------------------\n\nCreate a new `bignum` from a `Buffer`.\n\nThe default options are:\n\n```js\n{\n    endian : 'big',\n    size : 1, // number of bytes in each word\n}\n```\n\nNote that endian doesn't matter when size = 1. If you wish to reverse the entire buffer byte by byte, pass size: 'auto'.\n\nbignum.prime(bits, safe=true)\n-----------------------------\n\nGenerate a probable prime of length `bits`. If `safe` is true, it will be a \"safe\" prime of the form p=2p'+1 where p' is also prime.\n\nbignum.isBigNum(num)\n-----------------------------\n\nReturn true if `num` is identified as a bignum instance. Otherwise, return false.\n\nmethods[1]\n==========\n\nFor all of the instance methods below you can write either\n\n```js\nbignum.method(x, y, z)\n```\n\nor if x is a `bignum` instance``\n\n```js\nx.method(y, z)\n```\n\n.toNumber()\n-----------\n\nTurn a `bignum` into a `Number`. If the `bignum` is too big you'll lose\nprecision or you'll get Â±`Infinity`.\n\n.toBuffer(opts)\n-------------\n\nReturn a new `Buffer` with the data from the `bignum`.\n\nThe default options are:\n\n```js\n{\n    endian : 'big',\n    size : 1, // number of bytes in each word\n}\n```\n\nNote that endian doesn't matter when size = 1. If you wish to reverse the entire buffer byte by byte, pass size: 'auto'.\n\n.add(n)\n-------\n\nReturn a new `bignum` containing the instance value plus `n`.\n\n.sub(n)\n-------\n\nReturn a new `bignum` containing the instance value minus `n`.\n\n.mul(n)\n-------\n\nReturn a new `bignum` containing the instance value multiplied by `n`.\n\n.div(n)\n-------\n\nReturn a new `bignum` containing the instance value integrally divided by `n`.\n\n.abs()\n------\n\nReturn a new `bignum` with the absolute value of the instance.\n\n.neg()\n------\n\nReturn a new `bignum` with the negative of the instance value.\n\n.cmp(n)\n-------\n\nCompare the instance value to `n`. Return a positive integer if `> n`, a\nnegative integer if `< n`, and 0 if `== n`.\n\n.gt(n)\n------\n\nReturn a boolean: whether the instance value is greater than n (`> n`).\n\n.ge(n)\n------\n\nReturn a boolean: whether the instance value is greater than or equal to n\n(`>= n`).\n\n.eq(n)\n------\n\nReturn a boolean: whether the instance value is equal to n (`== n`).\n\n.lt(n)\n------\n\nReturn a boolean: whether the instance value is less than n (`< n`).\n\n.le(n)\n------\n\nReturn a boolean: whether the instance value is less than or equal to n\n(`<= n`).\n\n.and(n)\n-------\n\nReturn a new `bignum` with the instance value bitwise AND (&)-ed with `n`.\n\n.or(n)\n------\n\nReturn a new `bignum` with the instance value bitwise inclusive-OR (|)-ed with\n`n`.\n\n.xor(n)\n-------\n\nReturn a new `bignum` with the instance value bitwise exclusive-OR (^)-ed with\n`n`.\n\n.mod(n)\n-------\n\nReturn a new `bignum` with the instance value modulo `n`.\n\n`m`.\n.pow(n)\n-------\n\nReturn a new `bignum` with the instance value raised to the `n`th power.\n\n.powm(n, m)\n-----------\n\nReturn a new `bignum` with the instance value raised to the `n`th power modulo\n`m`.\n\n.invertm(m)\n-----------\n\nCompute the multiplicative inverse modulo `m`.\n\n.rand()\n-------\n.rand(upperBound)\n-----------------\n\nIf `upperBound` is supplied, return a random `bignum` between the instance value\nand `upperBound - 1`, inclusive.\n\nOtherwise, return a random `bignum` between 0 and the instance value - 1,\ninclusive.\n\n.probPrime()\n------------\n\nReturn whether the bignum is:\n\n* certainly prime (true)\n* probably prime ('maybe')\n* certainly composite (false)\n\nusing [BN_is_prime_ex](http://www.openssl.org/docs/crypto/BN_generate_prime.html).\n\n.sqrt()\n-------\n\nReturn a new `bignum` that is the square root. This truncates.\n\n.root(n)\n-------\n\nReturn a new `bignum` that is the `nth` root. This truncates.\n\n.shiftLeft(n)\n-------------\n\nReturn a new `bignum` that is the `2^n` multiple. Equivalent of the `<<`\noperator.\n\n.shiftRight(n)\n--------------\n\nReturn a new `bignum` of the value integer divided by\n`2^n`. Equivalent of the `>>` operator.\n\n.gcd(n)\n-------\n\nReturn the greatest common divisor of the current `bignum` with `n` as a new\n`bignum`.\n\n.jacobi(n)\n-------\n\nReturn the Jacobi symbol (or Legendre symbol if `n` is prime) of the current\n`bignum` (= a) over `n`. Note that `n` must be odd and >= 3. 0 <= a < n.\n\nReturns -1 or 1 as an int (NOT a bignum). Throws an error on failure.\n\n.bitLength()\n------------\n\nReturn the number of bits used to represent the current `bignum`.\n\ninstall\n=======\n\nTo compile the package, your system needs to be set up for building Node.js\nmodules.\n\nYou can install node-bignum with [npm](http://npmjs.org):\n\n    npm install bignum\n\ndevelop\n=======\n\nYou can clone the git repo and compile with\n\n    git clone git://github.com/justmoon/node-bignum.git\n    cd node-bignum\n    npm install\n\nRun the tests with\n\n    npm test\n\n","starsCount":16,"created":"2011-11-28T23:58:36.433Z","modified":"2016-11-27T02:10:46.448Z","lastPublisher":{"name":"rvagg","email":"rod@vagg.org"},"owners":[{"name":"bitcoinjs","email":"bitcoinjs@justmoon.net"},{"name":"justmoon","email":"justmoon@members.fsf.org"},{"name":"rvagg","email":"rod@vagg.org"}],"other":{"_attachments":{},"_from":".","_id":"bignum","_nodeVersion":"6.2.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/bignum-0.12.5.tgz_1466074125882_0.9104716989677399"},"_npmUser":{"name":"rvagg","email":"rod@vagg.org"},"_npmVersion":"3.9.3","_rev":"4-f857058a750f14aeda95a5719d4848c3","_shasum":"208f2b0e18eb8fd6950917e3718e4cd85cccffcd","author":{"name":"Stefan Thomas","email":"justmoon@members.fsf.org","url":"http://www.justmoon.net"},"bugs":{"url":"https://github.com/justmoon/node-bignum/issues"},"contributors":[{"name":"James Halliday","email":"mail@substack.net"},{"name":"Rod Vagg","email":"rod@vagg.org"}],"directories":{},"dist-tags":{"latest":"0.12.5"},"dist":{"shasum":"208f2b0e18eb8fd6950917e3718e4cd85cccffcd","tarball":"http://registry.npmjs.org/bignum/-/bignum-0.12.5.tgz"},"maintainers":[{"name":"bitcoinjs","email":"bitcoinjs@justmoon.net"},{"name":"justmoon","email":"justmoon@members.fsf.org"},{"name":"rvagg","email":"rod@vagg.org"}],"readmeFilename":"README.markdown","time":{"modified":"2016-11-27T02:10:46.448Z","created":"2011-11-28T23:58:36.433Z","0.4.0":"2011-11-28T23:58:39.319Z","0.4.1":"2011-12-18T09:50:50.475Z","0.5.0":"2012-08-10T00:38:13.564Z","0.5.1":"2012-08-11T23:34:58.560Z","0.5.2":"2012-12-07T06:53:50.345Z","0.5.3":"2012-12-07T07:42:44.929Z","0.5.4":"2012-12-17T22:22:18.545Z","0.6.0":"2013-04-05T14:03:49.529Z","0.6.1":"2013-06-02T14:25:33.750Z","0.6.2":"2013-09-11T02:59:29.397Z","0.7.0":"2014-05-05T02:49:14.169Z","0.8.0":"2014-06-26T07:26:59.452Z","0.9.0":"2014-06-29T20:59:43.601Z","0.9.1":"2015-01-14T21:39:41.337Z","0.9.2":"2015-02-18T04:27:30.376Z","0.9.3":"2015-05-11T01:08:34.823Z","0.10.0":"2015-05-11T07:03:53.776Z","0.10.1":"2015-06-18T08:46:12.384Z","0.10.2":"2015-06-26T06:01:49.330Z","0.11.0":"2015-08-05T18:13:03.214Z","0.12.0":"2016-05-31T08:11:15.171Z","0.12.1":"2016-06-15T09:05:10.766Z","0.12.2":"2016-06-15T10:27:43.868Z","0.12.3":"2016-06-16T10:39:21.302Z","0.12.4":"2016-06-16T10:44:56.456Z","0.12.5":"2016-06-16T10:48:46.287Z"},"users":{"substack":true,"pid":true,"zhangyaochun":true,"janka102":true,"leonning":true,"brandonpapworth":true,"koslun":true,"dudley":true,"wenbing":true,"planeshifter":true,"arttse":true,"octetstream":true,"quafoo":true,"corderogerardo":true,"strydom":true,"santi8ago8":true}}}