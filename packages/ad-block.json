{"name":"ad-block","main":"./build/Release/ad-block","version":"3.0.3","description":"Ad block engine used in the Brave browser for ABP filter syntax based lists like EasyList.","dependencies":{"bloom-filter-cpp":"1.1.x","cppunitlite":"^1.0.0","hashset-cpp":"1.0.x","nan":"^2.2.1"},"devDependencies":{"commander":"^2.9.0","mocha":"^3.2.0","node-gyp":"^3.4.0","nsp":"^2.3.0","pre-commit":"^1.1.2","s3":"^4.4.0","standard":"^8.4.0"},"scripts":{"test":"npm run test-cpp && npm run test-js","test-cpp":"make test","test-js":"mocha test/js","build":"make","sample":"make sample","perf":"make perf","preinstall":"npm install bloom-filter-cpp && npm install hashset-cpp","install":"node-gyp rebuild","lint":"npm run lint-cpp && npm run lint-js","lint-cpp":"./scripts/cpplint.py","lint-js":"standard","checks":"npm run check-security","check-security":"nsp check","data-files":"node scripts/generateDataFiles.js","upload":"node scripts/uploadDataFiles.js"},"repository":"https://github.com/brave/ad-block","license":"MPL-2.0","gypfile":true,"homepage":"https://github.com/brave/ad-block#readme","pre-commit":["lint-cpp","lint-js"],"gitHead":"85e6b3592f8956b8babb57c2d42a5ad67d88d6cc","versions":[{"number":"1.2.14","date":"2017-01-01T05:53:45.928Z"},{"number":"2.0.0","date":"2017-01-01T16:01:14.291Z"},{"number":"2.0.1","date":"2017-01-26T16:12:38.323Z"},{"number":"2.0.2","date":"2017-03-23T13:02:52.777Z"},{"number":"2.0.3","date":"2017-03-23T18:15:59.319Z"},{"number":"2.0.4","date":"2017-03-23T21:00:29.714Z"},{"number":"2.0.5","date":"2017-04-19T01:22:40.737Z"},{"number":"2.1.0","date":"2017-04-19T03:57:00.337Z"},{"number":"3.0.0","date":"2017-04-19T17:16:07.325Z"},{"number":"3.0.1","date":"2017-04-20T21:56:03.395Z"},{"number":"3.0.2","date":"2017-04-23T02:35:46.152Z"},{"number":"3.0.3","date":"2017-04-26T01:42:58.995Z"}],"readme":"[![Build Status](https://travis-ci.org/brave/ad-block.svg?branch=master)](https://travis-ci.org/brave/ad-block)\n\n# Brave Ad Block\n\nNative node module, and C++ library for Adblock Plus filter parsing for lists like EasyList.\n\nIt uses a bloom filter and Rabin-Karp algorithm to be super fast.\n\n## To include brave/ad-block in your project:\n\n```\nnpm install --save ad-block\n```\n\n## JS Sample\n\n```javascript\n\nconst {AdBlockClient, FilterOptions} = require('ad-block')\nconst client = new AdBlockClient()\nclient.parse('/public/ad/*$domain=slashdot.org')\nclient.parse('/public/ad3/*$script')\nvar b1 = client.matches('http://www.brianbondy.com/public/ad/some-ad', FilterOptions.script, 'slashdot.org')\nvar b2 = client.matches('http://www.brianbondy.com/public/ad/some-ad', FilterOptions.script, 'digg.com')\nconsole.log('public/ad/* should match b1.  Actual: ', b1)\nconsole.log('public/ad/* should not match b2.  Actual: ', b2)\n```\n\n## C++ Sample\n\n```c++\n#include \"ad_block_client.h\"\n#include <algorithm>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring getFileContents(const char *filename)\n{\n  ifstream in(filename, ios::in);\n  if (in) {\n    ostringstream contents;\n    contents << in.rdbuf();\n    in.close();\n    return(contents.str());\n  }\n  throw(errno);\n}\n\nvoid writeFile(const char *filename, const char *buffer, int length)\n{\n  ofstream outFile(filename, ios::out | ios::binary);\n  if (outFile) {\n    outFile.write(buffer, length);\n    outFile.close();\n    return;\n  }\n  throw(errno);\n}\n\n\nint main(int argc, char**argv) {\n  std::string &&easyListTxt = getFileContents(\"./test/data/easylist.txt\");\n  const char *urlsToCheck[] = {\n    // ||pagead2.googlesyndication.com^$~object-subrequest\n    \"http://pagead2.googlesyndication.com/pagead/show_ads.js\",\n    // Should be blocked by: ||googlesyndication.com/safeframe/$third-party\n    \"http://tpc.googlesyndication.com/safeframe/1-0-2/html/container.html\",\n    // Should be blocked by: ||googletagservices.com/tag/js/gpt_$third-party\n    \"http://www.googletagservices.com/tag/js/gpt_mobile.js\",\n    // Shouldn't be blocked\n    \"http://www.brianbondy.com\"\n  };\n\n  // This is the site who's URLs are being checked, not the domain of the URL being checked.\n  const char *currentPageDomain = \"slashdot.org\";\n\n  // Parse easylist\n  AdBlockClient client;\n  client.parse(easyListTxt.c_str());\n\n  // Do the checks\n  std::for_each(urlsToCheck, urlsToCheck + sizeof(urlsToCheck) / sizeof(urlsToCheck[0]), [&client, currentPageDomain](std::string const &urlToCheck) {\n    if (client.matches(urlToCheck.c_str(), FONoFilterOption, currentPageDomain)) {\n      cout << urlToCheck << \": You should block this URL!\" << endl;\n    } else {\n      cout << urlToCheck << \": You should NOT block this URL!\" << endl;\n    }\n  });\n\n  int size;\n  // This buffer is allocate on the heap, you must call delete[] when you're done using it.\n  char *buffer = client.serialize(size);\n  writeFile(\"./ABPFilterParserData.dat\", buffer, size);\n\n  AdBlockClient client2;\n  // Deserialize uses the buffer directly for subsequent matches, do not free until all matches are done.\n  client2.deserialize(buffer);\n  // Prints the same as client.matches would\n  std::for_each(urlsToCheck, urlsToCheck + sizeof(urlsToCheck) / sizeof(urlsToCheck[0]), [&client2, currentPageDomain](std::string const &urlToCheck) {\n    if (client2.matches(urlToCheck.c_str(), FONoFilterOption, currentPageDomain)) {\n      cout << urlToCheck << \": You should block this URL!\" << endl;\n    } else {\n      cout << urlToCheck << \": You should NOT block this URL!\" << endl;\n    }\n  });\n  delete[] buffer;\n  return 0;\n}\n```\n\n\n## Util for checking URLs\n\n- Basic checking a URL:\n  `node scripts/check.js  --host www.cnet.com --location https://s0.2mdn.net/instream/html5/ima3.js`\n- Checking a URL with discovery:\n  `node scripts/check.js  --host www.cnet.com --location \"https://slashdot.org?t=1&ad_box_=2\" --discover`\n- Checking a URL against a particular adblock list:\n  `node scripts/check.js  --uuid 03F91310-9244-40FA-BCF6-DA31B832F34D --host slashdot.org --location https://s.yimg.jp/images/ds/ult/toppage/rapidjp-1.0.0.js`\n- Checking a URL from a loaded DAT file:\n  `node scripts/check.js --dat ./out/SafeBrowsingData.dat --host excellentmovies.net --location https://excellentmovies.net`\n- Checking a list of URLs:\n  `node scripts/check.js  --host www.cnet.com --list ./test/data/sitelist.txt`\n- Checking a list of URLS with discovery:\n  `node scripts/check.js  --host www.cnet.com --list ./test/data/sitelist.txt --discover`\n\n\n## Developing brave/ad-block\n\n1. Clone the git repository from GitHub:\n\n    `git clone --recursive https://github.com/brave/ad-block`\n\n2. Open the working directory:\n\n    `cd ad-block`\n\n3. Install the Node (v5+) dependencies:\n\n    `npm install`\n\n\n## Make the node module\n\n```\nmake\n```\n\n## Running sample (which also generates a .dat file for deserializing)\n\n```\nmake sample\n```\n\n## Running tests\n\n```\nmake test\n```\n\n## Clearing build files\n```\nmake clean\n```\n","created":"2017-01-01T05:53:45.928Z","modified":"2017-04-26T01:42:58.995Z","lastPublisher":{"name":"brianbondy","email":"netzen@gmail.com"},"owners":[{"name":"brianbondy","email":"netzen@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"ad-block","_nodeVersion":"7.9.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/ad-block-3.0.3.tgz_1493170976381_0.847909351112321"},"_npmUser":{"name":"brianbondy","email":"netzen@gmail.com"},"_npmVersion":"4.2.0","_rev":"12-6aa2bedca0a277ff5f25f56604a49697","_shasum":"ef0e567ffdf0b1d17645a231f7d85c33cc61114b","author":{"name":"Brian R. Bondy","email":"netzen@gmail.com","url":"http://www.brianbondy.com"},"bugs":{"url":"https://github.com/brave/ad-block/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"3.0.3"},"dist":{"shasum":"ef0e567ffdf0b1d17645a231f7d85c33cc61114b","tarball":"https://registry.npmjs.org/ad-block/-/ad-block-3.0.3.tgz"},"maintainers":[{"name":"brianbondy","email":"netzen@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-26T01:42:58.995Z","created":"2017-01-01T05:53:45.928Z","1.2.14":"2017-01-01T05:53:45.928Z","2.0.0":"2017-01-01T16:01:14.291Z","2.0.1":"2017-01-26T16:12:38.323Z","2.0.2":"2017-03-23T13:02:52.777Z","2.0.3":"2017-03-23T18:15:59.319Z","2.0.4":"2017-03-23T21:00:29.714Z","2.0.5":"2017-04-19T01:22:40.737Z","2.1.0":"2017-04-19T03:57:00.337Z","3.0.0":"2017-04-19T17:16:07.325Z","3.0.1":"2017-04-20T21:56:03.395Z","3.0.2":"2017-04-23T02:35:46.152Z","3.0.3":"2017-04-26T01:42:58.995Z"}}}