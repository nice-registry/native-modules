{"name":"monitr","description":"Node process monitoring tool","version":"1.0.0","os":["linux"],"cpu":["x64","ia32"],"repository":"https://github.com/yahoo/monitr","keywords":["node-monitoring","node-status"],"licenses":[{"type":"BSD","url":"https://github.com/yahoo/monitr/blob/master/LICENSE"}],"engines":{"node":">=0.12"},"dependencies":{"bindings":"*","nan":"^2.0.9"},"devDependencies":{"unix-dgram":"~0.2.0","jshint":"*","yui-lint":"~0.2.0","istanbul":"*","vows":"*"},"main":"./lib/monitor.js","scripts":{"pretest":"jshint --config ./node_modules/yui-lint/jshint.json ./lib/","test":"node --expose-gc `which istanbul` cover --print both vows -- --spec ./tests/*.js","install":"node-gyp rebuild"},"gypfile":true,"homepage":"https://github.com/yahoo/monitr#readme","_resolved":"https://github.com/yahoo/monitr/archive/v1.0.0.tar.gz","versions":[{"number":"0.0.1","date":"2013-09-24T20:58:16.477Z"},{"number":"0.0.2","date":"2013-10-31T07:51:06.641Z"},{"number":"0.0.3","date":"2014-01-09T20:00:33.946Z"},{"number":"0.0.4","date":"2014-04-08T22:30:06.248Z"},{"number":"0.0.5","date":"2014-05-08T20:03:19.899Z"},{"number":"0.0.6","date":"2014-05-09T19:06:58.602Z"},{"number":"0.0.7","date":"2014-06-06T21:20:00.846Z"},{"number":"0.0.8","date":"2014-08-28T17:27:07.412Z"},{"number":"0.0.9","date":"2014-08-29T23:41:31.466Z"},{"number":"0.0.10","date":"2014-08-29T23:49:00.541Z"},{"number":"0.0.11","date":"2014-09-09T20:39:35.909Z"},{"number":"0.0.12","date":"2014-12-05T02:48:26.172Z"},{"number":"0.0.13","date":"2015-03-10T00:04:04.874Z"},{"number":"0.0.14","date":"2015-03-30T19:46:05.233Z"},{"number":"0.0.15","date":"2015-05-05T17:41:24.295Z"},{"number":"0.1.0","date":"2015-09-23T01:42:38.137Z"},{"number":"0.2.0","date":"2015-10-08T19:00:02.856Z"},{"number":"1.0.0","date":"2017-01-18T00:49:12.075Z"}],"readme":"# monitr\n\nNodejs process monitoring module\n\nThis package is tested only with Node versions 0.12, 4.x, 6.x and 7.x.\nThe last version to work with Node 0.10 is [v0.2.0](https://github.com/yahoo/monitr/tree/ed3baa61651ed7f1c6120eec5487645f143b7b57)\n\n_Note: This module currently works only on Linux operating systems_.\n\n## External statistics reporting\n\nThis module starts a separate thread within the Nodejs runtime that\nmonitors and collects statistics about the running nodejs process.\nThese statistics are then sent as JSON messages via UDP datagrams over\na local domain socket.\n\nHere is the list of data the module reports periodically:\n```\n { status: \n     { pid: <pid of the node process>,\n       ts: <current time stamp>,\n       cluster: <process group id>,\n       reqstotal: <total requests processed by this node process server>,\n       utcstart: <when the process was started>,\n       events: <number of new reports being processed since last stats reporting>,,\n       cpu: <cpu usage>,\n       mem: <memory usage>,\n       cpuperreq: <cpu usage per request>,\n       oreqs: <current open requests count>,\n       sys_cpu: <system cpu load>,\n       oconns: <current open connections count>,\n       user_cpu: <user cpu load>,\n       rps: <requests per second>,\n       kbs_out: <kbs of data transferred since last stats reporting>,\n       elapsed: <time elapsed since last event>,\n       kb_trans: <total kbs of data transferred>,\n       jiffyperreq: <cpu usage in terms of ticks per request>,\n       gc: {\n           scavenge: { count: <number>, elapsed_ms: <number>, max_ms: <number> },\n           marksweep: { count: <number>, elapsed_ms: <number>, max_ms: <number> }\n       }\n    }\n }\n```\n\n## GC introspection\n\nIt provides the running nodejs application with the ability to\nintrospect garbage collection activity by creating read-only\nproperties at `process.monitor.gc` that reports:\n\n1.  `count`: number of times GC stop-the-world events occurred\n2.  `elapsed`: cumulative time (in milliseconds) spent in GC\n\n# Installation\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install monitr\n```\n\n# Usage\n```js\nvar monitor = require('monitr');\n```\n\n## start()\n\n```js\nmonitor.start();\n```\nSpawns a thread and monitors the process. Writes process stats every second to the socket path.\n\n## stop()\n```js\nmonitor.stop();\n```\nTerminates the thread and closes the socket.\n\n## setIpcMonitorPath(socketPath)\n```js\nmonitor.setIpcMonitorPath('/tmp/my-process-stats.mon');\n```\nSets the datagram socket name to write the stats. Defaults to /tmp/nodejs.mon\n\n# Health Status\nMonitr supports custom health functionality whereby the app can report its own health.\nThe following methods are added to process.monitor to set and get the health information.\n```js\nsetHealthStatus(isDown, statusCode)\nisDown()\ngetStatusCode()\ngetStatusTimestamp() - Return seconds when setHealthStatus was last called\ngetStatusDate() - Return Date object\n```\nOnce setHealthStatus is invoked, the status json, described above, will have following additional fields.\n```js\nhealth_status_timestamp: <timestamp when the setHealthStatus was invoked, in sec>,\nhealth_is_down: <app is down or up, boolean>,\nhealth_status_code: <health status code>\n```\n\n# Handling HUP events\n\n`Monitr` installs a custom `SIGHUP` handler which will optionally\nprint out a NodeJS stack backtrace of the Javascript currently being\nexecuted.  This can be useful for debugging where a NodeJS process may\nbe _stuck_.\n\n# Implementation\n\nIt looks up /proc/* files on the system to report CPU Usage.  It looks\nup /proc/pid/* files on the system to report its own stats.\n`process.monitor.*` methods are set by `lib/monitor.js`.\n\nIt calls the process.monitor.* methods to report total requests since\nmonitoring started (`reqstotal`), current requests in flight\n(`oreqs`), current open connections (`oconns`) and total data returned\nsince monitoring started (`kb_trans`).  _Note: `oreqs` may be greater\nthan `oconns` when keepalive is enabled_.\n\nIt attaches to the v8 garbage collection hooks to instrument (for each\nGC type) the following stats for each reporting interval.\n\n1.  `count` : number of times GC type invoked\n2.  `elapsed_ms`: total elapsed time nodejs thread is blocked\n3.  `max_ms`:  maximum time spent blocked by any one GC event\n\n# Example\n\nPlease refer to examples/README.md for examples showing the use of these functions.\n\n# Build Status\n\n[![Build Status](https://secure.travis-ci.org/yahoo/monitr.png?branch=master)](http://travis-ci.org/yahoo/monitr)\n\n# Node Badge\n\n[![NPM](https://nodei.co/npm/monitr.png)](https://nodei.co/npm/monitr/)\n\n","starsCount":5,"created":"2013-09-24T20:58:15.134Z","modified":"2017-05-05T02:06:55.149Z","lastPublisher":{"name":"evantorrie","email":"evan.torrie@yahoo.com"},"owners":[{"name":"abhinavraj","email":"raj.abhinav@gmail.com"},{"name":"davglass","email":"davglass@gmail.com"},{"name":"drewfolta","email":"drew@folta.net"},{"name":"evantorrie","email":"evan.torrie@yahoo.com"},{"name":"rohiniwork","email":"rohini.raghav@gmail.com"},{"name":"sylviom","email":"sylviom@yahoo.com"},{"name":"vsacheti","email":"vsacheti@yahoo.com"}],"other":{"_attachments":{},"_from":"https://github.com/yahoo/monitr/archive/v1.0.0.tar.gz","_id":"monitr","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/monitr-1.0.0.tgz_1484700550040_0.9323031713720411"},"_npmUser":{"name":"evantorrie","email":"evan.torrie@yahoo.com"},"_npmVersion":"3.10.8","_rev":"3-cb9d1ea27979ff4a22e84ff48c776d07","_shasum":"8f4fbbb28000790ce29fdc7b1e05a268b8c1ddb9","author":{"name":"Rohini Harendra","email":"rohini.raghav@gmail.com"},"bugs":{"url":"http://github.com/yahoo/monitr/issues"},"contributors":[{"name":"ET","email":"evan.torrie@yahoo.com"}],"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"8f4fbbb28000790ce29fdc7b1e05a268b8c1ddb9","tarball":"https://registry.npmjs.org/monitr/-/monitr-1.0.0.tgz"},"maintainers":[{"name":"abhinavraj","email":"raj.abhinav@gmail.com"},{"name":"davglass","email":"davglass@gmail.com"},{"name":"drewfolta","email":"drew@folta.net"},{"name":"evantorrie","email":"evan.torrie@yahoo.com"},{"name":"rohiniwork","email":"rohini.raghav@gmail.com"},{"name":"sylviom","email":"sylviom@yahoo.com"},{"name":"vsacheti","email":"vsacheti@yahoo.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-05T02:06:55.149Z","created":"2013-09-24T20:58:15.134Z","0.0.1":"2013-09-24T20:58:16.477Z","0.0.2":"2013-10-31T07:51:06.641Z","0.0.3":"2014-01-09T20:00:33.946Z","0.0.4":"2014-04-08T22:30:06.248Z","0.0.5":"2014-05-08T20:03:19.899Z","0.0.6":"2014-05-09T19:06:58.602Z","0.0.7":"2014-06-06T21:20:00.846Z","0.0.8":"2014-08-28T17:27:07.412Z","0.0.9":"2014-08-29T23:41:31.466Z","0.0.10":"2014-08-29T23:49:00.541Z","0.0.11":"2014-09-09T20:39:35.909Z","0.0.12":"2014-12-05T02:48:26.172Z","0.0.13":"2015-03-10T00:04:04.874Z","0.0.14":"2015-03-30T19:46:05.233Z","0.0.15":"2015-05-05T17:41:24.295Z","0.1.0":"2015-09-23T01:42:38.137Z","0.2.0":"2015-10-08T19:00:02.856Z","1.0.0":"2017-01-18T00:49:12.075Z"},"users":{"imalberto":true,"evantorrie":true,"pressla":true,"honzajde":true,"developer.prosenjit":true}}}