{"name":"redis-fast-driver","version":"1.0.5","description":"Fast truly async driver for redis (based on hiredis async version)","main":"index.js","engines":{"node":">=0.8"},"scripts":{"test":"echo \"Error: no test specified\" && exit 1","install":"node-gyp rebuild","bench":"matcha benchmarks/*.js"},"repository":"https://github.com/h0x91b/redis-fast-driver","license":"MIT","gypfile":true,"homepage":"https://github.com/h0x91b/redis-fast-driver","dependencies":{"nan":"latest"},"devDependencies":{"matcha":"^0.7.0"},"gitHead":"047a1d43928977443dd559a94c24fada53525df1","versions":[{"number":"0.0.1","date":"2014-12-09T09:49:30.443Z"},{"number":"0.0.2","date":"2014-12-09T10:50:23.185Z"},{"number":"0.0.3","date":"2014-12-09T13:38:31.502Z"},{"number":"0.0.4","date":"2014-12-10T10:18:00.987Z"},{"number":"0.0.5","date":"2014-12-16T11:35:33.293Z"},{"number":"0.0.6","date":"2014-12-17T10:29:02.288Z"},{"number":"0.0.7","date":"2015-02-19T16:56:43.693Z"},{"number":"0.0.8","date":"2015-03-09T09:37:15.182Z"},{"number":"0.0.9","date":"2015-03-09T09:51:24.095Z"},{"number":"0.1.0","date":"2015-06-09T11:52:56.883Z"},{"number":"0.1.2","date":"2015-07-28T21:15:52.520Z"},{"number":"0.1.3","date":"2015-11-30T11:59:27.048Z"},{"number":"1.0.0","date":"2015-12-27T09:21:29.697Z"},{"number":"1.0.1","date":"2016-01-26T15:49:36.339Z"},{"number":"1.0.2","date":"2016-01-26T16:47:57.928Z"},{"number":"1.0.3","date":"2016-04-06T15:15:36.329Z"},{"number":"1.0.4","date":"2016-06-20T12:04:40.679Z"},{"number":"1.0.5","date":"2016-11-18T14:16:20.008Z"}],"readme":"# Redis-fast-driver\n\nTrully async redis driver designed for max performance. Extremly simple, extremely fast.\n\nThis node module uses hiredis async library for connection and for parsing written on C by Salvatore Sanfilippo.\n\nAll redis commands including PUB/SUB and MONITOR works fine, this driver 2 years on my production enviroment under really high load (30k ops/sec each redis in cluster).\nAlso this driver used in https://github.com/joaojeronimo/node_redis_cluster and in my fork https://github.com/h0x91b/fast-redis-cluster\n\n# Installing\n```\nnpm install redis-fast-driver --save\n```\n\n# Usage\n\nCheck `example*.js` for usage.\n\n\tvar Redis = require('redis-fast-driver');\n\t\n\tvar r = new Redis({\n\t\t//host: '/tmp/redis.sock', //unix domain\n\t\thost: '127.0.0.1', //can be IP or hostname\n\t\tport: 6379,\n\t\tmaxretries: 10, //reconnect retries, default 10\n\t\tauth: '123', //optional password, if needed\n\t\tdb: 5, //optional db selection\n\t});\n\t\n\t//happen only once\n\tr.on('ready', function(){\n\t\tconsole.log('redis ready');\n\t});\n\t\n\t//happen each time when reconnected\n\tr.on('connected', function(){\n\t\tconsole.log('redis connected');\n\t});\n\t\n\tr.on('disconnected', function(){\n\t\tconsole.log('redis disconnected');\n\t});\n\t\n\tr.on('error', function(e){\n\t\tconsole.log('redis error', e);\n\t});\n\t\n\t//rawCall function has 2 arguments,\n\t//1 - array which contain a redis command\n\t//2 - optional callback\n\t//Redis command is case insesitive, e.g. you can specify HMGET as HMGET, hmget or HmGeT\n\t//but keys and value are case sensitive, foo, Foo, FoO not the same...\n\tr.rawCall(['set', 'foo', 'bar'], function(err, resp){\n\t\tconsole.log('SET via rawCall command returns err: %s, resp: %s', err, resp);\n\t});\n\t\n\tr.rawCall(['ping'], function(e, resp){\n\t\tconsole.log('ping', e, resp);\n\t});\n\n\t//types are decoded exactly as redis returns it\n\t//e.g. GET will return string\n\tr.rawCall(['set', 'number', 123]);\n\tr.rawCall(['get', 'number'], function(err, resp){\n\t\t//type of \"resp\" will be \"string\"\n\t\t//this is not related to driver this is behaviour of redis...\n\t\tconsole.log('The value: \"%s\", number key becomes typeof %s', resp, typeof resp);\n\t});\n\t\n\t//but INCR command on same key will return a number\n\tr.rawCall(['incr', 'number'], function(err, resp){\n\t\t//type of \"resp\" will be a \"number\"\n\t\tconsole.log('The value after INCR: \"%s\", number key becomes typeof %s', resp, typeof resp);\n\t});\n\t//\"number\" type will be also on INCRBY ZSCORE HLEN and each other redis command which return a number.\n\t\n\t//ZRANGE will return an Array, same as redis returns..\n\tr.rawCall(['zadd', 'sortedset', 1, 'a', 2, 'b', 3, 'c']);\n\tr.rawCall(['zrange', 'sortedset', 0, -1], function(err, resp){\n\t\t//type of will be \"number\"\n\t\tconsole.log('JSON encoded value of zrange: %s', JSON.stringify(resp));\n\t});\n\t\n\t//SCAN, HSCAN, SSCAN and other *SCAN* commands will return an Array within Array, like this:\n\t// [ 245, ['key1', 'key2', 'key3'] ]\n\t// first entry (245) - cursor, second one - Array of keys.\n\tr.rawCall(['hscan', 'hset:1', 0], function(e, resp){\n\t\tconsole.log('hscan 0', e, resp);\n\t});\n\t\n\tr.rawCall(['hmset', 'hset:1', 'a', 1, 'b', 2, 'c', 3], function(e, resp){\n\t\tconsole.log('hmset', e, resp);\n\t});\n\t\n\tr.rawCall(['zadd', 'zset:1', 1, 'a', 2, 'b', 3, 'c', 4, 'd'], function(e, resp){\n\t\tconsole.log('zset', e, resp);\n\t});\n\t\n\t//HMGET and HGETALL also returns an Array\n\tr.rawCall(['hgetall', 'hset:1'], function(e, resp){\n\t\tconsole.log('HGETALL', e, resp);\n\t});\n\t\n\tr.rawCall(['zrange', 'zset:1', 0, -1], function(e, resp){\n\t\tconsole.log('ZRANGE', e, resp);\n\t\t//disconnect\n\t\tr.end();\n\t});\n\n# Speed\n\nWorks MUCH faster then node-redis, 20-50% faster then `ioredis` and even faster then `redis-benchmark` tool.\n\nResults for my MacBook Pro (Retina, 15-inch, Mid 2014, 2.5 GHz Intel Core i7) via tcp/ip.\n\nRedis-fast-driver `node example.js`:\n\n\t=================================================\n\t===\n\tStart test: PING command 1000 times\n\tTest complete in 7ms, speed 142857.14 in second, cold down 1.5 sec\n\t===\n\tStart test: INCR command 1000 times\n\tTest complete in 6ms, speed 166666.67 in second, cold down 1.5 sec\n\t===\n\tStart test: GET command 1000 times\n\tTest complete in 6ms, speed 166666.67 in second, cold down 1.5 sec\n\t===\n\tStart test: HGET command 1000 times\n\tTest complete in 7ms, speed 142857.14 in second, cold down 1.5 sec\n\t===\n\tStart test: HGETALL command 1000 times\n\tTest complete in 8ms, speed 125000.00 in second, cold down 1.5 sec\n\t===\n\tStart test: ZRANGE 0 4 command 1000 times\n\tTest complete in 12ms, speed 83333.33 in second, cold down 1.5 sec\n\t===\n\tStart test: PING command 5000 times\n\tTest complete in 15ms, speed 333333.33 in second, cold down 1.5 sec\n\t===\n\tStart test: INCR command 5000 times\n\tTest complete in 16ms, speed 312500.00 in second, cold down 1.5 sec\n\t===\n\tStart test: GET command 5000 times\n\tTest complete in 18ms, speed 277777.78 in second, cold down 1.5 sec\n\t===\n\tStart test: HGET command 5000 times\n\tTest complete in 21ms, speed 238095.24 in second, cold down 1.5 sec\n\t===\n\tStart test: HGETALL command 5000 times\n\tTest complete in 35ms, speed 142857.14 in second, cold down 1.5 sec\n\t===\n\tStart test: ZRANGE 0 4 command 5000 times\n\tTest complete in 32ms, speed 156250.00 in second, cold down 1.5 sec\n\t===\n\tStart test: PING command 10000 times\n\tTest complete in 28ms, speed 357142.86 in second, cold down 1.5 sec\n\t===\n\tStart test: INCR command 10000 times\n\tTest complete in 26ms, speed 384615.38 in second, cold down 1.5 sec\n\t===\n\tStart test: GET command 10000 times\n\tTest complete in 29ms, speed 344827.59 in second, cold down 1.5 sec\n\t===\n\tStart test: HGET command 10000 times\n\tTest complete in 32ms, speed 312500.00 in second, cold down 1.5 sec\n\t===\n\tStart test: HGETALL command 10000 times\n\tTest complete in 62ms, speed 161290.32 in second, cold down 1.5 sec\n\t===\n\tStart test: ZRANGE 0 4 command 10000 times\n\tTest complete in 63ms, speed 158730.16 in second, cold down 1.5 sec\n\t===\n\tStart test: PING command 25000 times\n\tTest complete in 76ms, speed 328947.37 in second, cold down 1.5 sec\n\t===\n\tStart test: INCR command 25000 times\n\tTest complete in 79ms, speed 316455.70 in second, cold down 1.5 sec\n\t===\n\tStart test: GET command 25000 times\n\tTest complete in 97ms, speed 257731.96 in second, cold down 1.5 sec\n\t===\n\tStart test: HGET command 25000 times\n\tTest complete in 99ms, speed 252525.25 in second, cold down 1.5 sec\n\t===\n\tStart test: HGETALL command 25000 times\n\tTest complete in 163ms, speed 153374.23 in second, cold down 1.5 sec\n\t===\n\tStart test: ZRANGE 0 4 command 25000 times\n\tTest complete in 159ms, speed 157232.70 in second, cold down 1.5 sec\n\t=================================================\n\nRedis benchmark tool with `-q` flag via tcp/ip on same machine:\n\n\tPING_INLINE: 125313.29 requests per second\n\tPING_BULK: 125313.29 requests per second\n\tSET: 126742.72 requests per second\n\tGET: 124533.01 requests per second\n\tINCR: 126742.72 requests per second\n\tLPUSH: 126422.25 requests per second\n\tLPOP: 125000.00 requests per second\n\tSADD: 121951.22 requests per second\n\tSPOP: 125628.14 requests per second\n\tLPUSH (needed to benchmark LRANGE): 117785.63 requests per second\n\tLRANGE_100 (first 100 elements): 31948.88 requests per second\n\tLRANGE_300 (first 300 elements): 13264.36 requests per second\n\tLRANGE_500 (first 450 elements): 9039.96 requests per second\n\tLRANGE_600 (first 600 elements): 6799.95 requests per second\n\tMSET (10 keys): 87873.46 requests per second\n\nMocha test (`npm run bench`) of Redis-fast-driver:\n\n\t==========================\n\tredis-fast-driver: 1.0.3\n\tCPU: 8\n\tOS: darwin x64\n\tnode version: v4.2.3\n\tcurrent commit: 0959643\n\t==========================\n\t\n\tConcurrency 10000\n\t218,101 op/s » PING\n\t190,719 op/s » SET foo bar\n\t183,838 op/s » GET foo\n\t203,899 op/s » INCR number\n\t113,289 op/s » HGETALL hset:1\n\t106,666 op/s » ZRANGE zset:1 0 5\n\t13,346 op/s » LRANGE list 0 99\n\t\n\tConcurrency 1000\n\t205,586 op/s » PING\n\t201,202 op/s » SET foo bar\n\t209,195 op/s » GET foo\n\t224,303 op/s » INCR number\n\t116,750 op/s » HGETALL hset:1\n\t110,804 op/s » ZRANGE zset:1 0 5\n\t11,680 op/s » LRANGE list 0 99\n\t\n\tConcurrency 500\n\t201,103 op/s » PING\n\t153,441 op/s » SET foo bar\n\t173,239 op/s » GET foo\n\t179,958 op/s » INCR number\n\t108,349 op/s » HGETALL hset:1\n\t101,903 op/s » ZRANGE zset:1 0 5\n\t13,840 op/s » LRANGE list 0 99\n\t\n\tConcurrency 250\n\t195,763 op/s » PING\n\t148,687 op/s » SET foo bar\n\t166,859 op/s » GET foo\n\t169,391 op/s » INCR number\n\t93,612 op/s » HGETALL hset:1\n\t85,425 op/s » ZRANGE zset:1 0 5\n\t13,287 op/s » LRANGE list 0 99\n\t\n\tConcurrency 100\n\t172,089 op/s » PING\n\t131,105 op/s » SET foo bar\n\t147,579 op/s » GET foo\n\t150,110 op/s » INCR number\n\t87,084 op/s » HGETALL hset:1\n\t82,737 op/s » ZRANGE zset:1 0 5\n\t13,079 op/s » LRANGE list 0 99\n\t\n\tConcurrency 10\n\t99,971 op/s » PING\n\t96,470 op/s » SET foo bar\n\t102,060 op/s » GET foo\n\t103,722 op/s » INCR number\n\t53,660 op/s » HGETALL hset:1\n\t60,193 op/s » ZRANGE zset:1 0 5\n\t11,081 op/s » LRANGE list 0 99\n\t\n\tConcurrency 1\n\t23,132 op/s » PING\n\t19,633 op/s » SET foo bar\n\t22,256 op/s » GET foo\n\t21,776 op/s » INCR number\n\t15,555 op/s » HGETALL hset:1\n\t19,501 op/s » ZRANGE zset:1 0 5\n\t7,949 op/s » LRANGE list 0 99\n\t\n\tSuites:  7\n\tBenches: 49\n\tElapsed: 221,065.04 ms\n\nioredis `npm run bench` on same machine\n\n\t==========================\n\tredis: 2.0.1\n\tCPU: 8\n\tOS: darwin x64\n\tnode version: v4.2.3\n\tcurrent commit: 2ac00c8\n\t==========================\n\t\n\tSET foo bar\n\t126,941 op/s » javascript parser + dropBufferSupport: true\n\t124,539 op/s » javascript parser\n\t128,321 op/s » hiredis parser + dropBufferSupport: true\n\t111,211 op/s » hiredis parser\n\t\n\tLRANGE foo 0 99\n\t21,243 op/s » javascript parser + dropBufferSupport: true\n\t12,675 op/s » javascript parser\n\t27,931 op/s » hiredis parser + dropBufferSupport: true\n\t5,955 op/s » hiredis parser\n\t\n\tSuites:  2\n\tBenches: 8\n\tElapsed: 60,197.37 ms\n\n# Author\n\nArseniy Pavlenko h0x91b@gmail.com\n\nSkype: h0x91b\n\nLinkedin: https://il.linkedin.com/in/h0x91b\n\n# Licence\n\n(The MIT License)\n\nCopyright (c) 2015-2016 Arseniy Pavlenko h0x91b@gmail.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","starsCount":1,"created":"2014-12-09T09:49:30.443Z","modified":"2016-11-18T14:20:22.940Z","lastPublisher":{"name":"h0x91b","email":"h0x91b@gmail.com"},"owners":[{"name":"h0x91b","email":"h0x91b@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"redis-fast-driver","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/redis-fast-driver-1.0.5.tgz_1479478577473_0.5439676195383072"},"_npmUser":{"name":"h0x91b","email":"h0x91b@gmail.com"},"_npmVersion":"3.10.8","_rev":"3-f9282fb851e15e725955c1dcd06d0597","_shasum":"d89dc9998c73bad037d6edb3369a495795fc33f2","author":{"name":"Arseniy Pavlenko","url":"h0x91b"},"bugs":{"url":"https://github.com/h0x91b/redis-fast-driver/issues"},"directories":{},"dist-tags":{"latest":"1.0.5"},"dist":{"shasum":"d89dc9998c73bad037d6edb3369a495795fc33f2","tarball":"http://registry.npmjs.org/redis-fast-driver/-/redis-fast-driver-1.0.5.tgz"},"maintainers":[{"name":"h0x91b","email":"h0x91b@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-18T14:20:22.940Z","created":"2014-12-09T09:49:30.443Z","0.0.1":"2014-12-09T09:49:30.443Z","0.0.2":"2014-12-09T10:50:23.185Z","0.0.3":"2014-12-09T13:38:31.502Z","0.0.4":"2014-12-10T10:18:00.987Z","0.0.5":"2014-12-16T11:35:33.293Z","0.0.6":"2014-12-17T10:29:02.288Z","0.0.7":"2015-02-19T16:56:43.693Z","0.0.8":"2015-03-09T09:37:15.182Z","0.0.9":"2015-03-09T09:51:24.095Z","0.1.0":"2015-06-09T11:52:56.883Z","0.1.2":"2015-07-28T21:15:52.520Z","0.1.3":"2015-11-30T11:59:27.048Z","1.0.0":"2015-12-27T09:21:29.697Z","1.0.1":"2016-01-26T15:49:36.339Z","1.0.2":"2016-01-26T16:47:57.928Z","1.0.3":"2016-04-06T15:15:36.329Z","1.0.4":"2016-06-20T12:04:40.679Z","1.0.5":"2016-11-18T14:16:20.008Z"},"users":{"h0x91b":true}}}