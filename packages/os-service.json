{"name":"os-service","version":"1.4.2","description":"Run Node.JS programs as native Operating System Services.","main":"index.js","dependencies":{"nan":"2.3.x"},"repository":"https://github.com/stephenwvickers/node-os-service","keywords":["background-process","background-service","daemon","linux-daemon","linux-service","service","windows","windows-daemon","windows-service"],"license":"MIT","scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"501c7706cbfbfee3b8cc8aaf89e40ad2a9490cd2","homepage":"https://github.com/stephenwvickers/node-os-service#readme","versions":[{"number":"1.0.0","date":"2014-12-30T15:14:20.453Z"},{"number":"1.0.1","date":"2015-03-03T10:24:59.655Z"},{"number":"1.0.2","date":"2015-03-30T14:59:54.368Z"},{"number":"1.0.3","date":"2015-09-22T21:09:22.637Z"},{"number":"1.1.0","date":"2015-10-09T19:17:24.234Z"},{"number":"1.1.1","date":"2016-02-08T21:14:32.296Z"},{"number":"1.2.0","date":"2016-02-29T12:55:56.935Z"},{"number":"1.3.0","date":"2016-05-15T19:49:25.587Z"},{"number":"1.4.0","date":"2017-03-20T10:16:40.705Z"},{"number":"1.4.1","date":"2017-03-27T18:35:38.741Z"},{"number":"1.4.2","date":"2017-07-14T17:45:55.276Z"}],"readme":"\n# os-service\n\nThis module implements the ability to run a [Node.js][nodejs] based JavaScript\nprogram as a native Windows or Linux service.\n\nThis module is installed using [node package manager (npm)][npm]:\n\n    # This module contains C++ source code which will be compiled\n    # during installation on Windows platforms using node-gyp.  A\n    # suitable build chain must be configured on Windows platforms\n    # before installation.\n    \n    npm install os-service\n\nIt is loaded using the `require()` function:\n\n    var service = require (\"os-service\");\n\nA program can then be added, removed and run as a service:\n\n    service.add (\"my-service\");\n    \n    service.remove (\"my-service\");\n    \n    var logStream = fs.createWriteStream (\"my-service.log\");\n    \n    service.run (logStream, function () {\n        console.log (\"stop request received\");\n        service.stop ();\n    });\n\n[nodejs]: http://nodejs.org \"Node.js\"\n[npm]: https://npmjs.org/ \"npm\"\n\n# Batch Service Creation\n\nTwo approaches can be taken when adding and removing services.\n\nIn the first approach a program can be responsible for adding, removing and\nstarting itself as a service.  This is typically achieved by supporting\nprogram arguments such as `--add`, `--remove`, and `--run`, and executing the\nappropriate action.\n\nThe following example adds the calling program as a service when called\nwith a `--add` parameter, and removes the created service when called with a\n`--remove` parameter:\n\n    if (process.argv[2] == \"--add\") {\n        service.add (\"my-service\", {programArgs: [\"--run\"]}, function(error){ \n           if (error)\n              console.trace(error);\n        });\n    } else if (process.argv[2] == \"--remove\") {\n        service.remove (\"my-service\", function(error){ \n           if (error)\n              console.trace(error);\n        });\n    } else if (process.argv[2] == \"--run\") {\n        var logStream = fs.createWriteStream (process.argv[1] + \".log\");\n        \n        service.run (logStream, function () {\n            service.stop (0);\n        });\n        \n        // Run service program code...\n    } else {\n        // Show usage...\n    }\n\nNote the `--run` argument passed in the `options` parameter to the\n`service.add()` function.  When the service is started using the Windows\nService Control Manager, or the Linux service management facilities,  the first\nargument to the program will be `--run`.  The above program checks for this and\nif specified runs as a service using the `service.run()` function.\n\nAlso note that neither the node binary or the programs fully qualified path\nare specified.  These parameters are automatically calculated it not\nspecified.  Refer to the `service.add()` function description for details\nabout how this works.\n\nIn the second approach a dedicated service management program can be\nresponsible for adding and removing many services in batch.  The program\nadding and removing services is not a service itself, and would never call\nthe `service.run()` function.\n\nThe following example adds or removes number of services:\n\n    if (program.argv[2] == \"--add\") {\n        service.add (\"service1\", {programPath: \"c:\\example\\svc1.js\",\n            function(error) { \n                if (error) {\n                    console.trace(error);\n                } else {\n                    service.add (\"service2\", {programPath: \"c:\\example\\svc2.js\",\n                        function(error) { \n                            if (error) {\n                                console.trace(error);\n                            }\n                        });\n                }\n            });\n    } else {\n        service.remove (\"service2\", function(error) { \n            if (error) {\n                console.trace(error);\n            } else {\n                service.remove (\"service1\", function(error) { \n                    if (error) {\n                        console.trace(error);\n                    }\n                });\n            }\n        });\n    }\n\nNote that unlike the previous example the `--run` argument is not passed in\nthe `options` parameter to the `service.add()` function.  Since each service\nprogram does not add or remove itself as a service it only needs to run, and\nas such does not need to be told to so.\n\nAlso note that the `programPath` argument is passed in the options parameter\nto the `service.add()` function, to specify the fully qualified path to each\nservice program - which would otherwise default to the service management\nprogram adding the services.\n\nEach of the service programs can simply start themselves as services using the\nfollowing code:\n\n    var logStream = fs.createWriteStream (process.argv[1] + \".log\");\n    \n    service.run (logStream, function () {\n        service.stop (0);\n    });\n    \n    // Run service program code...\n\n# Running Service Programs\n\nWhen a service program starts it can always call the `service.run()` function\nregardless of whether it is started at the console, by the Windows Service\nControl Manager, or the Linux service management facilities.\n\nOn Windows, when the `service.run()` function is called this module will\nattempt to connect to the Windows Service Control Manager so that control\nrequests can be received - so that the service can be stopped.  When starting a\nprogram at the console an attempt to connect to the Windows Service Control\nManager will fail.  In this case the `service.run()` function will assume the\nprogram is running at the console and silently ignore this error.\n\nOn Linux, services started at the console will run in the foreground, this\nallows command sequences such as `CTRL+C` to be used, e.g. during development.\nWhen Linux services are started using the Linux service management facilities,\ni.e. `service my-service start`, they can be stopped using the signals `SIGINT`\nand `SIGTERM`, or again using the Linux service management facilities, i.e.\n`service my-service stop`.\n\nThis behaviour results in a program which can be run either at the console, the\nWindows Service Control Manager, or the Linux service management facilities\nwith no change.\n\n# Current Working Directory\n\nUpon starting the current working directory of a service program will be\nplatform specific the , e.g. the `\"%windir%\\system32\"` directory on Windows.\nService programs need to consider this when working with relative directory and\nfile paths.\n\nThis path will most likely be different when running the same program at the\nconsole, so a service program may wish to change the current working\ndirectory to a more suitable location using the `process.chdir()` function to\navoid different behaviour between the two methods of starting a program.\n\n# Using This Module\n\nThis module attempts to behave in exactly the same way on Windows and Linux\nplatforms - at least the API is exactly the same for both platforms both from\na service management and service running perspective.\n\nOn Windows platforms the Windows Service Control Manager WIN32 API is used to\nmanage services.  On Linux platforms a `systemd` unit is created if it is\navailable, otherwise the `chkconfig` command is used.  If `chkconfig` is not\navailable the `update-rc.d` command is tried instead.\n\n## service.add (name, [options], cb)\n\nThe `add()` function adds a service.\n\nThe `name` parameter specifies the name of the created service.  The optional\n`options` parameter is an object, and can contain the following items:\n\n * `displayName` - The services display name, defaults to the `name` parameter\n   - this parameter will be used on Windows platforms only\n * `nodePath` - The fully qualified path to the node binary used to run the\n   service (i.e. `c:\\Program Files\\nodejs\\node.exe`, defaults to the value of\n   `process.execPath`\n * `nodeArgs` - An array of strings specifying parameters to pass to\n   `nodePath`, defaults to `[]`\n * `programPath` - The program to run using `nodePath`, defaults to the value\n   of `process.argv[1]`\n * `programArgs` - An array of strings specifying parameters to pass to\n   `programPath`, defaults to `[]`\n * `runLevels` - An array of numbers specifying Linux run-levels at which\n   the service should be started for Linux platforms, defaults to\n   `[2, 3, 4, 5]`, this is only used when `chkconfig` or `update-rc.d` is used\n\tto install a service\n * `username` - For Windows platforms a username and password can be specified,\n   the service will be run using these credentials when started, see the\n   `CreatedService()` functions [win32 API documentation][createdservice] for\n   details on the format of the username, on all other platforms this parameter\n   is ignored\n * `password` - See the `username` parameter\n * `systemdWantedBy` - For when systemd will be used a target can be specified\n   for the `WantedBy` attribute under the `[Install]` section in the generated\n   systemd unit file, defaults to `multi-user.target`\n\n[createdservice]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms682450(v=vs.85).aspx \"CreatedService()\"\n\nThe service will be set to automatically start at boot time, but not started.\nThe service can be started using the `net start \"my-service\"` command on\nWindows and `service my-service start` on Linux.\n\nThe `cb` callback function is called once the service has been added. The\nfollowing arguments will be passed to the callback function:\n\n * `error` - Instance of the `Error` class, or `null` if no error occurred\n\nThe following example installs a service named `my-service`, it explicitly\nspecifies the services display name, and specifies a number of parameters to\nthe program:\n\n    var options = {\n        displayName: \"MyService\",\n        programArgs: [\"--server-port\", 8888],\n        username: \".\\Stephen Vickers\",\n        password: \"MyPassword :)\"\n    };\n    \n    service.add (\"my-service\", options, function(error) {\n        if (error)\n            console.trace(error);\n    });\n\n## service.remove (name, cb)\n\nThe `remove()` function removes a service.\n\nThe `name` parameter specifies the name of the service to remove.  This will\nbe the same `name` parameter specified when adding the service.\n\nThe service must be in a stopped state for it to be removed.  The\n`net stop \"my-service\"` command can be used to stop the service on Windows and\nthe `service my-service stop` on Linux before it is to be removed.\n\nThe `cb` callback function is called once the service has been removed. The\nfollowing arguments will be passed to the callback function:\n\n * `error` - Instance of the `Error` class, or `null` if no error occurred\n\nThe following example removes the service named `my-service`:\n\n    service.remove (\"my-service\", function(error) {\n        if (error)\n            console.trace(error);\n    });\n\n## service.run (stdoutLogStream, [stderrLogStream,] callback)\n\nThe `run()` function will attempt to run the program as a service.\n\nThe programs `process.stdout` stream will be replaced with the\n`stdoutLogStream` parameter, and the programs `process.stderr` stream\nreplaced with the `stdoutLogStream` parameter (this allows the redirection of\nall `console.log()` type calls to a service specific log file).  If the\n`stderrLogStream` parameter is not specified the programs `process.stderr`\nstream will be replaced with the `stdoutLogStream` parameter.  The `callback`\nfunction will be called when the service receives a stop request, e.g. because\nthe Windows Service Controller was used to send a stop request to the service,\nor a `SIGTERM` signal was received.\n\nThe program should perform cleanup tasks and then call the `service.stop()`\nfunction.\n\nThe following example starts a program as a service, it uses the same log\nstream for standard output and standard error:\n\n    var logStream = fs.createWriteStream (\"my-service.log\");\n    \n    service.run (logStream, function () {\n        console.log (\"stop request received\");\n        service.stop ();\n    });\n\n## service.stop ([rcode])\n\nThe `stop()` function will cause the service to stop, and the calling program\nto exit.\n\nOnce the service has been stopped this function will terminate the program by\ncalling the `process.exit()` function, passing to it the `rcode` parameter\nwhich defaults to `0`.  Before calling this function ensure the program has\nfinished performing cleanup tasks.\n\n**BE AWARE, THIS FUNCTION WILL NOT RETURN.**\n\nThe following example stops the calling program specifying a return code of\n`0`, the function will not return:\n\n    var logStream = fs.createWriteStream (\"my-service.log\");\n\n    service.run (logStream, function () {\n        console.log (\"stop request received\");\n        service.stop (0);\n    });\n\n# Example Programs\n\nExample programs are included under the modules `example` directory.\n\n# Bugs & Known Issues\n\nNone, yet!\n\nBug reports should be sent to <stephen.vickers.sv@gmail.com>.\n\n# Changes\n\n## Version 1.0.0 - 30/12/2014\n\n * Initial release\n\n## Version 1.0.1 - 03/03/2015\n\n * Support Linux platforms which don't have the start-stop-daemon program\n \n## Version 1.0.2 - 30/03/2015\n\n * Linux start/stop link under `/etc/rcN.d` directories are not removed\n\n## Version 1.0.3 - 22/09/2015\n\n * Host repository on GitHub\n\n## Version 1.1.0 - 09/10/2015\n\n * Migrate C++ addon code to use the Native Abstractions for Node framework\n * Add missing shebang line '#!' to start/stop script template\n * Not possible to specify run levels for Linux start/stop script (added new\n   `runLevels` item to the `options` parameter to the `add()` function\n\n## Version 1.1.1 - 08/02/2016\n\n * Remove extraneous semicolon from the README.md file\n\n## Version 1.2.0 - 29/02/2016\n\n * On Windows platforms allow users to specify a username/password with which\n   a service should be run, the `username` and `password` options parameters\n   were added to the `add()` function\n\n## Version 1.3.0 - 15/05/2016\n\n * Require nan 2.3.x to support node version 6\n\n## Version 1.4.0 - 20/03/2017\n\n * Support Linux systemd\n\n## Version 1.4.1 - 27/03/2017\n\n * The systemd install doesn't work because of typo in directory name in\n   index.js\n\n## Version 1.4.2 - 14/07/2017\n\n * Service not automatically started on boot when under the systemd service\n   (added `WantedBy` attribute to generated systemd unit)\n * Umask not set in system 5 init script\n\n# Roadmap\n\nSuggestions and requirements should be sent to <stephen.vickers.sv@gmail.com>.\n\n# License\n\nCopyright (c) 2014 Stephen Vickers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n# Author\n\nStephen Vickers <stephen.vickers.sv@gmail.com>\n","starsCount":10,"created":"2014-12-30T15:14:20.453Z","modified":"2017-07-14T17:45:55.276Z","lastPublisher":{"name":"stephen.vickers","email":"stephen.vickers@devopsnetworks.com"},"owners":[{"name":"stephen.vickers","email":"stephen.vickers.sv@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"os-service","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-service-1.4.2.tgz_1500054354213_0.4682701430283487"},"_npmUser":{"name":"stephen.vickers","email":"stephen.vickers@devopsnetworks.com"},"_npmVersion":"3.10.8","_rev":"7-0f91e72e1bb8d290b8c891c191a02518","_shasum":"7525d7cc61899323184d149fd2c9f6b32852fa31","author":{"name":"Stephen Vickers","email":"stephen.vickers.sv@gmail.com"},"bugs":{"url":"https://github.com/stephenwvickers/node-os-service/issues"},"contributors":[{"name":"Stephen Vickers","email":"stephen.vickers.sv@gmail.com"}],"directories":{"example":"example"},"dist-tags":{"latest":"1.4.2"},"dist":{"shasum":"7525d7cc61899323184d149fd2c9f6b32852fa31","tarball":"https://registry.npmjs.org/os-service/-/os-service-1.4.2.tgz"},"maintainers":[{"name":"stephen.vickers","email":"stephen.vickers.sv@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-14T17:45:55.276Z","created":"2014-12-30T15:14:20.453Z","1.0.0":"2014-12-30T15:14:20.453Z","1.0.1":"2015-03-03T10:24:59.655Z","1.0.2":"2015-03-30T14:59:54.368Z","1.0.3":"2015-09-22T21:09:22.637Z","1.1.0":"2015-10-09T19:17:24.234Z","1.1.1":"2016-02-08T21:14:32.296Z","1.2.0":"2016-02-29T12:55:56.935Z","1.3.0":"2016-05-15T19:49:25.587Z","1.4.0":"2017-03-20T10:16:40.705Z","1.4.1":"2017-03-27T18:35:38.741Z","1.4.2":"2017-07-14T17:45:55.276Z"},"users":{"energeticpixels":true,"thelmos":true,"manjunathd":true,"andyd":true,"dockawash":true,"dangerdroid":true,"adamwitko":true,"garenyondem":true,"ephillipe":true,"leizongmin":true}}}