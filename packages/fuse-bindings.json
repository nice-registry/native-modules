{"name":"fuse-bindings","version":"2.11.1","description":"Fully maintained fuse bindings for Node that aims to cover the entire FUSE api","main":"index.js","scripts":{"install":"prebuild --install","test":"standard && tape test/*.js","rebuild":"prebuild --compile","prebuild":"prebuild --all --strip --verbose"},"gypfile":true,"dependencies":{"bindings":"^1.2.1","nan":"^2.3.5","prebuild":"^4.2.2","xtend":"^4.0.1"},"devDependencies":{"concat-stream":"^1.4.7","standard":"^7.1.2","tape":"^4.6.0"},"repository":"https://github.com/mafintosh/fuse-bindings","license":"MIT","homepage":"https://github.com/mafintosh/fuse-bindings","gitHead":"889ef16e9b685270a39b55a0499f277240932f83","versions":[{"number":"1.0.0","date":"2015-03-12T02:13:55.425Z"},{"number":"1.1.0","date":"2015-03-17T01:18:28.790Z"},{"number":"2.0.0","date":"2015-03-23T16:20:27.002Z"},{"number":"2.0.1","date":"2015-03-24T05:55:15.676Z"},{"number":"2.1.0","date":"2015-03-24T18:20:34.711Z"},{"number":"2.1.1","date":"2015-03-26T15:40:13.126Z"},{"number":"2.1.2","date":"2015-03-26T18:36:03.420Z"},{"number":"2.1.3","date":"2015-05-04T23:53:16.398Z"},{"number":"2.2.0","date":"2015-05-05T00:22:42.167Z"},{"number":"2.3.0","date":"2015-05-13T00:52:47.578Z"},{"number":"2.4.0","date":"2015-05-16T18:34:16.073Z"},{"number":"2.4.1","date":"2015-05-16T19:05:55.286Z"},{"number":"2.4.2","date":"2015-05-19T18:25:01.867Z"},{"number":"2.4.3","date":"2015-05-21T11:39:01.628Z"},{"number":"2.5.0","date":"2015-08-08T20:56:52.889Z"},{"number":"2.6.0","date":"2015-09-03T04:15:10.952Z"},{"number":"2.7.0","date":"2015-09-24T20:20:30.455Z"},{"number":"2.8.0","date":"2015-09-25T16:01:06.393Z"},{"number":"2.8.1","date":"2016-01-18T22:50:43.735Z"},{"number":"2.9.0","date":"2016-06-25T00:05:35.480Z"},{"number":"2.10.0","date":"2016-10-17T11:53:48.255Z"},{"number":"2.10.1","date":"2016-10-30T09:43:54.802Z"},{"number":"2.11.0","date":"2017-03-05T22:20:20.944Z"},{"number":"2.11.1","date":"2017-04-02T07:31:04.756Z"}],"readme":"# fuse-bindings\n\nFully maintained fuse bindings for Node that aims to cover the entire FUSE api\n\n```\nnpm install fuse-bindings\n```\n\nCompared to [fuse4js](https://github.com/bcle/fuse4js) these bindings cover almost the entire FUSE api (except for locking) and doesn't do\nany buffer copys in read/write. It also supports unmount and mouting of multiple fuse drives.\n\n## Requirements\n\nYou need to have FUSE installed (or Dokany on Windows)\n\n* On Linux/Ubuntu `sudo apt-get install libfuse-dev`\n* On OSX\n  * if you use Brew, install [OSXFuse](http://osxfuse.github.com/) and `brew install pkg-config`\n  * if you use MacPorts, `sudo port install osxfuse +devel`\n* On Windows install [Dokany](https://github.com/dokan-dev/dokany)\n\n### Windows\n**WARNING**: Dokany is still not quite stable. It can cause BSODs. Be careful.\n\n~~Using this on Windows is slightly more complicated. You need to install [Dokany](https://github.com/dokan-dev/dokany) (for `dokanfuse.lib`, `dokanctl.exe`, driver and service) **and** clone its repo (for the headers).~~\n\n~~Once the Dokany repo is cloned, you also need to set environment variable `DOKAN_INSTALL_DIR` to the path to `DokenLibrary` of your Dokany installaton, and `DOKAN_FUSE_INCLUDE` to the path to `*dokany repo*\\dokan_fuse\\include`.~~\n\n**EDIT**: Dokany now includes needed headers and sets proper environment variables when installing! Just install Dokany and this module should install and work just fine! (Drop an issue otherwise)\n\n## Usage\n\nTry creating an empty folder called `mnt` and run the below example\n\n``` js\nvar fuse = require('fuse-bindings')\n\nvar mountPath = process.platform !== 'win32' ? './mnt' : 'M:\\\\'\n\nfuse.mount(mountPath, {\n  readdir: function (path, cb) {\n    console.log('readdir(%s)', path)\n    if (path === '/') return cb(0, ['test'])\n    cb(0)\n  },\n  getattr: function (path, cb) {\n    console.log('getattr(%s)', path)\n    if (path === '/') {\n      cb(0, {\n        mtime: new Date(),\n        atime: new Date(),\n        ctime: new Date(),\n        size: 100,\n        mode: 16877,\n        uid: process.getuid ? process.getuid() : 0,\n        gid: process.getgid ? process.getgid() : 0\n      })\n      return\n    }\n\n    if (path === '/test') {\n      cb(0, {\n        mtime: new Date(),\n        atime: new Date(),\n        ctime: new Date(),\n        size: 12,\n        mode: 33188,\n        uid: process.getuid ? process.getuid() : 0,\n        gid: process.getgid ? process.getgid() : 0\n      })\n      return\n    }\n\n    cb(fuse.ENOENT)\n  },\n  open: function (path, flags, cb) {\n    console.log('open(%s, %d)', path, flags)\n    cb(0, 42) // 42 is an fd\n  },\n  read: function (path, fd, buf, len, pos, cb) {\n    console.log('read(%s, %d, %d, %d)', path, fd, len, pos)\n    var str = 'hello world\\n'.slice(pos, pos + len)\n    if (!str) return cb(0)\n    buf.write(str)\n    return cb(str.length)\n  }\n}, function (err) {\n  if (err) throw err\n  console.log('filesystem mounted on ' + mountPath)\n})\n\nprocess.on('SIGINT', function () {\n  fuse.unmount(mountPath, function (err) {\n    if (err) {\n      console.log('filesystem at ' + mountPath + ' not unmounted', err)\n    } else {\n      console.log('filesystem at ' + mountPath + ' unmounted')\n    }\n  })\n})\n```\n\n## API\n\n#### `fuse.mount(mnt, ops, [cb])`\n\nMount a new filesystem on `mnt`.\nPass the FUSE operations you want to support as the `ops` argument.\n\n#### `fuse.unmount(mnt, [cb])`\n\nUnmount a filesystem\n\n#### `fuse.context()`\n\nReturns the current fuse context (pid, uid, gid).\nMust be called inside a fuse callback.\n\n## Mount options\n\n#### `ops.options`\n\nSet [mount options](http://blog.woralelandia.com/2012/07/16/fuse-mount-options/)\n\n``` js\nops.options = ['direct_io'] // set the direct_io option\n```\n\n#### `ops.displayFolder`\n\nSet to `true` to make OSX display a folder icon and the folder name as the mount point in finder\n\n#### `ops.force`\n\nSet to `true` to force mount the filesystem (will do an unmount first)\n\n## FUSE operations\n\nMost of the [FUSE api](http://fuse.sourceforge.net/doxygen/structfuse__operations.html) is supported. In general the callback for each op should be called with `cb(returnCode, [value])` where the return code is a number (`0` for OK and `< 0` for errors). See below for a list of POSIX error codes.\n\n#### `ops.init(cb)`\n\nCalled on filesystem init.\n\n#### `ops.access(path, mode, cb)`\n\nCalled before the filesystem accessed a file\n\n#### `ops.statfs(path, cb)`\n\nCalled when the filesystem is being stat'ed. Accepts a fs stat object after the return code in the callback.\n\n``` js\nops.statfs = function (path, cb) {\n  cb(0, {\n    bsize: 1000000,\n    frsize: 1000000,\n    blocks: 1000000,\n    bfree: 1000000,\n    bavail: 1000000,\n    files: 1000000,\n    ffree: 1000000,\n    favail: 1000000,\n    fsid: 1000000,\n    flag: 1000000,\n    namemax: 1000000\n  })\n}\n```\n\n#### `ops.getattr(path, cb)`\n\nCalled when a path is being stat'ed. Accepts a stat object (similar to the one returned in `fs.stat(path, cb)`) after the return code in the callback.\n\n``` js\nops.getattr = function (path, cb) {\n  cb(0, {\n    mtime: new Date(),\n    atime: new Date(),\n    ctime: new Date(),\n    size: 100,\n    mode: 16877,\n    uid: process.getuid(),\n    gid: process.getgid()\n  })\n}\n```\n\n#### `ops.fgetattr(path, fd, cb)`\n\nSame as above but is called when someone stats a file descriptor\n\n#### `ops.flush(path, fd, cb)`\n\nCalled when a file descriptor is being flushed\n\n#### `ops.fsync(path, fd, datasync, cb)`\n\nCalled when a file descriptor is being fsync'ed.\n\n#### `ops.fsyncdir(path, fd, datasync, cb)`\n\nSame as above but on a directory\n\n#### `ops.readdir(path, cb)`\n\nCalled when a directory is being listed. Accepts an array of file/directory names after the return code in the callback\n\n``` js\nops.readdir = function (path, cb) {\n  cb(0, ['file-1.txt', 'dir'])\n}\n```\n\n#### `ops.truncate(path, size, cb)`\n\nCalled when a path is being truncated to a specific size\n\n#### `ops.ftruncate(path, fd, size, cb)`\n\nSame as above but on a file descriptor\n\n#### `ops.readlink(path, cb)`\n\nCalled when a symlink is being resolved. Accepts a pathname (that the link should resolve to) after the return code in the callback\n\n``` js\nops.readlink = function (path, cb) {\n  cb(null, 'file.txt') // make link point to file.txt\n}\n```\n\n#### `ops.chown(path, uid, gid, cb)`\n\nCalled when ownership of a path is being changed\n\n#### `ops.chmod(path, mode, cb)`\n\nCalled when the mode of a path is being changed\n\n#### `ops.mknod(path, mode, dev, cb)`\n\nCalled when the a new device file is being made.\n\n#### `ops.setxattr(path, name, buffer, length, offset, flags, cb)`\n\nCalled when extended attributes is being set (see the extended docs for your platform).\nCurrently you can read the attribute value being set in `buffer` at `offset`.\n\n#### `ops.getxattr(path, name, buffer, length, offset, cb)`\n\nCalled when extended attributes is being read.\nCurrently you have to write the result to the provided `buffer` at `offset`.\n\n#### `ops.listxattr(path, buffer, length, cb)`\n\nCalled when extended attributes of a path are being listed.\n`buffer` should be filled with the extended attribute names as *null-terminated* strings, one after the other, up to a total of `length` in length. (`ERANGE` should be passed to the callback if `length` is insufficient.)\nThe size of buffer required to hold all the names should be passed to the callback either on success, or if the supplied `length` was zero.\n\n#### `ops.removexattr(path, name, cb)`\n\nCalled when an extended attribute is being removed.\n\n#### `ops.open(path, flags, cb)`\n\nCalled when a path is being opened. `flags` in a number containing the permissions being requested. Accepts a file descriptor after the return code in the callback.\n\n``` js\nvar toFlag = function(flags) {\n  flags = flags & 3\n  if (flags === 0) return 'r'\n  if (flags === 1) return 'w'\n  return 'r+'\n}\n\nops.open = function (path, flags, cb) {\n  var flag = toFlag(flags) // convert flags to a node style string\n  ...\n  cb(0, 42) // 42 is a file descriptor\n}\n```\n\n#### `ops.opendir(path, flags, cb)`\n\nSame as above but for directories\n\n#### `ops.read(path, fd, buffer, length, position, cb)`\n\nCalled when contents of a file is being read. You should write the result of the read to the `buffer` and return the number of bytes written as the first argument in the callback.\nIf no bytes were written (read is complete) return 0 in the callback.\n\n``` js\nvar data = new Buffer('hello world')\n\nops.read = function (path, fd, buffer, length, position, cb) {\n  if (position >= data.length) return cb(0) // done\n  var part = data.slice(position, position + length)\n  part.copy(buffer) // write the result of the read to the result buffer\n  cb(part.length) // return the number of bytes read\n}\n```\n\n#### `ops.write(path, fd, buffer, length, position, cb)`\n\nCalled when a file is being written to. You can get the data being written in `buffer` and you should return the number of bytes written in the callback as the first argument.\n\n``` js\nops.write = function (path, fd, buffer, length, position, cb) {\n  console.log('writing', buffer.slice(0, length))\n  cb(length) // we handled all the data\n}\n```\n\n#### `ops.release(path, fd, cb)`\n\nCalled when a file descriptor is being released. Happens when a read/write is done etc.\n\n#### `ops.releasedir(path, fd, cb)`\n\nSame as above but for directories\n\n#### `ops.create(path, mode, cb)`\n\nCalled when a new file is being opened.\n\n#### `ops.utimens(path, atime, mtime, cb)`\n\nCalled when the atime/mtime of a file is being changed.\n\n#### `ops.unlink(path, cb)`\n\nCalled when a file is being unlinked.\n\n#### `ops.rename(src, dest, cb)`\n\nCalled when a file is being renamed.\n\n#### `ops.link(src, dest, cb)`\n\nCalled when a new link is created.\n\n#### `ops.symlink(src, dest, cb)`\n\nCalled when a new symlink is created\n\n#### `ops.mkdir(path, mode, cb)`\n\nCalled when a new directory is being created\n\n#### `ops.rmdir(path, cb)`\n\nCalled when a directory is being removed\n\n#### `ops.destroy(cb)`\n\nBoth `read` and `write` passes the underlying fuse buffer without copying them to be as fast as possible.\n\n## Error codes\n\nThe available error codes are exposes as well as properties. These include\n\n* `fuse.EPERM === -1`\n* `fuse.ENOENT === -2`\n* `fuse.ESRCH === -3`\n* `fuse.EINTR === -4`\n* `fuse.EIO === -5`\n* `fuse.ENXIO === -6`\n* `fuse.E2BIG === -7`\n* `fuse.ENOEXEC === -8`\n* `fuse.EBADF === -9`\n* `fuse.ECHILD === -10`\n* `fuse.EAGAIN === -11`\n* `fuse.ENOMEM === -12`\n* `fuse.EACCES === -13`\n* `fuse.EFAULT === -14`\n* `fuse.ENOTBLK === -15`\n* `fuse.EBUSY === -16`\n* `fuse.EEXIST === -17`\n* `fuse.EXDEV === -18`\n* `fuse.ENODEV === -19`\n* `fuse.ENOTDIR === -20`\n* `fuse.EISDIR === -21`\n* `fuse.EINVAL === -22`\n* `fuse.ENFILE === -23`\n* `fuse.EMFILE === -24`\n* `fuse.ENOTTY === -25`\n* `fuse.ETXTBSY === -26`\n* `fuse.EFBIG === -27`\n* `fuse.ENOSPC === -28`\n* `fuse.ESPIPE === -29`\n* `fuse.EROFS === -30`\n* `fuse.EMLINK === -31`\n* `fuse.EPIPE === -32`\n* `fuse.EDOM === -33`\n* `fuse.ERANGE === -34`\n* `fuse.EDEADLK === -35`\n* `fuse.ENAMETOOLONG === -36`\n* `fuse.ENOLCK === -37`\n* `fuse.ENOSYS === -38`\n* `fuse.ENOTEMPTY === -39`\n* `fuse.ELOOP === -40`\n* `fuse.EWOULDBLOCK === -11`\n* `fuse.ENOMSG === -42`\n* `fuse.EIDRM === -43`\n* `fuse.ECHRNG === -44`\n* `fuse.EL2NSYNC === -45`\n* `fuse.EL3HLT === -46`\n* `fuse.EL3RST === -47`\n* `fuse.ELNRNG === -48`\n* `fuse.EUNATCH === -49`\n* `fuse.ENOCSI === -50`\n* `fuse.EL2HLT === -51`\n* `fuse.EBADE === -52`\n* `fuse.EBADR === -53`\n* `fuse.EXFULL === -54`\n* `fuse.ENOANO === -55`\n* `fuse.EBADRQC === -56`\n* `fuse.EBADSLT === -57`\n* `fuse.EDEADLOCK === -35`\n* `fuse.EBFONT === -59`\n* `fuse.ENOSTR === -60`\n* `fuse.ENODATA === -61`\n* `fuse.ETIME === -62`\n* `fuse.ENOSR === -63`\n* `fuse.ENONET === -64`\n* `fuse.ENOPKG === -65`\n* `fuse.EREMOTE === -66`\n* `fuse.ENOLINK === -67`\n* `fuse.EADV === -68`\n* `fuse.ESRMNT === -69`\n* `fuse.ECOMM === -70`\n* `fuse.EPROTO === -71`\n* `fuse.EMULTIHOP === -72`\n* `fuse.EDOTDOT === -73`\n* `fuse.EBADMSG === -74`\n* `fuse.EOVERFLOW === -75`\n* `fuse.ENOTUNIQ === -76`\n* `fuse.EBADFD === -77`\n* `fuse.EREMCHG === -78`\n* `fuse.ELIBACC === -79`\n* `fuse.ELIBBAD === -80`\n* `fuse.ELIBSCN === -81`\n* `fuse.ELIBMAX === -82`\n* `fuse.ELIBEXEC === -83`\n* `fuse.EILSEQ === -84`\n* `fuse.ERESTART === -85`\n* `fuse.ESTRPIPE === -86`\n* `fuse.EUSERS === -87`\n* `fuse.ENOTSOCK === -88`\n* `fuse.EDESTADDRREQ === -89`\n* `fuse.EMSGSIZE === -90`\n* `fuse.EPROTOTYPE === -91`\n* `fuse.ENOPROTOOPT === -92`\n* `fuse.EPROTONOSUPPORT === -93`\n* `fuse.ESOCKTNOSUPPORT === -94`\n* `fuse.EOPNOTSUPP === -95`\n* `fuse.EPFNOSUPPORT === -96`\n* `fuse.EAFNOSUPPORT === -97`\n* `fuse.EADDRINUSE === -98`\n* `fuse.EADDRNOTAVAIL === -99`\n* `fuse.ENETDOWN === -100`\n* `fuse.ENETUNREACH === -101`\n* `fuse.ENETRESET === -102`\n* `fuse.ECONNABORTED === -103`\n* `fuse.ECONNRESET === -104`\n* `fuse.ENOBUFS === -105`\n* `fuse.EISCONN === -106`\n* `fuse.ENOTCONN === -107`\n* `fuse.ESHUTDOWN === -108`\n* `fuse.ETOOMANYREFS === -109`\n* `fuse.ETIMEDOUT === -110`\n* `fuse.ECONNREFUSED === -111`\n* `fuse.EHOSTDOWN === -112`\n* `fuse.EHOSTUNREACH === -113`\n* `fuse.EALREADY === -114`\n* `fuse.EINPROGRESS === -115`\n* `fuse.ESTALE === -116`\n* `fuse.EUCLEAN === -117`\n* `fuse.ENOTNAM === -118`\n* `fuse.ENAVAIL === -119`\n* `fuse.EISNAM === -120`\n* `fuse.EREMOTEIO === -121`\n* `fuse.EDQUOT === -122`\n* `fuse.ENOMEDIUM === -123`\n* `fuse.EMEDIUMTYPE === -124`\n\n## License\n\nMIT\n","starsCount":7,"created":"2015-03-12T02:13:55.425Z","modified":"2017-07-22T23:25:05.480Z","lastPublisher":{"name":"mafintosh","email":"mathiasbuus@gmail.com"},"owners":[{"email":"ralphtheninja@riseup.net","name":"ralphtheninja"},{"email":"mathiasbuus@gmail.com","name":"mafintosh"}],"other":{"_attachments":{},"_from":".","_id":"fuse-bindings","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/fuse-bindings-2.11.1.tgz_1491118262694_0.1556410090997815"},"_npmUser":{"name":"mafintosh","email":"mathiasbuus@gmail.com"},"_npmVersion":"3.10.10","_rev":"6-2548ffcd165d635c8313ba2b82a61ca9","_shasum":"42a89df533a2d417acb1cc3eb4bed269b887b525","author":{"name":"Mathias Buus","url":"@mafintosh"},"bugs":{"url":"https://github.com/mafintosh/fuse-bindings/issues"},"directories":{},"dist-tags":{"latest":"2.11.1"},"dist":{"shasum":"42a89df533a2d417acb1cc3eb4bed269b887b525","tarball":"https://registry.npmjs.org/fuse-bindings/-/fuse-bindings-2.11.1.tgz"},"maintainers":[{"email":"ralphtheninja@riseup.net","name":"ralphtheninja"},{"email":"mathiasbuus@gmail.com","name":"mafintosh"}],"readmeFilename":"README.md","time":{"modified":"2017-07-22T23:25:05.480Z","created":"2015-03-12T02:13:55.425Z","1.0.0":"2015-03-12T02:13:55.425Z","1.1.0":"2015-03-17T01:18:28.790Z","2.0.0":"2015-03-23T16:20:27.002Z","2.0.1":"2015-03-24T05:55:15.676Z","2.1.0":"2015-03-24T18:20:34.711Z","2.1.1":"2015-03-26T15:40:13.126Z","2.1.2":"2015-03-26T18:36:03.420Z","2.1.3":"2015-05-04T23:53:16.398Z","2.2.0":"2015-05-05T00:22:42.167Z","2.3.0":"2015-05-13T00:52:47.578Z","2.4.0":"2015-05-16T18:34:16.073Z","2.4.1":"2015-05-16T19:05:55.286Z","2.4.2":"2015-05-19T18:25:01.867Z","2.4.3":"2015-05-21T11:39:01.628Z","2.5.0":"2015-08-08T20:56:52.889Z","2.6.0":"2015-09-03T04:15:10.952Z","2.7.0":"2015-09-24T20:20:30.455Z","2.8.0":"2015-09-25T16:01:06.393Z","2.8.1":"2016-01-18T22:50:43.735Z","2.9.0":"2016-06-25T00:05:35.480Z","2.10.0":"2016-10-17T11:53:48.255Z","2.10.1":"2016-10-30T09:43:54.802Z","2.11.0":"2017-03-05T22:20:20.944Z","2.11.1":"2017-04-02T07:31:04.756Z"},"users":{"ricmoo":true,"remryahirev":true,"bret":true,"shanewholloway":true,"perrymitchell":true,"djblue":true,"leonadler":true}}}