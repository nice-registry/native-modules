{"name":"ibm_db","description":"IBM DB2 and IBM Informix bindings for node","version":"2.1.0","main":"lib/odbc.js","homepage":"https://github.com/ibmdb/node-ibm_db/","repository":"https://github.com/ibmdb/node-ibm_db","engines":{"node":">=0.10.0"},"scripts":{"install":"node installer/driverInstall.js","test":"cd test && node run-tests.js"},"dependencies":{"bindings":"~1.2.1","fstream":"~1.0.10","nan":"~2.3.5","q":"^1.4.1","targz":"^1.0.1","unzipper":"~0.7.2","request":"^2.75.0"},"keywords":["node","odbc","db2","driver"],"license":"MIT","devDependencies":{"async":"^2.0.1","bluebird":"^3.4.3","moment":"^2.14.1"},"versions":[{"number":"0.0.1","date":"2014-01-22T10:40:48.784Z"},{"number":"0.0.2","date":"2014-10-27T10:00:50.034Z"},{"number":"0.0.3","date":"2014-10-29T13:49:15.937Z"},{"number":"0.0.4","date":"2014-12-10T10:10:13.512Z"},{"number":"0.0.5","date":"2014-12-10T10:36:20.957Z"},{"number":"0.0.6","date":"2014-12-11T08:23:53.920Z"},{"number":"0.0.7","date":"2015-02-23T10:32:51.067Z"},{"number":"0.0.8","date":"2015-02-23T10:53:51.817Z"},{"number":"0.0.9","date":"2015-06-10T18:51:25.531Z"},{"number":"0.0.10","date":"2015-06-29T17:26:58.159Z"},{"number":"0.0.11","date":"2015-07-08T20:12:33.682Z"},{"number":"0.0.12","date":"2015-07-30T16:11:39.928Z"},{"number":"0.0.13","date":"2015-08-04T09:01:11.691Z"},{"number":"0.0.14","date":"2015-08-11T19:32:13.572Z"},{"number":"0.0.15","date":"2015-09-15T16:03:10.725Z"},{"number":"0.0.16","date":"2016-01-05T07:15:54.462Z"},{"number":"0.0.17","date":"2016-01-11T16:18:57.835Z"},{"number":"0.0.18","date":"2016-01-28T17:42:03.123Z"},{"number":"0.0.19","date":"2016-01-30T10:17:23.079Z"},{"number":"1.0.0","date":"2016-07-08T13:39:20.769Z"},{"number":"1.0.1","date":"2016-10-31T20:55:56.450Z"},{"number":"1.0.2","date":"2017-01-17T09:12:06.761Z"},{"number":"2.0.0","date":"2017-02-22T17:56:53.426Z"},{"number":"2.1.0","date":"2017-07-10T09:01:45.513Z"}],"readme":"# node-ibm_db\n\nAn asynchronous/synchronous interface for node.js to IBM DB2 and IBM Informix.\n\n**Supported Platforms** - Windows64, MacOS64, Linuxx64, Linuxia32, AIX, Linux on z and Linux on Power PC.\n\n## Prerequisite\n\n- For higher versions of node (When building with Node 4 onwards) the compiler must support\nC++11. Note the default compiler on RHEL 6 does not have the required support.\nInstall a newer compiler or upgrade older one.\n\n- Python 2.7 is needed by node-gyp.\n\n- You need not to install any db2 ODBC client driver for connectivity. `ibm_db` itself download and install odbc/cli driver from ibm website during installation. Just install `ibm_db` and it is ready for use.\n\n- Recommended versions of node.js is V4.x, V6.x and V7.x. Support for node.js V0.12.x is deprecated on Windows and will be discontinued from next release.\n\n## Install\n\nYou may install the package using npm install command:\n\n```\nnpm install ibm_db\n```\n\n> For more installation details please refer:  [INSTALLAION GUIDE](https://github.com/ibmdb/node-ibm_db/blob/master/INSTALL.md)\n\n\n### Important Environment Variables and Download Essentials \n\n`IBM_DB_HOME :`\n\n- USE: Set this environment variable if you want to avoid downloading of clidriver from the [IBM Hosted URL](#downloadCli) or from the internet.\n\n- How: Set **IBM_DB_HOME** environment variable to a pre-installed **db2 client or server installation directory**.\n\n`IBM_DB_INSTALLER_URL :`\n\n- USE: Set this environment variable to by-pass the IBM Hosted URL for downloading odbc/clidriver.\n\n- HOW: Set **IBM_DB_INSTALLER_URL** environment variable with alternate odbc/clidriver downloading URL link or with locally downloaded \"tar/zipped clidriver's parent directory path.\n\n- TIP: If you don't have alternate hosting URL then, you can download the tar/zipped file of clidriver from the [IBM Hosted URL](#downloadCli) and can set the **IBM_DB_INSTALLER_URL** environment variable to the downloaded \"tar/zipped clidriver's\" parent directory path. No need to untar/unzip the clidriver and do not change the name of downloaded file.\n\n\n### <a name=\"downloadCli\"></a> Download clidriver ([based on your platform & architecture](#systemDetails)) from the below IBM Hosted URL:\n> [DOWNLOAD CLI DRIVER](https://public.dhe.ibm.com/ibmdl/export/pub/software/data/db2/drivers/odbc_cli/)\n\n#### <a name=\"systemDetails\"></a> Cli Drivers for Specific Platform and Architecture\n\n|Platform      |Architecture    |Cli Driver               |Supported     |\n| :---:        |  :---:         |  :---:                  |  :---:       |\n|AIX           |  ppc           |aix32_odbc_cli.tar.gz    |  Yes         |\n|              |  others        |aix64_odbc_cli.tar.gz    |  Yes         |\n|Darwin        |  x64           |macos64_odbc_cli.tar.gz  |  Yes         |\n|Linux         |  x64           |linuxx64_odbc_cli.tar.gz |  Yes         |\n|              |  s390x         |s390x64_odbc_cli.tar.gz  |  Yes         |\n|              |  s390          |s390_odbc_cli.tar.gz     |  Yes         |\n|              |  ppc64  (LE)   |ppc64le_odbc_cli.tar.gz  |  Yes         |\n|              |  ppc64         |ppc64_odbc_cli.tar.gz    |  Yes         |\n|              |  ppc32         |ppc32_odbc_cli.tar.gz    |  Yes         |\n|              |  others        |linuxia32_odbc_cli.tar.gz|  Yes         |\n|Windows       |  x64           |ntx64_odbc_cli.zip       |  Yes         |\n|              |  x32           |nt32_odbc_cli.zip        |  Not supported with node-ibm_db          |\n\n\n\n## Quick Example\n\n```javascript\nvar ibmdb = require('ibm_db');\n\nibmdb.open(\"DATABASE=<dbname>;HOSTNAME=<myhost>;UID=db2user;PWD=password;PORT=<dbport>;PROTOCOL=TCPIP\", function (err,conn) {\n  if (err) return console.log(err);\n  \n  conn.query('select 1 from sysibm.sysdummy1', function (err, data) {\n    if (err) console.log(err);\n    else console.log(data);\n\n    conn.close(function () {\n      console.log('done');\n    });\n  });\n});\n```\n\n## Un-Install\n\nTo uninstall node-ibm_db from your system, just delete the node-ibm_db or ibm_db directory.\n\n\n## For z/OS and iSeries Connectivity\n\nFor connectivity against DB2 for LUW or Informix Server using node-ibm_db, \nno license file is required. However, if you want to use node-ibm_db \nagainst DB2 for z/OS or DB2 for i(AS400) Servers, you must have db2connect \nlicense if server is not db2connectactivated to accept unlimited number of \nclient connection. You can buy db2connect license from IBM. The connectivity \ncan be enabled either on server using db2connectactivate utility or on client \nusing client side license file. If you have client side license file, just \ncopy it under `.../ibm_db/installer/clidriver/license` folder to be effective. \n\n## For AIX install issue\n\nIf `npm install ibm_db` aborts with \"Out Of Memory\" error on AIX, first run `ulimit -d unlimited` and then `npm install ibm_db`.\n\n## For Missing Package/Binding issue\n\nIf your application is able to connect to IBM Database Server but query execution is throwing SQL0805N error, run below commnads to fix the package related issues:\n```\ncd .../ibm_db/installer\nsource setenv.sh\ndb2cli bind $IBM_DB_HOME/bnd/@db2cli.lst -database <dbname>:<hostname>:<port> -user <dbuser> -passwd <passwd> -options \"grant public action replace blocking no\"\n```\n\nIf above command prints 0 error at end, then you can proceed to run query. If \nit reports non-zero error, open a new issue on github and share the output \nof above `db2cli bind` command along with query execution error.\n\nAlternatively, if you have any other DB2 client with CLP, you can bind packages using db2 bind command too. f.e. use below command against DB2 for z/OS server:\n```\ndb2 bind .../sqllib/bnd/@ddcsmvs.lst action replace grant public sqlerror continue messages msg.txt\n```\nNote: \"db2cli bind\" command print the logs on output prompt, so you need to redirect output to some file to capture it. \n    To capture logs of \"db2 bind\" command, you need to use `messages` option as in above example.\n\n\n## Need Help?\n\nIf you encountered any issue with ibm_db, first check for existing solution or\nwork-around under `issues` or on google groups forum. Links are:   \n    \nhttps://github.com/ibmdb/node-ibm_db/issues    \nhttps://groups.google.com/forum/#!forum/node-ibm_db   \n   \nIf no solution found, you can open a new issue on github or start a new topic in google groups.\n\n## Database APIs\n\nThe simple api is based on instances of the `Database` class. You may get an \ninstance in one of the following ways:\n\n```javascript\nrequire(\"ibm_db\").open(connectionString, function (err, conn){\n  //conn is already open now if err is falsy\n});\n```\n\nor by using the helper function:\n\n```javascript\nvar ibmdb = require(\"ibm_db\")();\n``` \n\nor by creating an instance with the constructor function:\n\n```javascript\nvar Database = require(\"ibm_db\").Database\n  , ibmdb = new Database();\n```\n\n1.  [.open(connectionString, [options,] callback)](#openApi)\n2.  [.openSync(connectionString)](#openSyncApi)\n3.  [.query(sqlQuery [, bindingParameters], callback)](#queryApi)\n4.  [.querySync(sqlQuery [, bindingParameters])](#querySyncApi) \n5.  [.queryStream(sqlQuery [, bindingParameters])](#queryStreamApi) \n6.  [.close(callback)](#closeApi)\n7.  [.closeSync()](#closeSyncApi)\n8.  [.prepare(sql, callback)](#prepareApi)\n9.  [.prepareSync(sql)](#prepareSyncApi)\n10. [.execute([bindingParameters], callback)](#executeApi)\n11. [.executeSync([bindingParameters])](#executeSyncApi)\n12. [.executeNonQuery([bindingParameters], callback)](#executeNonQueryApi)\n13. [.bind(bindingParameters, callback)](#bindApi)\n14. [.bindSync(bindingParameters)](#bindSyncApi)\n15. [.beginTransaction(callback)](#beginTransactionApi)\n16. [.beginTransactionSync()](#beginTransactionSyncApi)\n17. [.commitTransaction(callback)](#commitTransactionApi)\n18. [.commitTransactionSync()](#commitTransactionSyncApi)\n19. [.rollbackTransaction(callback)](#rollbackTransactionApi)\n20. [.rollbackTransactionSync()](#rollbackTransactionSyncApi)\n21. [.debug(value)](#enableDebugLogs)\n\n*   [**Connection Pooling APIs**](#PoolAPIs)\n*   [**bindingParameters**](#bindParameters)\n*   [**CALL Statement**](#callStmt)\n*   [**Build Options**](#buildOptions)\n\n\n### <a name=\"openApi\"></a> 1) .open(connectionString, [options,] callback)\n\nOpen a connection to a database.\n\n* **connectionString** - The connection string for your database\n* **options** - _OPTIONAL_ - Object type. Can be used to avoid multiple \n    loading of native ODBC library for each call of `.open`. Also, can be used\n    to pass connectTimeout value and systemNaming(true/false) for i5/OS server.\n* **callback** - `callback (err, conn)`\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , connStr = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=passwd\";\n\nibmdb.open(connStr, function (err, connection) {\n    if (err) \n    {\n      console.log(err);\n      return;\n    }\n    connection.query(\"select 1 from sysibm.sysdummy1\", function (err1, rows) {\n      if (err1) console.log(err1);\n      else console.log(rows);\n      connection.close(function(err2) { \n        if(err2) console.log(err2);\n      });\n    });\n});\n\n```\n\n* **Secure Database Connection using SSL/TSL** - ibm_db supports secure connection to Database Server over SSL same as ODBC/CLI driver. If you have SSL Certificate from server or an CA signed certificate, just use it in connection string as below:\n\n```javascript\nconnStr = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=passwd;Security=SSL;SSLServerCertificate=<cert.arm_file_path>;\";\n```\n\nTo connect to dashDB in bluemix, just use below connection string:\n```\nconnStr = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=passwd;Security=SSL\";\n```\nYou can also create a KeyStore DB using GSKit command line tool and use it in connection string along with other keywords as documented in [DB2 Infocenter](http://www.ibm.com/support/knowledgecenter/en/SSEPGG_10.5.0/com.ibm.db2.luw.admin.sec.doc/doc/t0053518.html).\n\n### <a name=\"openSyncApi\"></a> 2) .openSync(connectionString [,options])\n\nSynchronously open a connection to a database.\n\n* **connectionString** - The connection string for your database\n* **options** - _OPTIONAL_ - Object type. Can be used to avoid multiple \n    loading of native ODBC library for each call of `.open`. Also, can be used\n    to pass connectTimeout value and systemNaming value for i5/OS server.\n\n```javascript\nvar ibmdb = require(\"ibm_db\"),\n\tconnString = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\";\n\ntry {\n      var option = { connectTimeout : 40, systemNaming : true };// Connection Timeout after 40 seconds.\n      var conn = ibmdb.openSync(connString, option);\n      conn.query(\"select * from customers fetch first 10 rows only\", function (err, rows) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t  console.log(rows);\n\t\t}\n\t\tconn.close();\t\n      });\n    } catch (e) {\n      console.log(e.message);\n    }\n```\n\n### <a name=\"queryApi\"></a> 3) .query(sqlQuery [, bindingParameters], callback)\n\nIssue an asynchronous SQL query to the database which is currently open.\n\n* **sqlQuery** - The SQL query to be executed or an Object in the form {\"sql\": sqlQuery, \"params\":bindingParameters, \"noResults\": noResultValue}. noResults accepts only true or false values. If true - query() will not return any result. noResults must be true for CALL statements. \"sql\" field is mandatory in Object, others are _OPTIONAL_.\n\n* **bindingParameters** - _OPTIONAL_ - An array of values that will be bound to\n    any '?' characters in `sqlQuery`. bindingParameters in sqlQuery Object takes precedence over it.\n\n* **callback** - `callback (err, rows)`\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n\t, cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;\"\n\t;\n\nibmdb.open(cn, function (err, conn) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t// we now have an open connection to the database, so lets get some data.\n\t// Execute multiple query and get multiple result sets.\n    // In case of multiple resultset, query will return an array of result sets.\n    conn.query(\"select 1 from sysibm.sysdummy1;select 2 from sysibm.sysdummy1;\" +\n               \"select 3 from sysibm.sysdummy1\", function (err, rows) \n    {\n        if (err) {\n            console.log(err);\n        } else {\n            console.log(rows); // rows = [ [ { '1': 1 } ], [ { '1': 2 } ], [ { '1': 3 } ] ]\n        }\n    });\n});\n```\n\n### <a name=\"querySyncApi\"></a> 4) .querySync(sqlQuery [, bindingParameters])\n\nSynchronously issue a SQL query to the database that is currently open.\n\n* **sqlQuery** - The SQL query to be executed or an Object in the form {\"sql\": sqlQuery, \"params\":bindingParameters, \"noResults\": noResultValue}. noResults accepts only true or false values. If true - query() will not return any result. If noResults is true for CALL statement, querySync returns only OutParams. \"sql\" field is mandatory in Object, others are optional.\n\n* **bindingParameters** - _OPTIONAL_ - An array of values that will be bound to\n    any '?' characters in `sqlQuery`.\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password\";\n\nibmdb.open(cn, function(err, conn){\n\n  //blocks until the query is completed and all data has been acquired\n  var rows = conn.querySync(\"select * from customers fetch first 10 rows only\");\n\n  console.log(rows);\n});\n```\n\n### <a name=\"queryStreamApi\"></a> 5) .queryStream(sqlQuery [, bindingParameters])\n\nSynchronously issue a SQL query to the database that is currently open and returns\na Readable stream. Application can listen the events emmitted by returned stream\nand take action.\n\n* **sqlQuery** - The SQL query to be executed or an Object in the form {\"sql\": sqlQuery, \"params\":bindingParameters, \"noResults\": noResultValue}. noResults accepts only true or false values. If true - query() will not return any result. \"sql\" field is mandatory in Object, others are optional.\n\n* **bindingParameters** - _OPTIONAL_ - An array of values that will be bound to\n    any '?' characters in `sqlQuery`.\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn, function(err, conn)\n{\n    var stream = conn.queryStream(\"select 1 from sysibm.sysdummy1\");\n\n    stream.once('data', function (result) {\n      console.log(result);\n    }).once('error', function (err) {\n      conn.closeSync();\n      throw err;\n    }).once('end', function () {\n      conn.close(function(){ console.log(\"done.\") });\n    });\n});\n```\n\n### <a name=\"closeApi\"></a> 6) .close(callback)\n\nClose the currently opened database.\n\n* **callback** - `callback (err)`\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn, function (err, conn) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\t\n\t//we now have an open connection to the database\n\tconn.close(function (err) {\n\t\tconsole.log(\"the database connection is now closed\");\n\t});\n});\n```\n\n### <a name=\"closeSyncApi\"></a> 7) .closeSync()\n\nSynchronously close the currently opened database.\n\n```javascript\nvar ibmdb = require(\"ibm_db\")()\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\n//Blocks until the connection is open\nibmdb.openSync(cn);\n\n//Blocks until the connection is closed\nibmdb.closeSync();\n```\n\n### <a name=\"prepareApi\"></a> 8) .prepare(sql, callback)\n\nPrepare a statement for execution.\n\n* **sql** - SQL string to prepare\n* **callback** - `callback (err, stmt)`\n\nReturns a `Statement` object via the callback\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn,function(err,conn){\n  conn.prepare(\"insert into hits (col1, col2) VALUES (?, ?)\", function (err, stmt) {\n    if (err) {\n      //could not prepare for some reason\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    //Bind and Execute the statment asynchronously\n    stmt.execute(['something', 42], function (err, result) {\n      if( err ) console.log(err);  \n      else result.closeSync();\n\n      //Close the connection\n\t  conn.close(function(err){});\n    });\n  });\n});\n```\n\n### <a name=\"prepareSyncApi\"></a> 9) .prepareSync(sql)\n\nSynchronously prepare a statement for execution.\n\n* **sql** - SQL string to prepare\n\nReturns a `Statement` object\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn,function(err,conn){\n  var stmt = conn.prepareSync(\"select * from employee where empid = ?\");\n\n  //Bind and Execute the statment asynchronously\n  stmt.execute([142], function (err, result) {\n    data = result.fetchAllSync();\n    console.log(data);\n    result.closeSync();\n    stmt.closeSync();\n\n    //Close the connection\n\tconn.close(function(err){});\n  });\n});\n```\n\n### <a name=\"executeApi\"></a> 10) .execute([bindingParameters], callback)\n\nExecute a prepared statement.\n\n* **bindingParameters** - OPTIONAL - An array of values that will be bound to any '?' characters in prepared sql statement. Values can be array or object itself. Check [bindingParameters](#bindParameters) doc for detail.\n* **callback** - `callback (err, result, outparams)`\noutparams - will have result for INOUT and OUTPUT parameters of Stored Procedure.\n\nReturns a `Statement` object via the callback\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn,function(err,conn){\n  conn.querySync(\"create table mytab (id int, photo BLOB(30K))\");\n  conn.prepare(\"insert into mytab (id, photo) VALUES (?, ?)\", function (err, stmt) {\n    if (err) {\n      //could not prepare for some reason\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    // Create params object\n    var img = {ParamType:\"FILE\", DataType: \"BLOB\", \"Data\": \"smile.jpg\"};\n\n    //Bind and Execute the statment asynchronously\n    stmt.execute([ 42, img ], function (err, result) {\n      if( err ) console.log(err);  \n      else result.closeSync();\n\n      //Close the connection\n      stmt.closeSync();\n\t  conn.close(function(err){});\n    });\n  });\n});\n```\n\n### <a name=\"executeSyncApi\"></a> 11) .executeSync([bindingParameters])\n\nExecute a prepared statement synchronously.\n\n* **bindingParameters** - OPTIONAL - An array of values that will be bound to any '?' characters in prepared sql statement. Values can be array or object itself. Check [bindingParameters](#bindParameters) doc for detail. Instead of passing bindingParameters to executeSync(), parameters can also be binded using bind() or bindSync() APIs.\n\nReturns a `Statement` object. If prepared statement is a stored procedure with INOUT or OUT parameter, executeSync() returns an array of two elements in the form [stmt, outparams]. The first element of such array is an `Statement` object and second element is an `Array` of INOUT and OUTPUT parameters in sequence.\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn,function(err,conn){\n  var stmt = conn.prepareSync(\"select empname from emptable where empid = ?\");\n\n  //Bind and Execute the statment asynchronously\n  var result = stmt.executeSync([142]);\n  var data = result.fetchAllSync({fetchMode:3}); // Fetch data in Array mode.\n  console.log(data);\n  result.closeSync();\n  stmt.closeSync();\n\n  //Close the connection\n  conn.close(function(err){});\n});\n```\n\n### <a name=\"executeNonQueryApi\"></a> 12) .executeNonQuery([bindingParameters], callback)\n\nExecute a non query prepared statement and returns the number of rows affected in a table by the statement.\n\n* **bindingParameters** - OPTIONAL - An array of values that will be bound to any '?' characters in prepared sql statement. Values can be array or object itself. Check [bindingParameters](#bindParameters) doc for detail.\n* **callback** - `callback (err, affectedRowCount)`\n\nIt returns the number of rows in a table that were affected by an UPDATE, an INSERT, a DELETE, or a MERGE statement issued against the table, or a view based on the table. If no rows are affected, it returns -1 via the callback function.\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn,function(err,conn){\n  conn.querySync(\"create table mytab (id int, text varchar(30))\");\n  conn.prepare(\"insert into mytab (id, text) VALUES (?, ?)\", function (err, stmt) {\n    if (err) {\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    //Bind and Execute the statment asynchronously\n    stmt.executeNonQuery([ 42, 'hello world' ], function (err, ret) {\n      if( err ) console.log(err);  \n      else console.log(\"Affected rows = \" + ret);\n\n      //Close the connection\n\t  conn.close(function(err){});\n    });\n  });\n});\n```\n\n### <a name=\"bindApi\"></a> 13) .bind(bindingParameters, callback)\n\nBinds the parameters for prepared statement.\n\n* **bindingParameters** - An array of values that will be bound to any '?' characters in prepared sql statement. Values can be array or object itself. Check [bindingParameters](#bindParameters) doc for detail.\n* **callback** - `callback (err)`\n\n### <a name=\"bindSyncApi\"></a> 14) .bindSync(bindingParameters)\n\nBinds the parameters for prepared statement synchronously. If `bindSync()` is used, then no need to pass `bindingParameters` to next `execute()` or `executeSync()` statement.\n\n* **bindingParameters** - An array of values that will be bound to any '?' characters in prepared sql statement. Values can be array or object itself. Check [bindingParameters](#bindParameters) doc for detail.\n\n### <a name=\"beginTransactionApi\"></a> 15) .beginTransaction(callback)\n\nBegin a transaction\n\n* **callback** - `callback (err)`\n\n### <a name=\"beginTransactionSyncApi\"></a> 16) .beginTransactionSync()\n\nSynchronously begin a transaction\n\n### <a name=\"commitTransactionApi\"></a> 17) .commitTransaction(callback)\n\nCommit a transaction\n\n* **callback** - `callback (err)`\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn, function(err,conn) {\n\n  conn.beginTransaction(function (err) {\n    if (err) {\n      //could not begin a transaction for some reason.\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\n    conn.commitTransaction(function (err) {\n      if (err) {\n        //error during commit\n        console.log(err);\n        return conn.closeSync();\n      }\n\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n     //Close the connection\n     conn.closeSync();\n    });\n  });\n});\n```\n\n### <a name=\"commitTransactionSyncApi\"></a> 18) .commitTransactionSync()\n\nSynchronously commit a transaction\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn, function(err,conn) {\n\n  conn.beginTransaction(function (err) {\n    if (err) {\n      //could not begin a transaction for some reason.\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\n    conn.commitTransactionSync();\n\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n     //Close the connection\n    conn.closeSync();\n  });\n});\n```\n\n### <a name=\"rollbackTransactionApi\"></a> 19) .rollbackTransaction(callback)\n\nRollback a transaction\n\n* **callback** - `callback (err)`\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn, function(err,conn) {\n\n  conn.beginTransaction(function (err) {\n    if (err) {\n      //could not begin a transaction for some reason.\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\n    conn.rollbackTransaction(function (err) {\n      if (err) {\n        //error during rollback\n        console.log(err);\n        return conn.closeSync();\n      }\n\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n     //Close the connection\n     conn.closeSync();\n    });\n  });\n});\n```\n\n### <a name=\"rollbackTransactionSyncApi\"></a> 20) .rollbackTransactionSync()\n\nSynchronously rollback a transaction\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.open(cn, function(err,conn) {\n\n  conn.beginTransaction(function (err) {\n    if (err) {\n      //could not begin a transaction for some reason.\n      console.log(err);\n      return conn.closeSync();\n    }\n\n    var result = conn.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\n    conn.rollbackTransactionSync();\n\n    console.log(conn.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n     //Close the connection\n    conn.closeSync();\n  });\n});\n```\n\n### <a name=\"enableDebugLogs\"></a> 21) .debug(value)\n\nEnable console logs.\n\n* **value** - true/false.\n\n```javascript\nvar ibmdb = require(\"ibm_db\")\n  , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\nibmdb.debug(true);  // **==> ENABLE CONSOLE LOGS. <==**\n\n[ibmdb.open](#openApi)(cn, function (err, connection) {\n    if (err)\n    {\n        console.log(err);\n        return;\n    }\n    connection.query(\"select 1 from sysibm.sysdummy1\", function (err1, rows) {\n        if (err1) console.log(err1);\n        else console.log(rows);\n\n        ibmdb.debug(false);  // Disable console logs.\n\n        connection.close(function(err2) {\n            if(err2) console.log(err2);\n        });\n    });\n});\n```\n\n## <a name=\"PoolAPIs\"></a>Connection Pooling APIs\n\nnode-ibm_db reuses node-odbc pool. \nThe node-odbc `Pool` is a rudimentary connection pool which will attempt to have\ndatabase connections ready and waiting for you when you call the `open` method.\n\nIf you use a `Pool` instance, any connection that you close will get added to \nthe list of available connections immediately. Such connection will be used \nthe next time you call `Pool.open()` for the same connection string.\n\nFor applications using multiple connections simultaneously, it is recommended to\nuse Pool.open instead of [ibmdb.open](#openApi).\n\n1.  [.open(connectionString, callback)](#openPoolApi)\n2.  [.close(callback)](#closePoolApi)\n3.  [.init(N, connStr)](#initPoolApi)\n4.  [.setMaxPoolSize(N)](#setMaxPoolSize)\n5.  [.setConnectTimeout(seconds)](#setConnectTimeout)\n\n### <a name=\"openPoolApi\"></a> 1) .open(connectionString, callback)\n\nGet a `Database` instance which is already connected to `connectionString`\n\n* **connectionString** - The connection string for your database\n* **callback** - `callback (err, db)`\n\n```javascript\nvar Pool = require(\"ibm_db\").Pool\n\t, pool = new Pool()\n    , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\npool.open(cn, function (err, db) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//db is now an open database connection and can be used like normal\n\t//if we run some queries with db.query(...) and then call db.close();\n\t//a connection to `cn` will be re-opened silently behind the scense\n\t//and will be ready the next time we do `pool.open(cn)`\n});\n```\n\n### <a name=\"closePoolApi\"></a> 2) .close(callback)\n\nClose all connections in the `Pool` instance\n\n* **callback** - `callback (err)`\n\n```javascript\nvar Pool = require(\"ibm_db\").Pool\n\t, pool = new Pool()\n    , cn = \"DATABASE=dbname;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=dbuser;PWD=xxx\";\n\npool.open(cn, function (err, db) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//db is now an open database connection and can be used like normal\n\t//but all we will do now is close the whole pool\n\t\n\tpool.close(function () {\n\t\tconsole.log(\"all connections in the pool are closed\");\n\t});\n});\n```\n\n### <a name=\"initPoolApi\"></a> 3) .init(N, connStr)\n\nInitialize `Pool` with N no of active connections using supplied connection string.\n\n* **N** - No of connections to be initialized.\n* **connStr** - The connection string for your database\n```\nvar ret = pool.init(5, connStr);\nif(ret != true)\n{\n    console.log(ret);\n    return false;\n}\n\npool.open(connStr, function(err, db) { ...\n```\n\n### <a name=\"setMaxPoolSize\"></a> 4) .setMaxPoolSize(N)\n\nNumber of maximum connection to database supported by current pool.\n\n* **N** - No of maximum connections in the pool.\n```\npool.setMaxPoolSize(20);\npool.open(connStr, function(err, db) { ...\n```\n\n### <a name=\"setConnectTimeout\"></a> 5) .setConnectTimeout(seconds)\n\nNo of seconds pool.open() will wait for a connection to be available if all connections of the pool is in use and maxPoolSize is reached. Post connectTimeout, pool.open() will return error message.\n```\npool.setConnectTimeout(50);\npool.setMaxPoolSize(20);\npool.open(connStr, function(err, db) { ...\n```\nCheck test file [test-max-pool-size.js](https://github.com/ibmdb/node-ibm_db/blob/master/test/test-max-pool-size.js) to know usage of `.init, .setMaxPoolSize and .setConnectTimeout` APIs.\n\n## <a name=\"bindParameters\"></a>bindingParameters\n\nBind arguments for each parameter marker(?) in SQL query.\nThese parameters can be used with query(), querySync, bind(), execute() APIs.\nbindingParameters is an array of Values like: [val1, val2, ...]\nEach value in itself can be an array or Object holing multiple bind options.\nIf parameters are not an integer or string, it is recomended to pass an Object with different bind options. The object can have following keys:\n\n`{\"ParamType\":\"INPUT\", CType:\"BINARY\", SQLType:\"BLOB\",DataType: \"BLOB\", Data:imgfile}`\n\nEither SQLType or DataType must be used. If SQLType is used, DataType will be ignored.\n\n* **ParmType**: Type of the Parameter. Supported Values are:\n - INPUT - Bind the parameter using SQL_PARAM_INPUT(defined in ibm_db/installer/clidriver/include/sqlext.h file). It is used as input value and it is the default value, if you don't use this key in object.\n - OUTPUT - Bind the parameter using SQL_PARAM_OUTPUT. It is basically used for Stored Procedure call which has output parameters.\n - INOUT - Bind the parameter using SQL_PARAM_INPUT_OUTPUT. It is also used for Stored Procedure call.\n - FILE  - It tells the Data is a filename that contains actual data to load. If you want to load an image to database, use this input type along with DataType as BLOB for binary file.  \n   f.e. `{ParamType: \"FILE\", DataType: \"BLOB\", Data: \"mypic.jpg\"}`\n\n* **CType**: C Data type of the parameter to be bound. Default value is CHAR.\n* **SQLType**: Data type of the parameter on Server. It is actually the column Type of the parameter. Default value is CHAR\n* **DataType**: Same as SQLType. Use either SQLType or DataType. Added for simple name. Default Value is CHAR.\n* **Data**: Its value is actuall data for the parameter. For binary data, it should represent the full buffer containing binary data. For ParamType:\"FILE\", it must have the filename on disc that contains data. It is mandatory key in the data Object.\n\n* Few example of bidningParameters that we can use in node.js program:\n```\n[18, 'string']\n[3, 5, 3.8, 'string', 9.1]\n[18, [1, 1, 1, 'string']]\n[[1, 1, 1, 18], [1, 1, 1, 'string']]\n[18, {ParamType:\"INPUT\", \"Data\": \"string\"}]\n[18, {ParamType:\"INPUT\", CType: \"CHAR\", SQLType: \"CHAR\", \"Data\": \"string\"}]\n[38, {ParamType:\"INPUT\", SQLType: \"CHAR\", \"Data\": \"string\"}]\n[38, {ParamType:\"INPUT\", DataType: \"CHAR\", \"Data\": \"string\"}]\n[[1,1,1,38], {\"Data\": \"string\"}]\n[38, {ParamType:\"INPUT\", DataType: \"CLOB\", \"Data\": var1}] - here var1 contains full CLOB data to be inserted.\n[38, {ParamType:\"FILE\", DataType: \"CLOB\", \"Data\": filename}] - here filename is the name of file which has large character data.\n```\nThe values in array parameters used in above example is not recommened to use as it is dificult to understand. These values are macro values from ODBC specification and we can directly use those values. To understand it, see the [SQLBindParameter](http://www.ibm.com/support/knowledgecenter/en/SSEPGG_10.5.0/com.ibm.db2.luw.apdv.cli.doc/doc/r0002218.html) documentation for DB2.\n\nPass bind parameters as Object if you want to insert a BLOB or CLOB data to DB2. Check below test files to know how to insert a BLOB and CLOB data from buffer and file:   \n\n - [test-blob-insert.js](https://github.com/ibmdb/node-ibm_db/blob/master/test/test-blob-insert.js) - To insert a BLOB and CLOB data using memory buffer. Application need to read the file contents and then use as bind parameter.\n - [test-blob-file.js](https://github.com/ibmdb/node-ibm_db/blob/master/test/test-blob-file.js) - To insert an image file and large text file directly to database without reading it by application.\n\n## <a name=\"callStmt\"></a>CALL Statement\n\n* If stored procedure has any OUT or INOUT parameter, always call it with \nparmeter markers only. i.e. pass the input values using bind params.\n\n* Pass the Bind Params as objects only.\n\n* If SP has result set to return, it will be returned in the array after out params. f.e. if SP has 2 out params and it returns 2 result set too, the result returned by query() or querySync() would be in the form [outValue1, outValue2, resultSet1, resultSet2]. Each resultset would be an array of row objects. \n\n* [test-call-stmt.js](https://github.com/ibmdb/node-ibm_db/blob/master/test/test-call-stmt.js) - Example using conn.querySync().\n\n* [test-call-async.js](https://github.com/ibmdb/node-ibm_db/blob/master/test/test-call-async.js) - Example using conn.query().\n\n* [test-sp-resultset.js](https://github.com/ibmdb/node-ibm_db/blob/master/test/test-sp-resultset.js) - Example using Out Params and Result Set using query() and querySync() APIs.\n\n* [test-sp-resultset-execute.js](https://github.com/ibmdb/node-ibm_db/blob/master/test/test-sp-resultset-execute.js) - Example using Out Params and Result Set using prepare() and execute() APIs.\n\n## <a name=\"buildOptions\"></a>Build Options\n\n### Debug\n\nIf you would like to enable debugging messages to be displayed you can add the \nflag `DEBUG` to the defines section of the `binding.gyp` file and then execute \n`node-gyp rebuild`.\n\n```javascript\n<snip>\n'defines' : [\n  \"DEBUG\"\n],\n<snip>\n```\n\n### Unicode\n\nBy default, UNICODE suppport is enabled. This should provide the most accurate\nway to get Unicode strings submitted to your database. For best results, you \nmay want to put your Unicode string into bound parameters. \n\nHowever, if you experience issues or you think that submitting UTF8 strings will\nwork better or faster, you can remove the `UNICODE` define in `binding.gyp`\n\n```javascript\n<snip>\n'defines' : [\n  \"UNICODE\"\n],\n<snip>\n```\n\n### timegm vs timelocal\n\nWhen converting a database time to a C time one may use `timegm` or `timelocal`. See\n`man timegm` for the details of these two functions. By default the node-ibm_db bindings\nuse `timelocal`. If you would prefer for it to use `timegm` then specify the `TIMEGM`\ndefine in `binding.gyp`\n\n```javascript\n<snip>\n'defines' : [\n  \"TIMEGM\"\n],\n<snip>\n```\n\n### Strict Column Naming\n\nWhen column names are retrieved from DB2 CLI, you can request by SQL_DESC_NAME or\nSQL_DESC_LABEL. SQL_DESC_NAME is the exact column name or none if there is none\ndefined. SQL_DESC_LABEL is the heading or column name or calculation. \nSQL_DESC_LABEL is used by default and seems to work well in most cases.\n\nIf you want to use the exact column name via SQL_DESC_NAME, enable the `STRICT_COLUMN_NAMES`\ndefine in `binding.gyp`\n\n```javascript\n<snip>\n'defines' : [\n  \"STRICT_COLUMN_NAMES\"\n],\n<snip>\n```\n\n## Tips\n\n### Using node < v0.10 on Linux\n\nBe aware that through node v0.9 the uv_queue_work function, which is used to \nexecute the ODBC functions on a separate thread, uses libeio for its thread \npool. This thread pool by default is limited to 4 threads.\n\nThis means that if you have long running queries spread across multiple \ninstances of ibmdb.Database() or using odbc.Pool(), you will only be able to \nhave 4 concurrent queries.\n\nYou can increase the thread pool size by using @developmentseed's [node-eio]\n(https://github.com/developmentseed/node-eio).\n\n#### install: \n```bash\nnpm install eio\n```\n\n#### usage:\n```javascript\nvar eio = require('eio'); \neio.setMinParallel(threadCount);\n```\n\n### Issues while connecting to Informix Server\n\nWhile using ibm_db against Informix server, you may get few issues if\nserver is not configured properly. Also, ibm_db connects to only DRDA port.\nSo, make sure drsoctcp of Informix is configured.\n\n#### SQL1042C Error\nIf ibm_db is returning SQL1042C error while connecting to server, use\n\"Authentication=SERVER\" in connection string. It should avoid the error.\nAlternatively, you can set Authentication in db2cli.ini file or db2dsdriver.cfg file too.\n\n#### code-set conversion error\nIf Informix server is not enabled for UNICODE clients or some code-set object\nfile is missing on server; server returns this error to ibm_db:\n[IBM][CLI Driver][IDS/UNIX64] Error opening required code-set conversion object file.\n\nTo avoid this error, remove UNICODE from binding.gyp file and rebuild the ibm_db.\n\nAlso to avoid above issues, you can run [ibm_db/installer/ifx.sh](https://github.com/ibmdb/node-ibm_db/blob/master/installer/ifx.sh) script on non-windows system.\n\n## Contribution\n\n[Contribution Guidelines for Contributing to the node-ibm_db](https://github.com/ibmdb/node-ibm_db/blob/master/cla_docs/Contributions.md)\n\n* Dan VerWeire (dverweire@gmail.com)\n* Lee Smith (notwink@gmail.com)\n* Bruno Bigras\n* Christian Ensel\n* Yorick\n* Joachim Kainz\n* Oleg Efimov\n* paulhendrix\n* IBM\n\n\n## License\n\nCopyright (c) 2013 Dan VerWeire <dverweire@gmail.com>\n\nCopyright (c) 2010 Lee Smith <notwink@gmail.com>\n\nCopyright (c) 2014 IBM Corporation <opendev@us.ibm.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","starsCount":11,"created":"2014-01-22T10:40:37.711Z","modified":"2017-08-02T00:57:47.547Z","lastPublisher":{"name":"ibmdb","email":"opendev@us.ibm.com"},"owners":[{"name":"ibmdb","email":"opendev@us.ibm.com"}],"other":{"_attachments":{},"_from":".","_id":"ibm_db","_nodeVersion":"7.5.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ibm_db-2.1.0.tgz_1499677304688_0.7970142241101712"},"_npmUser":{"name":"ibmdb","email":"opendev@us.ibm.com"},"_npmVersion":"4.1.2","_rev":"10-54231be895df7ade95731ce6eb36c5a6","_shasum":"77e462b910991a6e4eb1581aac48ae65d7b96aac","author":{"name":"IBM"},"bugs":{"url":"https://github.com/ibmdb/node-ibm_db/issues"},"contributors":[{"name":"IBM","email":"opendev@us.ibm.com"}],"directories":{"example":"examples","test":"test"},"dist-tags":{"latest":"2.1.0"},"dist":{"shasum":"77e462b910991a6e4eb1581aac48ae65d7b96aac","tarball":"https://registry.npmjs.org/ibm_db/-/ibm_db-2.1.0.tgz"},"maintainers":[{"name":"ibmdb","email":"opendev@us.ibm.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-02T00:57:47.547Z","created":"2014-01-22T10:40:37.711Z","0.0.1":"2014-01-22T10:40:48.784Z","0.0.2":"2014-10-27T10:00:50.034Z","0.0.3":"2014-10-29T13:49:15.937Z","0.0.4":"2014-12-10T10:10:13.512Z","0.0.5":"2014-12-10T10:36:20.957Z","0.0.6":"2014-12-11T08:23:53.920Z","0.0.7":"2015-02-23T10:32:51.067Z","0.0.8":"2015-02-23T10:53:51.817Z","0.0.9":"2015-06-10T18:51:25.531Z","0.0.10":"2015-06-29T17:26:58.159Z","0.0.11":"2015-07-08T20:12:33.682Z","0.0.12":"2015-07-30T16:11:39.928Z","0.0.13":"2015-08-04T09:01:11.691Z","0.0.14":"2015-08-11T19:32:13.572Z","0.0.15":"2015-09-15T16:03:10.725Z","0.0.16":"2016-01-05T07:15:54.462Z","0.0.17":"2016-01-11T16:18:57.835Z","0.0.18":"2016-01-28T17:42:03.123Z","0.0.19":"2016-01-30T10:17:23.079Z","1.0.0":"2016-07-08T13:39:20.769Z","1.0.1":"2016-10-31T20:55:56.450Z","1.0.2":"2017-01-17T09:12:06.761Z","2.0.0":"2017-02-22T17:56:53.426Z","2.1.0":"2017-07-10T09:01:45.513Z"},"users":{"edm00se":true,"eluttner":true,"tchey":true,"zambon":true,"xxronis":true,"jiahongwei":true,"brianmangan":true,"crostonj":true,"kennyjoseph":true,"fredcorn":true,"robin.xi":true}}}