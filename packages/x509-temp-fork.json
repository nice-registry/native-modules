{"name":"x509-temp-fork","version":"0.3.1","description":"Simple X509 certificate parser.","main":"index.js","repository":"https://github.com/Southern/node-x509","scripts":{"test":"node test/test","install":"node-gyp rebuild"},"license":"MIT","dependencies":{"nan":"2.2.0","promise-polyfill":"^6.0.2"},"gypfile":true,"gitHead":"a39f831578bb874313d930bd53537bd06fa1bdd3","homepage":"https://github.com/Southern/node-x509#readme","versions":[{"number":"0.3.1","date":"2017-07-07T19:40:30.693Z"}],"readme":"node-x509\n=========\n\n[![Build Status](https://travis-ci.org/Southern/node-x509.svg?branch=master)](https://travis-ci.org/Southern/node-x509)\n\nSimple X509 certificate parser.\n\n## Installation\n\nFrom NPM *(recommended)*: `npm install x509`\n\nBuilding and testing from source:\n```\nsudo npm install -g node-gyp\nnpm install\nnpm test\n```\n\n## Usage\nReading from a file:\n```js\nconst x509 = require('x509');\nvar issuer = x509.getIssuer(__dirname + '/certs/your.crt');\n```\n\nReading from a string:\n```js\nconst fs = require('fs'),\n      x509 = require('x509');\nvar issuer = x509.getIssuer(fs.readFileSync('./certs/your.crt').toString());\n```\n\n## Methods\n**Notes:**\n- `cert` may be a filename or a raw base64 encoded PEM string in any of these methods.\n\n#### x509.getAltNames(`cert`)\nParse certificate with `x509.parseCert` and return the alternate names.\n\n```js\nconst x509 = require('x509');\nvar altNames = x509.getAltNames(__dirname + '/certs/nodejitsu.com.crt');\n/*\naltNames = [ '*.nodejitsu.com', 'nodejitsu.com' ]\n*/\n```\n\n#### x509.getIssuer(`cert`)\nParse certificate with `x509.parseCert` and return the issuer.\n\n```js\nconst x509 = require('x509');\nvar issuer = x509.getIssuer(__dirname + '/certs/nodejitsu.com.crt');\n/*\nissuer = { countryName: 'GB',\n  stateOrProvinceName: 'Greater Manchester',\n  localityName: 'Salford',\n  organizationName: 'COMODO CA Limited',\n  commonName: 'COMODO High-Assurance Secure Server CA' }\n*/\n```\n\n#### x509.getSubject(`cert`)\nParse certificate with `x509.parseCert` and return the subject.\n\n```js\nconst x509 = require('x509');\nvar subject = x509.getSubject(__dirname + '/certs/nodejitsu.com.crt');\n/*\nsubject = { countryName: 'US',\n  postalCode: '10010',\n  stateOrProvinceName: 'NY',\n  localityName: 'New York',\n  streetAddress: '902 Broadway, 4th Floor',\n  organizationName: 'Nodejitsu',\n  organizationalUnitName: 'PremiumSSL Wildcard',\n  commonName: '*.nodejitsu.com' }\n*/\n```\n\n#### x509.parseCert(`cert`)\nParse subject, issuer, valid before and after date, and alternate names from certificate.\n\n```js\nconst x509 = require('x509');\nvar cert = x509.parseCert(__dirname + '/certs/nodejitsu.com.crt');\n/*\ncert = { subject:\n   { countryName: 'US',\n     postalCode: '10010',\n     stateOrProvinceName: 'NY',\n     localityName: 'New York',\n     streetAddress: '902 Broadway, 4th Floor',\n     organizationName: 'Nodejitsu',\n     organizationalUnitName: 'PremiumSSL Wildcard',\n     commonName: '*.nodejitsu.com' },\n  issuer:\n   { countryName: 'GB',\n     stateOrProvinceName: 'Greater Manchester',\n     localityName: 'Salford',\n     organizationName: 'COMODO CA Limited',\n     commonName: 'COMODO High-Assurance Secure Server CA' },\n  notBefore: Sun Oct 28 2012 20:00:00 GMT-0400 (EDT),\n  notAfter: Wed Nov 26 2014 18:59:59 GMT-0500 (EST),\n  altNames: [ '*.nodejitsu.com', 'nodejitsu.com' ],\n  signatureAlgorithm: 'sha1WithRSAEncryption',\n  fingerPrint: 'E4:7E:24:8E:86:D2:BE:55:C0:4D:41:A1:C2:0E:06:96:56:B9:8E:EC',\n  publicKey: {\n    algorithm: 'rsaEncryption',\n    e: '65537',\n    n: '.......' } }\n*/\n```\n\n\n#### x509.verify(`cert`, `CABundle`, function(err, result){ /*...*/})\n\nPerforms basic certificate validation against a bundle of ca certificates.\n\nIt accepts an error-first callback as first argument. If the error is null, then\nthe certificate is valid.\n\nThe error messages are the same returned by openssl: [x509_verify_cert_error_string](https://www.openssl.org/docs/man1.0.2/crypto/X509_STORE_CTX_get_error.html)\n\nThe cert and CABundle arguments may be any combination of paths or buffers.\n\n```js\nconst x509 = require('x509');\n\nx509.verify(\n  __dirname + '/certs/user.com.crt',\n  __dirname + 'enduser-example.com.chain',\n  function(err, result){ /*...*/}\n);\n\n```\n\n## Examples\nChecking the date to make sure the certificate is active:\n```js\nconst x509 = require('x509');\nvar cert = x509.parseCert('yourcert.crt'),\n    date = new Date();\n\nif (cert.notBefore > date) {\n  // Certificate isn't active yet.\n}\nif (cert.notAfter < date) {\n  // Certificate has expired.\n}\n```\n\n## License\n\nMIT\n\n#### Alternative implementation / build issues\nIf you are suffering from hard to fix build issues, there is an alternative (pure javascript) implementation using emscripten: https://github.com/encharm/x509.js (based on node-x509, slightly different API)\n","created":"2017-07-07T19:40:30.693Z","modified":"2017-07-07T19:40:30.693Z","lastPublisher":{"name":"scottmas","email":"scottmortonashton@gmail.com"},"owners":[{"name":"scottmas","email":"scottmortonashton@gmail.com"}],"other":{"_attachments":{},"_id":"x509-temp-fork","_nodeVersion":"8.0.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/x509-temp-fork-0.3.1.tgz_1499456429253_0.4271523642819375"},"_npmUser":{"name":"scottmas","email":"scottmortonashton@gmail.com"},"_npmVersion":"5.0.3","_rev":"1-7f2f7a4e1e741ffb03e8b9d084abe0d7","author":{"name":"Colton Baker"},"bugs":{"url":"https://github.com/Southern/node-x509/issues"},"directories":{},"dist-tags":{"latest":"0.3.1"},"dist":{"integrity":"sha512-wdx+k21jRud2w3TlHSm+T32cp43Ex4NoMJvjxGtBkDrQpbXqq7AURQa/4wcmueD0OsamC3A/lcWpeJpBOHJSKg==","shasum":"88bed34f54def6f67ea66d2d1299a0432d4a1fbf","tarball":"https://registry.npmjs.org/x509-temp-fork/-/x509-temp-fork-0.3.1.tgz"},"maintainers":[{"name":"scottmas","email":"scottmortonashton@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-07T19:40:30.693Z","created":"2017-07-07T19:40:30.693Z","0.3.1":"2017-07-07T19:40:30.693Z"}}}