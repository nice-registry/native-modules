{"name":"int64-native","version":"0.4.0","description":"A simple uint64_t wrapper for JavaScript","keywords":["types","int64","bigint"],"homepage":"https://github.com/candu/node-int64-native","main":"int64","scripts":{"install":"node-gyp configure && node-gyp build","test":"npm install && mocha"},"devDependencies":{"chai":"1.5.x","mocha":"1.8.x"},"license":"MIT","dependencies":{"bindings":"1.2.x","nan":"^2.0.8"},"gitHead":"ffeccd107c8a049d9b6286f426de23d2f97726af","versions":[{"number":"0.1.0","date":"2013-05-07T12:48:52.537Z"},{"number":"0.2.0","date":"2013-07-10T13:35:01.266Z"},{"number":"0.2.1","date":"2014-01-18T23:16:43.848Z"},{"number":"0.3.0","date":"2014-04-16T00:28:07.770Z"},{"number":"0.3.1","date":"2014-04-16T00:34:17.612Z"},{"number":"0.3.2","date":"2014-05-03T15:17:20.006Z"},{"number":"0.4.0","date":"2015-09-02T22:02:55.560Z"}],"readme":"# int64-native\n\n`int64-native` is a simple `uint64_t` wrapper for JavaScript, enabling the\nuse of 64-bit unsigned integers from node.\n\n## Why?\n\n`int64-native` was originally developed to support reasonable handling of\n64-bit ID columns in databases. There are other 64-bit integer modules out\nthere, but AFAICT all of them are pure JavaScript; native `uint64_t` seemed\nlike a better way to handle this!\n\nThe one caveat is that you won't be able to use this browser-side. However,\nyou can use the string representation to pass 64-bit values from server to\nclient.\n\n## Installing\n\n### via npm\n\n    npm install int64-native\n\n### from source\n\n    git clone git://github.com/candu/node-int64-native.git\n    cd node-int64-native\n    npm install\n\n`int64-native` is built using `node-gyp`.\n\n## Usage\n\nAll of the following examples are borrowed from `test/int64.js`, which you\ncan run via\n\n    npm test\n\n### Including\n\n`require()` gives you direct access to the constructor:\n\n    var Int64 = require('int64-native');\n\n### Constructor\n\nYou can create an `Int64` as follows:\n\n    var x = new Int64(),\n        y = new Int64(42),\n        z = new Int64(0xfedcba98, 0x76543210),\n        w = new Int64('0xfedcba9876543210')\n    expect(x.toString()).to.equal('0x0000000000000000');\n    expect(y.toString()).to.equal('0x000000000000002a');\n    expect(z.toString()).to.equal('0xfedcba9876543210');\n    expect(w.toString()).to.equal('0xfedcba9876543210');\n\nThe last two methods allow you to represent `uint64_t` values larger than\n`(1 << 53) - 1`.\n\n### Type Conversions\n\n`Int64` exposes `toNumber()`, `valueOf()` for converting to numeric values:\n\n    var a = new Int64(2),\n        b = new Int64(3);\n    expect(a + b).to.equal(5);\n    var x = new Int64(),\n        y = new Int64(42),\n        z = new Int64(0xfedcba98, 0x76543210),\n        w = new Int64('0xfedcba9876543210')\n    expect(+x).to.equal(0);\n    expect(+y).to.equal(42);\n    expect(+z).to.equal(Infinity);\n    expect(+w).to.equal(Infinity);\n\nValues larger than `(1 << 53) - 1` will be converted to `Infinity`, since\nthey cannot be accurately represented using JavaScript's `Number` type.\n\nAs you can see from the examples so far, `toString()` produces the hex string\ncorresponding to an `Int64`.\n\n### Conversion to Decimal String\n\n`Int64` also exposes `toSignedDecimalString()` and `toUnsignedDecimalString()` for converting to decimal strings:\n\n    var minusOne = new Int64('0xFFFFFFFFFFFFFFFF');\n    expect(minusOne.toSignedDecimalString()).to.equal('-1');\n    expect(minusOne.toUnsignedDecimalString()).to.equal('18446744073709551615');\n\n### Comparison\n\nFor cases where you wish to sort or compare `Int64` values, `equals()` and\n`compare()` are provided:\n\n    var a = new Int64(2),\n        b = new Int64(3);\n    expect(a.equals(a)).to.be.true;\n    expect(a.equals(b)).to.be.false;\n    expect(a.compare(a)).to.equal(0);\n    expect(a.compare(b)).to.equal(-1);\n    expect(b.compare(a)).to.equal(1);\n\n### Bit Manipulation\n\nThere are several operations for bit-level manipulation of `Int64` values:\n\n    var x = new Int64('0xfedcba9876543210');\n    expect(x.high32().toString(16)).to.equal('fedcba98');\n    expect(x.low32().toString(16)).to.equal('76543210');\n    var y = x.and(new Int64(0xffff)),\n        z = x.or(new Int64(0xffff)),\n        w = x.xor(new Int64('fffffffffffffffff'));\n    expect(y.toString()).to.equal('0x0000000000003210');\n    expect(z.toString()).to.equal('0xfedcba987654ffff');\n    expect(w.toString()).to.equal('0x0123456789abcdef');\n    var a = new Int64(7),\n        b = a.shiftLeft(1),\n        c = a.shiftRight(1);\n    expect(b.toString()).to.equal('0x000000000000000e');\n    expect(c.toString()).to.equal('0x0000000000000003');\n","created":"2013-05-07T12:48:49.170Z","modified":"2015-09-02T22:02:55.560Z","lastPublisher":{"name":"candu","email":"savage.evan@gmail.com"},"owners":[{"name":"candu","email":"savage.evan@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"int64-native","_nodeVersion":"0.12.5","_npmUser":{"name":"candu","email":"savage.evan@gmail.com"},"_npmVersion":"2.11.2","_rev":"1-241b2843aa994a651750cb6805560f1f","_shasum":"3da8f8c7a816e01d5686839320287e1cb669bedc","author":{"name":"Evan Savage","email":"savage.evan@gmail.com","url":"https://github.com/candu"},"directories":{},"dist-tags":{"latest":"0.4.0"},"dist":{"shasum":"3da8f8c7a816e01d5686839320287e1cb669bedc","tarball":"http://registry.npmjs.org/int64-native/-/int64-native-0.4.0.tgz"},"maintainers":[{"name":"candu","email":"savage.evan@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-09-02T22:02:55.560Z","created":"2013-05-07T12:48:49.170Z","0.1.0":"2013-05-07T12:48:52.537Z","0.2.0":"2013-07-10T13:35:01.266Z","0.2.1":"2014-01-18T23:16:43.848Z","0.3.0":"2014-04-16T00:28:07.770Z","0.3.1":"2014-04-16T00:34:17.612Z","0.3.2":"2014-05-03T15:17:20.006Z","0.4.0":"2015-09-02T22:02:55.560Z"}}}