{"name":"kv-node","version":"0.4.6","repository":"https://github.com/melancthon/node-kv","description":"An embeded key-value store for node.js, extremely fast.","readmeFile":"README.md","keywords":["key","value","lmdb","leveldb","db","store","kv"],"main":"./lib","dependencies":{"debug":"^2.1.0","lodash":"^2.4.1","mkdirp":"^0.5.0","nan":"^2.4.0"},"devDependencies":{"expect.js":"^0.3.1","matcha":"^0.5.0","mocha":"^3.1.2"},"scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"4737c8869904e535e4bb9cbb9bd7d6797bcb6a0c","homepage":"https://github.com/melancthon/node-kv#readme","versions":[{"number":"0.4.0","date":"2016-10-17T14:15:29.748Z"},{"number":"0.4.1","date":"2016-10-17T15:56:53.842Z"},{"number":"0.4.2","date":"2016-10-18T15:30:20.608Z"},{"number":"0.4.3","date":"2016-10-20T17:02:18.937Z"},{"number":"0.4.4","date":"2016-10-20T17:09:29.864Z"},{"number":"0.4.5","date":"2016-10-24T14:05:34.075Z"},{"number":"0.4.6","date":"2016-10-31T13:48:27.165Z"}],"readme":"#node-kv\r\nAn embeded key-value store for node.js, extremely fast.\r\n```\r\nBecause rocksdb uses a lot of C++11 features, your compiler should support C++11 to compile it.\r\nI test it on:\r\n  Windows + VS2013\r\n  CentOS 6.5 + gcc 4.8.1\r\n  MacOS\r\n  \r\nIf your compiler doesn't support C++11, you can install 0.2.x (without rocksdb) instead.\r\n```\r\n\r\n[中文文档猛戳此处](https://github.com/talrasha007/node-kv/blob/master/README.zhcn.md)\r\n\r\n## Features\r\n- Multiple kv engine support. (LMDB / LevelDB / RocksDB).\r\n- High speed. (> 80% speed of c++ version.)\r\n- Compressed bit-vector support, a good choice for bitmap index. (Coming soon.)\r\n- Embeded, easy to use.\r\n\r\n## Install\r\n```\r\nnpm install node-kv\r\n```\r\n\r\n## Test & Benchmark\r\n```\r\ngit clone https://github.com/talrasha007/node-kv.git\r\nnpm install\r\nnpm install -g matcha mocha\r\nmocha   # Run unit test.\r\nmatcha  # Run benchmark.\r\n```\r\n\r\n## Usage\r\n\r\n### - LMDB\r\nIt's a lmdb wrapper, for more information about lmdb, [click here](http://symas.com/mdb/) & [documents](http://symas.com/mdb/doc/index.html)\r\n```js\r\n// This example shows how to use lmdb apis.\r\nvar path = require('path'),\r\n    lmdb = require('node-kv').lmdb;\r\n\r\nvar env = new lmdb.Env({\r\n    dir: path.join(__dirname, 'testdb'),\r\n    mapSize: 8 * 1024 * 1024, // 128M by default\r\n    maxDbs: 64 // 32 by default\r\n});\r\n\r\n(function () {\r\n    /* Date type can be:\r\n     * string\r\n     * hex - hex string, will convert to binary data equivalent to Buffer(str, 'hex') for storage.\r\n     * int32\r\n     * uint32\r\n     * int64\r\n     * number\r\n     * binary - Buffer object\r\n     */\r\n    var db = env.openDb({\r\n        name: 'test',\r\n        keyType: 'int32',\r\n        valType: 'int32' // or valveType\r\n    });\r\n\r\n    db.put(1, 1);\r\n    console.log(db.get(1));\r\n    db.del(1);\r\n    console.log(db.get(1));\r\n\r\n    db.batchPut(6, 6);\r\n    console.log(db.get(6));\r\n    env.flushBatchOps(); // Data will be flushed automatically after 1ms, if you want to query immediately, do this.\r\n    console.log(db.get(6));\r\n})();\r\n\r\n(function () {\r\n    var db = env.openDb({\r\n        name: 'str-test',\r\n        keyType: 'string',\r\n        valType: 'string' // or valveType\r\n    });\r\n\r\n    var txn = env.beginTxn();\r\n    db.put('Hello', 'world', txn);\r\n    console.log(db.get('Hello', txn));\r\n    txn.abort();\r\n    console.log(db.get('Hello'));\r\n})();\r\n\r\n(function () {\r\n    var db = env.openDb({\r\n        name: 'testdup',\r\n        keyType: 'int32',\r\n        valType: 'int32',\r\n        allowDup: true\r\n    });\r\n\r\n    db.put(1, 1);\r\n    console.log(db.exists(1, 1));\r\n    console.log(db.exists(1, 2));\r\n    db.put(1, 2);\r\n    console.log(db.exists(1, 1));\r\n    console.log(db.exists(1, 2));\r\n\r\n    // Cursor\r\n    var txn = env.beginTxn(true),\r\n        cur = db.cursor(txn);\r\n\r\n    for (var ok = cur.first(); ok; ok = cur.next()) {\r\n        console.log(\"Cursor scan: \", cur.key(), cur.val());\r\n    }\r\n\r\n    console.log(cur.seek(1));\r\n    console.log(cur.key(), cur.val());\r\n    console.log(cur.gte(0));\r\n    console.log(cur.key(), cur.val());\r\n\r\n    txn.abort();\r\n})();\r\n\r\nenv.close();\r\n```\r\n\r\n### - Cache\r\n```js\r\n// This example shows how to use cache apis.\r\n// Cache is used for caching hot data, it is a wrapper of lmdb, it holds 2 lmdb envs(current & old), when current env is full,\r\n// it will close old env, set current env as old, and then open a new env as current.\r\nvar path = require('path'),\r\n    cache = require('node-kv').cache;\r\n\r\nvar cenv = new cache.Env({\r\n    dir: path.join(__dirname, 'testdb', 'cache'),\r\n    cacheSize: 128 * 1024 * 1024,   // 256M by default\r\n    batchSize: 128                  // 64 by default\r\n});\r\n\r\nvar cdb = cenv.openDb({\r\n    name: 'testdb',\r\n    keyType: 'int32',\r\n    valType: 'int32'\r\n});\r\n\r\ncdb.put(1, 2);\r\ncdb.put(2, 3);\r\ncenv.flushBatchOps(); // Data will be flushed automatically after 1ms, if you want to query immediately, do this.\r\nconsole.log(cdb.get(1));\r\n\r\ncdb.put(3, 3);\r\nsetTimeout(function () {\r\n    console.log(cdb.get(3));\r\n    cenv.close();\r\n}, 50);\r\n```\r\n\r\n### - LevelDB\r\nGoogle [leveldb](https://github.com/google/leveldb) wrapper.\r\n```js\r\nvar path = require('path'),\r\n    lvldb = require('node-kv').leveldb;\r\n\r\nvar env = new lvldb.Env({\r\n    dir: path.join(__dirname, 'testdb', 'level'),\r\n    cacheSize: 256 * 1024 * 1024 // 8MB by default.\r\n});\r\n\r\nvar db = env.openDb({\r\n    name: 'test',\r\n    keyType: 'int32',\r\n    valType: 'int32'\r\n});\r\n\r\ndb.put(1, 1);\r\nconsole.log(db.get(1));\r\ndb.del(1);\r\nconsole.log(db.get(1));\r\n\r\ndb.del(3);\r\ndb.batchPut(3, 4);\r\nconsole.log(db.get(3));\r\ndb.flushBatchOps();\r\nconsole.log(db.get(3));\r\n\r\nvar cur = db.cursor();\r\nfor (var i = cur.first(); i; i = cur.next()) {\r\n    console.log([cur.key(), cur.val()]);\r\n}\r\n```\r\n\r\n### - RocksDB\r\nFacebook [rocksdb](http://rocksdb.org/) wrapper.\r\n```js\r\nvar path = require('path'),\r\n    rocksdb = require('node-kv').rocksdb;\r\n\r\nvar env = new rocksdb.Env({\r\n    dir: path.join(__dirname, 'testdb', 'rocks'),\r\n    cacheSize: 256 * 1024 * 1024 // 4MB by default.\r\n});\r\n\r\nvar db = env.registerDb({\r\n    name: 'test',\r\n    keyType: 'int32',\r\n    valType: 'int32'\r\n});\r\n\r\nenv.open();\r\n\r\ndb.put(1, 1);\r\nconsole.log(db.get(1));\r\ndb.del(1);\r\nconsole.log(db.get(1));\r\n\r\ndb.del(3);\r\ndb.batchPut(3, 4);\r\nconsole.log(db.get(3));\r\ndb.flushBatchOps();\r\nconsole.log(db.get(3));\r\n\r\nvar cur = db.cursor();\r\nfor (var i = cur.first(); i; i = cur.next()) {\r\n    console.log([cur.key(), cur.val()]);\r\n}\r\n```\r\n","created":"2016-10-17T14:15:29.748Z","modified":"2016-10-31T13:48:27.165Z","lastPublisher":{"name":"melancthon","email":"melancthon@gmail.com"},"owners":[{"name":"melancthon","email":"melancthon@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"kv-node","_nodeVersion":"6.8.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/kv-node-0.4.6.tgz_1477921706552_0.6918785118032247"},"_npmUser":{"name":"melancthon","email":"melancthon@gmail.com"},"_npmVersion":"3.10.8","_rev":"5-bb0bf437262c9b67e109ea7a0aa90112","_shasum":"627afd795e050d0b6ab91282c4f1d2431c4f6e35","bugs":{"url":"https://github.com/melancthon/node-kv/issues"},"directories":{},"dist-tags":{"latest":"0.4.6"},"dist":{"shasum":"627afd795e050d0b6ab91282c4f1d2431c4f6e35","tarball":"http://registry.npmjs.org/kv-node/-/kv-node-0.4.6.tgz"},"maintainers":[{"name":"melancthon","email":"melancthon@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-31T13:48:27.165Z","created":"2016-10-17T14:15:29.748Z","0.4.0":"2016-10-17T14:15:29.748Z","0.4.1":"2016-10-17T15:56:53.842Z","0.4.2":"2016-10-18T15:30:20.608Z","0.4.3":"2016-10-20T17:02:18.937Z","0.4.4":"2016-10-20T17:09:29.864Z","0.4.5":"2016-10-24T14:05:34.075Z","0.4.6":"2016-10-31T13:48:27.165Z"}}}