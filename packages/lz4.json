{"name":"lz4","description":"LZ4 streaming compression and decompression","keywords":["lz4","compression","decompression","stream"],"version":"0.5.3","homepage":"http://github.com/pierrec/node-lz4","repository":"https://github.com/pierrec/node-lz4","main":"./lib/lz4.js","browser":{"./lib/utils.js":"./lib/utils-js.js"},"gypfile":true,"licenses":[{"type":"MIT","url":"http://github.com/pierrec/node-lz4/raw/master/LICENSE"}],"engines":{"node":">= 0.10"},"dependencies":{"cuint":"^0.2.0","nan":"^2.0.9","xxhashjs":"^0.1.1"},"devDependencies":{"benchmark":"^1.0.0","browserify":"^9.0.7","jasmine-core":"^2.2.0","karma":"^0.12.31","karma-chrome-launcher":"^0.1.7","karma-cli":"0.0.4","karma-firefox-launcher":"^0.1.4","karma-jasmine":"^0.3.5","karma-mocha":"^0.1.10","minify":"^1.4.10","mocha":"^2.2.4"},"scripts":{"test":"mocha","install":"node-gyp rebuild","prepublish":"./build.sh"},"gitHead":"8b0027e08cb5d486e212b18b906d76a43f740f88","versions":[{"number":"0.0.1","date":"2012-07-10T21:18:18.856Z"},{"number":"0.0.2","date":"2012-07-16T09:07:39.496Z"},{"number":"0.0.3","date":"2012-11-09T21:19:13.868Z"},{"number":"0.0.4","date":"2013-03-08T07:06:25.404Z"},{"number":"0.0.5","date":"2013-03-13T14:41:02.684Z"},{"number":"0.1.0","date":"2013-03-13T14:44:47.261Z"},{"number":"0.1.1","date":"2013-06-09T20:21:22.730Z"},{"number":"0.1.2","date":"2013-09-09T06:46:56.232Z"},{"number":"0.2.0","date":"2013-10-01T09:24:44.947Z"},{"number":"0.2.1","date":"2013-10-03T07:55:35.583Z"},{"number":"0.2.2","date":"2013-10-04T08:20:44.669Z"},{"number":"0.2.3","date":"2013-12-15T13:15:16.911Z"},{"number":"0.2.4","date":"2014-03-05T10:32:21.683Z"},{"number":"0.3.0","date":"2014-03-11T14:06:16.716Z"},{"number":"0.3.1","date":"2014-03-18T09:06:23.338Z"},{"number":"0.3.2","date":"2014-03-27T20:58:52.752Z"},{"number":"0.3.3","date":"2014-03-28T05:47:13.242Z"},{"number":"0.3.4","date":"2014-04-07T06:45:06.155Z"},{"number":"0.3.5","date":"2014-04-11T05:17:18.941Z"},{"number":"0.3.6","date":"2014-04-12T11:40:23.003Z"},{"number":"0.3.7","date":"2014-05-20T18:57:40.025Z"},{"number":"0.3.8","date":"2014-05-21T19:56:36.692Z"},{"number":"0.3.9","date":"2014-07-06T15:56:24.248Z"},{"number":"0.3.10","date":"2014-07-09T18:57:21.517Z"},{"number":"0.3.11","date":"2014-07-09T19:18:05.914Z"},{"number":"0.3.12","date":"2014-09-03T17:22:15.049Z"},{"number":"0.3.13","date":"2014-09-11T19:59:37.004Z"},{"number":"0.3.14","date":"2014-11-03T19:30:04.763Z"},{"number":"0.3.15","date":"2015-03-07T11:48:01.805Z"},{"number":"0.4.0","date":"2015-04-08T18:11:56.620Z"},{"number":"0.4.1","date":"2015-05-16T07:05:29.552Z"},{"number":"0.4.2","date":"2015-06-10T09:59:06.533Z"},{"number":"0.5.0","date":"2015-09-10T20:00:46.822Z"},{"number":"0.5.1","date":"2015-12-10T20:27:29.579Z"},{"number":"0.5.2","date":"2016-03-21T09:42:32.441Z"},{"number":"0.5.3","date":"2016-09-01T08:07:31.812Z"}],"readme":"# LZ4\n\n[LZ4](http://fastcompression.blogspot.fr/) is a very fast compression and decompression algorithm. This nodejs module provides a Javascript implementation of the decoder as well as native bindings to the LZ4 functions. Nodejs Streams are also supported for compression and decompression.\n\nNB.\nVersion 0.2 does not support the legacy format, only the one as of \"LZ4 Streaming Format 1.4\". Use version 0.1 if required.\n\n## Build\n\nWith NodeJS:\n\n```shell\ngit clone https://github.com/pierrec/node-lz4.git\ncd node-lz4\ngit submodule update --init --recursive\nnpm install\n```\n\n## Install\n\nWith NodeJS:\n\n```shell\nnpm install lz4\n```\n\nWithin the browser, using `build/lz4.js`:\n\n```html\n<script type=\"text/javascript\" src=\"/path/to/lz4.js\"></script>\n<script type=\"text/javascript\">\n// Nodejs-like Buffer built-in\nvar Buffer = require('buffer').Buffer\nvar LZ4 = require('lz4')\n\n// Some data to be compressed\nvar data = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\ndata += data\n// LZ4 can only work on Buffers\nvar input = new Buffer(data)\n// Initialize the output buffer to its maximum length based on the input data\nvar output = new Buffer( LZ4.encodeBound(input.length) )\n\n// block compression (no archive format)\nvar compressedSize = LZ4.encodeBlock(input, output)\n// remove unnecessary bytes\noutput = output.slice(0, compressedSize)\n\nconsole.log( \"compressed data\", output.slice(0, compressedSize) )\n\n// block decompression (no archive format)\nvar uncompressed = new Buffer(input.length)\nvar uncompressedSize = LZ4.decodeBlock(output, uncompressed)\nuncompressed = uncompressed.slice(0, uncompressedSize)\n\nconsole.log( \"uncompressed data\", uncompressed )\n</script>\n```\n\n\nFrom github cloning, after having made sure that node and node-gyp are properly installed:\n\n```shell\nnpm i\nnode-gyp rebuild\n```\n\nSee below for more LZ4 functions.\n\n\n## Usage\n\n### Encoding\n\nThere are 2 ways to encode:\n\n* __asynchronous__ using nodejs Streams - slowest but can handle very large data sets (no memory limitations).\n* __synchronous__ by feeding the whole set of data - faster but is limited by the amount of memory\n\n\n#### Asynchronous encoding\n\nFirst, create an LZ4 encoding NodeJS stream with `LZ4#createEncoderStream(options)`.\n\n* `options` (_Object_): LZ4 stream options (optional)\n\t* `options.blockMaxSize` (_Number_): chunk size to use (default=4Mb)\n\t* `options.highCompression` (_Boolean_): use high compression (default=false)\n\t* `options.blockIndependence` (_Boolean_): (default=true)\n\t* `options.blockChecksum` (_Boolean_): add compressed blocks checksum (default=false)\n\t* `options.streamSize` (_Boolean_): add full LZ4 stream size (default=false)\n\t* `options.streamChecksum` (_Boolean_): add full LZ4 stream checksum (default=true)\n\t* `options.dict` (_Boolean_): use dictionary (default=false)\n\t* `options.dictId` (_Integer_): dictionary id (default=0)\n\n\nThe stream can then encode any data piped to it. It will emit a `data` event on each encoded chunk, which can be saved into an output stream.\n\nThe following example shows how to encode a file `test` into `test.lz4`.\n\n\n```javascript\nvar fs = require('fs')\nvar lz4 = require('lz4')\n\nvar encoder = lz4.createEncoderStream()\n\nvar input = fs.createReadStream('test')\nvar output = fs.createWriteStream('test.lz4')\n\ninput.pipe(encoder).pipe(output)\n```\n\n#### Synchronous encoding\n\nRead the data into memory and feed it to `LZ4#encode(input[, options])` to decode an LZ4 stream.\n\n* `input` (_Buffer_): data to encode\n* `options` (_Object_): LZ4 stream options (optional)\n\t* `options.blockMaxSize` (_Number_): chunk size to use (default=4Mb)\n\t* `options.highCompression` (_Boolean_): use high compression (default=false)\n\t* `options.blockIndependence` (_Boolean_): (default=true)\n\t* `options.blockChecksum` (_Boolean_): add compressed blocks checksum (default=false)\n\t* `options.streamSize` (_Boolean_): add full LZ4 stream size (default=false)\n\t* `options.streamChecksum` (_Boolean_): add full LZ4 stream checksum (default=true)\n\t* `options.dict` (_Boolean_): use dictionary (default=false)\n\t* `options.dictId` (_Integer_): dictionary id (default=0)\n\n\n```javascript\nvar fs = require('fs')\nvar lz4 = require('lz4')\n\nvar input = fs.readFileSync('test')\nvar output = lz4.encode(input)\n\nfs.writeFileSync('test.lz4', output)\n```\n\n\n### Decoding\n\nThere are 2 ways to decode:\n\n* __asynchronous__ using nodejs Streams - slowest but can handle very large data sets (no memory limitations)\n* __synchronous__ by feeding the whole LZ4 data - faster but is limited by the amount of memory\n\n\n#### Asynchronous decoding\n\nFirst, create an LZ4 decoding NodeJS stream with `LZ4#createDecoderStream()`.\n\n\nThe stream can then decode any data piped to it. It will emit a `data` event on each decoded sequence, which can be saved into an output stream.\n\nThe following example shows how to decode an LZ4 compressed file `test.lz4` into `test`.\n\n\n```javascript\nvar fs = require('fs')\nvar lz4 = require('lz4')\n\nvar decoder = lz4.createDecoderStream()\n\nvar input = fs.createReadStream('test.lz4')\nvar output = fs.createWriteStream('test')\n\ninput.pipe(decoder).pipe(output)\n```\n\n#### Synchronous decoding\n\nRead the data into memory and feed it to `LZ4#decode(input)` to produce an LZ4 stream.\n\n* `input` (_Buffer_): data to decode\n\n\n```javascript\nvar fs = require('fs')\nvar lz4 = require('lz4')\n\nvar input = fs.readFileSync('test.lz4')\nvar output = lz4.decode(input)\n\nfs.writeFileSync('test', output)\n```\n\n## Block level encoding/decoding\n\nIn some cases, it is useful to be able to manipulate an LZ4 block instead of an LZ4 stream. The functions to decode and encode are therefore exposed as:\n\n* `LZ4#decodeBlock(input, output[, startIdx, endIdx])` (_Number_) >=0: uncompressed size, <0: error at offset\n\t* `input` (_Buffer_): data block to decode\n\t* `output` (_Buffer_): decoded data block\n\t* `startIdx` (_Number_): input buffer start index (optional, default=0)\n\t* `endIdx` (_Number_): input buffer end index (optional, default=startIdx + input.length)\n* `LZ4#encodeBound(inputSize)` (_Number_): maximum size for a compressed block\n\t* `inputSize` (_Number_) size of the input, 0 if too large\n\tThis is required to size the buffer for a block encoded data\n* `LZ4#encodeBlock(input, output[, startIdx, endIdx])` (_Number_) >0: compressed size, =0: not compressible\n\t* `input` (_Buffer_): data block to encode\n\t* `output` (_Buffer_): encoded data block\n\t* `startIdx` (_Number_): output buffer start index (optional, default=0)\n\t* `endIdx` (_Number_): output buffer end index (optional, default=startIdx + output.length)\n* `LZ4#encodeBlockHC(input, output)` (_Number_) >0: compressed size, =0: not compressible\n\t* `input` (_Buffer_): data block to encode with high compression\n\t* `output` (_Buffer_): encoded data block\n\n\nBlocks do not have any magic number and are provided as is. It is useful to store somewhere the size of the original input for decoding.\nLZ4#encodeBlockHC() is not available as pure Javascript.\n\n\n## How it works\n\n* [LZ4 stream format](http://fastcompression.blogspot.fr/2011/05/lz4-explained.html)\n\n## Restrictions / Issues\n\n* `blockIndependence` property only supported for `true`\n\n\n## License\n\nMIT\n","starsCount":1,"created":"2012-07-10T21:18:16.937Z","modified":"2016-09-01T08:07:31.812Z","lastPublisher":{"name":"pierrec","email":"pierre.curto@gmail.com"},"owners":[{"name":"pierrec","email":"pierre.curto@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"lz4","_nodeVersion":"5.9.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/lz4-0.5.3.tgz_1472717249541_0.9292076316196471"},"_npmUser":{"name":"pierrec","email":"pierre.curto@gmail.com"},"_npmVersion":"3.7.3","_rev":"1-27c16c8539d60b2397f65bae2a169872","_shasum":"cc851333c69f17f007329acf4e0bab51490c08f4","author":{"name":"Pierre Curto"},"bugs":{"url":"http://github.com/pierrec/node-lz4/issues"},"directories":{},"dist-tags":{"latest":"0.5.3"},"dist":{"shasum":"cc851333c69f17f007329acf4e0bab51490c08f4","tarball":"http://registry.npmjs.org/lz4/-/lz4-0.5.3.tgz"},"maintainers":[{"name":"pierrec","email":"pierre.curto@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-09-01T08:07:31.812Z","created":"2012-07-10T21:18:16.937Z","0.0.1":"2012-07-10T21:18:18.856Z","0.0.2":"2012-07-16T09:07:39.496Z","0.0.3":"2012-11-09T21:19:13.868Z","0.0.4":"2013-03-08T07:06:25.404Z","0.0.5":"2013-03-13T14:41:02.684Z","0.1.0":"2013-03-13T14:44:47.261Z","0.1.1":"2013-06-09T20:21:22.730Z","0.1.2":"2013-09-09T06:46:56.232Z","0.2.0":"2013-10-01T09:24:44.947Z","0.2.1":"2013-10-03T07:55:35.583Z","0.2.2":"2013-10-04T08:20:44.669Z","0.2.3":"2013-12-15T13:15:16.911Z","0.2.4":"2014-03-05T10:32:21.683Z","0.3.0":"2014-03-11T14:06:16.716Z","0.3.1":"2014-03-18T09:06:23.338Z","0.3.2":"2014-03-27T20:58:52.752Z","0.3.3":"2014-03-28T05:47:13.242Z","0.3.4":"2014-04-07T06:45:06.155Z","0.3.5":"2014-04-11T05:17:18.941Z","0.3.6":"2014-04-12T11:40:23.003Z","0.3.7":"2014-05-20T18:57:40.025Z","0.3.8":"2014-05-21T19:56:36.692Z","0.3.9":"2014-07-06T15:56:24.248Z","0.3.10":"2014-07-09T18:57:21.517Z","0.3.11":"2014-07-09T19:18:05.914Z","0.3.12":"2014-09-03T17:22:15.049Z","0.3.13":"2014-09-11T19:59:37.004Z","0.3.14":"2014-11-03T19:30:04.763Z","0.3.15":"2015-03-07T11:48:01.805Z","0.4.0":"2015-04-08T18:11:56.620Z","0.4.1":"2015-05-16T07:05:29.552Z","0.4.2":"2015-06-10T09:59:06.533Z","0.5.0":"2015-09-10T20:00:46.822Z","0.5.1":"2015-12-10T20:27:29.579Z","0.5.2":"2016-03-21T09:42:32.441Z","0.5.3":"2016-09-01T08:07:31.812Z"},"users":{"insdevmail":true}}}