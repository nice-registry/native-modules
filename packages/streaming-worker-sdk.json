{"name":"streaming-worker-sdk","version":"0.9.3","description":"SDK for writing C++ addons with streaming/event emitter interfaces for Node.js","main":"include_dirs.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"dependencies":{"nan":"*"},"devDependencies":{"node-gyp":"~3.0.1"},"repository":"https://github.com/freezer333/streaming-worker","keywords":["addon","streaming"],"license":"MIT","homepage":"https://github.com/freezer333/streaming-worker#readme","versions":[{"number":"0.9.0","date":"2016-07-18T14:35:33.964Z"},{"number":"0.9.1","date":"2016-07-18T16:27:07.960Z"},{"number":"0.9.2","date":"2017-02-05T19:57:13.244Z"},{"number":"0.9.3","date":"2017-02-05T19:58:42.892Z"}],"readme":"# streaming-worker and streaming-worker-sdk\r\n`streaming-worker-sdk` is a C++/JS SDK for building streaming addons with streaming/event-emitter interfaces.  This is a C++ header file gives you a pattern for creating addons by inheriting from the `StreamingWorker` abstract class.  Your addon, at a minimum, needs to implement a few virtual functions (most importantly, `Execute`), and can utilize standard methods to read and write `Message` objects to and from JavaScript.  `Message` objects are name/value (string) pairs.\r\n\r\nOnce your C++ addon is built, you can interface with it from JavaScript using the [`streaming-worker`](https://www.npmjs.com/package/streaming-worker) package.  `streaming-worker` creates a bi-directional event-emitter and stream interface around addons created by `streaming-worker-sdk`.  \r\n\r\n## Usage\r\nTo start creating your streaming addon, first add a dependency to `streaming-worker-sdk`.\r\n\r\n```\r\n$ npm install --save streaming-worker-sdk\r\n```\r\n\r\nNext, make sure you've added the include directives to your `binding.gyp` file for both `streaming-worker-sdk` and `nan`.\r\n\r\n```js\r\n\"include_dirs\" : [\r\n    \"<!(node -e \\\"require('nan')\\\")\", \r\n    \"<!(node -e \\\"require('streaming-worker-sdk')\\\")\"\r\n]\r\n```\r\n\r\nNote, to use `nan` and `streaming-worker-sdk`, you need to enable C++11 and use a fairly modern C++ compiler.\r\n\r\nTo build an addon you must:\r\n\r\n1. `#include \"streaming-worker.h\"`\r\n2. Create a class that inherits `StreamingWorker`\r\n3. Implement a constructor, the `Execute` member function (which will be the heart of your addon), and a `create_worker` factory method (see below)\r\n4. Register the your module with `StreamWorkerWrapper::Init` using `NODE_MODULE`.\r\n\r\n## Example\r\nHere's an example for setting up an addon that just streams successive integers to JavaScript.  \r\n\r\n### Building the Addon (`streaming-worker-sdk`)\r\nStart out with a directory `/simple/addon` and add a `binding.gyp` file:\r\n\r\n```js\r\n{\r\n  \"targets\": [\r\n    {\r\n      \"target_name\": \"simple_stream\",\r\n      \"sources\": [ \"simple-stream.cpp\" ], \r\n      \"cflags\": [\"-Wall\", \"-std=c++11\"],\r\n      \"cflags!\": [ '-fno-exceptions' ],\r\n      \"cflags_cc!\": [ '-fno-exceptions' ],\r\n      \"include_dirs\" : [\"<!(node -e \\\"require('nan')\\\")\", \"<!(node -e \\\"require('streaming-worker-sdk')\\\")\"]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n... and a package.json\r\n\r\n```js\r\n{\r\n  \"name\": \"simple-stream\",\r\n  \"version\": \"0.0.1\",\r\n  \"gypfile\": true,\r\n  \"dependencies\": {\r\n    \"nan\": \"*\",\r\n    \"streaming-worker-sdk\": \"^0.9.0\"\r\n  }\r\n}\r\n```\r\n\r\nNext create the `simple-stream.cpp` source code file.  You will need to include the sdk and then create a class that extends `StreamingWorker`.  The class needs to have a constructor and an `Execute` function, which will contain your addon code that is generating/accepting data to/from JavaScript.\r\n\r\n```cpp\r\n#include \"streaming-worker.h\"\r\n\r\nclass Simple : public StreamingWorker {\r\n   public:\r\n   Simple(Callback *data, Callback *complete, Callback *error_callback, v8::Local<v8::Object> & options) \r\n          : StreamingWorker(data, complete, error_callback){\r\n\r\n        // nothing needs to be here - just make sure you call base constructor\r\n        // The options parameter is for your JavaScript code to pass in \r\n        // an options object.  You can use this for whatever you want.\r\n    }\r\n     \r\n    // You must match the call signature here, `Execute` is a virtual function\r\n    // defined on Streaing Worker.\r\n    void Execute (const AsyncProgressWorker::ExecutionProgress& progress) {\r\n\r\n      // Just send 100 integers and stop\r\n      for (int i = 0; i < 100; i++ ) {\r\n        Message tosend(\"integer\", std::to_string(i));\r\n        writeToNode(progress, tosend);\r\n      }\r\n    }\r\n};\r\n```\r\n\r\nThe last step is supplying a factory method to create instances of your addon class.  This function will be called by `StreamingWorker` automatically for you - you just need to define it (and match the name/call signature).\r\n\r\n```cpp\r\nStreamingWorker * create_worker(Callback *data\r\n    , Callback *complete\r\n    , Callback *error_callback, \r\n    v8::Local<v8::Object> & options) {\r\n \r\n return new Simple(data, complete, error_callback, options);\r\n}\r\n\r\nNODE_MODULE(simple_streample, StreamWorkerWrapper::Init)\r\n```\r\n\r\nTo build, do `npm install` (since the package.json file had a `\"gypfile\": true` entry.  This will build the addon, which can now be used from Node.js using the `streaming-worker` package.\r\n\r\n### Using the addon (`streaming-worker`)\r\nThe SDK module is only for creating the C++ addon.  To interface with the addon, you need to pull in the [`streaming-worker'](https://www.npmjs.com/package/streaming-worker-sdk) module for JavaScript.\r\n\r\nCreate a new directory (`/simple/js`) and do an `npm install streaming-worker`.  Now you can instantiate a `worker` by specifying the location of the addon executable.   \r\n\r\n```js\r\n\"use strict\"; \r\n\r\nconst path = require('path');\\\r\nconst worker = require(\"streaming-worker\");\r\nconst addon_path = path.join(__dirname, \"../addon/build/Release/simple_stream\");\r\nconst simple_stream = worker(addon_path);\r\n```\r\n\r\n`streaming-worker` objects have a `from` event emitter, which will report all data the addon sends to node.\r\n\r\n```\r\nsimple_stream.from.on('integer', function(value){\r\n    console.log(value);\r\n});\r\n```\r\n\r\n## More info\r\nYou can get the full distribution [here](https://github.com/freezer333/streaming-worker), which includes both the `streaming-worker` and `streaming-worker-sdk` library, along with four more detailed examples.  This library is based on a chapter in [Node C++ Integration](https://scottfrees.com/ebooks/nodecpp/) - which covers it's implementation in a lot more detail.  \r\n","created":"2016-07-18T14:35:33.964Z","modified":"2017-02-05T19:58:42.892Z","lastPublisher":{"name":"freezer3","email":"scott.frees@gmail.com"},"owners":[{"name":"freezer3","email":"scott.frees@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"streaming-worker-sdk","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/streaming-worker-sdk-0.9.3.tgz_1486324722333_0.5969310034997761"},"_npmUser":{"name":"freezer3","email":"scott.frees@gmail.com"},"_npmVersion":"3.10.9","_rev":"3-1d181c7063eec74ec65d3d76158013d3","_shasum":"4a9ba5e2e775fff7af38c7c3fe994586d3674c27","author":{"name":"Scott Frees"},"bugs":{"url":"https://github.com/freezer333/streaming-worker/issues"},"directories":{},"dist-tags":{"latest":"0.9.3"},"dist":{"shasum":"4a9ba5e2e775fff7af38c7c3fe994586d3674c27","tarball":"https://registry.npmjs.org/streaming-worker-sdk/-/streaming-worker-sdk-0.9.3.tgz"},"maintainers":[{"name":"freezer3","email":"scott.frees@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2017-02-05T19:58:42.892Z","created":"2016-07-18T14:35:33.964Z","0.9.0":"2016-07-18T14:35:33.964Z","0.9.1":"2016-07-18T16:27:07.960Z","0.9.2":"2017-02-05T19:57:13.244Z","0.9.3":"2017-02-05T19:58:42.892Z"}}}