{"name":"posix-semaphore","version":"0.0.2","description":"Blocking POSIX semaphores for Node.js","repository":"https://github.com/dbousque/posix-semaphore","license":"MIT","main":"srcs/addon.js","gypfile":true,"scripts":{"test":"node tests/launch_tests.js","install":"node-gyp rebuild"},"devDependencies":{"child_process":"^1.0.2","shm-typed-array":"^0.0.10"},"dependencies":{"bindings":"~1.2.1","nan":"^2.0.0"},"gitHead":"8ca9f8e7fd7cdcc7899cf38ba0c0f5dfbbb6bfb6","homepage":"https://github.com/dbousque/posix-semaphore#readme","versions":[{"number":"0.0.1","date":"2017-06-09T17:22:48.179Z"},{"number":"0.0.2","date":"2017-06-09T17:26:59.283Z"}],"readme":"[![Build Status](https://travis-ci.org/dbousque/posix-semaphore.svg?branch=master)](https://travis-ci.org/dbousque/posix-semaphore)\n\n# posix-semaphore\nBlocking POSIX semaphores for Node.js\n\n### Installation\n`npm install posix-semaphore`\n\n### Example\n```javascript\nconst Semaphore = require('posix-semaphore')\n\nconst sem = new Semaphore('mySemaphore')\nsem.acquire()\n\n/* my code using shared ressources ðŸ˜Ž */\n\nsem.release()\n// other processes are now free to use the ressources\n\n// remove the semaphore from the system\nsem.close()\n```\n\n### Inter-process communication example\n```javascript\nconst cluster = require('cluster')\nconst Semaphore = require('posix-semaphore')\nconst shm = require('shm-typed-array')\n\nfunction parentProcess () {\n  const semParent = new Semaphore('mySemaphore', { silent: true })\n  const bufParent = shm.create(4096)\n  // we get the lock\n  semParent.acquire()\n\n  // we create the child process\n  const child = cluster.fork({ SHM_KEY: bufParent.key })\n\n  // we write some data to the shared memory segment\n  bufParent.write('hi there :)')\n  // we release the lock\n  semParent.release()\n\n  // we close the child after a second\n  setTimeout(() => { child.kill('SIGINT') }, 1000)\n}\n\nfunction childProcess () {\n  const semChild = new Semaphore('mySemaphore', { silent: true })\n  const shmKey = parseInt(process.env.SHM_KEY)\n  const bufChild = shm.get(shmKey)\n  \n  // we get the lock, will block until the parent has released\n  semChild.acquire()\n  // should print 'hi there :)'\n  console.log(bufChild.toString())\n}\n\nif (cluster.isMaster) {\n  parentProcess()\n} else if (cluster.isWorker) {\n  childProcess()\n}\n```\nOutput:\n```\n$ node test.js\nhi there :)\nshm segments destroyed: 1\n$\n```\n\n### API\n\n#### `new Semaphore(semName, options)`\n\nOpens a new or an already existing semaphore with `sem_open`. Fails with an error if the semaphore could not be opened.\n- `semName` : name of the semaphore\n- `options` :\n  - `strict` : If set to false, `acquire`, `release` and `close` won't fail if the semaphore is already acquired/released/closed. Default : true\n  - `closeOnExit` : If true, the semaphore will be closed on process exit (uncaughtException, SIGINT, normal exit). Default : true \n  - `debug` : Prints useful information. Default : false\n  - `silent` : Some information is printed with `closeOnExit`=true and when native calls fait. Allows you to disable that behavior. Default : false\n  - `retryOnEintr` : If `sem_wait` fails with `EINTR` (usually it's due to a SIGINT signal being fired on CTRL-C), try to acquire the lock again. Default : false\n\n#### `sem.acquire()`\n\nThe call will block until the semaphore is acquired by the process (will happen instantly if no other process acquired the lock). Calls `sem_wait` under the hood.\n\n#### `sem.release()`\n\nReleases the semaphore if it had been acquired, allowing other processes to acquire the lock. Calls `sem_post` under the hood.\n\n#### `sem.close()`\n\nCloses and unlinks the semaphore, meaning that other processes will no longer have access to it. Calls `sem_close` and `sem_unlink` under the hood.\n","created":"2017-06-09T17:22:48.179Z","modified":"2017-06-09T17:26:59.283Z","lastPublisher":{"name":"dbousque","email":"bousquet.dominik@gmail.com"},"owners":[{"name":"dbousque","email":"bousquet.dominik@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"posix-semaphore","_nodeVersion":"6.9.3","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/posix-semaphore-0.0.2.tgz_1497029218286_0.596097000874579"},"_npmUser":{"name":"dbousque","email":"bousquet.dominik@gmail.com"},"_npmVersion":"3.10.10","_rev":"2-a4b770e585adfa26c90e10f36ad29ef8","_shasum":"2352c78d0db4499e1f5207a5f2ea5fa878c782fe","bugs":{"url":"https://github.com/dbousque/posix-semaphore/issues"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"2352c78d0db4499e1f5207a5f2ea5fa878c782fe","tarball":"https://registry.npmjs.org/posix-semaphore/-/posix-semaphore-0.0.2.tgz"},"maintainers":[{"name":"dbousque","email":"bousquet.dominik@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-09T17:26:59.283Z","created":"2017-06-09T17:22:48.179Z","0.0.1":"2017-06-09T17:22:48.179Z","0.0.2":"2017-06-09T17:26:59.283Z"}}}