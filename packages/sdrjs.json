{"name":"sdrjs","version":"0.0.6","description":"librtlsdr wrapper for node","main":"addon.js","repository":"https://github.com/brenca/sdrjs","keywords":["librtlsdr","rtlsdr","sdr","radio"],"license":"MIT","dependencies":{"bindings":"~1.2.1","nan":"^2.0.0"},"scripts":{"test":"mocha tests/tests.js","install":"node-gyp rebuild"},"gypfile":true,"devDependencies":{"mocha":"^3.1.2"},"gitHead":"7e4007cabcf6e6dc9ca725193f4c59282c3d9763","homepage":"https://github.com/brenca/sdrjs#readme","versions":[{"number":"0.0.1","date":"2016-10-25T22:41:34.979Z"},{"number":"0.0.2","date":"2016-10-25T22:51:50.853Z"},{"number":"0.0.3","date":"2016-10-26T15:26:54.594Z"},{"number":"0.0.4","date":"2016-11-10T05:27:41.284Z"},{"number":"0.0.5","date":"2016-11-10T05:31:26.488Z"},{"number":"0.0.6","date":"2016-11-13T06:32:27.600Z"}],"readme":"# sdrjs\nA wrapper around [librtlsdr](http://sdr.osmocom.org/trac/wiki/rtl-sdr) for node.js\n\nThis module depends on `librtlsdr`, which you can install with most package managers.\n\nCurrently only tested on `Linux`\n\n## sdrjs\nsdrjs has the following functions:\n#### getDevices()\n * Returns: `deviceArray` Array\nQueries and returns the available `Device`s that are compatible with `librtlsdr`\n\n## Device: Emitter\n### Properties\nDevice has the following properties:\n\n#### `Device.deviceName` String _readonly_\nThe name of the device, for example: `Generic RTL2832U OEM`\n\n#### `Device.productName` String _readonly_\nThe product name of the device, for example: `RTL2838UHIDIR`\n\n#### `Device.manufacturer` String _readonly_\nThe name of the product's manufacturer, for example: `Realtek`\n\n#### `Device.serialNumber` String _readonly_\nThe serial number of the device, for example: `00000001`\n\n#### `Device.tunerType` String _readonly_\nThe tuner's type, possible values: `Unknown`, `R828D`, `R820T`, `FC2580`, `FC0013`, `FC0012`, `E4000`\n\n#### `Device.validGains` Array _readonly_\nAn array of valid gain values that the device will accept in manual gain mode.\n\n#### `Device.sampleRate` Integer\nThe device's sample rate in Hz. Also sets the baseband filters according to the \nrequested sample rate for tuners where this is possible. Possible values: \n`225001 - 300000 Hz`, `900001 - 3200000 Hz`.\n\nNote form `librtlsdr`: _Sample loss is to be expected for rates > `2400000 Hz`._\n\n#### `Device.centerFrequency` Integer\nThe device's center frequency in Hz (the frequency the device is tuned to).\n\n#### `Device.frequencyCorrection` Integer\nThe device's frequency correction value in parts per million (ppm).\n\n#### `Device.rtlOscillatorFrequency` Integer\nThe device's oscillator frequency in Hz.\n\n#### `Device.tunerOscillatorFrequency` Integer\nThe tuner's oscillator frequency in Hz.\n\nNote from `librtlsdr`: _Usually both ICs use the same clock. \nChanging the clock may make sense if you are applying an external clock to the tuner or \nto compensate the frequency (and samplerate) error caused by the original (cheap) crystal._\n\n#### `Device.bufferNumber` Integer\nThe buffer number parameter that is used when reading from the device. Set to 0 to reset to default (15).\n\n#### `Device.bufferLength` Integer\nThe buffer length parameter that is used when reading from the device. \nMust be a multiple of 512, should be a multiple of 16384 (URB size). \nSet to 0 to reset to default (16 * 32 * 512).\n\nNote from `librtlsdr`: _bufferNumber * bufferLength = overall buffer size_\n\n#### `Device.tunerGain` Integer\nThe tuner's gain in tenths of a dB (115 means 11.5 dB). \nManual gain mode must be enabled for this to work.\nValid values can be read from `Device.validGains`.\n\n#### `Device.directSampling` Enum (String)\nEnable or disable the direct sampling mode. When enabled, the IF mode \nof the RTL2832 is activated, and rtlsdr_set_center_freq() will control\nthe IF-frequency of the DDC, which can be used to tune from 0 to 28.8 MHz\n(oscillator frequency of the RTL2832).\nPossible values: `disabled`, `I-ADC`, `Q-ADC`.\n\n#### `Device.offsetTuning` Boolean\nEnable or disable offset tuning for zero-IF tuners, which allows to avoid \nproblems caused by the DC offset of the ADCs and 1/f noise.\n\n### Methods\nDevice has the following methods:\n\n#### `Device.open()` Device\nOpens and initializes the device for usage.\n\n#### `Device.close()` Device\nCloses the device, which is now no longer usable.\n\n#### `Device.start()` Device\nStarts the thread that reads from the device. While the device is started, setting parameters might not take effect.\n\n#### `Device.stop()` Device\nStops the thread that reads from the device.\n\n#### `Device.enableManualTunerGain()` Device\nEnables the manual tuner gain mode.\n\n#### `Device.disableManualTunerGain()` Device\nDisables the manual tuner gain mode.\n\n#### `Device.enableTestMode()` Device\nEnables the test mode. In this mode, an internal counter's value is returned in the buffer instead of real data.\n\n#### `Device.disableTestMode()` Device\nDisables the test mode.\n\n#### `Device.enableAGC()` Device\nEnables the internal digital AGC of the RTL2832.\n\n#### `Device.disableAGC()` Device\nDisables the internal digital AGC of the RTL2832.\n\n#### `Device.setIntermediateFrequencyGain(gain)` Device\n* `gain` Integer - the gain in tenths of a dB. (-30 means -3.0 dB)\n\nSets the intermediate frequency gain for the device.\n\n### Events\nDevice emits the following events:\n\n#### Event: 'data'\nReturns: \n * `bufferData` Object\n  * `buffer` Buffer - the raw data read by `librtlsdr`\n  * `length` Integer - the length of the buffer\n\nEmitted when data is read from the device\n\n#### Event: 'stopped'\nEmitted when the thread that reads from the device stops\n","created":"2016-10-25T22:41:34.979Z","modified":"2016-11-13T06:32:27.600Z","lastPublisher":{"name":"brenca","email":"benecene@gmail.com"},"owners":[{"name":"brenca","email":"benecene@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"sdrjs","_nodeVersion":"6.8.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sdrjs-0.0.6.tgz_1479018745688_0.8240761049091816"},"_npmUser":{"name":"brenca","email":"benecene@gmail.com"},"_npmVersion":"3.10.8","_rev":"6-568dccf4e02c550b3f87943bbcf9834d","_shasum":"86e897f21776a7a63d008cb97cf541163fb21e8c","author":{"name":"@brenca"},"bugs":{"url":"https://github.com/brenca/sdrjs/issues"},"directories":{},"dist-tags":{"latest":"0.0.6"},"dist":{"shasum":"86e897f21776a7a63d008cb97cf541163fb21e8c","tarball":"http://registry.npmjs.org/sdrjs/-/sdrjs-0.0.6.tgz"},"maintainers":[{"name":"brenca","email":"benecene@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-13T06:32:27.600Z","created":"2016-10-25T22:41:34.979Z","0.0.1":"2016-10-25T22:41:34.979Z","0.0.2":"2016-10-25T22:51:50.853Z","0.0.3":"2016-10-26T15:26:54.594Z","0.0.4":"2016-11-10T05:27:41.284Z","0.0.5":"2016-11-10T05:31:26.488Z","0.0.6":"2016-11-13T06:32:27.600Z"}}}