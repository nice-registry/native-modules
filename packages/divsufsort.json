{"name":"divsufsort","version":"0.2.0","description":"Node.js bindings for libdivsufsort.","main":"index.js","scripts":{"test":"mocha --reporter spec test","install":"node-gyp rebuild"},"repository":"https://github.com/bls/node-divsufsort","keywords":["divsufsort","libdivsufsort","suffix-array","suffix","array","burrows","wheeler","burrows-wheeler","bwt"],"license":"MIT","homepage":"https://github.com/bls/node-divsufsort#readme","dependencies":{"nan":"^1.8.4"},"devDependencies":{"chai":"^3.0.0","lodash":"^3.9.3","mocha":"^2.2.5"},"gypfile":true,"gitHead":"5746c9ef1d4cbdfc7920bf4b9bf228f051072be5","versions":[{"number":"0.2.0","date":"2015-06-15T06:34:21.712Z"}],"readme":"# divsufsort\nnode binding for Yuta Mori's libdivsufsort\n\n> This library provides a simple and an efficient C API to construct a suffix array and a Burrows-Wheeler \n> transformed string from a given string over a constant-size alphabet. The algorithm runs in O(n log n) \n> worst-case time using only 5n+O(1) bytes of memory space, where n is the length of the string.\n\nSee: https://github.com/y-256/libdivsufsort\n\nCircleCI: ![CircleCI status](https://circleci.com/gh/bls/node-divsufsort.png?style=shield&circle-token=45d20bfe875bec3b9f9f4c0bd3a481832d8ae8af)\nTravis: [![Build Status](https://travis-ci.org/bls/node-divsufsort.svg?branch=master)](https://travis-ci.org/bls/node-divsufsort)\nDeps: ![Deps Status](https://david-dm.org/bls/node-divsufsort.svg)\n\n## Usage\n\n```js\nvar divsufsort = require('divsufsort').divsufsort,\n    divbwt = require('divsufsort').divbwt;\n\nvar lodash = require('lodash'),\n    assert = require('assert');\n\n/*\n  Suffix array construction\n */\nvar t = new Buffer('abracadabra'), \n    sa = new Buffer(4 * t.length);  // Must be >= 4x input length\n\n// \"sa\" receives the suffix array, packed as 32-bit integers.  Will throw if \n// anything goes wrong.  \ndivsufsort(t, /* out */ sa);\nassert.deepEqual(bufToUint32Array(sa), [10, 7, 0, 3, 5, 8, 1, 4, 6, 9, 2]);\n\n/*\n  Burroughs-Wheeler transform\n */\nvar t = new Buffer('banana'),\n    u = new Buffer(t.length),\n    aux = new Buffer(4 * t.length);\n    \n// \"u\" receives the BWT transformed version of \"t\". \"aux\" is temporary storage.\n// Returns the primary index (index of original first char in t). Will throw if \n// anything goes wrong.\nvar idx = divbwt(t, /* out */ u, /* tmp */ aux);\nvar us = u.toString(),\n    result = us.slice(0, idx) + '$' + us.slice(idx);\nassert.equal(result, 'annb$aa');\n\n/* For testing */\nfunction bufToUint32Array(buf) {\n    var ret = [];\n    for(var i=0; i<buf.length; i+=4) {\n        ret.push(buf.readUint32LE(i));\n    }\n    return ret;\n}\n\n```\n\n## Install\n\nEnsure the libdivsufsort library and headers are installed as per \ninstructions below. This addon uses whatever is installed on your \nsystem, not a vendored copy.\n\n```bash\nnpm install divsufsort\n```\n\n### libdivsufsort for OSX\n\n```bash\nbrew install homebrew/science/libdivsufsort\n```\n\n### libdivsufsort for Linux / Unix\n\n* Requires cmake >= 2.4.2, make, C compiler.\n\n```bash\ngit clone https://github.com/y-256/libdivsufsort\nmkdir libdivsufsort/build\ncd libdivsufsort/build\ncmake -DCMAKE_BUILD_TYPE=\"Release\" -DCMAKE_INSTALL_PREFIX=\"/usr/local\" .. \nmake && sudo make install\n```\n## Notes\n\nThe largest buffer I could allocate on 64-bit OSX builds of node:\n\n```js\nvar b = new Buffer(Math.pow(2, 30) - 1);  // Works\nvar c = new Buffer(Math.pow(2, 30));      // Fails\n```\n\n* 0.10.36 - RangeError: length > kMaxLength\n* 0.12.0 - RangeError: Attempt to allocate Buffer larger than maximum size: \n  0x3fffffff bytes\n\nSo a bit less than 1GB in both cases. This means that the largest \nstrings you can work with will be 256MB or so.\n\nSA construction or BWT on a 256MB string blocks for about 2 secs on my laptop, \nso if you're not writing a console program you probably want to do it in an \nexternal process.\n\n## TODO\n\n* Consider whether it is possible to do a 64-bit version.\n* Currently, no effort is made to handle Unicode or UTF8-encoded strings.  Part\n  of the problem is that the lib uses some auxiliary space which is quadratic in\n  the size of the alphabet.\n* It would be possible to make the binding more \"JavaScript-ey\" by removing the\n  requirement for pre-allocated buffers.  \n","created":"2015-06-15T06:34:21.712Z","modified":"2015-06-15T06:34:21.712Z","lastPublisher":{"name":"bls","email":"blair.strang@gmail.com"},"owners":[{"name":"bls","email":"blair.strang@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"divsufsort","_nodeVersion":"0.12.4","_npmUser":{"name":"bls","email":"blair.strang@gmail.com"},"_npmVersion":"2.10.1","_rev":"1-43962b150248bf75371157638b052eea","_shasum":"bea884b62f734692d8017fe6a18d68fda3ca18e5","author":{"name":"bls","email":"blair.strang@gmail.com"},"bugs":{"url":"https://github.com/bls/node-divsufsort/issues"},"directories":{},"dist-tags":{"latest":"0.2.0"},"dist":{"shasum":"bea884b62f734692d8017fe6a18d68fda3ca18e5","tarball":"http://registry.npmjs.org/divsufsort/-/divsufsort-0.2.0.tgz"},"maintainers":[{"name":"bls","email":"blair.strang@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-06-15T06:34:21.712Z","created":"2015-06-15T06:34:21.712Z","0.2.0":"2015-06-15T06:34:21.712Z"}}}