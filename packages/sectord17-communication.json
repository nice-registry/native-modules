{"name":"sectord17-communication","version":"0.1.0","description":"Communication layer for SectorD17 game server","main":"addon.js","gypfile":true,"dependencies":{"bindings":"1.2.1","boost-lib":"^0.11.3","cmake-js":"^3.4.1","nan":"^2.6.2"},"scripts":{"install":"cmake-js compile","test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git+ssh://git@bitbucket.org/sectord17/communication-server.git"},"keywords":["sectord17"],"license":"ISC","homepage":"https://bitbucket.org/sectord17/communication-server#readme","gitHead":"5fc203f7dd794aedb3c5447acc22d077101b95c6","versions":[{"number":"0.0.1","date":"2017-05-07T17:01:15.522Z"},{"number":"0.0.2","date":"2017-05-07T17:11:10.890Z"},{"number":"0.0.3","date":"2017-05-07T17:14:30.498Z"},{"number":"0.0.4","date":"2017-05-07T17:25:42.095Z"},{"number":"0.0.5","date":"2017-05-19T03:15:41.320Z"},{"number":"0.0.6","date":"2017-05-28T22:37:32.362Z"},{"number":"0.1.0","date":"2017-06-03T17:18:23.020Z"}],"readme":"# SECTOR D17 Communication Server\n\nWorks on Linux x64 machines (tested and created on Ubuntu 16.04 LTS x64)\n\n### Installation\n* `npm install` - that would download all dependencies and setup boost\n\n### Documentation\n\n#### Remarks:\n* Hold somewhere `Server {}` object from library - loosing that reference would allow GarbageCollector to destroy that object and library would crash. In example reference is kept because of periodic existence test.\n* Hold all `Connection {}` objects as well\n* Initialize callbacks as in example\n```javascript\nServer {\n    // Connection is another library object\n    onConnection(function (Connection) {\n        ...\n    })\n    // Error is Buffer object holding plain utf8 string\n    onError(function (Error) {\n        ...\n    }) \n    // start listening for incoming connections\n    start()\n}\n\nConnection {\n    // Message is Buffer object holding received data\n    onMessage(function (Message) {\n        ...\n    })\n    // Error same as in Server\n    onError(function (Error) {\n        ...\n    })\n    // send data as Buffer object\n    sendUDP(Buffer)\n    sendTCP(Buffer)\n    // start sending and receiving data\n    start()\n}\n```\n\n#### Example library usage:\n\n```javascript\nvar serverlib = require('sectord17-communication');\n\nvar server = serverlib.Server(\"localhost\", \"20002\"); // pass ip and port as strings\nvar connections = [];\n\n// That here is the most important thing!\n\nconsole.log(server);\n\nvar msg = \"Nothing occurred as for now ...\";\n\nserver.onConnection(function (connection) {\n    console.log(connection);\n    \n    // message is in Buffer format\n    connection.onMessage(function (message) {\n        counter += 1;\n        var string = message.toString();\n        console.log(counter, \"Message: \", string);\n        msg = message;\n    });\n\n    // error is in Buffer as well\n    connection.onError(function (error) {\n        var string = error.toString();\n        console.log(\"Error: \", string);\n    });\n\n    connection.start();\n\n    connections.push(connection);\n});\n\nserver.onError(function (error) {\n    console.log(error);\n});\n\nserver.start();\n\n// periodically broadcast message to all connected clients\nfunction broadcastMessage() {\n    connections.forEach(function (connection) {\n        // send in Buffer as well\n        var buffer = Buffer.from('this is a tést');\n        connection.sendUDP(buffer);\n    });\n}\nsetInterval(broadcastMessage, 2000);\n\n// those below would keep Server object reference from being collected by Garbage Collector\n// just keep is as part of something and everything should work :)\nfunction testAfterAWhile() {\n    console.log(\"Existence test\", server);\n    setTimeout(testAfterAWhile, 10000);\n}\n\nsetTimeout(testAfterAWhile, 10000);\n```","created":"2017-05-07T17:01:15.522Z","modified":"2017-06-03T17:18:23.020Z","lastPublisher":{"name":"barthec","email":"bartlomiejbukowski.b@gmail.com"},"owners":[{"name":"barthec","email":"bartlomiejbukowski.b@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"sectord17-communication","_nodeVersion":"7.7.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sectord17-communication-0.1.0.tgz_1496510301246_0.024443793576210737"},"_npmUser":{"name":"barthec","email":"bartlomiejbukowski.b@gmail.com"},"_npmVersion":"4.1.2","_rev":"7-3f0dc739297107f7214fc1c9038c8c6b","_shasum":"8eca646b9293787150f7660c5ea4b16d78691417","author":{"name":"Bartłomiej Bukowski"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"8eca646b9293787150f7660c5ea4b16d78691417","tarball":"https://registry.npmjs.org/sectord17-communication/-/sectord17-communication-0.1.0.tgz"},"maintainers":[{"name":"barthec","email":"bartlomiejbukowski.b@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-03T17:18:23.020Z","created":"2017-05-07T17:01:15.522Z","0.0.1":"2017-05-07T17:01:15.522Z","0.0.2":"2017-05-07T17:11:10.890Z","0.0.3":"2017-05-07T17:14:30.498Z","0.0.4":"2017-05-07T17:25:42.095Z","0.0.5":"2017-05-19T03:15:41.320Z","0.0.6":"2017-05-28T22:37:32.362Z","0.1.0":"2017-06-03T17:18:23.020Z"}}}