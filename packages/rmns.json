{"name":"rmns","version":"1.1.5","description":"Remote Multiscale Navigation System","main":"lib/index.js","bin":{"rmns":"bin/rmns"},"scripts":{"build":"rm -rf build && node-gyp configure && node-gyp build","start":"node lib/index.js","dev":"nodejs-dashboard node lib/index.js","test":"mocha --timeout 10000 test/*.js","cover":"node_modules/istanbul/lib/cli.js cover node_modules/mocha/bin/_mocha -- -R spec test/*.js","install":"node-gyp rebuild"},"repository":"https://github.com/htaunay/rmns","license":"ISC","homepage":"https://github.com/htaunay/rmns#readme","devDependencies":{"coveralls":"^2.11.14","istanbul":"^0.4.5","mocha":"^2.3.3","nodejs-dashboard":"^0.1.0","request":"^2.65.0","should":"^7.1.1","should-http":"0.0.4"},"dependencies":{"colors":"^1.1.2","math":"0.0.3","nan":"^2.4.0","node-version-compare":"^1.0.1"},"gypfile":true,"gitHead":"c992014ccdfacff31b61a40f534c84f431679434","versions":[{"number":"1.0.0","date":"2016-09-28T03:20:49.045Z"},{"number":"1.0.1","date":"2016-09-28T03:40:14.397Z"},{"number":"1.0.2","date":"2016-09-28T04:27:30.098Z"},{"number":"1.1.0","date":"2016-10-30T23:56:55.213Z"},{"number":"1.1.1","date":"2016-10-31T00:06:52.634Z"},{"number":"1.1.2","date":"2016-11-06T22:16:06.927Z"},{"number":"1.1.3","date":"2016-11-07T01:09:58.584Z"},{"number":"1.1.4","date":"2016-11-07T01:13:11.175Z"},{"number":"1.1.5","date":"2016-12-04T13:08:54.571Z"}],"readme":"[![Build Status](https://travis-ci.org/htaunay/rmns.svg?branch=master)](https://travis-ci.org/htaunay/rmns)\n[![Coverage Status](https://coveralls.io/repos/github/htaunay/rmns/badge.svg?branch=master)](https://coveralls.io/github/htaunay/rmns?branch=master)\n[![View this project on NPM](https://img.shields.io/npm/v/rmns.svg)](https://npmjs.org/package/rmns)\n[![Join the chat at https://gitter.im/htaunay/rmns](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/htaunay/rmns?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# rmns\n\nRemote Multiscale Navigation System\n\n## The Problem\n\nFreely navigating in a 3D virtual environment can prove to be problematic,\neven for the most experienced users[1], and\npossibly deal-breaking for laymen, especially when dealing with massive\nmultiscale scenes. Some systems are able to tackle such scenarios more easily\ngiven their nature (e.g., examine focused applications, an exocentric\ninteraction technique where the user can orbit and zoom in/out around a point\nof interest); however others that demand more navigation freedom (e.g., fly,\nan egocentric interaction technique) are more susceptible to user errors.\n\nThe problem of egocentric multiscale navigation has been tackled previously\nfrom mainly two distinct approaches: level of scale (LoS) based solutions, and\nautomatic speed adjustment solutions. In LoS based solutions, the virtual\nenvironment surrounding the camera --- or avatar --- grows/shrinks according\nto user input[2] (i.e., a navigation with seven\ndegrees of freedom (7DOF)); alternatively, the user can transit in and out\nfrom predefined discrete layers of scale[3]. The solution\npresented in this work follows the second approach, i.e. automatic speed\nadjustment, using the closest geometry position as input to heuristics that\ndetermine the optimal navigation speed at any given moment.\n\nExamples of this last approach used an image-based environment representation\nnamed *cubemap*[4][5]. Given the camera position, the cubemap is\nconstructed from 6 rendering passes, each in a different direction in order to\ncover the whole environment. Targeting a more fluid navigation experience\n(i.e., without discrete scene scale layers or manual scale adjustment) with\nsix degrees of freedom (6DOF), the cubemap technique is used to obtain an\nautomatic speed adjustment for the scenario, which has proved to be an\neffective multiscale interaction technique solution.\n\nHowever, recently a new limitation has arisen: the render bottleneck. As\nvirtual environment scenes grow in detail and complexity, despite the fast\nimprovements in modern hardware, rendering six screens per frame is a\nGPU-intensive operation and can become unfeasible given the scenario.\n\n## The Solution\n\nFollowing the motivation of eliminating such extra render steps, we propose a\nCPU based solution where the virtual environment's geometries are stored in a\n*k*-d tree[6]. This structure is used to obtain the nearest\nobjects --- visible as well as non-visible --- allowing the application of a\nsimilar but revisited heuristic used in the cubemap solution.\n\nWith this project, we introduce **rmns**, an isolated and language agnostic\ntool that offers the optimal navigation speed heuristic feature as a service,\nwhile also allowing such solution to be scaled with ease.\n\nThe **rmns** is a service made for defining an ideal velocity for navigation\nin 3D multiscale scenes. It bases itself on a heuristic that a optimal\nnavigation velocity is relative to the closest object to the camera in any\ngiven moment. On top of that, their are a number of improvements and\nadjustments to the heuristic, such as taking into account the nearest visible\nobject to influence the navigation's acceleration, as well as offering\noptimizations such as reducing the total number of points in the scene with a\nregular and normalized point grid.\n\nThis project was inspired by the \"A spatial partitioning heuristic for\nautomatic-adjustment of the 3D navigation speed in a multiscale virtual\nenvironment\"[7] paper, and more information can be found there.\n\n## Starting the service\n\nThe straight forward way to start-up a service is through npm and using the\ndefault configurations (found at `config/stand-alone.json`):\n\n```bash\n# Install rmns globally\nnpm install -g rmns\n\n# Start the server\nrmns\n\n# You can also specify a configuration file\nrmns /my/config/file.json\n```\nIn case you want to customize any configuration, take a\nlook at its [section](#configurations).\n\nTo start-up a server from the source, just follow these steps:\n\n```bash\n# Clone the repo\ngit clone git@github.com:htaunay/rmns.git\n\n# Install dependencies and build C++ code\nnpm install\nnpm run build\n\n# Just to be safe, make sure all tests are OK\nnpm test\n\n# Initialize the server\nnpm start\n\n# Monitor the system's performance in real-time\n# Exact same behavior as 'npm start', but with a dashboard\nnpm run dev\n```\n\n### Dependencies\n\nThis project depends on a Node.js version later than 0.12.0, and on gcc and\n[node-gyp](https://github.com/nodejs/node-gyp) for the C++ binding.\n\n## Consuming the service\n\nAll requests are made through HTTP requests, with a JSON body when necessary.\nHere is the latest API, along usage examples taking into account a local server\nrunning at the port 8081:\n\n### Points\n\nThe `/points` endpoint is for registering 3d points in the server's **k**-d tree.\nThe data structure should consist of an array, with a number of elements\nmultiple of three, otherwise an error will be returned. There is no size limit\nimposed by the service to the number of points in a single request, the limit\nis implicit by the max size of the HTTP request and possibly the JS compiler.\n\nExample:\n\n```bash\n# Register two points: p1 = vec3(0,1,2), p2 = vec3(0.1,0.2,0.3)\ncurl -XPOST -H 'Content-type: application/json' -d '[0,1,2,0.1,0.2,0.3]' localhost:8081/points\n```\n\n### Spheres\n\nThe `/spheres` endpoint is for registering sphere objects in the service. Every\nsphere must have and ID, since it offers the possibility of being updated.\nAn sphere object consists of a vec3 representing its center, and a float value\nrepresenting its radius, plus the id.\nThe data structure should consist of an array, where each element is an key/value\nobject.\n\nExample:\n\n```bash\n# Register two spheres: s1 = center(5,5,5) and radius = 2, s2 = center(-0.5,0,0.5) and radius = 100\ncurl -XPOST -H \"Content-type: application/json\" -d '[\n    {\n        \"id\": 1,\n        \"radius\": 2.0,\n        \"center\": {\"x\": 5, \"y\": 5, \"z\": 5}\n    },\n    {\n        \"id\": 2,\n        \"radius\": 100.0,\n        \"center\": {\"x\": -0.5, \"y\": 0, \"z\": 0.5}\n    },\n]' localhost:8081/spheres\n```\n\n### Velocity\n\nThe `velocity` endpoint uses the nearest point and sphere information, visible\nand global, and applies it to an heuristic in order to determine the optimal\nvelocity of navigation given a scene's state and camera's position. This method\nas uses as input pre-defined values specified at the service's configuration\nfile.\n\nExample:\n\n```bash\n# Get optimal speed given current camera state\ncurl -XPOST -H 'Content-type: application/json' -d '{\n    \"eye\": {\"x\": 0, \"y\": 0, \"z\": 0},\n    \"center\": {\"x\": 0, \"y\": 0, \"z\": -5},\n    \"up\": {\"x\": 0, \"y\": 1, \"z\": 0},\n    \"fovy\": 60.0,\n    \"aspect\": 1.66,\n    \"znear\": 1,\n    \"zfar\": 1000\n}' localhost:8081/velocity\n```\n\n### Stats\n\nThe `/stats` endpoint returns the current number of points and spheres already\nregistered in the server. The `/stats` endpoints takes no input.\n\nExample:\n\n```bash\ncurl localhost:8081/stats\n```\n\n### Reset\n\nThe `/reset` endpoint clears all data already registeredi, returning the server\nto its initial state. The `/reset` endpoints takes no input.\n\nExample:\n\n```bash\ncurl localhost:8081/reset\n```\n\n### Nearest Point\n\nThe `/nearest_point` endpoint returns the closest point in the **k**-d tree to\na given point object. There is also the `nearest_vpoint` endpoint, that as the\nvelocity endpoint, it takes a camera's state information as input.\n\nExample:\n\n```bash\n# Get nearest point to vec3(5,6,7)\ncurl -XPOST -H 'Content-type: application/json' -d '{\"eye\": {\"x\": 5, \"y\": 6, \"z\": 7}}' localhost:8081/nearest_point\n\n# Get nearest visible point\ncurl -XPOST -H 'Content-type: application/json' -d '{\n    \"eye\": {\"x\": 5, \"y\": 6, \"z\": 7},\n    \"center\": {\"x\": 0, \"y\": 0, \"z\": -5},\n    \"up\": {\"x\": 0, \"y\": 1, \"z\": 0},\n    \"fovy\": 60.0,\n    \"aspect\": 1.66,\n    \"znear\": 1,\n    \"zfar\": 1000\n}' localhost:8081/nearest_vpoint\n```\n\n### Nearest Sphere\n\nThe `/nearest_sphere` endpoint returns the closest sphere already registered to\na given point object. There is also the `nearest_vsphere` endpoint, that as the\nvelocity endpoint, it takes a camera's state information as input.\n\nExample:\n\n```bash\n# Get nearest sphere to vec3(5,6,7)\ncurl -XPOST -H 'Content-type: application/json' -d '{\"eye\": {\"x\": 5, \"y\": 6, \"z\": 7}}' localhost:8081/nearest_sphere\n\n# Get nearest visible sphere\ncurl -XPOST -H 'Content-type: application/json' -d '{\n    \"eye\": {\"x\": 5, \"y\": 6, \"z\": 7},\n    \"center\": {\"x\": 0, \"y\": 0, \"z\": -5},\n    \"up\": {\"x\": 0, \"y\": 1, \"z\": 0},\n    \"fovy\": 60.0,\n    \"aspect\": 1.66,\n    \"znear\": 1,\n    \"zfar\": 1000\n}' localhost:8081/nearest_vsphere\n```\n\n## Configurations\n\nAll server configurations must be made in a JSON file inside the `config` folder\nat the project's root. By default, the `stand-alone.json` file is used, but this\ncan be configured by using the `NODE_ENV` environment variable. For example, if\ndefined `NODE_ENV=master`, the server will try to load the `master.json` file\nfrom the `config` folder.\n\nA current config file for a stand-alone server contains the following variables:\n\n```js\n{\n    // Port number to run service\n    \"port\": \"8081\",\n    // Scale for fovy angle to use in visible search, 1.0 will keep default angle\n    \"visible_fovy\": 0.75,\n    // Trigger preprocessing optimization for joining close points\n    \"activate_grid\": false,\n    // Cell side size to be used during pre-processingi, only used if \"activate_grid\" is true\n    \"cell_size\": 1.0,\n    // Multiplier to be applied over final speed result on the \"/velocity\" endpoint\n    \"velocity_multiplier\": 1.0,\n    // Only set to true if you wish to work with slave servers (see next example)\n    \"is_master\": false\n}\n```\n\nNow the distributed example, pointing to slaves running on ports 8082 and 8083.\nIn this example, the server on 8083 is reponsabile for the visible point endpoint,\nwhile server 8082 is responsabile for the remaining nearest endpoints:\n\n```js\n{\n    \"port\": \"8081\",\n    \"visible_fovy\": 0.75,\n    \"activate_grid\": false,\n    \"cell_size\": 1.0,\n    \"velocity_multiplier\": 1.0,\n    \"is_master\": true,\n    \"slaves\": {\n        \"/stats\": {\n            \"ip\": \"127.0.0.1\",\n            \"port\": \"8082\"\n        },\n        \"/points\": [\n            {\n                \"ip\": \"127.0.0.1\",\n                \"port\": \"8082\"\n            },\n            {\n                \"ip\": \"127.0.0.1\",\n                \"port\": \"8083\"\n            }\n        ],\n        \"/spheres\": {\n            \"ip\": \"127.0.0.1\",\n            \"port\": \"8082\"\n        },\n        \"/reset\": [\n            {\n                \"ip\": \"127.0.0.1\",\n                \"port\": \"8082\"\n            },\n            {\n                \"ip\": \"127.0.0.1\",\n                \"port\": \"8083\"\n            }\n        ],\n        \"/nearest_point\": {\n            \"ip\": \"127.0.0.1\",\n            \"port\": \"8082\"\n        },\n        \"/nearest_vpoint\": {\n            \"ip\": \"127.0.0.1\",\n            \"port\": \"8083\"\n        },\n        \"/nearest_object\": {\n            \"ip\": \"127.0.0.1\",\n            \"port\": \"8082\"\n        },\n        \"/nearest_vobject\": {\n            \"ip\": \"127.0.0.1\",\n            \"port\": \"8082\"\n        }\n    }\n}\n```\n\n## References\n\n[1] FITZMAURICE, G. W.; MATEJKA, J.; MORDATCH, I.; KHAN, A. ; KURTENBACH,\nG.. **Safe 3D navigation**. In: Haines, E.; McGuire, M., editors,\nSI3D, p. 7{15. ACM, 2008.\n\n[2] ZHANG, **X.. Multiscale traveling: crossing the boundary between space\nand scale**. Virtual Reality, 13(2):101{115, 2009.\n\n[3] KOPPER, R.; NI, T.; BOWMAN, D. A. ; PINHO, M.. **Design and evaluation\nof navigation techniques for multiscale virtual environments**. In: VR '06:\nPROCEEDINGS OF THE IEEE VIRTUAL REALITY CONFERENCE (VR\n2006), p. 24, Washington, DC, USA, 2006. IEEE Computer Society.\n\n[4] MCCRAE, J.; MORDATCH, I.; GLUECK, M. ; KHAN, A.. **Multiscale\n3d navigation**. In: PROCEEDINGS OF THE 2009 SYMPOSIUM ON\nINTERACTIVE 3D GRAPHICS AND GAMES, I3D '09, p. 7{14, New York,\nNY, USA, 2009. ACM.\n\n[5] TRINDADE, D.; RAPOSO, A.. **Improving 3D navigation techniques in\nmultiscale environments: a cubemap-based approach**. Multimedia Tools\nand Applications, 73(2):939{959, 2014.\n\n[6] BENTLEY, J. L.. **Multidimensional binary search trees used for associative\nsearching**. Communications of the ACM, 18(9):509{517, Sept. 1975.\n\n[7] H. Taunay, V. Rodrigues, R. Braga, P. Elias, L. Reis, and A. Raposo.\n**A Spatial Partitioning Heuristic for Automatic Adjustment of the\n3D Navigation Speed in Multiscale Virtual Environments**. In IEEE\nSymposium on 3D User Interfaces (3DUI), pages 51–58, 2015.\n\n","created":"2016-09-28T03:20:49.045Z","modified":"2016-12-04T13:08:54.571Z","lastPublisher":{"name":"htaunay","email":"henrique@taunay.me"},"owners":[{"name":"htaunay","email":"henrique@taunay.me"}],"other":{"_attachments":{},"_from":".","_id":"rmns","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/rmns-1.1.5.tgz_1480856932300_0.0737806165125221"},"_npmUser":{"name":"htaunay","email":"henrique@taunay.me"},"_npmVersion":"3.10.8","_rev":"7-9eb79099ba4b23000343cf7e436cdfde","_shasum":"9d569a031f01d0a425be0b10de67f30e60e5c2eb","author":{"name":"Henrique Taunay"},"bugs":{"url":"https://github.com/htaunay/rmns/issues"},"directories":{},"dist-tags":{"latest":"1.1.5"},"dist":{"shasum":"9d569a031f01d0a425be0b10de67f30e60e5c2eb","tarball":"http://registry.npmjs.org/rmns/-/rmns-1.1.5.tgz"},"maintainers":[{"name":"htaunay","email":"henrique@taunay.me"}],"readmeFilename":"README.md","time":{"modified":"2016-12-04T13:08:54.571Z","created":"2016-09-28T03:20:49.045Z","1.0.0":"2016-09-28T03:20:49.045Z","1.0.1":"2016-09-28T03:40:14.397Z","1.0.2":"2016-09-28T04:27:30.098Z","1.1.0":"2016-10-30T23:56:55.213Z","1.1.1":"2016-10-31T00:06:52.634Z","1.1.2":"2016-11-06T22:16:06.927Z","1.1.3":"2016-11-07T01:09:58.584Z","1.1.4":"2016-11-07T01:13:11.175Z","1.1.5":"2016-12-04T13:08:54.571Z"}}}