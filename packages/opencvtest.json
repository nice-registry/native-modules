{"name":"opencvtest","version":"4.0.0","description":"Node Bindings to OpenCV","dependencies":{"buffers":"^0.1.1","nan":"^2.0.9","node-pre-gyp":"^0.6.11"},"devDependencies":{"tape":"^3.0.0","aws-sdk":"~2.1.20","glob":"^5.0.3","request":"^2.44.0"},"license":"MIT","scripts":{"build":"node-gyp build","test":"node test/unit.js","install":"node-pre-gyp install --fallback-to-build"},"keywords":["opencv","computer","vision","quadrocopter"],"main":"./lib/opencv","repository":"https://github.com/peterbraden/node-opencv","engines":{"node":">=0.12"},"binary":{"module_name":"opencv","module_path":"./build/{module_name}/v{version}/{configuration}/{node_abi}-{platform}-{arch}/","remote_path":"./{module_name}/v{version}/{configuration}/","package_name":"{node_abi}-{platform}-{arch}.tar.gz","host":"https://node-opencv.s3.amazonaws.com"},"gitHead":"d45e74a0aad1200e009e0540a024da3bb2b87bee","homepage":"https://github.com/peterbraden/node-opencv#readme","bundleDependencies":["node-pre-gyp"],"versions":[{"number":"4.0.0","date":"2015-12-22T08:14:41.009Z"}],"readme":"# node-opencv \n\n[![Build Status](https://secure.travis-ci.org/peterbraden/node-opencv.png)](http://travis-ci.org/peterbraden/node-opencv)\n\n\n[OpenCV](http://opencv.org) bindings for Node.js. OpenCV is\nthe defacto computer vision library - by interfacing with it natively in node,\nwe get powerful real time vision in js.\n\nPeople are using node-opencv to fly control quadrocoptors, detect faces from\nwebcam images and annotate video streams. If you're using it for something\ncool, I'd love to hear about it!\n\n## Install\n\nYou'll need OpenCV 2.3.1 or newer installed before installing node-opencv.\n\n## Specific for Windows\n1. Download Install opencv @ - (I used version 2.4.4)\nhttp://opencv.org/downloads.html\nPut it in c:\\opencv\n\n2. Install python version 2.7 @\nhttp://www.python.org/download/releases/2.7/\nput it in c:\\python27\n\n3. install pkg-config by downloading the all in one bundle @ - (I used Gtk+ 3.6.4)\nhttp://www.gtk.org/download/win64.php\nput it in c:\\pkg-config\n\n4. Add the following to your path variables\nC:\\pkg-config\\bin;C:\\OpenCV\\build\\x64\\vc11\\bin;\n\n5. Install visual-studio in 4 steps\n\n  - install Visual C++ 2010 Express\n  \n  - install Windows SDK for windows 7 and .net framework 4\n  \n  - install Visual Studio 2010 Service Pack 1\n  \n  - install Visual C++ 2010 Service Pack 1 Compiler\n\n\n6. Download npeterbraden/node-opencv fork\ngit clone https://github.com/peterbraden/node-opencv\n\n7. edit file src/Matrix.cpp\nput \"inline double round( double d ) { return floor( d + 0.5);}\" below \"cv::Rect* setRect(Local<Object> objRect, cv::Rect &result);\"\n\n8. run npm install\n\nThen:\n\n```bash\n$ npm install opencv\n```\n\n## Examples\nRun the examples from the parent directory.\n\n### Face Detection\n\n```javascript\ncv.readImage(\"./examples/files/mona.png\", function(err, im){\n  im.detectObject(cv.FACE_CASCADE, {}, function(err, faces){\n    for (var i=0;i<faces.length; i++){\n      var x = faces[i]\n      im.ellipse(x.x + x.width/2, x.y + x.height/2, x.width/2, x.height/2);\n    }\n    im.save('./out.jpg');\n  });\n})\n```\n\n\n## API Documentation\n\n### Matrix\n\nThe [matrix](http://opencv.jp/opencv-2svn_org/cpp/core_basic_structures.html#mat) is the most useful\nbase datastructure in OpenCV. Things like images are just matrices of pixels.\n\n#### Creation\n\n```javascript\nnew Matrix(rows, cols)\n```\n\nOr if you're thinking of a Matrix as an image:\n\n```javascript\nnew Matrix(height, width)\n```\n\nOr you can use opencv to read in image files. Supported formats are in the OpenCV docs, but jpgs etc are supported.\n\n```javascript\ncv.readImage(filename, function(err, mat){\n  ...\n})\n\ncv.readImage(buffer, function(err, mat){\n  ...\n})\n```\n\nIf you need to pipe data into an image, you can use an ImageDataStream:\n\n```javascript\nvar s = new cv.ImageDataStream()\n\ns.on('load', function(matrix){\n  ...\n})\n\nfs.createReadStream('./examples/files/mona.png').pipe(s);\n```\n\nIf however, you have a series of images, and you wish to stream them into a\nstream of Matrices, you can use an ImageStream. Thus:\n\n```javascript\nvar s = new cv.ImageStream()\n\ns.on('data', function(matrix){\n   ...\n})\n\nardrone.createPngStream().pipe(s);\n```\n\nNote: Each 'data' event into the ImageStream should be a complete image buffer.\n\n\n\n#### Accessing Data\n\n```javascript\nvar mat = new cv.Matrix.Eye(4,4); // Create identity matrix\n\nmat.get(0,0) // 1\n\nmat.row(0)  // [1,0,0,0]\nmat.col(4)  // [0,0,0,1]\n```\n\n##### Save\n\n```javascript\nmat.save('./pic.jpg')\n```\n\nor:\n\n```javascript\nvar buff = mat.toBuffer()\n```\n\n#### Image Processing\n\n```javascript\nim.convertGrayscale()\nim.canny(5, 300)\nim.houghLinesP()\n```\n\n\n#### Simple Drawing\n\n```javascript\nim.ellipse(x, y)\nim.line([x1,y1], [x2, y2])\n```\n\n#### Object Detection\n\nThere is a shortcut method for \n[Viola-Jones Haar Cascade](http://www.cognotics.com/opencv/servo_2007_series/part_2/sidebar.html) object \ndetection. This can be used for face detection etc.\n\n```javascript\nmat.detectObject(haar_cascade_xml, opts, function(err, matches){})\n```\n\nFor convenience in face detection, cv.FACE_CASCADE is a cascade that can be used for frontal face detection.\n\nAlso:\n\n```javascript\nmat.goodFeaturesToTrack\n```\n\n#### Contours\n\n```javascript\nmat.findCountours\nmat.drawContour\nmat.drawAllContours\n```\n\n### Using Contours\n\n`findContours` returns a `Contours` collection object, not a native array. This object provides\nfunctions for accessing, computing with, and altering the contours contained in it.\nSee [relevant source code](src/Contours.cc) and [examples](examples/)\n\n```javascript\nvar contours = im.findContours;\n\n// Count of contours in the Contours object\ncontours.size();\n\n// Count of corners(verticies) of contour `index`\ncontours.cornerCount(index);\n\n// Access vertex data of contours\nfor(var c = 0; c < contours.size(); ++c) {\n  console.log(\"Contour \" + c);\n  for(var i = 0; i < contours.cornerCount(c); ++i) {\n    var point = contours.point(c, i);\n    console.log(\"(\" + point.x + \",\" + point.y + \")\");\n  }\n}\n\n// Computations of contour `index`\ncontours.area(index);\ncontours.arcLength(index, isClosed);\ncontours.boundingRect(index);\ncontours.minAreaRect(index);\ncontours.isConvex(index);\ncontours.fitEllipse(index);\n\n// Destructively alter contour `index`\ncontours.approxPolyDP(index, epsilon, isClosed);\ncontours.convexHull(index, clockwise);\n```\n\n## MIT License\nThe library is distributed under the MIT License - if for some reason that\ndoesn't work for you please get in touch.\n\n","created":"2015-12-22T08:14:41.009Z","modified":"2015-12-22T08:14:41.009Z","lastPublisher":{"name":"iamblue","email":"tonyone0902@gmail.com"},"owners":[{"name":"iamblue","email":"tonyone0902@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"opencvtest","_nodeVersion":"0.10.28","_npmUser":{"name":"iamblue","email":"tonyone0902@gmail.com"},"_npmVersion":"2.9.0","_rev":"1-b6033623213a82b4d1e36325dc5059fa","_shasum":"7f3b9dc0d5b11e540dcb24569001c8133c2a7f90","author":{"name":"Peter Braden","email":"peterbraden@peterbraden.co.uk"},"bugs":{"url":"https://github.com/peterbraden/node-opencv/issues"},"directories":{},"dist-tags":{"latest":"4.0.0"},"dist":{"shasum":"7f3b9dc0d5b11e540dcb24569001c8133c2a7f90","tarball":"http://registry.npmjs.org/opencvtest/-/opencvtest-4.0.0.tgz"},"maintainers":[{"name":"iamblue","email":"tonyone0902@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-12-22T08:14:41.009Z","created":"2015-12-22T08:14:41.009Z","4.0.0":"2015-12-22T08:14:41.009Z"}}}