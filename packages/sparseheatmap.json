{"name":"sparseheatmap","version":"1.1.1","description":"A high speed heatmap generator for Node based on sparse matrices.","main":"index.js","scripts":{"test":"test/test.js","install":"node-gyp rebuild"},"repository":"https://github.com/alexsaves/sparseheatmap","license":"ISC","homepage":"https://github.com/alexsaves/node-heatmap#readme","dependencies":{"bindings":"^1.2.1","jimp":"^0.2.19","nan":"^2.1.0"},"gypfile":true,"gitHead":"818f0f2d2b3a06df3ce104a4d26de005532fb896","versions":[{"number":"1.0.0","date":"2015-11-28T01:28:06.472Z"},{"number":"1.0.1","date":"2015-11-28T02:18:27.012Z"},{"number":"1.0.3","date":"2015-11-29T07:55:18.881Z"},{"number":"1.0.4","date":"2015-11-29T22:23:57.353Z"},{"number":"1.0.6","date":"2015-11-30T04:52:01.298Z"},{"number":"1.0.7","date":"2015-11-30T18:23:47.568Z"},{"number":"1.0.8","date":"2015-11-30T19:28:32.708Z"},{"number":"1.1.1","date":"2015-12-07T00:32:13.162Z"}],"readme":"SparseHeatmap\n===================\nA high-speed heatmap generator using sparse matrices for NodeJS. Uses native extensions to maximize performance.\n###Installation &nbsp;  [![npm version](https://badge.fury.io/js/sparseheatmap.svg)](http://badge.fury.io/js/sparseheatmap)\n```sh\nnpm install sparseheatmap\n```\n###Heatmap Types\nTwo general types of heatmaps are supported currently: canvas and scrolling. Scrolling heatmaps show only a vertical heatmap of exposure time for a scrolling region of space.\n\nCanvas heatmaps are traditional spacial maps. These can represent any type of 2D coordinate data, but the API is oriented around a UI heatmap and includes convenience features for combining responsive UI's.\n\n![Heatmap types](https://raw.githubusercontent.com/alexsaves/sparseheatmap/master/docs/images/overall_example.png)\n\n###Intensity Normalization\nThe way intensities are calculated is by additively combining all the individual sparse matrices into a single height-map, and then normalizing by the maximum values. In some cases, this can 'wash out' some of the low-intensity detail. In these cases, try playing with the low-pass filter feature.\n\nBy default, no filter is applied. To use a low-pass filter, set the ``FILTER`` attribute:\n\n```javascript\nvar sparse = require('sparseheatmap');\n\n// sparse.FILTER = sparse.FILTERS.NONE;\nsparse.FILTER = sparse.FILTERS.LOWPASS;\n```\n![Low-pass filters](https://raw.githubusercontent.com/alexsaves/sparseheatmap/master/docs/images/lp_example.png)\n\n###Usage\nSparseHeatmap can efficiently combine many individual datasets together into a single heatmap. Think of a dataset (represented by a ``SparseArray``) as a single session. For example, in the case of websites, a single dataset could represent the mouse movements of a particular user. \n\nUsage varies depending on what type of map you are producing. For regular 2D spacial maps, begin by converting your coordinate data to ``SparseArray`` format like so:\n\n```javascript\nvar heatmap = require('sparseheatmap');\n\nvar data = [];\n// Add two sets of data:\ndata.push(new heatmap.SparseArray(heatmap.LAYOUTS.CENTERFIXEDWIDTH, 600, 800, [1, 23, 94, 1, 103, 582]));\ndata.push(new heatmap.SparseArray(heatmap.LAYOUTS.CENTERFIXEDWIDTH, 780, 900, [2, 193, 52, 1, 503, 882]));\n```\n\nUltimately, the data you pass to the ``SparseHeatmap`` constructor should be an array of ``SparseArray`` instances. The constructor for ``SparseArray`` is:\n\n```javascript\nSparseArray(layout, width, height, coords)\n```\n\nThe ``layout`` attribute is one of the available ``SparseHeatmap.LAYOUTS`` and the options are:\n\n * ``CENTERFIXEDWIDTH`` - This is the most common layout for web pages. Use this when you have a fixed-width column in the middle of the page that centers itself as the user resizes the window. Coordinate data will be lined up along a common axis in the middle of the final heatmap.\n * ``STRETCH`` - Use this if the layout is mostly responsive and sizes proportionally with the width of the window. Coordinates will be scaled along the x-axis.\n * ``LEFTFIXEDWIDTH`` - This is for layouts that have a mostly fixed-width but flush with the left-hand side of the UI.\n * ``VERTICALSCROLL`` - This is for scroll heatmaps. This is covered below.\n \nThe ``width`` and ``height`` attributes are the pixel sizes of the canvas used to collect these particular coordinates. \n\nThe ``coords`` paramters is an array of integers in a ``n``, ``x``, ``y`` sequence. The ``n`` value is the 'amplitude' of this coordinate (usually 1), and ``x``, and ``y`` are the coordinates of the data point. This sequence can repeat in a contiguous stream of coordinates. Amplitudes are for situations where (for example) there are two clicks in exactly the same place for the same dataset.\n\nOnce you have an array of ``SparseArray`` instances, pass it to the heatmap constructor:\n\n```javascript\nvar myHmPNG = new heatmap(canvasWidth, canvasHeight, finalPNGWidth, layout, data, blobtype, callback);\n```\n\nThe first two attributes: ``canvasWidth`` and ``canvasHeight`` are similar to the width and heights you passed to each ``SparseArray``. They represent the size of the canvas you are projecting all your datapoints onto. The next attribute: ``finalPNGWidth`` is the width of the PNG you want generated. We use a smooth up-sampling technique to ensure that images look smooth at any size. The height of the resulting PNG will be determined by the aspect ratio of the canvas.\n\nThe ``layout`` attribute also uses the ``SparseHeatmap.LAYOUTS`` enumerable and should be the same as the value you used for each of the sparse arrays.\n\nYour ``data`` comes from the array of ``SparseArray`` instances. The ``blobtype`` attribute is an enumerable and comes from ``SparseHeatmap.BLOBTYPES`` object. Possible values are:\n\n * ``SparseHeatmap.BLOBTYPE.LARGE`` - A large blob. Heatmaps will look busier and have bigger markings for coordinate data.\n * ``SparseHeatmap.BLOBTYPE.SMALL`` - A smaller, more precise blob.\n \nThe ``callback`` attribute, a function, will contain one argument which will be a ``Buffer`` containing the encoded PNG data.\n\nHere is an example:\n\n```javascript\nvar hm = new heatmap(canvasWidth, canvasHeight, finalPNGWidth, heatmap.LAYOUTS.CENTERFIXEDWIDTH, data, heatmap.BLOBTYPE.LARGE, function (dta) {\n  fs.writeFile(\"canvas.png\", dta, function (err) {\n    if (err) {\n      return console.log(err);\n    }    \n  });\n});\n```\n\nScroll heatmaps are a little different. We currently handle scroll heatmaps in 1 dimension only. Use a SparseArray, but think of the coordinate data as a string of intensities from a particular session. For example, if you wanted to represent the fact that most users scrolled down the page 5 pixels and stayed there (and had a window size of 10 pixels), you might have a lot of datasets that look like:\n\n```javascript\n[3, 3, 3, 3, 15, 40, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n```\n\nAlso, we have the ability to specify a multiplier so that each coordinate actually represents an area of x pixels of screen space. This is for more efficient storage and processing of this data.\n\n```javascript\nvar heatmap = require('sparseheatmap');\n\nvar data = [];\n// Add two sets of data:\ndata.push(new heatmap.SparseArray(heatmap.LAYOUTS.VERTICALSCROLL, 600, 800, [20, 30, 30, 40, 50, ...]));\ndata.push(new heatmap.SparseArray(heatmap.LAYOUTS.VERTICALSCROLL, 780, 900, [90, 85, 76, 60, 56, ...]));\n```\n\nThen, when it comes to building the heatmap itself, you can omit the ``BLOBTYPE`` parameter:\n\n```javascript\nvar hm = new heatmap(canvasWidth, canvasHeight, finalPNGWidth, heatmap.LAYOUTS.VERTICALSCROLL, data, pixelsPerCoord, function (dta) {\n    fs.writeFile(\"scroll.png\", dta, function (err) {\n        if (err) {\n            return console.log(err);\n        }\n    });\n});\n```\n\nIn this example, the ``pixelsPerCoord`` attribute represents the compression - the number of y-axis pixels represented by each step in the data from top to bottom.\n\n###Custom Color Maps\nA default color map is provided, but you can override it. To do this, override the ``SparseHeatmap.COLORMAP`` array. Populate it with new colors by calling the ``SparseHeatmap.createColorMap(r, g, b, a)`` function which accepts values from between ``0`` and ``255``. Eg:\n\n```javascript\nvar sparse = require('sparseheatmap');\n\nsparse.COLORMAP = []; // Empty it out\n\n// WHITE / TRANSPARENT\nsparse.COLORMAP = sparse.COLORMAP.concat(sparse.createColorMap(255, 255, 255, 0));\n\n// BLUE\nsparse.COLORMAP = sparse.COLORMAP.concat(sparse.createColorMap(0, 0, 255, 80));\n\n// CYAN\nsparse.COLORMAP = sparse.COLORMAP.concat(sparse.createColorMap(0, 255, 255, 120));\n\n// GREEN\nsparse.COLORMAP = sparse.COLORMAP.concat(sparse.createColorMap(0, 255, 0, 160));\n\n// YELLOW\nsparse.COLORMAP = sparse.COLORMAP.concat(sparse.createColorMap(255, 255, 0, 200));\n\n// RED\nsparse.COLORMAP = sparse.COLORMAP.concat(sparse.createColorMap(255, 0, 0, 230));\n```\n###Trimming Edge Values\nIt's possible to pass trimming parameters into your heatmap to omit coordinates on the edges of your datasets. You might to this if there is edge-noise in your data that you want efficiently eliminated. You can specify trimming values on canvas heatmaps only:\n\n```javascript\nvar hm = new heatmap(canvasWidth, canvasHeight, finalPNGWidth, heatmap.LAYOUTS.CENTERFIXEDWIDTH, data, heatmap.BLOBTYPE.LARGE, function (dta) {\n  fs.writeFile(\"canvas.png\", dta, function (err) {\n    if (err) {\n      return console.log(err);\n    }    \n  });\n}, trimPixelsLeft, trimPixelsTop, trimPixelsRight, trimPixelsBottom);\n```\n\nThe trim values are in pixels and specified after your callback.\n\n###Debug Mode\nAdditional console messages (including timings) can be made available by turning on the ``SparseHeatmap._DEBUGMODE_`` boolean.\n```javascript\nvar sparse = require('sparseheatmap');\nsparse._DEBUGMODE_ = true;\n```\n","created":"2015-11-28T01:28:06.472Z","modified":"2015-12-07T00:32:13.162Z","lastPublisher":{"name":"alexei.white","email":"alexei.white@gmail.com"},"owners":[{"name":"alexei.white","email":"alexei.white@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"sparseheatmap","_nodeVersion":"5.1.1","_npmUser":{"name":"alexei.white","email":"alexei.white@gmail.com"},"_npmVersion":"3.3.12","_rev":"1-0b62163638863bf69d2ad65b2cb41991","_shasum":"d1b8d778d7e06044a5f2266ea9c8dc6d6a8ccdfc","author":{"name":"Alexei White","email":"alexei.white@gmail.com"},"bugs":{"url":"https://github.com/alexsaves/node-heatmap/issues"},"directories":{},"dist-tags":{"latest":"1.1.1"},"dist":{"shasum":"d1b8d778d7e06044a5f2266ea9c8dc6d6a8ccdfc","tarball":"http://registry.npmjs.org/sparseheatmap/-/sparseheatmap-1.1.1.tgz"},"maintainers":[{"name":"alexei.white","email":"alexei.white@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-12-07T00:32:13.162Z","created":"2015-11-28T01:28:06.472Z","1.0.0":"2015-11-28T01:28:06.472Z","1.0.1":"2015-11-28T02:18:27.012Z","1.0.3":"2015-11-29T07:55:18.881Z","1.0.4":"2015-11-29T22:23:57.353Z","1.0.6":"2015-11-30T04:52:01.298Z","1.0.7":"2015-11-30T18:23:47.568Z","1.0.8":"2015-11-30T19:28:32.708Z","1.1.1":"2015-12-07T00:32:13.162Z"}}}