{"name":"node-caffe","version":"1.13.0","description":"Caffe bindings for node","repository":"https://github.com/silklabs/node-caffe","main":"build/Release/caffe.node","scripts":{"install":"node-gyp rebuild","lint":"eslint --fix .","mocha":"mocha $(find test -name '*_test.js')","preinstall":"./install-caffe.sh","test":"npm run mocha"},"keywords":["caffe"],"license":"MIT","engines":{"node":">=4.4.0"},"dependencies":{"nan":"2.4.0"},"devDependencies":{"babel-eslint":"7.1.1","eslint":"3.11.1","eslint-plugin-flowtype":"2.29.1","eslint-config-silk":"^1.0.0","mocha":"2.4.5"},"gypfile":true,"homepage":"https://github.com/silklabs/node-caffe#readme","versions":[{"number":"0.0.1","date":"2016-07-02T21:55:15.178Z"},{"number":"0.0.2","date":"2016-12-04T05:33:19.543Z"},{"number":"1.9.0","date":"2017-01-27T20:41:27.168Z"},{"number":"1.9.1","date":"2017-02-25T22:55:21.589Z"},{"number":"1.13.0","date":"2017-07-19T21:26:20.946Z"}],"readme":"node-caffe\n==========\n\nCaffe bindings for node.\n\n* Simple to use\n* Allows Javascript to inspect layers and their content\n* Support to classify and train networks\n* Custom layer type (BufferedDataLayer) to feed data into network directly from JS\n\nUsage\n-----\n\nTo build the npm module first build Caffe and set \"CAFFE_ROOT\" to the distribute\ndirectory inside Caffe (the source directory is not sufficient, we need the\ncompiled proto file \"caffe.pb.h\"). Make sure you use \"make distribute\" when\nbuilding Caffe.\n\n    export CAFFE_ROOT=~/workspace/caffe/distribute\n\nHere is an example how to instantiate a network:\n\n    var net = new caffe.Net('lenet.prototxt', 'test'); // or 'train'\n    var data = new Blob([1,1,24,24]);\n    var label = new Blob([1,1]);\n    data.data[17] = 42; // mnist data\n    label.data[0] = 1; // label\n    net.layers[0].enqueue([data, label]); // will be drained by forward()\n    net.forward(loss => console.log(loss, net.layers[net.layers.length-1].data));\n\nGPU vs CPU_ONLY\n---------------\n\nIf Caffee is built with CPU_ONLY (no CUDA support), the node module must be\nbuilt with CPU_ONLY to prevent a mismatch between Caffe header files and\nthe Caffe library. We try to detect whether CPU_ONLY should be set by\nchecking for the presence of an installed CUDA SDK. This means that if you\nhave CUDA installed, please always compile Caffe WITH CUDA support, or bad\nthings will happen. If you do decide to use Caffe without CUDA, make sure\nto remove the CUDA SDK or change bindings.gyp.\n\nBlob\n----\n\nBlob is the basic data abstraction in Caffe. To construct a Blob object, pass\nthe shape as an array of dimensions to the constructor.\n\n    var blob = new caffe.Blob([1,2,3,4])\n    console.log(blob.shape, blob.data, blob.diff);\n\nUse 'data' and 'diff' to access to underlying data, which is returned as a\ntyped array (Float32Array or Float64Array). Each access to the 'data' and\n'diff' getters forces the data to be mapped into CPU memory. Keeping a copy\nof the typed array can be dangerous since Caffe may drop the mapping, so its\nbest to only access the memory until the next Caffe method is called.\n\nLayer\n-----\n\nLayers should not be constructed directly. Net constructs them when loading\na network description.\n\nThe bindings add a custom layer type (BufferedDataLayer) to Caffe which can\nbe used to feed data into networks that is supplied by a JavaScript callback.\n\n'enqueue' and \"queueLength\" throw if called on any other layer type. Blob\narrays added with enqueue() will be drained by each call to net.forward().\nTrying to mutate blobs that were passed to enqueue() is a bad idea.\n\nNet\n---\n\nSupply a network description and the phase ('test' or 'train') to the Net\nconstructor to instantiate a network.\n\n    var net = new caffe.Net('lenet.prototxt', 'test'); // or 'train'\n    net.layers.forEach((layer, n) => console.log(net.layer_names[n], layer));\n    net.blobs.forEach((blob, n) => console.log(net.blob_names[n], blob));\n\nLayers and Blobs can be accessed with 'layers' and 'blobs', both of which\nare arrays. The name of each Layer and Blob is stored in 'layer_names' and\n'blob_names'.\n\nTo copy data from a model file, use 'copyTrainedLayersFrom'.\n\nSolver\n------\n\nSolver instantiates train and test networks. To access them use 'net'\nand 'test_nets'. The latter is an array since multiple test nets are\nsupported by Caffe.\n\nUse 'solve' to run the solver.\n\n    var solver = new Solver('./tests/lenet_solver.prototxt');\n    solver.solve(() => console.log('done!'));\n\nFloat vs Double\n---------------\n\nThe bindings support Float and Double variants of each data type, called\n\"BlobFloat\" and \"BlobDouble\". An alias is set for each type (\"Blob\"),\nthat defaults to the \"Float\" variant.\n\nMulti-GPU support\n-----------------\n\nTo use multiple GPUs, enable GPU support and make sure to create a solver\nfor each GPU:\n\n    caffe.mode = \"GPU\";\n    console.log(caffe.deviceQuery);\n    caffe.solverCount = caffe.gpus.length;\n\nOnce this has been done, solve(), step() and stepSync() automatically support\ntraining across all available GPUs and weights are synchronized after every\niteration.\n\n    solver.stepSync();\n","created":"2016-07-02T21:55:15.178Z","modified":"2017-07-19T21:26:20.946Z","lastPublisher":{"name":"mvines","email":"mvines@silklabs.com"},"owners":[{"name":"andreasgal","email":"andreas.gal@gmail.com"},{"name":"mvines","email":"mvines@silklabs.com"}],"other":{"_attachments":{},"_from":".","_id":"node-caffe","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-caffe-1.13.0.tgz_1500499580802_0.7567775123752654"},"_npmUser":{"name":"mvines","email":"mvines@silklabs.com"},"_npmVersion":"3.9.2","_rev":"6-ffcaf373e7fe50778e144300c28041fa","_shasum":"5520d3ac8b9bbb840499c3388edebbcca2328ce9","author":{"name":"Andreas Gal"},"bugs":{"url":"https://github.com/silklabs/node-caffe/issues"},"directories":{},"dist-tags":{"latest":"1.13.0"},"dist":{"shasum":"5520d3ac8b9bbb840499c3388edebbcca2328ce9","tarball":"https://registry.npmjs.org/node-caffe/-/node-caffe-1.13.0.tgz"},"maintainers":[{"name":"andreasgal","email":"andreas.gal@gmail.com"},{"name":"mvines","email":"mvines@silklabs.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-19T21:26:20.946Z","created":"2016-07-02T21:55:15.178Z","0.0.1":"2016-07-02T21:55:15.178Z","0.0.2":"2016-12-04T05:33:19.543Z","1.9.0":"2017-01-27T20:41:27.168Z","1.9.1":"2017-02-25T22:55:21.589Z","1.13.0":"2017-07-19T21:26:20.946Z"}}}