{"name":"@voltraco/taglib","description":"Simple bindings to TagLib","version":"0.8.2","repository":"https://github.com/nikhilm/node-taglib","main":"taglib.node","dependencies":{"bindings":"1.0.0","nan":"^2.2.0"},"devDependencies":{"vows":">=0.6.0","async":">=0.1.0","match-files":"latest"},"scripts":{"test":"vows --spec","install":"node-gyp rebuild"},"engines":{"node":">=0.10.0 <0.11"},"gypfile":true,"gitHead":"e3556568434a148f31f9691add4107fd7626bc07","homepage":"https://github.com/nikhilm/node-taglib#readme","versions":[{"number":"0.8.1","date":"2016-04-05T17:37:55.690Z"},{"number":"0.8.2","date":"2016-04-05T17:40:37.202Z"}],"readme":"node-taglib\n===========\n\nnode-taglib is a simple binding to\n[TagLib](http://developer.kde.org/~wheeler/taglib/) in Javascript.\n\nIt requires [node.js](http://nodejs.org) and taglib header files (on Debian systems, install `libtag1-dev`).\n\nnode-taglib offers only an abstract interface without giving access to extended\nfile-specific attributes. It does allow custom resolvers though. Synchronous\nwrite support is supported for Tag.\n\n**NOTE: Asynchronous API requires use of TagLib [from git][taglib-git] since\ncertain bugs present in the released v1.7 cause problems.**\n\n[taglib-git]: https://github.com/taglib/taglib\n\n## Example\n\n```js\n// load the library\nvar taglib = require('taglib');\n\n// asynchronous API\ntaglib.tag(path, function(err, tag) {\n    tag.artist; // => \"Queen\"\n    tag.title = \"Erm\";\n    tag.saveSync();\n});\n\n// synchronous API\nvar tag = taglib.tagSync(path);\n\ntag.title; // => \"Another one bites the dust\"\ntag.artist; // => \"Kween\"\ntag.artist = \"Queen\";\n\ntag.isEmpty(); // => false\n\ntag.saveSync(); // => true\n```\n\n## Installation\n\n### via npm (Recommended)\n\n    npm install taglib\n\n### From source\n\n    # make sure you have node and taglib installed\n    git clone git://github.com/nikhilm/node-taglib.git\n    cd node-taglib\n    npm install .\n    node examples/simple.js /path/to/mp3_or_ogg_file\n    # you can now require('./taglib')\n\nThe `examples` show usage.\n\n## API\n\n### read(path, callback)\n### read(buffer, format, callback)\n\nThe function you will most likely want to use. `callback` should have signature\n`callback(err, tag, audioProperties)` where `tag` and `audioProperties` are\nplain-old JavaScript objects. For the distinction between these and `Tag`, see\n`Tag` below.\n\nIf there was an error reading the file, `err` will be non-null and `tag` and\n`audioProperties` will be `null`.\n\nIf no tag was found, `tag` will be an empty object (falsy). `tag` can have the\nfollowing fields. node-taglib currently supports only the fields common to all\nformats:\n\n* title   (string)\n* album   (string)\n* comment (string)\n* artist  (string)\n* track   (string)\n* year    (integer)\n* genre   (string)\n\nIf no audio properties could be read, `audioProperties` will be an empty object\n(falsy). The following fields are available in `audioProperties`, all are\nintegers:\n\n* length\n* bitrate\n* sampleRate\n* channels\n\nWriting audio properties is not supported.\n\nIn the second variant, which can read from a buffer, `format` should be\na string as specified in [Formats](#formats).\n\n### tag(path, callback)\n### tag(buffer, format, callback)\n\nRead the tag from the file at `path` _asynchronously_. The callback should have\nsignature `(err, tag)`. On success, `err` will be `null` and `tag` will be\na `Tag`. If errors occurred, `err` will contain the error and\n`tag` will be `null`. `err` will be an object with field `code` having the\ninteger error code (`errno.h`) and field `message` will have a string\nrepresentation.\n\nIn the second variant, which can read from a buffer, `format` should be\na string as specified in [Formats](#formats).\n\n### tagSync(path)\n### tagSync(buffer, format)\n\nRead the tags from the file at `path` _synchronously_. Returns a `Tag`. If\nerrors occurred, throws an exception.\n\nRead the tags from `buffer` assuming that it is a `format` file. See\n[Formats](#formats)\n\n### Tag\n\n**NOTE: A Tag object should *NOT* be created using `new`. Instead use `tag()`\nor `tagSync()`**\n\nA Tag object allows _read-write_ access to all the meta-data fields. For valid\nfield names see `read()` above.\n\nTo get a value, simply access the field -- `tag.artist`.\n\nTo set a value, assign a value to the field -- `tag.year = 2012`. You **will\nhave to call `saveSync()`** to actually save the changes to the file on disc.\n\n##### Large number of files\n\nDue to TagLib's design, every `Tag` object in memory has to keep its backing\nfile descriptor open. If you are dealing with a large number of files, you will\nsoon run into problems because operating systems impose limits on how many\nfiles a process can have open simultaneously. If you want to only read tags,\nuse `read()` instead as it will immediately close the file after the tag is\nread.\n\n### Tag.save(callback)\n\nSave any changes in the Tag meta-data to disk _asynchronously_. `callback` will\nbe invoked once the save is done, and should have a signature `(err)`. `err`\nwill be `null` if the save was successful, otherwise it will be an object with\n`message` having the error string and `path` having the file path.\n\n### Tag.saveSync()\n\nSave any changes in the Tag meta-data to disk _synchronously_. Throws an\nexception if the save failed.\n\n### Tag.isEmpty()\n\nReturns whether the tag is empty or not.\n\n### taglib.addResolvers(\\[resolver1\\[, resolver2\\[, ...]]])\n\nAdds JavaScript functions that will be called to resolve the filetype of\na file. Each resolver will be added to the front of the resolver queue. So the\nlast resolver will be called first. Multiple calls to `addResolvers` are\nallowed.\n\nEach resolver must be a JavaScript function which takes a `filename` parameter\nand returns a format `string`. List of [formats](#formats).\n\n### Formats {#formats}\n\nAny place where `node-taglib` expects a format can be passed one of these\n(case-insensitive):\n\n    \"MPEG\"\n    \"OGG\"      - Ogg Vorbis\n    \"OGG/FLAC\" - Ogg FLAC\n    \"FLAC\"\n    \"MPC\"\n    \"WV\"\n    \"SPX\"      - Ogg Speex\n    \"TTA\"\n    \"MP4\"\n    \"ASF\"\n    \"AIFF\"     - RIFF AIFF\n    \"WAV\"      - RIFF WAV\n    \"APE\"\n    \"MOD\"\n    \"S3M\"\n    \"IT\"\n    \"XM\"\n\nThese correspond directly to the [filetypes\nsupported](http://developer.kde.org/~wheeler/taglib/api/classTagLib_1_1File.html)\nby TagLib.  If the filetype cannot be determined, return anything other than\none of these literals.\n\nAsynchronous resolvers (which indicate the filetype via a callback rather than\na return value) are not supported.\n\n### taglib.WITH_ASF\n\nA boolean representing whether node-taglib supports ASF files. Depends on\nfeature being enabled in TagLib.\n\n### taglib.WITH_MP4\n\nA boolean representing whether node-taglib supports MP4 files. Depends on\nfeature being enabled in TagLib.\n\nContributors are listed at: <https://github.com/nikhilm/node-taglib/contributors>\n","created":"2016-04-05T17:37:55.690Z","modified":"2016-08-10T01:44:26.551Z","lastPublisher":{"name":"hij1nx","email":"paolo@async.ly"},"owners":[{"name":"aprileelcich","email":"aprile@voltra.co"},{"name":"hij1nx","email":"paolo@async.ly"},{"name":"juliangruber","email":"julian@juliangruber.com"},{"name":"tristandavies","email":"npm@tristan.io"}],"other":{"_attachments":{},"_from":".","_id":"@voltraco/taglib","_nodeVersion":"4.3.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/taglib-0.8.2.tgz_1459878034753_0.088069012388587"},"_npmUser":{"name":"hij1nx","email":"paolo@async.ly"},"_npmVersion":"2.14.12","_rev":"1-07ba6a80b6b29294f9ee056934ab42b4","_shasum":"8b6f9e8bf7336b3b673092f01533f21f96a99c68","author":{"name":"Nikhil Marathe","email":"nsm.nikhil@gmail.com","url":"http://nikhilism.com"},"bugs":{"url":"https://github.com/nikhilm/node-taglib/issues"},"directories":{"example":"examples"},"dist-tags":{"latest":"0.8.2"},"dist":{"shasum":"8b6f9e8bf7336b3b673092f01533f21f96a99c68","tarball":"http://registry.npmjs.org/@voltraco/taglib/-/taglib-0.8.2.tgz"},"maintainers":[{"name":"aprileelcich","email":"aprile@voltra.co"},{"name":"hij1nx","email":"paolo@async.ly"},{"name":"juliangruber","email":"julian@juliangruber.com"},{"name":"tristandavies","email":"npm@tristan.io"}],"readmeFilename":"README.md","time":{"modified":"2016-08-10T01:44:26.551Z","created":"2016-04-05T17:37:55.690Z","0.8.1":"2016-04-05T17:37:55.690Z","0.8.2":"2016-04-05T17:40:37.202Z"}}}