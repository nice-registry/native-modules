{"name":"usb-driver","version":"0.1.1","description":"Cross-platform driver for USB device metadata and events","main":"./src/usb-driver.js","scripts":{"test":"mocha","install":"node-gyp rebuild"},"repository":"https://github.com/CargoSense/usb-driver","dependencies":{"bluebird":"~2.9.2","nan":"<2.0"},"keywords":["usb"],"license":"Apache 2","devDependencies":{"chai":"^3.3.0","chai-as-promised":"^5.1.0","mocha":"^2.3.3","proxyquire":"^1.7.2"},"gypfile":true,"gitHead":"b009c1a6063af09116ab38b0d16252cf3639b385","homepage":"https://github.com/CargoSense/usb-driver","versions":[{"number":"0.1.0","date":"2015-09-21T21:39:35.445Z"},{"number":"0.1.1","date":"2015-09-22T00:30:24.270Z"}],"readme":"# USB Driver\n\nCross-platform USB device metadata and events.\n\n## Platforms\n\n* OSX\n* Windows\n* ~~Linux~~ (Planned)\n\n## Install\n\n```\nnpm install usb-driver\n```\n\n## Usage\n\n```js\nvar usbDriver = require('usb-driver');\n```\n\n### Functions returning promises\n\n#### Get a list of attached devices\n\nUse `getAll()`:\n\n```js\nusbDriver.getAll().then(function(devices) {\n  /* ... do something with devices ... */\n}).catch(function(err) { /* ... error handling */ });\n```\n\n`devices` is an array of device objects. See\n[Device Objects](#device-objects), below.\n\n#### Get a device by ID\n\nUse `get()`:\n\n```js\nusbDriver.get(deviceId).then(function(device) {\n  /* ... do something with device ... */\n}).catch(function(err) { /* ... error handling ... */ });\n```\n\n`deviceId` is the `id` provided in the device objects from\n`getAll()`, and `device` is a resulting device object. See\n[Device Objects](#device-objects), below.\n\n#### Unmount a (mass storage) device\n\nUse `unmount()`:\n\nNote that the promise will be rejected only if a mounted volume could not be\nunmounted by this invocation. If it's already unmounted, the promise\nwill be resolved.\n\n```js\nusbDriver.unmount(deviceId).then(function() {\n  /* ... success ... */\n}).catch(function(err) { /* ... failure ... */ });\n```\n\n`deviceId` is the `id` provided in the device objects from `get()` or\n`getAll()`. See [Device Objects](#device-objects), below.\n\n### Events\n\n#### Watch for attach events\n\n```js\nusbDriver.on('attach', function(device) { /* ... */ });\n```\n\n`device` is a device object. See [Device Objects](#device-objects), below.\n\n#### Watch for detach events\n\n```js\nusbDriver.on('detach', function(device) { /* ... */ });\n```\n\n`device` is a device object. See [Device Objects](#device-objects), below.\n\n#### Watch for mount events\n\nWhen a USB device is mounted.\n\n```js\nusbDriver.on('mount', function(device) { /* ... */ });\n```\n\n`device` is a device object. See [Device Objects](#device-objects), below.\n\n#### Watch for unmount events\n\nWhen a USB device is unmounted.\n\n```js\nusbDriver.on('unmount', function(device) { /* ... */ });\n```\n\n`device` is a device object. See [Device Objects](#device-objects), below.\n\n### Device Objects\n\nDevice objects represent attached USB devices and model the data about them.\n\nHere's an example:\n\n```js\n{\n  id: '0x0a-0x12-IDQFB0023AB', // VID-PID-(SERIAL|INCREMENTED_ID)\n  vendorCode: '0x0a',\n  productCode: '0x12',\n  manufacturer: 'Foo Bar Technologies',\n  product: 'Baz Sensing Quux',\n  serialNumber: 'IDQFB0023AB',\n  mount: '/Volumes/FOOBAR1'\n}\n```\n\n#### id\n\n*REQUIRED*, String | Integer\n\nThe id is a unique identifier for an attached device. This is made up\nof the product code, vendor code -- and the serial number, if\navailable. If the serial number is not available, an incremented value\nis provided as the last component.\n\n#### vendorCode\n\n*REQUIRED*, String\n\nThe hex for the USB vendor ID.\n\n#### productCode\n\n*REQUIRED*, String\n\nThe hex for the USB product ID.\n\n#### manufacturer\n\n*OPTIONAL*, String\n\nThe name of the manufacturer/vendor, if available as a USB descriptor.\n\n#### product\n\n*OPTIONAL*, String\n\nThe name of the product, if available as a USB descriptor.\n\n#### serialNumber\n\n*OPTIONAL*, String\n\nThe serial number of the device, if available as a USB descriptor.\n\n#### mount\n\n*OPTIONAL*, String\n\nThe path to the volume mount point, if mounted.\n\n## Test\n\n```\nnpm test\n```\n\n## License\n\nSee [LICENSE](./LICENSE)\n","created":"2015-09-21T21:39:35.445Z","modified":"2015-09-22T00:30:24.270Z","lastPublisher":{"name":"bruce","email":"brwcodes@gmail.com"},"owners":[{"name":"bruce","email":"brwcodes@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"usb-driver","_nodeVersion":"0.12.0","_npmUser":{"name":"bruce","email":"brwcodes@gmail.com"},"_npmVersion":"2.5.1","_rev":"1-2a9407cb52c0002938a5178a4e02966d","_shasum":"dc943351aea08b4b4a9e35f40a5e62818f8f055a","author":{"name":"Rich Kilmer","email":"rich.kilmer@gmail.com","url":"http://www.cargosense.com/"},"bugs":{"url":"https://github.com/CargoSense/usb-driver/issues"},"directories":{},"dist-tags":{"latest":"0.1.1"},"dist":{"shasum":"dc943351aea08b4b4a9e35f40a5e62818f8f055a","tarball":"http://registry.npmjs.org/usb-driver/-/usb-driver-0.1.1.tgz"},"maintainers":[{"name":"bruce","email":"brwcodes@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-09-22T00:30:24.270Z","created":"2015-09-21T21:39:35.445Z","0.1.0":"2015-09-21T21:39:35.445Z","0.1.1":"2015-09-22T00:30:24.270Z"}}}