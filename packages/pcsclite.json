{"name":"pcsclite","version":"0.5.0","engines":{"node":">=0.8.0"},"description":"Bindings over PC/SC to access Smart Cards","main":"index.js","dependencies":{"buffertools":"^2.1.2","bindings":"^1.1.0","nan":"^2.2.1"},"devDependencies":{"mocha":"~1.11.0","sinon":"~1.3.4","should":"~1.2.2"},"scripts":{"test":"mocha","install":"node-gyp rebuild"},"repository":"https://github.com/santigimeno/node-pcsclite","keywords":["pcsc","pcsclite","smartcards"],"license":{"type":"ISC","url":"https://github.com/santigimeno/node-pcsclite/blob/master/LICENSE"},"gypfile":true,"gitHead":"fb6b219d6681d52c1bde8712243daa0a1103f641","homepage":"https://github.com/santigimeno/node-pcsclite#readme","versions":[{"number":"0.0.1","date":"2013-06-20T14:38:34.636Z"},{"number":"0.0.2","date":"2013-07-11T16:32:24.549Z"},{"number":"0.0.3","date":"2013-10-11T11:47:36.904Z"},{"number":"0.0.4","date":"2013-10-16T15:09:56.124Z"},{"number":"0.1.0","date":"2014-07-28T11:38:53.506Z"},{"number":"0.2.0","date":"2014-07-29T10:36:47.132Z"},{"number":"0.2.1","date":"2014-08-05T08:12:09.876Z"},{"number":"0.3.0","date":"2014-08-06T10:07:21.572Z"},{"number":"0.3.1","date":"2014-09-12T12:12:21.417Z"},{"number":"0.3.2","date":"2014-09-19T09:26:07.052Z"},{"number":"0.3.3","date":"2014-09-23T16:35:43.823Z"},{"number":"0.3.4","date":"2014-10-07T11:15:00.592Z"},{"number":"0.3.5","date":"2014-11-06T10:00:00.242Z"},{"number":"0.3.6","date":"2015-01-19T09:11:06.338Z"},{"number":"0.4.0","date":"2015-05-27T14:14:57.956Z"},{"number":"0.4.1","date":"2015-08-12T10:14:14.346Z"},{"number":"0.4.2","date":"2015-09-01T12:53:33.298Z"},{"number":"0.4.4","date":"2015-09-26T14:32:12.862Z"},{"number":"0.4.5","date":"2015-12-22T14:13:21.204Z"},{"number":"0.4.6","date":"2015-12-22T14:18:11.777Z"},{"number":"0.4.7","date":"2015-12-30T10:15:04.273Z"},{"number":"0.4.8","date":"2016-01-22T09:20:13.208Z"},{"number":"0.4.9","date":"2016-04-12T13:16:58.385Z"},{"number":"0.4.10","date":"2016-09-23T11:16:18.596Z"},{"number":"0.4.11","date":"2016-11-24T14:24:45.562Z"},{"number":"0.4.12","date":"2017-02-22T13:40:51.163Z"},{"number":"0.5.0","date":"2017-02-22T13:49:06.875Z"}],"readme":"# node-pcsclite\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/santigimeno/node-pcsclite?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nBindings over pcsclite to access Smart Cards. Starting with version **0.4.0** it works in **Linux**, **OS X** and **Windows**.\n\n## Installation\n\nYou'll need a node version installed in the system. You have several options:\n\n* Download and install it from the [node website](http://nodejs.org/)\n* Install it from your own distro. For the Debian users:\n\n    `apt-get install nodejs nodejs-legacy`\n\n* Use [nodesource repository](https://github.com/nodesource/distributions) for different distros.\n* Use tools like [nave](https://github.com/isaacs/nave) or [nvm](https://github.com/creationix/nvm)\n\nIn order to install the package you need to have installed in the system the\npcsclite libraries. For example, in Debian/Ubuntu:\n\n    apt-get install libpcsclite1 libpcsclite-dev\n\nOnce they are installed just run:\n\n    npm install pcsclite\n\nTo run any code you will also need to have installed the pcsc daemon:\n\n    apt-get install pcscd\n\n## Example\n\n```\nvar pcsc = require('pcsclite');\n\nvar pcsc = pcsc();\npcsc.on('reader', function(reader) {\n\n    console.log('New reader detected', reader.name);\n\n    reader.on('error', function(err) {\n        console.log('Error(', this.name, '):', err.message);\n    });\n\n    reader.on('status', function(status) {\n        console.log('Status(', this.name, '):', status);\n        /* check what has changed */\n        var changes = this.state ^ status.state;\n        if (changes) {\n            if ((changes & this.SCARD_STATE_EMPTY) && (status.state & this.SCARD_STATE_EMPTY)) {\n                console.log(\"card removed\");/* card removed */\n                reader.disconnect(reader.SCARD_LEAVE_CARD, function(err) {\n                    if (err) {\n                        console.log(err);\n                    } else {\n                        console.log('Disconnected');\n                    }\n                });\n            } else if ((changes & this.SCARD_STATE_PRESENT) && (status.state & this.SCARD_STATE_PRESENT)) {\n                console.log(\"card inserted\");/* card inserted */\n                reader.connect({ share_mode : this.SCARD_SHARE_SHARED }, function(err, protocol) {\n                    if (err) {\n                        console.log(err);\n                    } else {\n                        console.log('Protocol(', reader.name, '):', protocol);\n                        reader.transmit(new Buffer([0x00, 0xB0, 0x00, 0x00, 0x20]), 40, protocol, function(err, data) {\n                            if (err) {\n                                console.log(err);\n                            } else {\n                                console.log('Data received', data);\n                                reader.close();\n                                pcsc.close();\n                            }\n                        });\n                    }\n                });\n            }\n        }\n    });\n\n    reader.on('end', function() {\n        console.log('Reader',  this.name, 'removed');\n    });\n});\n\npcsc.on('error', function(err) {\n    console.log('PCSC error', err.message);\n});\n```\n\n## API\n\n### Class: PCSCLite\n\nThe PCSCLite object is an EventEmitter that notifies the existence of Card Readers.\n\n#### Event:  'error'\n\n* *err* `Error Object`. The error.\n\n#### Event:  'reader'\n\n* *reader* `CardReader`. A CardReader object associated to the card reader detected\n\nEmitted whenever a new card reader is detected.\n\n#### pcsclite.close()\n\nIt frees the resources associated with this PCSCLite instance. At a low level it calls [`SCardCancel`](http://pcsclite.alioth.debian.org/pcsc-lite/node21.html) so it stops watching for new readers.\n\n\n### Class: CardReader\n\nThe CardReader object is an EventEmitter that allows to manipulate a card reader.\n\n#### Event:  'error'\n\n* *err* `Error Object`. The error.\n\n#### Event:  'end'\n\nEmitted when the card reader has been removed.\n\n#### Event:  'status'\n\n* *status* `Object`.\n    * *state* The current status of the card reader as returned by [`SCardGetStatusChange`](http://pcsclite.alioth.debian.org/pcsc-lite/node20.html)\n    * *atr* ATR of the card inserted (if any)\n\nEmitted whenever the status of the reader changes.\n\n#### reader.connect([options], callback)\n\n* *options* `Object` Optional\n    * *share_mode* `Number` Shared mode. Defaults to `SCARD_SHARE_EXCLUSIVE`\n    * *protocol* `Number` Preferred protocol. Defaults to `SCARD_PROTOCOL_T0 | SCARD_PROTOCOL_T1`\n* *callback* `Function` called when connection operation ends\n    * *error* `Error`\n    * *protocol* `Number` Established protocol to this connection.\n\nWrapper around [`SCardConnect`](http://pcsclite.alioth.debian.org/pcsc-lite/node12.html). Establishes a connection to the reader.\n\n#### reader.disconnect(disposition, callback)\n\n* *disposition* `Number`. Reader function to execute. Defaults to `SCARD_UNPOWER_CARD`\n* *callback* `Function` called when disconnection operation ends\n    * *error* `Error`\n\nWrapper around [`SCardDisconnect`](http://pcsclite.alioth.debian.org/pcsc-lite/node14.html). Terminates a connection to the reader.\n\n#### reader.transmit(input, res_len, protocol, callback)\n\n* *input* `Buffer` input data to be transmitted\n* *res_len* `Number`. Max. expected length of the response\n* *protocol* `Number`. Protocol to be used in the transmission\n* *callback* `Function` called when transmit operation ends\n    * *error* `Error`\n    * *output* `Buffer`\n\nWrapper around [`SCardTransmit`](http://pcsclite.alioth.debian.org/pcsc-lite/node17.html). Sends an APDU to the smart card contained in the reader connected to.\n\n#### reader.control(input, control_code, res_len, callback)\n\n* *input* `Buffer` input data to be transmitted\n* *control_code* `Number`. Control code for the operation\n* *res_len* `Number`. Max. expected length of the response\n* *callback* `Function` called when control operation ends\n    * *error* `Error`\n    * *output* `Buffer`\n\nWrapper around [`SCardControl`](http://pcsclite.alioth.debian.org/pcsc-lite/node18.html). Sends a command directly to the IFD Handler (reader driver) to be processed by the reader.\n\n#### reader.close()\n\nIt frees the resources associated with this CardReader instance. At a low level it calls [`SCardCancel`](http://pcsclite.alioth.debian.org/pcsc-lite/node21.html) so it stops watching for the reader status changes.\n","starsCount":2,"created":"2013-06-20T14:38:31.788Z","modified":"2017-06-14T04:59:31.536Z","lastPublisher":{"name":"sgimeno","email":"santiago.gimeno@gmail.com"},"owners":[{"name":"sgimeno","email":"santiago.gimeno@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"pcsclite","_nodeVersion":"4.4.5","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pcsclite-0.5.0.tgz_1487771346172_0.35090283351019025"},"_npmUser":{"name":"sgimeno","email":"santiago.gimeno@gmail.com"},"_npmVersion":"2.15.11","_rev":"5-81f4035680665b754fff5580da186fb3","_shasum":"3bff94b8a84031735d0bf2cdb50b6f17c5a83e24","author":{"name":"Santiago Gimeno","email":"santiago.gimeno@gmail.com"},"bugs":{"url":"https://github.com/santigimeno/node-pcsclite/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.5.0"},"dist":{"shasum":"3bff94b8a84031735d0bf2cdb50b6f17c5a83e24","tarball":"https://registry.npmjs.org/pcsclite/-/pcsclite-0.5.0.tgz"},"maintainers":[{"name":"sgimeno","email":"santiago.gimeno@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-14T04:59:31.536Z","created":"2013-06-20T14:38:31.788Z","0.0.1":"2013-06-20T14:38:34.636Z","0.0.2":"2013-07-11T16:32:24.549Z","0.0.3":"2013-10-11T11:47:36.904Z","0.0.4":"2013-10-16T15:09:56.124Z","0.1.0":"2014-07-28T11:38:53.506Z","0.2.0":"2014-07-29T10:36:47.132Z","0.2.1":"2014-08-05T08:12:09.876Z","0.3.0":"2014-08-06T10:07:21.572Z","0.3.1":"2014-09-12T12:12:21.417Z","0.3.2":"2014-09-19T09:26:07.052Z","0.3.3":"2014-09-23T16:35:43.823Z","0.3.4":"2014-10-07T11:15:00.592Z","0.3.5":"2014-11-06T10:00:00.242Z","0.3.6":"2015-01-19T09:11:06.338Z","0.4.0":"2015-05-27T14:14:57.956Z","0.4.1":"2015-08-12T10:14:14.346Z","0.4.2":"2015-09-01T12:53:33.298Z","0.4.4":"2015-09-26T14:32:12.862Z","0.4.5":"2015-12-22T14:13:21.204Z","0.4.6":"2015-12-22T14:18:11.777Z","0.4.7":"2015-12-30T10:15:04.273Z","0.4.8":"2016-01-22T09:20:13.208Z","0.4.9":"2016-04-12T13:16:58.385Z","0.4.10":"2016-09-23T11:16:18.596Z","0.4.11":"2016-11-24T14:24:45.562Z","0.4.12":"2017-02-22T13:40:51.163Z","0.5.0":"2017-02-22T13:49:06.875Z"},"users":{"thelmos":true,"coolbong":true}}}