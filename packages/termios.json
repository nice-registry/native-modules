{"name":"termios","version":"0.1.6","description":"get and set terminal attributes, line control, get and set baud rate","main":"index.js","scripts":{"test":"jshint lib test && mocha","install":"node-gyp rebuild"},"license":"MIT","dependencies":{"extend":"^3.0.0","nan":"^2.5.1"},"gypfile":true,"devDependencies":{"child_pty":"^3.0.7","jshint":"^2.9.4","mocha":"^3.2.0"},"repository":"https://github.com/Gottox/node-termios","keywords":["tcgetattr","tcsetattr","tty","terminal"],"homepage":"https://github.com/Gottox/node-termios","jshintConfig":{"unused":true,"eqeqeq":true,"quotmark":true,"nonew":true,"indent":true,"latedef":true,"noarg":true,"node":true},"gitHead":"da4fa59683cc8938f86c0eeb862dc38ee6c13631","versions":[{"number":"0.1.0","date":"2015-12-02T15:29:37.513Z"},{"number":"0.1.1","date":"2015-12-29T08:33:14.568Z"},{"number":"0.1.2","date":"2016-09-23T06:42:37.726Z"},{"number":"0.1.3","date":"2017-01-18T22:45:29.789Z"},{"number":"0.1.4","date":"2017-02-06T09:24:29.111Z"},{"number":"0.1.5","date":"2017-02-15T22:08:40.929Z"},{"number":"0.1.6","date":"2017-03-06T09:13:54.419Z"}],"readme":"[![Build Status](https://travis-ci.org/Gottox/node-termios.png)](https://travis-ci.org/Gottox/node-termios)\n\ntermios bindings for node.js\n============================\n\nnode-termios is a module for getting and setting terminal attributes.\n\nAPI\n---\n\n\n* an `attr` object may contain on or more of the following boolean fields:\n  * `attr.iflag`: \n    * `IGNBRK`: ignore BREAK condition\n    * `BRKINT`: map BREAK to SIGINT\n    * `IGNPAR`: ignore (discard) parity errors\n    * `PARMRK`: mark parity and framing errors\n    * `INPCK`: enable checking of parity errors\n    * `ISTRIP`: strip 8th bit off chars\n    * `INLCR`: map NL into CR\n    * `IGNCR`: ignore CR\n    * `ICRNL`: map CR to NL (ala CRMOD)\n    * `IXON`: enable output flow control\n    * `IXOFF`: enable input flow control\n    * `IXANY`: any char will restart after stop\n    * `IMAXBEL`: ring bell on input queue full\n  * `attr.oflag`: \n    * `OPOST`: enable following output processing\n    * `ONLCR`: map NL to CR-NL (ala CRMOD)\n    * `OCRNL`: map CR to NL\n    * `ONOCR`: No CR output at column 0\n    * `ONLRET`: NL performs the CR function\n  * `attr.cflag`: \n    * `CSIZE`: character size mask\n    * `CS5`: 5 bits (pseudo)\n    * `CS6`: 6 bits\n    * `CS7`: 7 bits\n    * `CS8`: 8 bits\n    * `CSTOPB`: send 2 stop bits\n    * `CREAD`: enable receiver\n    * `PARENB`: parity enable\n    * `PARODD`: odd parity, else even\n    * `HUPCL`: hang up on last close\n    * `CLOCAL`: ignore modem status lines\n  * `attr.lflag`: \n    * `ECHOKE`: visual erase for line kill\n    * `ECHOE`: visually erase chars\n    * `ECHOK`: echo NL after line kill\n    * `ECHO`: enable echoing\n    * `ECHONL`: echo NL even if ECHO is off\n    * `ECHOPRT`: visual erase mode for hardcopy\n    * `ECHOCTL`: echo control chars as ^(Char)\n    * `ISIG`: enable signals INTR, QUIT, [D]SUSP\n    * `ICANON`: canonicalize input lines\n    * `IEXTEN`: enable DISCARD and LNEXT\n    * `EXTPROC`: external processing\n    * `TOSTOP`: stop background jobs from output\n    * `FLUSHO`: output being flushed (state)\n    * `PENDIN`: XXX retype pending input (state)\n    * `NOFLSH`: don't flush after interrupt\n    * `XCASE`: canonical upper/lower case\n\n* `.setattr(fd, attr)`: Sets attributes of the terminal bound to the\n  file descriptor:\n  * fd: file descriptor\n  * attr: object as described above\n  * returns: undefined\n\n* `.getattr(fd)`: Returns an object describing the current settings\n  of the terminal bound to the file descriptor:\n  * fd: file descriptor\n\nExamples\n--------\n\n```\nvar termios = require('termios'), data = '';\nconsole.log(\"Please type something:\");\nprocess.stdin.on(\"data\", function(d) {data += d.toString()});\nsetTimeout(function() {\n\tconsole.log(\"Disabling ECHO. You won't see what you type now\");\n\ttermios.setattr(process.stdin.fd, {lflag: { ECHO: false }})\n\tconsole.log(\"\\nYou typed '\"+data+\"'\");\n\tdata = \"\";\n}, 3000);\nsetTimeout(function() {\n\tconsole.log(\"Enabling ECHO.\");\n\ttermios.setattr(process.stdin.fd, {lflag: { ECHO: false }})\n\tconsole.log(\"\\nYou typed '\"+data+\"'\");\n}, 6000);\n```\n\nChangelog\n---------\n\n* v0.1 - initial release\n","created":"2015-12-02T15:29:37.513Z","modified":"2017-03-06T09:13:54.419Z","lastPublisher":{"name":"gottox","email":"g@s01.de"},"owners":[{"name":"gottox","email":"g@s01.de"}],"other":{"_attachments":{},"_from":".","_id":"termios","_nodeVersion":"6.3.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/termios-0.1.6.tgz_1488791632799_0.7976472137961537"},"_npmUser":{"name":"gottox","email":"g@s01.de"},"_npmVersion":"3.10.3","_rev":"5-dd09338e8c9fa5648a3d61e9e9cc6e5c","_shasum":"cb7e7b1aa33d784559947662d7bc01d523052cbe","author":{"name":"Enno Boland","email":"eb@s01.de"},"bugs":{"url":"https://github.com/Gottox/node-termios/issues"},"directories":{},"dist-tags":{"latest":"0.1.6"},"dist":{"shasum":"cb7e7b1aa33d784559947662d7bc01d523052cbe","tarball":"https://registry.npmjs.org/termios/-/termios-0.1.6.tgz"},"maintainers":[{"name":"gottox","email":"g@s01.de"}],"readmeFilename":"README.md","time":{"modified":"2017-03-06T09:13:54.419Z","created":"2015-12-02T15:29:37.513Z","0.1.0":"2015-12-02T15:29:37.513Z","0.1.1":"2015-12-29T08:33:14.568Z","0.1.2":"2016-09-23T06:42:37.726Z","0.1.3":"2017-01-18T22:45:29.789Z","0.1.4":"2017-02-06T09:24:29.111Z","0.1.5":"2017-02-15T22:08:40.929Z","0.1.6":"2017-03-06T09:13:54.419Z"}}}