{"name":"@flat/lame","description":"NodeJS native bindings to libmp3lame & libmpg123.","keywords":["lame","mpg123","mp3","mpeg","mpg","encode","decode"],"version":"1.2.3","license":"MIT","repository":"https://github.com/TooTallNate/node-lame","main":"./index.js","dependencies":{"bindings":"~1.2.0","debug":"2","readable-stream":"1.0","nan":"~2.0.8"},"devDependencies":{"mocha":"*"},"scripts":{"test":"mocha --reporter spec","install":"node-gyp rebuild"},"gypfile":true,"gitHead":"f6d8bdd331ee0ff30ce534731df20ae5f8301061","homepage":"https://github.com/TooTallNate/node-lame#readme","versions":[{"number":"1.2.2","date":"2015-09-06T17:17:06.799Z"},{"number":"1.2.3","date":"2015-09-06T19:23:27.490Z"}],"readme":"node-lame\n=========\n### NodeJS native bindings to libmp3lame & libmpg123\n[![Build Status](https://travis-ci.org/TooTallNate/node-lame.svg?branch=master)](https://travis-ci.org/TooTallNate/node-lame)\n\nFor all your async streaming MP3 encoding/decoding needs, there's `node-lame`!\nThis module hooks into libmp3lame, the library that the `lame` command uses, to\nprovide `Encoder` and `Decoder` streams to NodeJS.\n\n\nInstallation\n------------\n\n`node-lame` comes bundled with its own copy of `libmp3lame` and `libmpg123`, so\nthere's no need to have them installed on your system.\n\nSimply compile and install `node-lame` using `npm`:\n\n``` bash\n$ npm install lame\n```\n\n\nExample\n-------\n\nHere's an example of using `node-lame` to encode some raw PCM data coming from\n`process.stdin` to an MP3 file that gets piped to `process.stdout`:\n\n``` javascript\nvar lame = require('lame');\n\n// create the Encoder instance\nvar encoder = new lame.Encoder({\n  // input\n  channels: 2,        // 2 channels (left and right)\n  bitDepth: 16,       // 16-bit samples\n  sampleRate: 44100,  // 44,100 Hz sample rate\n\n  // output\n  bitRate: 128,\n  outSampleRate: 22050,\n  mode: lame.STEREO // STEREO (default), JOINTSTEREO, DUALCHANNEL or MONO\n});\n\n// raw PCM data from stdin gets piped into the encoder\nprocess.stdin.pipe(encoder);\n\n// the generated MP3 file gets piped to stdout\nencoder.pipe(process.stdout);\n```\n\nSee the `examples` directory for some more example code.\n\nAPI\n---\n\n### Decoder class\n\nThe `Decoder` class is a `Stream` subclass that accepts MP3 data written to it,\nand outputs raw PCM data. It also emits a `\"format\"` event when the format of\nthe MP3 file is determined (usually right at the beginning).\n\n### Encoder class\n\nThe `Encoder` class is a `Stream` subclass that accepts raw PCM data written to\nit, and outputs a valid MP3 file. You must specify the PCM data format when\ncreating the encoder instance. Only 16-bit signed samples are currently\nsupported (rescale before passing to the encoder if necessary)...\n","created":"2015-09-06T17:17:06.799Z","modified":"2015-09-06T19:23:27.490Z","lastPublisher":{"name":"flat","email":"npm@flat.io"},"owners":[{"name":"flat","email":"npm@flat.io"}],"other":{"_attachments":{},"_from":".","_id":"@flat/lame","_nodeVersion":"3.3.0","_npmUser":{"name":"flat","email":"npm@flat.io"},"_npmVersion":"2.13.3","_rev":"1-7d155bc918d4217d85afe37ff9c505d9","_shasum":"c4f1f3573164f93431b9272fbb2a19357aef5127","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"bugs":{"url":"https://github.com/TooTallNate/node-lame/issues"},"directories":{},"dist-tags":{"latest":"1.2.3"},"dist":{"shasum":"c4f1f3573164f93431b9272fbb2a19357aef5127","tarball":"http://registry.npmjs.org/@flat/lame/-/lame-1.2.3.tgz"},"maintainers":[{"name":"flat","email":"npm@flat.io"}],"readmeFilename":"README.md","time":{"modified":"2015-09-06T19:23:27.490Z","created":"2015-09-06T17:17:06.799Z","1.2.2":"2015-09-06T17:17:06.799Z","1.2.3":"2015-09-06T19:23:27.490Z"}}}