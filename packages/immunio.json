{"name":"immunio","version":"1.2.0","description":"IMMUNIO protects your web app from security vulnerabilities by monitoring requests in realtime. After a two minute installation, your application will be protected from many of the top classes of attacks, including Cross-Site Scripting (XSS), SQL Injectio","keywords":["security"],"license":"SEE LICENSE IN LICENSE","homepage":"https://www.immun.io","main":"index.js","scripts":{"pretest":"make -Clua-hooks LUALD_DEBUG=1 hooks/__init__.lua","test":"eslint . && mocha -gc --reporter spec --check-leaks test/ test/integration/","clean":"rm -rf build && make -Clua-hooks clean","install":"node-gyp rebuild"},"files":["binding.gyp","index.js","lib","src","lua-hooks/Makefile","lua-hooks/options.mk","lua-hooks/ext","lua-hooks/lib/module.mk","lua-hooks/lib/hooks/module.mk","lua-hooks/lib/hooks/xss/module.mk","lua-hooks/lib/lexers/module.mk","lua-hooks/lib/schema/module.mk"],"engines":{"npm":">=0.12"},"dependencies":{"bindings":"^1.2.1","character-parser":"1.2.1","constantinople":"~3.0.1","continuation-local-storage":"^3.1.4","lru-cache":"^4.0.0","msgpack":"^1.0.2","nan":"^2.2.0","node-uuid":"^1.4.7","tunnel":"^0.0.4","winston":"^2.1.1"},"devDependencies":{"bluebird":"^3.4.6","body-parser":"^1.14.2","cookie-parser":"^1.4.1","csurf":"^1.8.3","eslint":"^2.4.0","express":">=3","express-session":"^1.13.0","jade":">=1.3","lodash":"^4.0.0","mocha":"^2.3.4","mongoose":"^4.4.5","morgan":"^1.6.1","mustache":">=2.1","mysql":">=2.0","node-gyp":"^3.2.1","passport":"^0.3.2","passport-local":"^1.0.0","pg":">=4.0","pg-hstore":"^2.3.2","pg-native":"^1.10.0","semver":"^5.1.0","sequelize":">=3.0","sqlite3":">=3.0"},"gypfile":true,"_resolved":"file:Downloads/package/immunio-1.2.0.tgz","versions":[{"number":"0.0.0","date":"2016-03-24T15:41:24.897Z"},{"number":"1.0.2","date":"2017-01-11T16:45:17.203Z"},{"number":"1.0.3","date":"2017-01-12T05:20:07.052Z"},{"number":"1.0.4","date":"2017-01-30T17:08:55.094Z"},{"number":"1.1.0","date":"2017-02-16T17:38:23.586Z"},{"number":"1.2.0","date":"2017-05-18T15:58:26.297Z"}],"readme":"# Immunio Node Agent\n\n## Support Matrix\n\n| Feature                       | Required package & version _*_ | Note |\n| ----------------------------- | -------------------------------- | ---- |\n| All features                  | Node >= 0.12 ||\n| SQLi                          | Sequelize >= 2.1, pg 4.x, pg-native, mysql 2.x, sqlite3 3.x ||\n| NoSQLi                        | Mongoose 4.x, mongodb 2.x | |\n| XSS                           | Jade >= 1.3, Mustache >= 2.1 ||\n| Session, Redirect             | express-session, cookie-session ||\n| Authentication                | Passport 0.3 ||\n| CSRF                          | csrf 3.x ||\n| Cookie Tampering              | cookie-parser 1.4 with Express ||\n\n_* Tested versions. Other versions might also work._\n\n## Installation\n\nFrom the root of your Node app:\n\n    $ npm install --save immunio\n\n## Installation from source\n\nFrom the root of your Node app:\n\n    $ npm link /path/to/agent-node\n\n## Usage\n\nTo active Immunio, add the following as the first line of your app setup code:\n\n```js\nvar immunio = require('immunio');\n```\n\n## Configuration\n\nThe agent key and secret can be configured via the `IMMUNIO_KEY` and `IMMUNIO_SECRET` environment variables.\n\nIf you are using a configuration file instead of using environment variables, it needs to be called immunio.json be in the application root folder and needs to contain the follow *immunio.json*:\n\n```json\n{\n  \"key\": \"my-key\",\n  \"secret\": \"my-secret\"\n}\n```\n\n*Note:* The environment variables will take precedence over the configuration file.\n\n## Authentication API\n\nIf you're using [Passport](http://passportjs.org/), Immunio will automatically hook into your authentication system to protect you against attacks.\n\nIf you're not using the above framework, you will need to manually tell Immunio when authentication occurs. Use the following methods to do so.\n\n- After a user logs in: `immunio.authentication.login(user, req)`\n- After a failed login attempt: `immunio.authentication.failedLogin(user, req)`\n- After a user logs out: `immunio.authentication.logout(user)`\n- After the current user is changed (or set): `immunio.authentication.setUser(user, req)`\n- After a user requests a password reset: `immunio.authentication.passwordReset(user, req)`\n- After a failed requests for resetting a password: `immunio.authentication.failedPasswordReset(user, req)`\n\n**Note:** `immunio.authentication.setUser(user, req)` should be called for every request where user data is available, not just when authentication mechanisms are used.\n\nThese methods take a `user` object with the following properties their first argument:\n\n* `user_id`: String or Number\n* `username`, `login` or `name`: String\n* `email`: String\n* `reason`: String (for failures)\n\nThe second argument should be the Node HTTP request (`req`) or response (`res`) object, if available.\n\nHere's an example:\n\n```js\nvar immunio = require('immunio');\n\n// ...\n\napp.use(function(req, res, next) {\n  // Assuming req.user is populated with the current user in a previous middleware.\n  if (req.user) {\n    immunio.authentication.setUser(req.user, req);\n  }\n});\n\napp.post('/login', function(req, res) {\n  var username = req.body.username;\n  var password = req.body.password;\n\n  db.findUser(username, password, function(err, user) {\n    if (err) {\n      // On failed login\n      // ...\n      immunio.authentication.failedLogin({ username: username }, req);\n    } else {\n      // On successful login\n      // ...\n      immunio.authentication.login({\n        user_id: user.id,\n        username: user.name,\n        email: user.email\n      }, req);\n    }\n  });\n});\n\napp.get('/logout', function(req, res) {\n  // Get the current user\n  var user = req.user;\n\n  immunio.authentication.logout({\n    user_id: user.id,\n    username: user.name,\n    email: user.email\n  }, req);\n\n  // Your logout code ...\n});\n```\n\n## Waiting for Agent readiness\n\nBy default your app will start before Immunio is ready to protect it. If you want to prevent this behavior and wait for Immunio to be fully active before starting your app, use the following:\n\n```js\nvar immunio = require('immunio');\n\n// ...\n\nimmunio.on('ready', function() {\n  // Start your web server here.\n  server.listen(port);\n});\n```\n\n\n","starsCount":1,"created":"2016-03-24T15:41:24.897Z","modified":"2017-05-18T15:58:26.297Z","lastPublisher":{"name":"stlef14","email":"stephan@immun.io"},"owners":[{"name":"secretmike","email":"mike@immun.io"},{"name":"stlef14","email":"stephan@immun.io"}],"other":{"_attachments":{},"_from":"Downloads/package/immunio-1.2.0.tgz","_id":"immunio","_nodeVersion":"4.4.5","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/immunio-1.2.0.tgz_1495123103482_0.4945692247711122"},"_npmUser":{"name":"stlef14","email":"stephan@immun.io"},"_npmVersion":"2.15.5","_rev":"8-92ccc67948d94a2f0dc808a99efa0de3","_shasum":"11c282d35d726d258a2fd215071fcf80dbaede8a","author":{"name":"Immunio"},"directories":{},"dist-tags":{"latest":"1.2.0"},"dist":{"shasum":"11c282d35d726d258a2fd215071fcf80dbaede8a","tarball":"https://registry.npmjs.org/immunio/-/immunio-1.2.0.tgz"},"maintainers":[{"name":"secretmike","email":"mike@immun.io"},{"name":"stlef14","email":"stephan@immun.io"}],"readmeFilename":"README.md","time":{"modified":"2017-05-18T15:58:26.297Z","created":"2016-03-24T15:41:24.897Z","0.0.0":"2016-03-24T15:41:24.897Z","1.0.2":"2017-01-11T16:45:17.203Z","1.0.3":"2017-01-12T05:20:07.052Z","1.0.4":"2017-01-30T17:08:55.094Z","1.1.0":"2017-02-16T17:38:23.586Z","1.2.0":"2017-05-18T15:58:26.297Z"},"users":{"polar.vertex":true}}}