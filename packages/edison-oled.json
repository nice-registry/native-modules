{"name":"edison-oled","version":"0.0.5","description":"Node wrapper for Sparkfun Edison OLED Block. Includes wrappers around OLED, GPIO and SPI classes.","license":"MIT","keywords":["intel","edison","sparkfun","oled","spi","gpio","node","graphic","display","64x48","monochrome","mezzanine","breakout","board"],"main":"./index.js","repository":"https://github.com/bfeldman74/Edison_OLED_Block","dependencies":{"nan":"2.5.0"},"config":{"unsafe-perm":true},"scripts":{"preinstall":"npm update nan && node-gyp configure && node-gyp rebuild"},"homepage":"https://github.com/bfeldman74/Edison_OLED_Block#readme","versions":[{"number":"0.0.1","date":"2017-01-11T20:38:16.460Z"},{"number":"0.0.2","date":"2017-01-11T21:06:59.206Z"},{"number":"0.0.3","date":"2017-01-11T21:15:12.376Z"},{"number":"0.0.4","date":"2017-01-11T21:27:19.808Z"},{"number":"0.0.5","date":"2017-01-13T21:46:25.896Z"}],"readme":"NodeJS Wrapper for SparkFun Edison OLED Block\r\n=============================================\r\n\r\nDeveloping a node app for your Edison? Need to use the OLED display from SparkFun, GPIO pins or SPI? You're in luck! \r\n\r\nFeatures\r\n\r\n\t* OLED \r\n\t* GPIO\r\n\t* SPI\r\n\r\nNOTES\r\n\r\n\t* This has only been tested with the SparkFun Edison OLED Block, but GPIO and SPI should (may possibly) work with other hardware.\r\n\t* SPI - need to use a CS pin on Edison other than the default pin 23 (GP110), the MRAA library won't work. This library works using a pin of your choosing (tested with pin 9 (GP111)). \r\n\t* GPIO pin mraa /edison reference mapping may be useful - https://github.com/intel-iot-devkit/mraa/blob/master/docs/edison.md#intelr-breakout-board\r\n\t* The files in the Tests folder are meant to be run on an Intel Edison as they interact with the hardware.\r\n\r\nInstallation\r\n============\r\nThis module is only designed to work on the Intel Edison.\r\n\r\n```\r\n$ npm install edison-oled\r\n```\r\n\r\nYou may need to use the --unsafe-perm option if you get the warning \"cannot run in wd\".\r\n\r\n```\r\n$ npm install edison-oled --unsafe-perm\r\n```\r\nAPI\r\n============\r\nExample using the OLED screen\r\n\r\n```javascript\r\nvar edison = require('edison-oled');\r\n\r\n//create Oled\r\nvar oled = new edison.Oled();\r\n\r\n//setup input buttons\r\nvar btnUp = new edison.Gpio(47, edison.INPUT);\r\nvar btnDown = new edison.Gpio(44, edison.INPUT);\r\nvar btnLeft = new edison.Gpio(165, edison.INPUT);\r\nvar btnRight = new edison.Gpio(45, edison.INPUT);\r\nvar btnSelect = new edison.Gpio(48, edison.INPUT);\r\nvar btnA = new edison.Gpio(49, edison.INPUT);\r\nvar btnB = new edison.Gpio(46, edison.INPUT);\r\n\r\n//setup screen\r\noled.begin();\r\noled.clear(0);\r\noled.display();\r\noled.setFontType(0);\t\r\n\r\n//draw on screen\r\noled.clear();\r\noled.setCursor(14, 5);\r\noled.print(\"Press A\");\r\noled.setCursor(2, 13);\r\noled.print(\"for single\");\r\noled.setCursor(14, 30);\r\noled.print(\"Press B\");\r\noled.setCursor(6, 38);\r\noled.print(\"for multi\");\r\noled.display();\t\r\n\r\n//wait for user to make a choice using Button A or Button B\r\nwhile (btnA.pinRead() == edison.HIGH && btnB.pinRead() == edison.HIGH) {}\r\n\r\n```\r\n\r\nExample uses SPI and GPIO to communicate with OLED hardware (not a complete example, see test-spi.js for full code)\r\n\r\n```javascript\r\nvar edison = require('edison-oled');\r\n\r\n//setup pins needed for SPI\r\nvar cspin = new edison.Gpio(111, edison.OUTPUT, edison.HIGH); //chip select  --> edison_oled.c code uses 111 mraa uses 9\r\nvar dcpin = new edison.Gpio(14, edison.OUTPUT, edison.HIGH); //data/command --> edison_oled.c code uses 14 mraa uses 36\r\nvar rstpin = new edison.Gpio(15, edison.OUTPUT, edison.HIGH); //reset --> edison_oled.c code uses 15 mraa uses 48\r\nvar sclkpin = new edison.Gpio(109, edison.SPI, edison.HIGH); //sclk --> edison_oled.c code uses 109 mraa uses 10\r\nvar mosipin = new edison.Gpio(115, edison.SPI, edison.HIGH); //mosi --> edison_oled.c code uses 115 mraa uses 11\r\nvar misopin = new edison.Gpio(114, edison.SPI, edison.HIGH); //miso --> edison_oled.c code uses 114 mraa uses 24\r\n\r\n//create spi\r\nvar spi = new edison.Spi(edison.SPI_MODE_0, 10000000, false, cspin);\r\n\r\n//reset screen\r\nrstpin.pinWrite(edison.HIGH);\r\n//should add a wait time here for a few milliseconds\r\nrstpin.pinWrite(edison.LOW);\r\n//should add a wait time here for a few milliseconds\r\nrstpin.pinWrite(edison.HIGH);\r\n\t\r\n//send commands to OLED\r\ndcpin.pinWrite(edison.LOW); // DC pin LOW\r\nspi.transferData(edison.DISPLAYOFF);\r\nspi.transferData(edison.SETDISPLAYCLOCKDIV);\r\nspi.transferData(0x80);\r\n\t\r\n//send data to OLED\r\ndcpin.pinWrite(edison.HIGH); //DC pin HIGH\r\nspi.transferData(0xFF);\r\n\r\n```\r\n\r\nSparkFun Edison OLED Block\r\n===========================\r\n\r\n![SparkFun Edison OLED Block](https://cdn.sparkfun.com//assets/parts/1/0/0/3/6/13035-01.jpg)\r\n\r\n[*SparkFun Edison OLED Block(DEV-13035)*](https://www.sparkfun.com/products/13035)\r\n\r\nEquip your Edison with a graphic display using the Edison OLED board! This board features a 0.66\", 64x48 pixel monochrome OLED.\r\n\r\nTo add some control over your Edison and the OLED, this board also includes a small joystick and a pair of push-buttons. Use them to create a game, file navigator, or more!\r\n\r\nRepository Contents\r\n-------------------\r\n* **/Firmware** - Example Pong sketch to demonstrate OLED Functionality. \r\n* **/Hardware** - All Eagle design files (.brd, .sch)\r\n* **/Production** - Test bed files and production panel files\r\n\r\nDocumentation\r\n--------------\r\n* **[Hookup Guide](https://learn.sparkfun.com/tutorials/sparkfun-blocks-for-intel-edison---oled-block)** - Basic hookup guide for the OLED Block.\r\n* **[SparkFun Fritzing repo](https://github.com/sparkfun/Fritzing_Parts)** - Fritzing diagrams for SparkFun products.\r\n* **[SparkFun 3D Model repo](https://github.com/sparkfun/3D_Models)** - 3D models of SparkFun products. \r\n* **[SparkFun Graphical Datasheets](https://github.com/sparkfun/Graphical_Datasheets)** -Graphical Datasheets for various SparkFun products.\r\n\r\n\r\nLicense Information\r\n-------------------\r\n\r\nThis product is _**open source**_! \r\n\r\nPlease review the LICENSE.md file for license information. \r\n\r\nIf you have any questions or concerns on licensing, please contact techsupport@sparkfun.com.\r\n\r\nDistributed as-is; no warranty is given.\r\n\r\n- Your friends at SparkFun.\r\n","starsCount":1,"created":"2017-01-11T20:38:16.460Z","modified":"2017-02-02T14:51:54.024Z","lastPublisher":{"name":"bfeldman74","email":"bfeldman74@gmail.com"},"owners":[{"name":"bfeldman74","email":"bfeldman74@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"edison-oled","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/edison-oled-0.0.5.tgz_1484343983548_0.6236717691645026"},"_npmUser":{"name":"bfeldman74","email":"bfeldman74@gmail.com"},"_npmVersion":"3.10.9","_rev":"8-2d7f928f72872121d1161739a6604e13","_shasum":"1ac2217a97fbe82753020aab9bbdd2218a04b0ba","author":{"name":"Brian Feldman","email":"bfeldman74@gmail.com"},"bugs":{"url":"https://github.com/bfeldman74/Edison_OLED_Block/issues"},"contributors":[{"name":"see original project","url":"https://github.com/sparkfun/Edison_OLED_Block/graphs/contributors"}],"directories":{},"dist-tags":{"latest":"0.0.5"},"dist":{"shasum":"1ac2217a97fbe82753020aab9bbdd2218a04b0ba","tarball":"https://registry.npmjs.org/edison-oled/-/edison-oled-0.0.5.tgz"},"maintainers":[{"name":"bfeldman74","email":"bfeldman74@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-02T14:51:54.024Z","created":"2017-01-11T20:38:16.460Z","0.0.1":"2017-01-11T20:38:16.460Z","0.0.2":"2017-01-11T21:06:59.206Z","0.0.3":"2017-01-11T21:15:12.376Z","0.0.4":"2017-01-11T21:27:19.808Z","0.0.5":"2017-01-13T21:46:25.896Z"},"users":{"r1chjames":true}}}