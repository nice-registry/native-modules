{"name":"resumable-hash","version":"0.1.7","description":"Serializable and deserializable hashing implementations","main":"index.js","scripts":{"test":"mocha","install":"node-gyp rebuild"},"repository":"https://github.com/srijs/node-resumable-hash","keywords":["resumable","hash","sha1","sha256"],"license":"MIT","dependencies":{"nan":"^2.1.0"},"typings":"./index.d.ts","devDependencies":{"express":"^4.14.0","mocha":"^2.5.3","seed-random":"^2.2.0"},"gypfile":true,"gitHead":"199ad00076afdb6728cb279464a663b852e95bc8","homepage":"https://github.com/srijs/node-resumable-hash#readme","versions":[{"number":"0.0.1","date":"2016-06-09T14:38:14.248Z"},{"number":"0.1.0","date":"2016-06-10T05:21:36.639Z"},{"number":"0.1.1","date":"2016-06-10T05:23:32.326Z"},{"number":"0.1.2","date":"2016-06-10T05:27:16.819Z"},{"number":"0.1.3","date":"2016-06-10T07:44:00.063Z"},{"number":"0.1.4","date":"2016-07-29T06:05:14.465Z"},{"number":"0.1.5","date":"2016-08-06T03:21:03.478Z"},{"number":"0.1.6","date":"2016-08-06T03:24:24.725Z"},{"number":"0.1.7","date":"2016-08-06T03:26:14.170Z"}],"readme":"# Resumable Hash [![CircleCI](https://circleci.com/gh/srijs/node-resumable-hash.svg?style=svg)](https://circleci.com/gh/srijs/node-resumable-hash)\n\n> A functional, native implementation of resumable SHA-1 and SHA-256\n\n## Disclaimer\n\nThis is not a cryptographic hash implementation. It does not prevent against side-channel attacks, et al. If you require a cryptographic hash function, use the Node.js `crypto` module instead.\n\n## Installation\n\n```\nnpm install resumable-hash\n```\n\n## Usage\n\n```\nimport {Hash, HashType} from 'resumable-hash';\n```\n\n### `new Hash(type, [init])`\n\nConstructs a hash of a certain type, with an optional initialisation payload.\n\n#### Available types:\n\n- `HashType.Sha1`\n- `HashType.Sha256`\n\n### `Hash#update(data): Promise<Hash>`\n\nUpdates the hash with the given data buffer. Does not modify the current hash, but instead returns a new hash.\n\n### `Hash#updateSync(data): Hash`\n\nUpdates the hash with the given data buffer. Does not modify the current hash, but instead returns a new hash.\n\n### `Hash#digest(): Promise<Buffer>`\n\nComputes the digest of the hash. Returns a buffer that can be converted to hexadecimal, etc. using `Buffer#toString()`. Does not modify the original hash.\n\n### `Hash#digestSync(): Buffer`\n\nComputes the digest of the hash. Returns a buffer that can be converted to hexadecimal, etc. using `Buffer#toString()`. Does not modify the original hash.\n\n### `Hash#serialize(): Buffer`\n\nSerializes the hash state into a buffer and returns it. The returned buffer can be used in another call to `new Hash` to resume the hashing.\n\nNote: The serialized state is endian-specific, and should only be transferred between machines of the same endianess.\n\n## Performance\n\n`resumable-hash` has a fully asynchronous API and performs hashing in a background thread to not block the main event loop.\nIt is built for cases where a server performs stream hashing as part of answering requests, but also serves other requests which don't require hashing. With the built-in Node.js hashing, the hashing requests prevent the server from answering all other requests, driving up latency.\n\nTo simulate this scenario, a synthetic server was created which supports three endpoints: `/` which just serves a simple JSON response body, and `/sync` and `/async` which perform synchronous hashing (via the built-in `crypto` module) and asynchronous hashing (via `resumable-hash`), respectively.\n\nAs a benchmark, both `/` and `/sync` and `/` and `/async` were hit repeatedly and the latency for the `/` endpoint was measured. Below are the results, performed on a 2,3 GHz Intel Core i7 MacBook Pro:\n\n**Synchronous hashing (built-in `crypto`):**\n\n```\nRunning 30s test @ http://localhost:12345/\n  2 threads and 10 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    20.69ms    4.11ms  51.36ms   95.61%\n    Req/Sec   242.66     20.28   303.00     79.70%\n  14550 requests in 30.10s, 1.85MB read\nRequests/sec:    483.37\nTransfer/sec:     62.78KB\n```\n\n**Asynchronous hashing (`resumable-hash`):**\n\n```\nRunning 30s test @ http://localhost:12345/\n  2 threads and 10 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     1.07ms  673.30us  22.89ms   93.31%\n    Req/Sec     4.89k   693.44    10.41k    74.54%\n  292541 requests in 30.10s, 37.11MB read\nRequests/sec:   9717.74\nTransfer/sec:      1.23MB\n```\n","starsCount":0,"created":"2016-06-09T14:38:14.248Z","modified":"2016-08-06T03:26:14.170Z","lastPublisher":{"name":"srijs","email":"srijs@airpost.net"},"owners":[{"name":"srijs","email":"recv@awesam.de"}],"other":{"_attachments":{},"_from":".","_id":"resumable-hash","_nodeVersion":"6.3.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/resumable-hash-0.1.7.tgz_1470453973882_0.21294609806500375"},"_npmUser":{"name":"srijs","email":"srijs@airpost.net"},"_npmVersion":"3.10.3","_rev":"1-ee061f8b27b9c7bcdf273c18a030d4d1","_shasum":"f91f0114a0f2186bf936ff179c32711e23d21978","author":{"name":"Sam Rijs"},"bugs":{"url":"https://github.com/srijs/node-resumable-hash/issues"},"directories":{},"dist-tags":{"latest":"0.1.7"},"dist":{"shasum":"f91f0114a0f2186bf936ff179c32711e23d21978","tarball":"http://registry.npmjs.org/resumable-hash/-/resumable-hash-0.1.7.tgz"},"maintainers":[{"name":"srijs","email":"recv@awesam.de"}],"readmeFilename":"README.md","time":{"modified":"2016-08-06T03:26:14.170Z","created":"2016-06-09T14:38:14.248Z","0.0.1":"2016-06-09T14:38:14.248Z","0.1.0":"2016-06-10T05:21:36.639Z","0.1.1":"2016-06-10T05:23:32.326Z","0.1.2":"2016-06-10T05:27:16.819Z","0.1.3":"2016-06-10T07:44:00.063Z","0.1.4":"2016-07-29T06:05:14.465Z","0.1.5":"2016-08-06T03:21:03.478Z","0.1.6":"2016-08-06T03:24:24.725Z","0.1.7":"2016-08-06T03:26:14.170Z"},"users":{}}}