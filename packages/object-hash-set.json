{"name":"object-hash-set","version":"0.1.1","description":"memory efficient object hash set","main":"index.js","scripts":{"test":"mocha","install":"node-gyp rebuild"},"keywords":["cache"],"license":"Apache-2.0","gypfile":true,"dependencies":{"bindings":"^1.2.1","nan":"^2.1.0"},"devDependencies":{"chai":"^3.4.1","minimist":"^1.2.0","mocha":"^2.3.4","underscore":"^1.8.3"},"gitHead":"898333ef7499256abfce5a9eba1e87b87f8464dd","versions":[{"number":"0.1.1","date":"2016-02-18T23:57:56.750Z"}],"readme":"# Object Hash Set\nThis is a hash set for Javascript objects. Its object-encoding algorithm is quite space-efficient, especially in the case where the input objects have largely the same keys, and most or all keys have low cardinality (number of distinct values of that key in the data set). Data with these characteristics often arises in time series data analysis applications, which is where this originated.\n\n## API\n\n### new ObjectHashSet([options]) ###\nCreates an instance of the Object Hash Set. `options`, if specified, is an object. The only supported option is `ignore`. The value of `ignore` is an array of keys that the set will not pay attention to during storage or lookup. The set will consider two objects identical if their values for all non-ignored keys are the same.\n\n### add(object) ###\nAdds the given object to the set if an equivalent object is not already in the set. Returns `true` if a new object was added or `false` if the object already existed in the set.\n\n### contains(object) ###\nReturns `true` if an object equivalent to `object` has already been `add`ed.\n\n### delete(object) ###\nRemoves the object from the set. A future call to `add` or `contains` with an object identical to the given object will return `false`. Note that this will not reclaim the storage space used by the keys in the given object.\n\n## Performance ##\nObject Hash Set works its magic by storing each distinct value of each key once and compactly encoding combinations of keys with references to these stored values. You can use the provided `scripts/perf.js` to give it a test. `perf.js` takes two parameters: `num_keys` and `values_per_key`. It generates a data set of (`values_per_key`^`num_keys`) distinct points, adds them all to an Object Hash Set, and periodically logs memory stats. Here's an example:\n```\nnode --expose-gc ./scripts/perf.js --num_keys 7 --values_per_key 10\nstored 0 points so far in 0.016 sec, memory usage: { rss: 20054016, heapTotal: 7523616, heapUsed: 4344872 }\nstored 100000 points so far in 1.119 sec, memory usage: { rss: 30150656, heapTotal: 10619424, heapUsed: 6892416 }\n...\nstored 9900000 points so far in 111.106 sec, memory usage: { rss: 490704896, heapTotal: 10619424, heapUsed: 6225264 }\nFinished! Stored 10000000 points, final memory usage: { rss: 494194688, heapTotal: 10619424, heapUsed: 4654384 }\n```\nThat comes out to 10,000,000 objects stored, taking up 494,194,688 bytes of RSS space (since Object Hash Set is a native C++ addon, it doesn't take up space in the Javascript heap for the objects it stores). If you naively hash these objects with `JSON.stringify` and store them as keys in a plain old Javascript object, the heap usage goes to 1.5 GB and the program crashes at around 6.5 million points. So Object Hash Set is almost 5 times more efficient. Nice!\n\n## Contributing\n\nWant to contribute? Awesome! Donâ€™t hesitate to file an issue or open a pull request. See the common [contributing guidelines for project Juttle](https://github.com/juttle/juttle/blob/master/CONTRIBUTING.md).\n","created":"2016-02-18T23:57:56.750Z","modified":"2016-02-18T23:57:56.750Z","lastPublisher":{"name":"davidvgalbraith","email":"davidvgalbraith@gmail.com"},"owners":[{"name":"davidvgalbraith","email":"davidvgalbraith@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"object-hash-set","_nodeVersion":"5.5.0","_npmOperationalInternal":{"host":"packages-9-west.internal.npmjs.com","tmp":"tmp/object-hash-set-0.1.1.tgz_1455839874170_0.6016620558220893"},"_npmUser":{"name":"davidvgalbraith","email":"davidvgalbraith@gmail.com"},"_npmVersion":"3.3.12","_rev":"1-5fe098440142f997e5b8c7098f03f2af","_shasum":"2b03065b58eddd29d5beed601158108a4e79050a","author":{"name":"Michael Demmer","email":"demmer@jut.io"},"contributors":[{"name":"Dave Galbraith","email":"dave@jut.io"}],"directories":{"test":"test"},"dist-tags":{"latest":"0.1.1"},"dist":{"shasum":"2b03065b58eddd29d5beed601158108a4e79050a","tarball":"http://registry.npmjs.org/object-hash-set/-/object-hash-set-0.1.1.tgz"},"maintainers":[{"name":"davidvgalbraith","email":"davidvgalbraith@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-02-18T23:57:56.750Z","created":"2016-02-18T23:57:56.750Z","0.1.1":"2016-02-18T23:57:56.750Z"}}}