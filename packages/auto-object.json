{"name":"auto-object","version":"1.0.2","description":"Create auto properties object and class in Node.js.","main":"index.js","scripts":{"test":"make test","install":"node-gyp rebuild"},"repository":"https://github.com/XadillaX/auto-object","keywords":["auto","property","object","class"],"license":"MIT","homepage":"https://github.com/XadillaX/auto-object#readme","dependencies":{"nan":"^2.6.2"},"devDependencies":{"coveralls":"^2.13.1","istanbul":"^0.4.5","mocha":"^3.4.2","should":"^11.2.1","unicode-lorem":"^0.1.1"},"gypfile":true,"gitHead":"cf1d1a9d8a0d9b0c0db7dc9b9aeb41f023b545b1","versions":[{"number":"1.0.0","date":"2017-06-17T12:44:44.453Z"},{"number":"1.0.1","date":"2017-06-17T13:02:41.321Z"},{"number":"1.0.2","date":"2017-06-17T15:15:10.960Z"}],"readme":"# auto-object\n\n[![Version](http://img.shields.io/npm/v/auto-object.svg)](https://www.npmjs.com/package/auto-object)\n[![Downloads](http://img.shields.io/npm/dm/auto-object.svg)](https://www.npmjs.com/package/auto-object)\n[![License](https://img.shields.io/npm/l/auto-object.svg?style=flat)](https://opensource.org/licenses/MIT)\n[![TravisCI](https://travis-ci.org/XadillaX/auto-object.svg)](https://travis-ci.org/XadillaX/auto-object)\n[![Dependency](https://david-dm.org/XadillaX/auto-object.svg)](https://david-dm.org/XadillaX/auto-object)\n\nCreate an object or a class that may accessed by any property name just like\n[Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy).\n\neg.\n\n```js\nconst myObject = autoObject.createObject(function(name) {\n    if(name.startsWith(\"say\")) {\n        return function() {\n            return name.substr(3);\n        }\n    }\n\n    return name;\n});\n\nmyObject.foo;       ///< \"foo\"\nmyObject.sayFoo();  ///< \"Foo\"\nmyObject.sayBar();  ///< \"Bar\"\n```\n\n## Installation\n\n```console\n$ npm install --save auto-object\n```\n\n## API\n\nRequire `auto-object` at first:\n\n```js\nconst autoObject = require(\"auto-object\");\n```\n\n### createClass\n\nCreate an auto-object class and get its constructor function:\n\n```js\nautoObject.createClass([className])\n```\n\n+ `className`: the class name, default to `AutoClass`. (optional)\n+ **return**: the special constructor function\n\nYour own constructor function should attached on the prototype chain named\n`$$constructor`. And the access function should attached on the prototype chain\nnamed `$$access`. Both of `$$constructor` and `$$access` are optional.\n\n#### What's `$$constructor`\n\nWe usually create a class constructor function like this:\n\n```js\nfunction MyClass(val) {\n    this.$val = val;\n}\n```\n\nBut `createClass` exactly returns a constructor function which you can't\nredefine. So we make `$$constructor` as your own constructor function.\n\neg.\n\n```js\nconst MyClass = autoObject.createClass(\"MyClass\");\n\nMyClass.prototype.$$constructor = function(val) {\n    this.$$val = val;\n};\n\nconst ret = new MyClass(233); ///< MyClass { $$val: 233 }\n```\n\n#### What's `$$access`\n\n`$$access` is the access function to deal with property accessing. This function\nowns a single parameter which means the property name. You should return a\nresult for the accessing.\n\neg.\n\n```js\nconst MyClass = autoObject.createClass(\"MyClass\");\n\nMyClass.prototype.$$constructor = function(val) {\n    this.$$val = val;\n};\n\nMyClass.prototype.$$access = function(property) {\n    const self = this;\n    if(property.match(/^plus\\d+$/)) {\n        return function() {\n            self.$$val += parseInt(property.substr(4));\n            return $$val;\n        };\n    } else if(property.match(/^minus\\d+$/)) {\n        return function() {\n            self.$$val -= parseInt(property.substr(5));\n            return $$val;\n        };\n    }\n\n    return \"You're hacked\";\n};\n\nconst ret = new MyClass(233);   ///< MyClass { $$val: 233 }\nret.plus5();                    ///< 238\nret.plus2();                    ///< 240\nret.minus10();                  ///< 230\nret.foo;                        ///< \"You're hacked\"\n```\n\n#### Inherits\n\nThe result of `createClass` almost like the normal constructor function, it may\ninherit from some other class by using `util.inherits` too.\n\neg.\n\n```js\nconst MyClass = autoObject.createClass(\"MyClass\");\n\nMyClass.prototype.$$constructor = function() {\n    EventEmitter.call(this);\n};\n\nutil.inherits(MyClass, EventEmitter);\n\nMyClass.prototype.$$access = function(name) {\n    const self = this;\n    return function(val) {\n        self.emit(name, val);\n    };\n}\n\nconst ret = new MyClass();\nret.on(\"test\", function(val) {\n    console.log(val);\n});\nret.test(\"Hello world\");        // emit(\"test\", \"Hello world\")\n```\n\n### createObject\n\nCreate and get an auto-object:\n\n```js\nautoObject.createObject([access]);\n```\n\n+ `access`: the access function. (optional)\n+ **return**: the special auto-object\n\nIf you want to change access function lately, you just assign the function to\nthe `$$access` property of the returned object.\n\n#### What's `$$access`\n\n`$$access` is the access function to deal with property accessing. This function\nowns a single parameter which means the property name. You should return a\nresult for the accessing.\n\neg.\n\n```js\nconst obj = autoObject.createObject(function(name) {\n    return `You're ${name}`;\n});\n\nobj.foo;        ///< \"You're foo\"\nobj.bar;        ///< \"You're bar\"\n```\n\nYou can change `$$access` at any time you want to do this.\n\neg.\n\n```js\nconst obj = autoObject.createObject();\n\nobj.foo;                        ///< undefined\nobj.$$access = function(name) {\n    return `You're ${name}`;\n};\nobj.foo;                        ///< \"You're foo\"\nobj.bar;                        ///< \"You're bar\"\n```\n\n### Reserved Properties and Overwrite Rule\n\n> **This is important!**\n\nHere's a reserved properties list that won't go through the access function:\n\n```js\n[\n  \"constructor\",\n  \"hasOwnProperty\",\n  \"isPrototypeOf\",\n  \"propertyIsEnumerable\",\n  \"toLocaleString\",\n  \"toString\",\n  \"valueOf\",\n  \"__defineGetter__\",\n  \"__defineSetter__\",\n  \"__lookupGetter__\",\n  \"__lookupSetter__\",\n  \"__proto__\",\n  \"inspect\",\n  \"$$constructor\",\n  \"$$access\"\n]\n```\n\nAnd if you define a property manually in your auto-object, that certain property\nwon't go through the access function too.\n\neg.\n\n```js\nconst obj = autoObject.createObject(function() {\n    return \"You're hacked\";\n});\n\nobj.foo;                ///< \"You're hacked\"\nobj.foo = \"I'm free\";\nobj.foo;                ///< \"I'm free\"\ndelete obj.foo;\nobj.foo;                ///< \"You're hacked\"\n```\n\n## Contribution\n\nYou're welcome to fork and make pull requests!\n\n「雖然我覺得不怎麼可能有人會關注我」\n","created":"2017-06-17T12:44:44.453Z","modified":"2017-06-17T15:15:10.960Z","lastPublisher":{"name":"xadillax","email":"admin@xcoder.in"},"owners":[{"name":"xadillax","email":"admin@xcoder.in"}],"other":{"_attachments":{},"_from":".","_id":"auto-object","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/auto-object-1.0.2.tgz_1497712510768_0.9632374646607786"},"_npmUser":{"name":"xadillax","email":"admin@xcoder.in"},"_npmVersion":"3.10.10","_rev":"3-067ffb600573a4510f9d7c8ed1b5a201","_shasum":"de6f1440f71492b8aaa74d4475734ea3ed3be9cb","author":{"name":"XadillaX","email":"i@2333.moe"},"bugs":{"url":"https://github.com/XadillaX/auto-object/issues"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"de6f1440f71492b8aaa74d4475734ea3ed3be9cb","tarball":"https://registry.npmjs.org/auto-object/-/auto-object-1.0.2.tgz"},"maintainers":[{"name":"xadillax","email":"admin@xcoder.in"}],"readmeFilename":"README.md","time":{"modified":"2017-06-17T15:15:10.960Z","created":"2017-06-17T12:44:44.453Z","1.0.0":"2017-06-17T12:44:44.453Z","1.0.1":"2017-06-17T13:02:41.321Z","1.0.2":"2017-06-17T15:15:10.960Z"}}}