{"name":"java2","description":"Bridge API to connect with existing Java APIs.","keywords":["java","jvm","bridge"],"version":"0.0.5","engines":{"node":">=0.8.0"},"license":"MIT","repository":"https://github.com/joeferner/node-java","dependencies":{"find-java-home":"0.1.1","glob":"~3.2.9","nan":"1.2.0"},"devDependencies":{"async":"~0.1.22","nodeunit":"0.9.0"},"main":"./index.js","scripts":{"postInstall":"node postInstall.js","install":"node-gyp rebuild"},"gypfile":true,"homepage":"https://github.com/joeferner/node-java","versions":[{"number":"0.0.1","date":"2014-11-06T18:00:01.962Z"},{"number":"0.0.2","date":"2014-11-06T18:23:04.608Z"},{"number":"0.0.3","date":"2014-11-06T19:53:38.569Z"},{"number":"0.0.4","date":"2014-11-06T20:02:53.817Z"},{"number":"0.0.5","date":"2014-11-06T20:11:08.490Z"}],"readme":"[![Build Status](https://travis-ci.org/joeferner/node-java.png)](https://travis-ci.org/joeferner/node-java)\n\n# java\n\nBridge API to connect with existing Java APIs.\n\n[Google Groups Discussion Forum](https://groups.google.com/forum/#!forum/node-java)\n\n###Other projects that might be helpful\n\n* [node-java-maven](https://github.com/joeferner/node-java-maven) - manages your node-java classpath by using maven dependency mangement.\n\n## Installation\n\n```bash\n$ npm install java\n```\n\nNotes:\n\n* node-gyp requires python 2.x not python 3.x. See https://github.com/TooTallNate/node-gyp/issues/155 for more details.\n* If you see an error such as \"Call to 'node findJavaHome.js' returned exit status 1\"\n      Try running `node findJavaHome.js` in the node-java directory to see the full failure message.\n* If you are having problems finding 'jni.h'. Make sure you have the JDK installed not just the JRE. If you are using\n      OpenJDK you want the openjdk-7-jdk package, not openjdk-7-jre.  _Mavericks users see [Issue #86](https://github.com/nearinfinity/node-java/issues/86) if you run into this._\n\n### Installation OSX\n\n* If you run into strange runtime issues, it could be because the Oracle JDK does not advertise itself as available for JNI.  See [Issue 90](https://github.com/joeferner/node-java/issues/90#issuecomment-45613235) for more details and manual workarounds.  If this does occur for you, please update the issue.\n\n### Installation Windows\n\nFor 64 bit installs with 32 bit node:\n* you need the 32 bit JDK, with the 64 bit JDK you will see LNK2001 errormessages (http://stackoverflow.com/questions/10309304/what-library-to-link-to-on-windows-7-for-jni-createjavavm).\n* when using the windows SDK 7.1 command prompt (64 bits) be sure to setenv.cmd /Release /x86\n\nIf you get `ENOENT` errors looking for `<nodepath>\\node_modules\\node-gyp\\..`, ensure you have node-gyp installed as a global nodule:\n\n```bash\nnpm install -g node-gyp\n```\n\nIf you get `D9025` warnings and `C1083` errors when looking for `.sln` or `.h` files, be sure you've got the `node-gyp`'s dependencies, [as explained here](https://github.com/joeferner/node-java#installation).\n\n### Installation ARM (Raspberry Pi)\n\n```bash\nGYP_DEFINES=\"armv7=0\" CCFLAGS='-march=armv6' CXXFLAGS='-march=armv6' npm install java\n```\n\n## Manual compile (Using node-gyp)\n\n```bash\n./compile-java-code.sh\nnode-gyp configure build\nnpm test\n```\n\n_NOTE: You will need node-gyp installed using \"npm install -g node-gyp\"_\n\n### Java 1.8 support\n\nManual compilation for Java 1.8 support requires additional steps:\n\n```bash\n./compile-java-code.sh\n./compile-java8-code.sh\nnode-gyp configure build\nnpm test\nnpm test8\n```\n\nJava 1.8 language features can be used in Java classes only if a Java 1.8 JRE is available. The script compile-java8-code.sh is used only to compile java classes used in the 'test8' unit tests, but these classes are checked into the test8/ directory. Note that unit tests in the test8/ directory will pass (by design) if run against a Java 1.6 or 1.7 JRE, provided that a java.lang.UnsupportedClassVersionError is caught with the message 'Unsupported major.minor version 52.0' (the expected behavior when Java 1.8 language features are used in an older JRE).\n\n## Installation node-webkit\n\n```bash\nnpm install -g nw-gyp\nnpm install java\ncd node_modules/java\nnw-gyp configure --target=0.10.5\nnw-gyp build\n```\n\n_See testIntegration/webkit for a working example_\n\n## Quick Examples\n\n```javascript\nvar java = require(\"java\");\njava.classpath.push(\"commons-lang3-3.1.jar\");\njava.classpath.push(\"commons-io.jar\");\n\nvar list = java.newInstanceSync(\"java.util.ArrayList\");\n\njava.newInstance(\"java.util.ArrayList\", function(err, list) {\n  list.addSync(\"item1\");\n  list.addSync(\"item2\");\n});\n\nvar ArrayList = java.import('java.util.ArrayList');\nvar list = new ArrayList();\nlist.addSync('item1');\n```\n\n### Create a char array\n\n```javascript\nvar charArray = java.newArray(\"char\", \"hello world\\n\".split(''));\n```\n\n### Create a byte array\n\n```javascript\nvar byteArray = java.newArray(\n  \"byte\",\n  \"hello world\\n\"\n    .split('')\n    .map(function(c) { return java.newByte(str.charCodeAt(c)); });\n```\n\n### Using java.lang.Long and long\n\nJavaScript only supports 32-bit integers. Because of this java longs must be treated specially.\nWhen getting a long result the value may be truncated. If you need the original value there is\na property off of the result called \"longValue\" which contains the un-truncated value as a string.\nIf you are calling a method that takes a long you must create it using [java.newInstance](#javaNewInstance).\n\n```javascript\nvar javaLong = java.newInstanceSync(\"java.lang.Long\", 5);\nconsole.log('Possibly truncated long value: ' + javaLong);\nconsole.log('Original long value (as a string): ' + javaLong.longValue);\njava.callStaticMethodSync(\"Test\", \"staticMethodThatTakesALong\", javaLong);\n```\n\n### Exceptions\n\nExceptions from calling methods either caught using JavaScript try/catch block or passed\nto a callback as the first parameter may have a property named \"cause\" which has a reference\nto the Java Exception object which caused the error.\n\n```javascript\ntry {\n  java.methodThatThrowsExceptionSync();\n} catch(ex) {\n  console.log(ex.cause.getMessageSync());\n}\n```\n\n# Release Notes\n\n### v0.2.0\n\n* java.lang.Long and long primitives are handled better. See\n  \\([Issue #37](https://github.com/nearinfinity/node-java/issues/37)\\) and\n  \\([Issue #40](https://github.com/nearinfinity/node-java/issues/40)\\).\n\n# Index\n\n## java\n * [classpath](#javaClasspath)\n * [options](#javaOptions)\n * [import](#javaImport)\n * [newInstance](#javaNewInstance)\n * [instanceOf](#javaInstanceOf)\n * [callStaticMethod](#javaCallStaticMethod)\n * [callMethod](#javaCallMethod)\n * [getStaticFieldValue](#javaGetStaticFieldValue)\n * [setStaticFieldValue](#javaSetStaticFieldValue)\n * [newArray](#javaNewArray)\n * [newByte](#javaNewByte)\n * [newShort](#javaNewShort)\n * [newLong](#javaNewLong)\n * [newChar](#javaNewChar)\n * [newDouble](#javaNewDouble)\n * [newFloat](#javaNewFloat)\n * [newProxy](#javaNewProxy)\n\n## java objects\n * [Call Method](#javaObjectCallMethod)\n * [Get/Set Field](#javaObjectGetSetField)\n\n# API Documentation\n\n<a name=\"java\"/>\n## java\n\n<a name=\"javaClasspath\" />\n**java.classpath**\n\nArray of paths or jars to pass to the creation of the JVM.\n\nAll items must be added to the classpath before calling any other node-java methods.\n\n__Example__\n\n    java.classpath.push('commons.io.jar');\n\n<a name=\"javaOptions\" />\n**java.options**\n\nArray of options to pass to the creation of the JVM.\n\nAll items must be added to the options before calling any other node-java methods.\n\n__Example__\n\n    java.options.push('-Djava.awt.headless=true');\n    java.options.push('-Xmx1024m');\n\n<a name=\"javaImport\" />\n**java.import(className)**\n\nLoads the class given by className such that it acts and feels like a javascript object.\n\n__Arguments__\n\n * className - The name of the class to create. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n\n__Example__\n\n    var Test = java.import('Test');\n    Test.someStaticMethodSync(5);\n    console.log(Test.someStaticField);\n\n    var value1 = Test.NestedEnum.Value1;\n\n    var test = new Test();\n    list.instanceMethodSync('item1');\n\n<a name=\"javaNewInstance\" />\n**java.newInstance(className, [args...], callback)**\n\n**java.newInstanceSync(className, [args...]) : result**\n\nCreates an instance of the specified class. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * className - The name of the class to create. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var list = java.newInstanceSync(\"java.util.ArrayList\");\n\n    java.newInstance(\"java.util.ArrayList\", function(err, list) {\n      if(err) { console.error(err); return; }\n      // new list\n    });\n\n<a name=\"javaInstanceOf\" />\n**java.instanceOf(javaObject, className)**\n\nDetermines of a javaObject is an instance of a class.\n\n__Arguments__\n\n * javaObject - Instance of a java object returned from a method or from newInstance.\n * className - A string class name.\n\n__Example__\n\n    var obj = java.newInstanceSync(\"my.package.SubClass\");\n\n    if(java.instanceOf(obj, \"my.package.SuperClass\")) {\n      console.log(\"obj is an instance of SuperClass\");\n    }\n\n<a name=\"javaCallStaticMethod\" />\n**java.callStaticMethod(className, methodName, [args...], callback)**\n\n**java.callStaticMethodSync(className, methodName, [args...]) : result**\n\nCalls a static method on the specified class. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * className - The name of the class to call the method on. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * methodName - The name of the method to call. The method name can include the full signature (see [Getting the full method signature](#getFullMethodSignature)).\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var result = java.callStaticMethodSync(\"com.nearinfinty.MyClass\", \"doSomething\", 42, \"test\");\n\n    java.callStaticMethod(\"com.nearinfinty.MyClass\", \"doSomething\", 42, \"test\", function(err, results) {\n      if(err) { console.error(err); return; }\n      // results from doSomething\n    });\n\n<a name=\"javaCallMethod\" />\n**java.callMethod(instance, methodName, [args...], callback)**\n\n**java.callMethodSync(instance, methodName, [args...]) : result**\n\nCalls a method on the specified instance. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * instance - An instance of the class from newInstance.\n * methodName - The name of the method to call. The method name can include the full signature (see [Getting the full method signature](#getFullMethodSignature)).\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var instance = java.newInstanceSync(\"com.nearinfinty.MyClass\");\n\n    var result = java.callMethodSync(\"com.nearinfinty.MyClass\", \"doSomething\", 42, \"test\");\n\n    java.callMethodSync(instance, \"doSomething\", 42, \"test\", function(err, results) {\n      if(err) { console.error(err); return; }\n      // results from doSomething\n    });\n\n<a name=\"javaGetStaticFieldValue\" />\n**java.getStaticFieldValue(className, fieldName)**\n\nGets a static field value from the specified class.\n\n__Arguments__\n\n * className - The name of the class to get the value from. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * fieldName - The name of the field to get the value from.\n\n__Example__\n\n    var data = java.getStaticFieldValue(\"com.nearinfinty.MyClass\", \"data\");\n\n<a name=\"javaSetStaticFieldValue\" />\n**java.setStaticFieldValue(className, fieldName, newValue)**\n\nSets a static field value on the specified class.\n\n__Arguments__\n\n * className - The name of the class to set the value on. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * fieldName - The name of the field to set the value on.\n * newValue - The new value to assign to the field.\n\n__Example__\n\n    java.setStaticFieldValue(\"com.nearinfinty.MyClass\", \"data\", \"Hello World\");\n\n<a name=\"javaNewArray\" />\n**java.newArray(className, values[])**\n\nCreates a new java array of type class.\n\n__Arguments__\n\n * className - The name of the type of array elements. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * values - A javascript array of values to assign to the java array.\n\n__Example__\n\n    var newArray = java.newArray(\"java.lang.String\", [\"item1\", \"item2\", \"item3\"]);\n\n<a name=\"javaNewByte\" />\n**java.newByte(val)**\n\nCreates a new java byte. This is needed because javascript does not have the concept of a byte.\n\n__Arguments__\n\n * val - The value of the java byte.\n\n__Example__\n\n    var b = java.newByte(12);\n\n<a name=\"javaNewShort\" />\n**java.newShort(val)**\n\nCreates a new java short. This is needed because javascript does not have the concept of a short.\n\n__Arguments__\n\n * val - The value of the java short.\n\n__Example__\n\n    var s = java.newShort(12);\n\n<a name=\"javaNewLong\" />\n**java.newLong(val)**\n\nCreates a new java long. This is needed because javascript does not have the concept of a long.\n\n__Arguments__\n\n * val - The value of the java long.\n\n__Example__\n\n    var s = java.newLong(12);\n\n<a name=\"javaNewChar\" />\n**java.newChar(val)**\n\nCreates a new java char. This is needed because javascript does not have the concept of a char.\n\n__Arguments__\n\n * val - The value of the java char.\n\n__Example__\n\n    var ch = java.newChar('a');\n\n<a name=\"javaNewDouble\" />\n**java.newDouble(val)**\n\nCreates a new java double. This is needed to force javascript's number to a double to call some methods.\n\n__Arguments__\n\n * val - The value of the java double.\n\n__Example__\n\n    var d = java.newDouble(3.14);\n\n<a name=\"javaNewFloat\" />\n**java.newFloat(val)**\n\nCreates a new java float. This is needed to force javascript's number to a float to call some methods.\n\n__Arguments__\n\n * val - The value of the java float.\n\n__Example__\n\n    var f = java.newFloat(3.14);\n\n<a name=\"javaNewProxy\" />\n**java.newProxy(interfaceName, functions)**\n\nCreates a new java Proxy for the given interface. Functions passed in will run on the v8 main thread and not a new thread.\n\nThe returned object has a method unref() which you can use to free the object for\ngarbage collection.\n\n__Arguments__\n\n * interfaceName - The name of the interface to proxy. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * functions - A hash of functions matching the function in the interface.\n\n__Example__\n\n    var myProxy = java.newProxy('java.lang.Runnable', {\n      run: function () {\n        // This is actually run on the v8 thread and not the new java thread\n        console.log(\"hello from thread\");\n      }\n    });\n\n    var thread = java.newInstanceSync(\"java.lang.Thread\", myProxy);\n    thread.start();\n\n<a name=\"javaObject\"/>\n## java object\n\n<a name=\"javaObjectCallMethod\" />\n**obj._methodName_([args...], callback)**\n\n**obj._methodNameSync_([args...]) : result**\n\nOnce you have a java object either by creating a new instance or as a result of a method call you can then call methods on that object.\nAll public, non-static methods are exposed in synchronous and asynchronous flavors.\n\n__Arguments__\n\n * args - The arguments to pass to the method.\n * callback(err, item) - Callback to be called when the method has completed.\n\n__Example__\n\n    var list = java.newInstanceSync(\"java.util.ArrayList\");\n    list.addSync(\"item1\");\n    list.add(\"item2\", function(err, result) {\n      if(err) { console.error(err); return; }\n    });\n\n<a name=\"javaObjectGetSetField\" />\n**obj._fieldName_ = val**\n\n**val = obj._fieldName_**\n\nOnce you have a java object either by creating a new instance or as a result of a method call you can get instance\nfield values.\n\n__Example__\n\n    var list = java.newInstanceSync(\"com.nearinfinty.MyClass\");\n    list.data = \"test\";\n    var data = list.data;\n\n<a name=\"getFullMethodSignature\" />\n# Getting the Full Method Signature\n\nRun `javap -s -classpath <your-class-path> <your-class-name>`. Find the method name you are looking for. For example:\n\n```\npublic int methodAmbiguous(java.lang.Double);\n  Signature: (Ljava/lang/Double;)I\n```\n\nThe full method signature would be `methodAmbiguous(Ljava/lang/Double;)I`.\n\nIf you have grep, a shortcut is `javap -s -classpath . my.company.MyClass | grep -A1 myMethodName`.\n\n# Signal Handling\n\nThe JVM intercepts signals (Ctrl+C, etc.) before node/v8 gets to handle them. To fix this there are a couple options.\n\n## Signal Handling Option 1\n\nOne option to capture these events is to add the following flag:\n\n```javascript\njava.options.push('-Xrs');\n```\n\nAs `man java` says, the `-Xrs` flag will “reduce usage of operating-system signals by [the] Java virtual machine (JVM)”, to avoid issues when developing “applications that embed the JVM”.\n\n## Signal Handling Option 2\n\nHook into the runtime shutdown hook.\n\nFirst create a java wrapper around the Runtime.addShutdownHook method to allow using a proxy object.\n\n```java\npublic class ShutdownHookHelper {\n  public static void setShutdownHook(final Runnable r) {\n    Runtime.getRuntime().addShutdownHook(new Thread() {\n      @Override\n      public void run() {\n        r.run();\n      }\n    });\n  }\n}\n```\n\nCompile ShutdownHookHelper and then use it as follows.\n\n```javascript\nvar java = require('./');\njava.classpath.push('.');\nvar ShutdownHookHelper = java.import('ShutdownHookHelper');\n\nShutdownHookHelper.setShutdownHookSync(java.newProxy('java.lang.Runnable', {\n  run: function () {\n    console.log(\"do shutdown stuff here instead.\");\n  }\n}));\n```\n\n# Object lifetime\n\nWhen you call a Java method through node-java, any arguments (V8/JavaScript objects) will be converted to Java objects  on the v8 main thread via a call to v8ToJava (found in utils.cpp). The JavaScript object is not held on to and can be garbage collected by v8. If this is an async call, the reference count on the Java objects will be incremented. The Java method will be invoked in a node.js async thread (see uv_queue_work). When the method returns, the resulting object will be returned to the main v8 thread and converted to JavaScript objects via a call to javaToV8 and the Java object's reference count will then be decremented to allow for garbage collection. The resulting v8 object will then be returned to the callers callback function.\n\n# Troubleshooting\n\n## Error: Cannot find module '../build/jvm_dll_path.json'\n\nEither postInstall.js didn't run or there was a problem detecting java. Try running postInstall.js manually.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","created":"2014-11-06T18:00:01.962Z","modified":"2014-11-06T20:11:08.490Z","lastPublisher":{"name":"laxmi.nagda","email":"laxmi.nagda@irissoftware.com"},"owners":[{"name":"laxmi.nagda","email":"laxmi.nagda@irissoftware.com"}],"other":{"_attachments":{},"_from":".","_id":"java2","_npmUser":{"name":"laxmi.nagda","email":"laxmi.nagda@irissoftware.com"},"_npmVersion":"1.4.28","_rev":"1-ab2b15df506a9bb2ee79e2a59045bd39","_shasum":"510bb1774072ea9c868706c8059e5cd1f22daf29","author":{"name":"Joe Ferner","email":"joe@fernsroth.com"},"bugs":{"url":"https://github.com/joeferner/node-java/issues"},"directories":{"example":"examples","test":"test"},"dist-tags":{"latest":"0.0.5"},"dist":{"shasum":"510bb1774072ea9c868706c8059e5cd1f22daf29","tarball":"http://registry.npmjs.org/java2/-/java2-0.0.5.tgz"},"maintainers":[{"name":"laxmi.nagda","email":"laxmi.nagda@irissoftware.com"}],"readmeFilename":"README.md","time":{"modified":"2014-11-06T20:11:08.490Z","created":"2014-11-06T18:00:01.962Z","0.0.1":"2014-11-06T18:00:01.962Z","0.0.2":"2014-11-06T18:23:04.608Z","0.0.3":"2014-11-06T19:53:38.569Z","0.0.4":"2014-11-06T20:02:53.817Z","0.0.5":"2014-11-06T20:11:08.490Z"}}}