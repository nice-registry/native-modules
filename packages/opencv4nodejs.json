{"name":"opencv4nodejs","version":"1.1.2","description":"opencv4nodejs\r =============\r [![Build Status](https://travis-ci.org/justadudewhohacks/opencv4nodejs.svg?branch=master)](http://travis-ci.org/justadudewhohacks/opencv4nodejs)","keywords":["opencv","cv","computer vision","image","processing","detection","recognition","tracking","matching","face"],"main":"./lib/opencv4nodejs.js","scripts":{"install":"node-gyp rebuild","configure":"node-gyp configure","build":"node-gyp configure build","rebuild":"node-gyp rebuild"},"license":"ISC","repository":"https://github.com/justadudewhohacks/opencv4nodejs","gypfile":true,"dependencies":{"nan":"^2.6.2"},"gitHead":"3ec4e2381502a67bb524894224ab701eb64eaeb7","homepage":"https://github.com/justadudewhohacks/opencv4nodejs#readme","versions":[{"number":"1.0.0","date":"2017-08-20T15:52:16.099Z"},{"number":"1.1.0","date":"2017-08-26T16:38:01.256Z"},{"number":"1.1.1","date":"2017-08-26T18:04:04.465Z"},{"number":"1.1.2","date":"2017-08-27T15:18:18.225Z"}],"readme":"opencv4nodejs\r\n=============\r\n[![Build Status](https://travis-ci.org/justadudewhohacks/opencv4nodejs.svg?branch=master)](http://travis-ci.org/justadudewhohacks/opencv4nodejs)\r\n\r\n**Brings lots of features of OpenCV 3.x to nodejs to use as a service, integrate into your Electron app or simply to play around with the OpenCV API in Javascript instead of C++.**\r\n\r\n## How to install\r\n\r\n``` bash\r\n$ npm install --save opencv4nodejs\r\n```\r\n\r\nMake sure to have OpenCV 3+ ( extra modules are optional ) installed on your System https://github.com/opencv/opencv/releases/. In case you are running Windows or have OpenCV set up in a custom directory make sure to set the following environment variables:\r\n1. OPENCV_DIR pointing to the root path containing include directory or set OPENCV_INCLUDE_DIR explicitly.\r\n2. OPENCV_LIB_DIR pointing to the static library dir containing the OpenCV .lib or .so files.\r\n\r\nIf you are running into issues also check the requirements for node-gyp specific to your OS https://github.com/nodejs/node-gyp.\r\n\r\n## Usage with Electron\r\n\r\n``` bash\r\n$ npm install --save electron-rebuild\r\n```\r\n\r\nAdd the following script to your package.json:\r\n``` python\r\n\"electron-rebuild\": \"electron-rebuild -w opencv4nodejs\"\r\n```\r\n\r\nRun the script:\r\n``` bash\r\n$ npm run electron-rebuild\r\n```\r\n\r\nRequire it in the application:\r\n``` javascript\r\nconst electron = require('electron');\r\nconst cv = electron.remote.require('opencv4nodejs');\r\n```\r\n\r\n## Examples\r\n\r\nSee examples folder for implementation.\r\n\r\n### Face Detection\r\n\r\n![face0](https://user-images.githubusercontent.com/31125521/29702727-c796acc4-8972-11e7-8043-117dd2761833.jpg)\r\n![face1](https://user-images.githubusercontent.com/31125521/29702730-c79d3904-8972-11e7-8ccb-e8c467244ad8.jpg)\r\n\r\n### Object Tracking\r\n\r\n![trackbgsubtract](https://user-images.githubusercontent.com/31125521/29702733-c7b59864-8972-11e7-996b-d28cb508f3b8.gif)\r\n![trackbycolor](https://user-images.githubusercontent.com/31125521/29702735-c8057686-8972-11e7-9c8d-13e30ab74628.gif)\r\n\r\n### Feature Matching\r\n\r\n![matchorb](https://user-images.githubusercontent.com/31125521/29702728-c7983be8-8972-11e7-8773-e1f01631a1eb.jpg)\r\n![matchsift](https://user-images.githubusercontent.com/31125521/29702731-c79e3142-8972-11e7-947e-db109d415469.jpg)\r\n\r\n### Image Histogram\r\n\r\n![plotbgr](https://user-images.githubusercontent.com/31125521/29702729-c798f83a-8972-11e7-9b40-b42829cc2bb7.jpg)\r\n![plotgray](https://user-images.githubusercontent.com/31125521/29702732-c7a42746-8972-11e7-9f9f-945edc20045e.jpg)\r\n\r\n## Documentation\r\n\r\n``` javascript\r\nconst cv = require('opencv4nodejs');\r\n```\r\n\r\n### Initializing Mat (image matrix), Vec, Point\r\n\r\n``` javascript\r\nconst rows = 100; // height\r\nconst cols = 100; // width\r\n\r\n// empty Mat\r\nconst emptyMat = new cv.Mat(rows, cols, cv.cvTypes.CV_8UC3);\r\n\r\n// fill the Mat with default value\r\nconst whiteMat = new cv.Mat(rows, cols, cv.cvTypes.CV_8UC1, 255);\r\nconst blueMat = new cv.Mat(rows, cols, cv.cvTypes.CV_8UC3, [255, 0, 0]);\r\n\r\n// from array (3x3 Matrix, 3 channels)\r\nconst matData = [\r\n  [[255, 0, 0], [255, 0, 0], [255, 0, 0]],\r\n  [[0, 0, 0], [0, 0, 0], [0, 0, 0]],\r\n  [[255, 0, 0], [255, 0, 0], [255, 0, 0]]\r\n];\r\nconst matFromArray = new cv.Mat(matData, cv.cvTypes.CV_8UC3);\r\n\r\n// from node buffer\r\nconst charData = [255, 0, ...];\r\nconst matFromArray = new cv.Mat(new Buffer.from(charData), rows, cols, cv.cvTypes.CV_8UC3);\r\n\r\n// Point\r\nconst pt2 = new cv.Point(100, 100);\r\nconst pt3 = new cv.Point(100, 100, 0.5);\r\n\r\n// Vector\r\nconst vec2 = new cv.Vec(100, 100);\r\nconst vec3 = new cv.Vec(100, 100, 0.5);\r\nconst vec4 = new cv.Vec(100, 100, 0.5, 0.5);\r\n```\r\n\r\n### Mat and Vec operations\r\n\r\n``` javascript\r\nconst mat0 = new cv.Mat(...);\r\nconst mat1 = new cv.Mat(...);\r\n\r\n// arithmetic operations for Mats and Vecs\r\nconst matMultipliedByScalar = mat0.mul(0.5);  // scalar multiplication\r\nconst matDividedByScalar = mat0.div(2);       // scalar division\r\nconst mat0PlusMat1 = mat0.add(mat1);          // addition\r\nconst mat0MinusMat1 = mat0.sub(mat1);         // subtraction\r\nconst mat0MulMat1 = mat0.hMul(mat1);          // elementwise multiplication\r\nconst mat0DivMat1 = mat0.hDiv(mat1);          // elementwise division\r\n\r\n// logical operations Mat only\r\nconst mat0AndMat1 = mat0.and(mat1);\r\nconst mat0OrMat1 = mat0.or(mat1);\r\nconst mat0bwAndMat1 = mat0.bitwiseAnd(mat1);\r\nconst mat0bwOrMat1 = mat0.bitwiseOr(mat1);\r\nconst mat0bwXorMat1 = mat0.bitwiseXor(mat1);\r\nconst mat0bwNot = mat0.bitwiseNot();\r\n```\r\n\r\n### Accessing Mat data\r\n\r\n``` javascript\r\nconst matBGR = new cv.Mat(..., cv.cvTypes.CV_8UC3);\r\nconst matGray = new cv.Mat(..., cv.cvTypes.CV_8UC1);\r\n\r\n// get pixel value as vector or number value\r\nconst vec3 = matBGR.at(200, 100);\r\nconst grayVal = matGray.at(200, 100);\r\n\r\n// get raw pixel value as array\r\nconst [b, g, r] = matBGR.atRaw(200, 100);\r\n\r\n// set single pixel values\r\nmatBGR.set(50, 50, [255, 0, 0]);\r\nmatBGR.set(50, 50, new Vec(255, 0, 0));\r\nmatGray.set(50, 50, 255);\r\n\r\n// get a 25x25 sub region of the Mat at offset (50, 50)\r\nconst width = 25;\r\nconst height = 25;\r\nconst region = matBGR.getRegion(new cv.Rect(50, 50, width, height));\r\n\r\n// get a node buffer with raw Mat data\r\nconst matAsArray = matBGR.getData();\r\n\r\n// get entire Mat data as JS array\r\nconst matAsArray = matBGR.getDataAsArray();\r\n```\r\n\r\n### IO\r\n\r\n``` javascript\r\n// load image from file\r\nconst mat = cv.imread('./path/img.jpg');\r\n\r\n// save image\r\ncv.imwrite('./path/img.png', mat);\r\n\r\n// show image\r\ncv.imshow('a window name', mat);\r\ncv.waitKey();\r\n```\r\n\r\n### Useful Mat methods\r\n\r\n``` javascript\r\nconst matBGR = new cv.Mat(..., cv.cvTypes.CV_8UC3);\r\n\r\n// convert types\r\nconst matSignedInt = matBGR.convertTo({\r\n  type: cv.cvTypes.CV_32SC3\r\n});\r\nconst matDoublePrecision = matBGR.convertTo({\r\n  type: cv.cvTypes.CV_64FC3\r\n});\r\n\r\n// convert color space\r\nconst { COLOR_BGR2HSV, COLOR_BGR2Lab } = cv.cvTypes;\r\nconst matGray = matBGR.bgrToGray();\r\nconst matHSV = matBGR.cvtColor({\r\n  code: COLOR_BGR2HSV\r\n});\r\nconst matLab = matBGR.cvtColor({\r\n  code: COLOR_BGR2Lab\r\n});\r\n\r\n// resize\r\nconst matHalfSize = matBGR.rescale(0.5);\r\nconst mat100x100 = matBGR.resize(100, 100);\r\nconst matMaxDimIs100 = matBGR.resizeToMax(100);\r\n\r\n// extract channels and create Mat from channels\r\nconst [matB, matG, matR] = matBGR.splitChannels();\r\nconst matRGB = new cv.Mat([matR, matB, matG]);\r\n```\r\n\r\n### Drawing a Mat into HTML Canvas\r\n\r\n``` javascript\r\n    const matBGR = ...;\r\n    // convert your Mat to rgba space\r\n    const matRGBA = matBGR.cvtColor({\r\n      type: cv.cvTypes.colorConversionCodes.COLOR_BGR2RGBA\r\n    });\r\n    // get raw Mat data\r\n    const matDataRaw = matRGBA.getData();\r\n\r\n    // fill canvas pixels\r\n    const canvas = document.getElementById('myCanvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const imgData = ctx.getImageData(0, 0, matRGBA.cols, matRGBA.rows);\r\n    for (let i = 0; i < matDataRaw.length; i += 1) {\r\n      imgData.data[i] = matDataRaw[i];\r\n    }\r\n    ctx.putImageData(imgData, 0, 0);\r\n```\r\n\r\n### Method Interface\r\n\r\nOpenCV method interface from official docs or src:\r\n``` c++\r\nvoid GaussianBlur(InputArray src, OutputArray dst, Size ksize, double sigmaX, double sigmaY = 0, int borderType = BORDER_DEFAULT);\r\n```\r\n\r\ntranslates to:\r\n\r\n``` javascript\r\nconst src = new cv.Mat(...);\r\n// invoke with required arguments\r\nconst dst0 = src.gaussianBlur({\r\n  ksize: new cv.Size(5, 5),\r\n  sigmaX: 1.2\r\n});\r\n// or pass optional parameters\r\nconst dst1 = src.gaussianBlur({\r\n  ksize: new cv.Size(5, 5),\r\n  sigmaX: 1.2,\r\n  borderType: cv.cvTypes.borderTypes.BORDER_CONSTANT\r\n});\r\n```\r\n\r\nFor more documentation refer to examples or have a look into the tests for method invocation.","created":"2017-08-20T15:52:16.099Z","modified":"2017-08-27T15:18:18.225Z","lastPublisher":{"name":"justadudewhohacks","email":"muehler.v@gmail.com"},"owners":[{"name":"justadudewhohacks","email":"muehler.v@gmail.com"}],"other":{"_attachments":{},"_id":"opencv4nodejs","_nodeVersion":"8.1.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/opencv4nodejs-1.1.2.tgz_1503847096260_0.9927617246285081"},"_npmUser":{"name":"justadudewhohacks","email":"muehler.v@gmail.com"},"_npmVersion":"5.3.0","_rev":"4-ab0302c5497685059244f551bc3840f5","author":{"name":"justadudewhohacks"},"bugs":{"url":"https://github.com/justadudewhohacks/opencv4nodejs/issues"},"directories":{},"dist-tags":{"latest":"1.1.2"},"dist":{"integrity":"sha512-eyz0Da0QZi5k4/wvFgy3SgbsHvBjrU4gp5bKO1n3pudqhaCYgV3Fevvi9nzyw8CSbdYLDZJV8Ykq7hEn/fW/+Q==","shasum":"8834a458c1e0a6ccc5b09ce1477f5ef7e63d8b55","tarball":"https://registry.npmjs.org/opencv4nodejs/-/opencv4nodejs-1.1.2.tgz"},"maintainers":[{"name":"justadudewhohacks","email":"muehler.v@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-27T15:18:18.225Z","created":"2017-08-20T15:52:16.099Z","1.0.0":"2017-08-20T15:52:16.099Z","1.1.0":"2017-08-26T16:38:01.256Z","1.1.1":"2017-08-26T18:04:04.465Z","1.1.2":"2017-08-27T15:18:18.225Z"}}}