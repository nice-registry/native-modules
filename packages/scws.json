{"name":"scws","version":"0.5.0","description":"scws(Simple Chinese Word Segmentation) node module","repository":"https://github.com/dotSlashLu/nodescws","main":"build/Release/scws.node","scripts":{"install":"node-gyp rebuild","test":"node ./test/test.js"},"keywords":["scws","Chinese","word segment","中文","分词"],"private":false,"gypfile":true,"license":"BSD","dependencies":{"nan":"^2.4.0"},"gitHead":"45d7a2dab82345114783bbcabadc41bad8b40625","homepage":"https://github.com/dotSlashLu/nodescws#readme","versions":[{"number":"0.1.2","date":"2013-11-18T01:28:34.101Z"},{"number":"0.1.3","date":"2013-11-18T01:42:48.267Z"},{"number":"0.2.0","date":"2013-11-21T03:41:10.273Z"},{"number":"0.2.1","date":"2013-12-23T13:49:08.122Z"},{"number":"0.2.2","date":"2013-12-23T14:36:58.627Z"},{"number":"0.2.3","date":"2015-02-03T09:05:30.362Z"},{"number":"0.2.4","date":"2015-03-02T07:07:01.207Z"},{"number":"0.5.0","date":"2016-09-05T16:40:45.208Z"}],"readme":"# nodescws\r\n\r\n### scws\r\n\r\n##### About\r\nscws即Simple Chinese Word Segmentation。是C语言开发的基于词频词典的机械式中文分词引擎。scws的作者为[hightman][1]，采用BSD许可协议发布。nodescws的作者在libscws上添加功能(包括停用词、忽略符号、json格式配置等)并添加了node.js binding，除自己代码，不持有libscws著作权。\r\n\r\nscws的主页: [http://www.xunsearch.com/scws][2], \r\nGitHub: [https://github.com/hightman/scws][3]\r\n\r\n------\r\n\r\n## nodescws\r\nCurrent release: v0.5.0\r\n\r\n- 项目主页: [https://github.com/dotSlashLu/nodescws][4]\r\n- 使用问题，bug report: [https://github.com/dotSlashLu/nodescws/issues][5]\r\n\r\n### Install\r\n`npm install scws`\r\n\r\n### Usage\r\n```js\r\n    var Scws = require(\"scws\");\r\n    var scws = new Scws(settings);\r\n    var results = scws.segment(text);\r\n    scws.destroy(); // DO NOT forget this or your memory may be corrupted\r\n```\r\n\r\n\r\n#### new Scws(settings)\r\n* settings: `Object`, 分词设置, 支持charset, dicts, rule, ignorePunct, multi, debug：\r\n    - charset: `String`, *Optional*\r\n\r\n            采用的encoding，支持\"utf8\"，\"gbk\"， 默认值\"utf8\"\r\n\r\n    - dicts: `String`, *Required*\r\n\r\n            要采用的词典文件的filename，多个文件之间用':'分隔。\r\n            支持xdb格式以及txt格式，自制词典请以\".txt\"作文件后缀。\r\n            例如\"./dicts/dict.utf8.xdb:./dicts/dict_cht.utf8.xdb:./dicts/dict.test.txt\"\r\n            scws自带的xdb格式词典附在该extension目录下(一般是node_modules/scws/)的./dicts/ ，\r\n            有简体和繁体两种选择，如果该项缺失则默认使用自带utf8简体中文词典\r\n\r\n    - rule: `String`, *Optional*\r\n\r\n            要采用的规则文件，设置对应编码下的地名，人名，停用词等。\r\n            详见该extension目录下(一般是node_modules/scws/)的rules/rules.utf8.ini。\r\n            若该配置缺失则默认使用自带utf8的规则文件。\r\n\r\n              v0.2.3添加了JSON支持，避免繁复的ini语法。\r\n              若以.json结尾，则会解析对应的JSON rule文件，也可以直接传JSON string来进行配置。语法参考 ./rules/rules.utf8.json\r\n\r\n\r\n    - ignorePunct: `Bool`, *Optional*\r\n\r\n            是否忽略标点\r\n\r\n    - multi: `String`, *Optional*\r\n\r\n            是否进行长词复合切分，例如中国人这个词产生“中国人”，“中国”，“人”多个结果，可选值\"short\", \"duality\", \"zmain\", \"zall\":\r\n                short: 短词\r\n                duality: 组合相邻的两个单字\r\n                zmain: 重要单字\r\n                zall: 全部单字\r\n\r\n    - debug: `Bool`, *Optional*\r\n\r\n            是否以debug模式运行，若为true则输出scws的log, warning, error到stdout, defult为false\r\n\r\n    - applyStopWord: `Bool`, *Optional*\r\n\r\n            是否应用rule文件中[nostats]区块所规定的停用词，默认为true\r\n\r\n#### scws.segment(text)\r\n\r\n* text: `String`, 要切分的字符串\r\n\r\nReturn `Array`\r\n\r\n    [\r\n        {\r\n            word: '可读性',\r\n            offset: 183, // 该词在文档中的位置\r\n            length: 9, // byte\r\n            attr: 'n', // 词性，采用《现代汉语语料库加工规范——词语切分与词性标注》标准，涵义请参考 http://blog.csdn.net/dbigbear/article/details/1488087\r\n            idf: 7.800000190734863\r\n        },\r\n        ...\r\n    ]\r\n\r\n### Example 用例\r\n```js\r\n    var fs   = require(\"fs\")\r\n        Scws = require(\"scws\");\r\n\r\n    fs.readFile(\"./test_doc.txt\", {\r\n      encoding: \"utf8\"\r\n    }, function(err, data){\r\n      if (err)\r\n        return console.error(err);\r\n\r\n      // initialize scws with config entries\r\n      var scws = new Scws({\r\n        charset: \"utf8\",\r\n        //dicts: \"./dicts/dict.utf8.xdb:./dicts/dict_cht.utf8.xdb:./dicts/dict.test.txt\",\r\n        dicts: \"./dicts/dict.utf8.xdb\",\r\n        rule: \"./rules/rules.utf8.ini\",\r\n        ignorePunct: true,\r\n        multi: \"duality\",\r\n        debug: true\r\n      });\r\n\r\n      // segment text\r\n      res = scws.segment(data);\r\n      res1 = scws.segment(\"大家好我来自德国，我是德国人\");\r\n\r\n      console.log(res, res1);\r\n\r\n      // destroy scws, recollect memory\r\n      scws.destroy();\r\n    })\r\n```\r\n\r\n更多请参考`test/`中的测试\r\n\r\n### Changelog\r\n#### v0.5.0\r\n- Update NAN, supports all major node.js versions\r\n- New js API design\r\n- Fixes [#11][issue11]\r\n\r\n#### v0.2.4\r\n- Thanks to [@mike820324][7] now scws supports io.js\r\n\r\n#### v0.2.3\r\n- Changed project structure\r\n- Refactored node bindings\r\n- Added rule setting by JSON file and JSON string thus making adding stop words more easier with node\r\n\r\n#### v0.2.2\r\n- Some small bug fixes, including issue #5(Thanks to [@Frully][frully])\r\n\r\n#### v0.2.1\r\n- Add stop words support\r\n- Remove line endings when `ignorePunct` is set true\r\n\r\nYou can add your own stop words in the entry `[nostats]` in the rule file. Turn off stop words feature by setting `applyStopWord` false.\r\n\r\n#### v0.2.0\r\nNew syntax to initialize scws: `scws = new Scws(config); result = scws.segment(text); scws.destroy()` so that we are able to reuse scws instance, thus gaining great improvement in perfermence when recurrently used(approximately 1/4 faster).\r\n\r\nAdded new setting entry `debug`. Setting `config.debug = true` will make scws output it's log, error, warning to stdout\r\n\r\n#### v0.1.3\r\nPublished to npm registry. usage: `scws(text, settings);` available setting entries: charset, dicts, rule, ignorePunct, multi.\r\n\r\n### Contributors\r\n- [@mike820324][6]\r\n\r\n\r\n[1]: http://www.hightman.cn\r\n[2]: http://www.xunsearch.com/scws/\r\n[3]: https://github.com/hightman/scws\r\n[4]: https://github.com/dotSlashLu/nodescws\r\n[5]: https://github.com/dotSlashLu/nodescws/issues\r\n[6]: https://github.com/mike820324\r\n[issue11]: https://github.com/dotSlashLu/nodescws/issues/11\r\n[frully]: https://github.com/Frully\r\n\r\n","created":"2013-11-18T01:28:10.254Z","modified":"2016-09-05T16:40:45.208Z","lastPublisher":{"name":"dotslash.lu","email":"dotslash.lu@gmail.com"},"owners":[{"name":"dotslash.lu","email":"dotslash.lu@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"scws","_nodeVersion":"6.3.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/scws-0.5.0.tgz_1473093644909_0.036936354357749224"},"_npmUser":{"name":"dotslash.lu","email":"dotslash.lu@gmail.com"},"_npmVersion":"3.10.3","_rev":"1-ad6a4610ec923d3dbfb1e7f94712c4b3","_shasum":"b1291014c5ba7afeeb024a611b756a54d62d9c20","author":{"name":"Dotslash Lu","email":"dotslash.lu@gmail.com"},"bugs":{"url":"https://github.com/dotSlashLu/nodescws/issues"},"directories":{},"dist-tags":{"latest":"0.5.0"},"dist":{"shasum":"b1291014c5ba7afeeb024a611b756a54d62d9c20","tarball":"http://registry.npmjs.org/scws/-/scws-0.5.0.tgz"},"maintainers":[{"name":"dotslash.lu","email":"dotslash.lu@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-09-05T16:40:45.208Z","created":"2013-11-18T01:28:10.254Z","0.1.2":"2013-11-18T01:28:34.101Z","0.1.3":"2013-11-18T01:42:48.267Z","0.2.0":"2013-11-21T03:41:10.273Z","0.2.1":"2013-12-23T13:49:08.122Z","0.2.2":"2013-12-23T14:36:58.627Z","0.2.3":"2015-02-03T09:05:30.362Z","0.2.4":"2015-03-02T07:07:01.207Z","0.5.0":"2016-09-05T16:40:45.208Z"}}}