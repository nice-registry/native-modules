{"name":"iojs-nanomsg","version":"1.1.11","description":"nanomsg streams for iøjs","dependencies":{"bindings":"~1.2.1","nan":"~1.6.2"},"devDependencies":{"through":"~2.3.6","tape":"~3.5.0","tap-spec":"~2.2.1"},"repository":"https://github.com/reqshark/nanomsg.iojs","scripts":{"travis-test":"make check","test":"node test | tap-spec","install":"node-gyp rebuild"},"homepage":"http://msg.pub","license":"martiniware","keywords":["nanomsg","native","binding","addon","nn","message","streams","nanømsg","msg","high performance scalability protocol"],"gypfile":true,"gitHead":"ef1bdb8db4464484c3a2e80ea9f72984c042e5a2","versions":[{"number":"0.0.1","date":"2015-01-19T17:51:49.831Z"},{"number":"0.0.2","date":"2015-01-19T20:57:19.309Z"},{"number":"0.0.3","date":"2015-01-20T01:51:44.007Z"},{"number":"0.0.4","date":"2015-01-20T22:40:10.846Z"},{"number":"0.0.5","date":"2015-01-20T23:53:40.012Z"},{"number":"0.0.6","date":"2015-01-21T12:17:21.601Z"},{"number":"0.0.7","date":"2015-01-21T18:43:27.647Z"},{"number":"0.0.8","date":"2015-01-21T20:40:58.195Z"},{"number":"0.0.9","date":"2015-01-22T01:54:52.231Z"},{"number":"0.0.10","date":"2015-01-29T01:18:20.416Z"},{"number":"0.1.0","date":"2015-02-08T10:37:35.727Z"},{"number":"0.1.1","date":"2015-02-10T18:30:56.297Z"},{"number":"0.1.2","date":"2015-02-11T03:46:26.727Z"},{"number":"1.0.0","date":"2015-02-12T21:41:03.239Z"},{"number":"1.1.0","date":"2015-02-16T15:57:15.476Z"},{"number":"1.1.1","date":"2015-02-16T17:05:21.664Z"},{"number":"1.1.2","date":"2015-02-16T17:13:26.290Z"},{"number":"1.1.3","date":"2015-02-16T17:24:12.902Z"},{"number":"1.1.4","date":"2015-02-16T17:35:29.964Z"},{"number":"1.1.5","date":"2015-02-16T17:37:35.346Z"},{"number":"1.1.6","date":"2015-02-16T17:41:28.918Z"},{"number":"1.1.7","date":"2015-02-16T18:44:03.118Z"},{"number":"1.1.8","date":"2015-02-16T19:05:29.591Z"},{"number":"1.1.9","date":"2015-02-17T13:16:47.007Z"},{"number":"1.1.10","date":"2015-02-19T03:03:49.173Z"},{"number":"1.1.11","date":"2015-02-27T19:02:36.113Z"}],"readme":"# merging this into [node-nanomsg](https://github.com/nickdesaulniers/node-nanomsg)\n\n*I've joined forces with [Nick Desaulniers](https://github.com/nickdesaulniers) and the node-nanomsg team. We're maintaining this ongoing work and moved these efforts over there.* <strong>-reqshark 02/24/2015</strong>\n\n# nanømsg streams\n[![Build Status](https://travis-ci.org/reqshark/nanomsg.iojs.svg?branch=master)](https://travis-ci.org/reqshark/nanomsg.iojs) &nbsp;&nbsp;&nbsp;&nbsp; [![Circle CI](https://circleci.com/gh/reqshark/nanomsg.iojs.svg?style=svg)](https://circleci.com/gh/reqshark/nanomsg.iojs) &nbsp;&nbsp;&nbsp;&nbsp; [![npmbadge](https://nodei.co/npm/iojs-nanomsg.png?mini=true)](https://www.npmjs.com/package/iojs-nanomsg)\n* pipe all endpoints together\n* [iøjs streams](https://github.com/substack/stream-handbook) are domain, protocol, and transport agnostic\n* combine sockets in new ways\n* the socket's `pipe()` method is basically a more flexible `zmq_proxy()` or `nn_device()`\n\n# prerequisites\n\ninstall [`nanomsg c lib`](http://nanomsg.org/development.html) and have `iojs` or `node v0.10 - v0.12`. on unix install `pkg-config`. for windows, you need visual studio and python, i would opt for [anaconda installer](http://continuum.io/downloads) with [gitub powershell](https://windows.github.com/).\n\n# install\n```bash\n$ npm install iojs-nanomsg\n```\n\n# example\n```js\nvar nano = require('iojs-nanomsg')\nvar pub   = nano.socket('pub'),       push  = nano.socket('push')\nvar sub   = nano.socket('sub'),       pull  = nano.socket('pull')\n\npub.bind('tcp://127.0.0.1:3333');     push.bind('tcp://127.0.0.1:4444')\nsub.connect('tcp://127.0.0.1:3333');  pull.connect('tcp://127.0.0.1:4444')\n\nsub.setEncoding('utf8') //sub socket will get utf8 strings instead of Buffers\n\nsub.on('data', function (msg) {\n  console.log(msg) //'hello from a push socket!'\n})\n\npull.pipe(pub) //pipe readable sockets to any writeable socket or stream\n\nsetInterval( function(){ push.write('hello from a push socket!') }, 100 )\n```\n\n# API\n\n### nano.socket(type, [options,])\n\nStarts a new socket. The nanomsg socket can bind or connect to multiple heterogeneous endpoints as well as shutdown any of these established links.\n\n#### `options`\n* `'fam'` *(String, default: `'af_sp'`)*: determines the domain of the socket. `AF_SP` creates a standard full-blown SP socket. `AF_SP_RAW` family sockets operate over internal network protocols and interfaces. Raw sockets omit the end-to-end functionality found in `AF_SP` sockets and thus can be used to implement intermediary devices in SP topologies, see [nanomsg docs](http://nanomsg.org/v0.5/nn_socket.3.html) or consult your man page entry `socket(2)` for more info.\n```js\n//ex. starting raw sockets\nnano.socket('bus','raw') || nano.socket('bus', { fam: 'AF_SP_RAW' } )\n```\n* `'tcpnodelay'` *(boolean, default: `false`)*: see [`socket.tcpnodelay(boolean)`](https://github.com/reqshark/nanomsg.iojs#sockettcpnodelayboolean).\n* `'linger'` *(number, default: `1000`)*: see [`socket.linger(duration)`](https://github.com/reqshark/nanomsg.iojs#socketlingerduration).\n* `'sndbuf'` *(number, default: `128kB`)*: see [`socket.sndbuf(size)`](https://github.com/reqshark/nanomsg.iojs#socketsndbufsize).\n* `'rcvbuf'` *(number, default: `128kB`)*: see [`socket.rcvbuf(size)`](https://github.com/reqshark/nanomsg.iojs#socketrcvbufsize).\n* `'sndtimeo'` *(number, default: `-1`)*: see [`socket.sndtimeo(duration)`](https://github.com/reqshark/nanomsg.iojs#socketsndtimeoduration).\n* `'rcvtimeo'` *(number, default: `-1`)*: see [`socket.rcvtimeo(duration)`](https://github.com/reqshark/nanomsg.iojs#socketrcvtimeoduration).\n* `'reconn'` *(number, default: `100`)*: see [`socket.reconn(duration)`](https://github.com/reqshark/nanomsg.iojs#socketreconnduration).\n* `'maxreconn'` *(number, default: `0`)*: see [`socket.maxreconn(duration)`](https://github.com/reqshark/nanomsg.iojs#socketmaxreconnduration).\n* `'sndprio'` *(number, default: `0`)*: see [`socket.sndprio(priority)`](https://github.com/reqshark/nanomsg.iojs#socketsndpriopriority).\n* `'rcvprio'` *(number, default: `0`)*: see [`socket.rcvprio(priority)`](https://github.com/reqshark/nanomsg.iojs#socketrcvpriopriority).\n\n### nano.version\n\n`require('iojs-nanomsg').version` *(Number)*: the libnanomsg beta version installed\n\n### socket.type\n\n*(String)*: Indicates what type of socket you have.\n\n### socket.shutdown(address)\n\n*(Function, param: String)*: Removes an endpoint established  by calls to `bind()` or `connect()`. The nanomsg library will try to deliver any outstanding outbound messages to the endpoint for the time specified by `linger`.\n\n```js\nsocket.shutdown('tcp://127.0.0.1:5555')\n```\n\n### socket.bind(address)\n\n*(Function, param: String)*: Adds a local endpoint to the socket. The endpoint can be then used by other applications to connect.\n\n`bind()` (or `connect()`) may be called multiple times on the same socket thus allowing the socket to communicate with multiple heterogeneous endpoints.\n\n```js\nsocket.bind('tcp://eth0:5555')\n```\n\n*<sub>recommend checking your machine's `ifconfig` first before using a named interface.</sub>*\n\n### socket.connect(address)\n\n*(Function, param: String)*: Adds a remote endpoint to the socket. The nanomsg library would then try to connect to the specified remote endpoint.\n\n`connect()` (as well as `bind()`) may be called multiple times on the same socket thus allowing the socket to communicate with multiple heterogeneous endpoints.\n\n```js\nsocket.connect('tcp://127.0.0.1:5555')\n```\n\n*<sub>When connecting over remote TCP allow `100ms` or more depending on round trip time for the operation to complete.</sub>*\n\n##### *[a note on address strings](docs/address_strings.markdown)*\n\n### socket.close(callback)\n\n*(Function, param: Function)*: Closes the socket. Any buffered inbound messages that were not yet received by the application will be discarded. The nanomsg library will try to deliver any outstanding outbound messages for the time specified by `linger`.\n\nthe callback function fires as soon as the underlying c lib's `nn_close()` operation also fires, so this is when linger starts.\n\n## sending and receiving: writeable and readable\n\n### socket.send(msg)\n*(Function, param: String or Buffer)*: equivalent to the `socket.send()` in [node.zeromq](https://github.com/JustinTulloss/zeromq.node).\n\n```js\nsocket.send('hello from nanømsg!')\n```\n\n`send(msg)` is automatically invoked during `Writeable` consumption of some other `Readable` stream. In that case a `pipe()` method can be used to transmit from a readable data source. The flow of data distributes to endpoint(s) determined by the particular socket type.\n\n```js\nvar fs = require('fs')\nvar source = fs.createReadStream(__dirname + 'filename.ext')\n\nsource.pipe(socket) //sends each chunk as a msg to socket's particular endpoint\n```\n\n### socket.on(data, callback)\n*(Function, param order: String, Function)*: The `Readable` stream's `on()` function is an event listener registered with the `nanomsg c lib` that emits `'data'` events. To receive messages, pass the string `'data'` followed a callback containing a single data parameter.\n\n```js\nsocket.on('data', function (msg) {\n  console.log(String(msg)) //'hello from nanømsg!'\n})\n```\n\nthe readable stream's `data` event is automatically invoked when piped to a `Writeable` or `Transform` consumer stream. Here `msgprocessor` is a transform you could pipe to a writeable or the next transform:\n\n```js\nvar through = require('through')\n\nvar msgprocessor = through(function(msg){\n  var str = String(msg); console.log(str) //'hello from nanømsg!'\n  this.queue(str + ' and cheers from nanomsg.iojs!')\n})\n\nsocket.pipe(msgprocessor)\n```\n\n### socket.tcpnodelay(boolean)\n\n*(Function, param: Boolean, default: false)*: When set, disables Nagle’s algorithm. It also disables delaying of TCP acknowledgments. Using this option improves latency at the expense of throughput.\n\nPass no parameter for current tcp nodelay setting.\n\n```js\n//default\nconsole.log(socket.tcpnodelay()) //tcp nodelay: off\n\nsocket.tcpnodelay(true) //disabling Nagle's algorithm\n\nconsole.log(socket.tcpnodelay()) //tcp nodelay: on\n```\n\n### socket.linger(duration)\n\n*(Function, param: Number, default: `1000`)*: Specifies how long the socket should try to send pending outbound messages after `socket.close()` or `socket.shutdown()` is called, in milliseconds.\n\nPass no parameter for the linger duration.\n\n```js\nsocket.linger(5000)\nconsole.log(socket.linger()) //5000\n```\n\n### socket.sndbuf(size)\n\n*(Function, param: Number, default: `128kB`)*: Size of the send buffer, in bytes. To prevent blocking for messages larger than the buffer, exactly one message may be buffered in addition to the data in the send buffer.\n\nPass no parameter for the socket's send buffer size.\n\n```js\nsocket.sndbuf(131072)\nconsole.log(socket.sndbuf()) // 131072\n```\n\n### socket.rcvbuf(size)\n\n*(Function, param: Number, default: `128kB`)*: Size of the receive buffer, in bytes. To prevent blocking for messages larger than the buffer, exactly one message may be buffered in addition to the data in the receive buffer.\n\nPass no parameter for the socket's receive buffer size.\n\n```js\nsocket.rcvbuf(20480)\nconsole.log(socket.rcvbuf()) // 20480\n```\n\n### socket.sndtimeo(duration)\n\n*(Function, param: Number, default: `-1`)*: The timeout for send operation on the socket, in milliseconds.\n\nPass no parameter for the socket's send timeout.\n\n```js\nsocket.sndtimeo(200)\nconsole.log(socket.sndtimeo()) // 200\n```\n\n### socket.rcvtimeo(duration)\n\n*(Function, param: Number, default: `-1`)*: The timeout for recv operation on the socket, in milliseconds.\n\nPass no parameter for the socket's recv timeout.\n\n```js\nsocket.rcvtimeo(50)\nconsole.log(socket.rcvtimeo()) // 50\n```\n\n### socket.reconn(duration)\n\n*(Function, param: Number, default: `100`)*: For connection-based transports such as TCP, this option specifies how long to wait, in milliseconds, when connection is broken before trying to re-establish it. Note that actual reconnect interval may be randomized to some extent to prevent severe reconnection storms.\n\nPass no parameter for the socket's `reconnect` interval.\n\n```js\nsocket.reconn(600)\nconsole.log(socket.reconn()) // 600\n```\n\n### socket.maxreconn(duration)\n\n*(Function, param: Number, default: `0`)*: <strong>Only to be used in addition to `socket.reconn()`.</strong> `maxreconn()` specifies maximum reconnection interval. On each reconnect attempt, the previous interval is doubled until `maxreconn` is reached. Value of zero means that no exponential backoff is performed and reconnect interval is based only on `reconn`. If `maxreconn` is less than `reconn`, it is ignored.\n\nPass no parameter for the socket's `maxreconn` interval.\n\n```js\nsocket.maxreconn(60000)\nconsole.log(socket.maxreconn()) // 60000\n```\n\n### socket.sndprio(priority)\n\n*(Function, param: Number, default: `8`)*: Sets outbound priority for endpoints subsequently added to the socket.\n\nThis option has no effect on socket types that send messages to all the peers. However, if the socket type sends each message to a single peer (or a limited set of peers), peers with high priority take precedence over peers with low priority.\n\nHighest priority is 1, lowest is 16. Pass no parameter for the socket's current outbound priority.\n\n```js\nsocket.sndprio(2)\nconsole.log(socket.sndprio()) // 2\n```\n\n### socket.rcvprio(priority)\n\n*(Function, param: Number, default: `8`)*: Sets inbound priority for endpoints subsequently added to the socket.\n\nThis option has no effect on socket types that are not able to receive messages.\n\nWhen receiving a message, messages from peer with higher priority are received before messages from peer with lower priority.\n\nHighest priority is 1, lowest is 16. Pass no parameter for the socket's current inbound priority.\n\n```js\nsocket.rcvprio(10)\nconsole.log(socket.rcvprio()) // 10\n```\n\n# test\non **unix** systems:\n```bash\n$ make clean && make && make check\n\n# or if u want all that just run:\n$ make full\n```\non windows:\n```bash\ngit submodule update --init\nmake full\n```\n<sub>*disabling node v0.08.x for now... but v0.10 and up should be fine*</sub>\n\n# performance\n\n![pipe](perf/pipe.png)\n\nrun benchmarks:\n```bash\n$ make perf\n```\n\nfor more info how to do that and your own custom comparisons check out: [running benchmarks](https://github.com/JustinTulloss/zeromq.node#running-benchmarks)\n\nand if you want you can also run:\n```bash\n$ make bench\n```\n:)\n","created":"2015-01-19T17:51:49.831Z","modified":"2015-02-27T19:02:36.113Z","lastPublisher":{"name":"reqshark","email":"bent@nothingsatisfies.com"},"owners":[{"name":"reqshark","email":"bent@nothingsatisfies.com"}],"other":{"_attachments":{},"_from":".","_id":"iojs-nanomsg","_nodeVersion":"1.3.0","_npmUser":{"name":"reqshark","email":"bent@nothingsatisfies.com"},"_npmVersion":"2.5.1","_rev":"1-b282bb5ff7f043985fa7d5b825397860","_shasum":"d1db604b4aa508ec9a09e1c71a80efc6440f87ba","author":{"name":"Bent Cardan","email":"bent@nothingsatisfies.com","url":"http://req.link"},"bugs":{"url":"https://github.com/reqshark/nanomsg.iojs/issues"},"contributors":[{"name":"Contributors"},{"name":"Bent Cardan","email":"bent@nothingsatisfies.com"},{"name":"George Lambert","email":"marchon@gmail.com"}],"directories":{},"dist-tags":{"latest":"1.1.11"},"dist":{"shasum":"d1db604b4aa508ec9a09e1c71a80efc6440f87ba","tarball":"http://registry.npmjs.org/iojs-nanomsg/-/iojs-nanomsg-1.1.11.tgz"},"maintainers":[{"name":"reqshark","email":"bent@nothingsatisfies.com"}],"readmeFilename":"readme.markdown","time":{"modified":"2015-02-27T19:02:36.113Z","created":"2015-01-19T17:51:49.831Z","0.0.1":"2015-01-19T17:51:49.831Z","0.0.2":"2015-01-19T20:57:19.309Z","0.0.3":"2015-01-20T01:51:44.007Z","0.0.4":"2015-01-20T22:40:10.846Z","0.0.5":"2015-01-20T23:53:40.012Z","0.0.6":"2015-01-21T12:17:21.601Z","0.0.7":"2015-01-21T18:43:27.647Z","0.0.8":"2015-01-21T20:40:58.195Z","0.0.9":"2015-01-22T01:54:52.231Z","0.0.10":"2015-01-29T01:18:20.416Z","0.1.0":"2015-02-08T10:37:35.727Z","0.1.1":"2015-02-10T18:30:56.297Z","0.1.2":"2015-02-11T03:46:26.727Z","1.0.0":"2015-02-12T21:41:03.239Z","1.1.0":"2015-02-16T15:57:15.476Z","1.1.1":"2015-02-16T17:05:21.664Z","1.1.2":"2015-02-16T17:13:26.290Z","1.1.3":"2015-02-16T17:24:12.902Z","1.1.4":"2015-02-16T17:35:29.964Z","1.1.5":"2015-02-16T17:37:35.346Z","1.1.6":"2015-02-16T17:41:28.918Z","1.1.7":"2015-02-16T18:44:03.118Z","1.1.8":"2015-02-16T19:05:29.591Z","1.1.9":"2015-02-17T13:16:47.007Z","1.1.10":"2015-02-19T03:03:49.173Z","1.1.11":"2015-02-27T19:02:36.113Z"}}}