{"name":"soundengine","version":"1.3.1","description":"A C++ node.js module that allows manipulating audio streams from/to soundcards and work with the fft of the signal etc.","main":"build/Release/soundengine.node","types":"typings/soundengine.d.ts","gypfile":true,"scripts":{"install":"node-gyp rebuild","test":"echo \"Error: no test specified\" && exit 1"},"license":"MIT","dependencies":{"nan":"^2.5.1"},"keywords":["sound","soundcard","audio","portaudio","dsp","wav","fft"],"repository":"https://github.com/mmende/soundengine","gitHead":"579a99442502d94e8f6076c62c8e3182de32a870","homepage":"https://github.com/mmende/soundengine#readme","versions":[{"number":"1.0.0","date":"2017-03-08T11:29:40.487Z"},{"number":"1.0.1","date":"2017-03-08T11:35:14.293Z"},{"number":"1.0.2","date":"2017-03-10T10:28:46.904Z"},{"number":"1.1.0","date":"2017-03-13T15:00:00.663Z"},{"number":"1.1.1","date":"2017-03-14T09:28:20.500Z"},{"number":"1.1.2","date":"2017-03-16T15:26:25.909Z"},{"number":"1.2.0","date":"2017-03-17T10:24:31.357Z"},{"number":"1.3.0","date":"2017-05-22T11:21:18.675Z"},{"number":"1.3.1","date":"2017-05-22T12:18:27.177Z"}],"readme":"# Soundengine\n\nA C++ addon for node.js that allows interacting with soundcards to e.g. play, record or process live microphone samples and send them back to the speakers.\nThe module uses [PortAudio](http://portaudio.com) to interact with the different host apis.\n\n## Prerequisites\n\nSoundengine requires the shared portaudio library.  \n\n### MacOS (via homebrew)\n\n```sh\n$ brew install portaudio fftw\n```\n\n### Ubuntu (with apt-get)\n\n\n```sh\n$ sudo apt-get install libasound-dev libportaudio2 portaudio19-dev libfftw3-3 libfftw3-dev libfftw3-double3\n```\n\n<!--\nDownload PortAudio from [here](http://www.portaudio.com/download.html) and unpack it.  \nIn the unpacked portaudio folder\n\n```sh\n$ ./configure && make\n$ sudo make install\n```\n-->\n\n### Windows\n\n...not supported yet.\n\n\n## Installation\n\n```sh\n$ npm i soundengine\n```\n\n## Basic usage example\n\n```javascript\nconst soundengine = require('soundengine')\n\n// Start live transmission from the default input device to the default output device at 22kHz\nvar engine = new soundengine.engine({sampleRate: 22050})\n\n// Start recording\nengine.startRecording()\n\n// Apply a beep to the output when recording has stopped\nengine.on('recording_stopped', () => {\n    engine.beep({frequency: 300})\n})\n\n// Stop recording after 5 seconds\nsetTimeout(() => {\n    // Stop the recording\n    engine.stopRecording()\n\n    // Playback of the recording\n    engine.startPlayback()\n}, 5000)\n\n// Let the programm run forever\nprocess.stdin.resume()\n```\n\n## Api\n\n### Devices\n\nTo list the available devices\n\n```javascript\nconst soundengine = require('soundengine')\nvar devices = soundengine.getDevices()\n```\n\n### Device properties\n\n### Engine options\n\nProperty                 | Type      | Description\n-------------------------|-----------|-------------------------------------------------------\nid                       | number    | The device id to use in the engine options.\nname                     | string    | The device name.\ndefaultSampleRate        | number    | The default sample rate of the device.\nmaxInputChannels         | number    | The maximum supported input channels for this device.\nmaxOutputChannels        | number    | The maximum supported output channels for this device.\ndefaultLowInputLatency   | number    | [See PortAudio docs](http://www.portaudio.com/docs/latency.html)\ndefaultLowOutputLatency  | number    | [See PortAudio docs](http://www.portaudio.com/docs/latency.html)\ndefaultHighInputLatency  | number    | [See PortAudio docs](http://www.portaudio.com/docs/latency.html)\ndefaultHighOutputLatency | number    | [See PortAudio docs](http://www.portaudio.com/docs/latency.html)\n\n### Engine methods\n\nThe engine class actually has almost all the methods of a nodejs [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter) to interact with the upcomming events. Furthermore these methods exist:\n\n* `loadRecording(file: string)` - Loads a wave `file` that is then playable with `startPlayback()`. <sup>(1)</sup>\n* `startPlayback()` - Starts playback of the last recording or loaded file.\n* `stopPlayback()` - Stops playback.\n* `pausePlayback()` - Pauses playback.\n* `isPlaying(): boolean` - Returns if playback is active.\n* `startRecording()` - Starts recording.\n* `stopRecording()` - Stops recording.\n* `deleteRecording()` - Deletes the recording that is currently held in memory.\n* `saveRecording(file: string)` - Saves the recording to a wave `file`. <sup>(2)</sup>\n* `isRecording(): boolean` - Returns if recording is active.\n* `getRecordingSamples(): number` - Return the number of total samples.\n* `getPlaybackPosition(): number` - Returns the current sample index of the playback.\n* `getRecordingSampleAt(index: number): number` - Returns a specific sample (between -1..1) at `index`.\n* `getPlaybackProgress(): number` - Returns the relative playback progress (between 0..1).\n* `setPlaybackProgress(progress: number)` - Sets the relative playback progress (between 0..1).\n* `beep(options?: beepOptions)` - Applies a beep to the output.\n* `getVolume(): number` - Returns the volume (between 0..1).\n* `setVolume(volume: number)` - Sets the volume (between 0..1).\n* `getMute(): boolean` - Returns if the output is muted or not.\n* `setMute(mute?: boolean)` - Mutes or unmutes the output.\n* `getOptions(): engineOptions` - Returns the current engine options.\n* `setOptions(options?: engineOptions)` - Sets the engine options.\n* `synchronize()` - Clears the internal buffer queues. If there for example is a large delay between the input and the output after initializing a new engine, calling `synchronize` could potentially minimize this delay.\n\n***Notes:***<br>\n*(1) Currently only 32bit floating point waves with the same samplerate of the current engine can be loaded (and the header will not be checked).*<br>\n*(2) The wave files are 32bit floating point.*\n\n### Engine options\n\nOption          | Type      | Default                     | Description\n----------------|-----------|-----------------------------|------------\nsampleRate      | number    | 44100                       | Samples per second for each channel.\nbufferSize      | number    | 1024                        | The count of samples for each processing iteration.\ninputChannels   | number    | 1                           | The number of input channels.\noutputChannels  | number    | 1                           | The number of output channels (should equal inputChannels).\ninputDevice     | number    | default input device        | The id of the input device to use or -1 for a output only stream.\noutputDevice    | number    | default output device       | The id of the output device to use or -1 for a input only stream.\ninputLatency    | number    | default high input latency  | [See PortAudio docs](http://www.portaudio.com/docs/latency.html)\noutputLatency   | number    | default high output latency | [See PortAudio docs](http://www.portaudio.com/docs/latency.html)\n\n## Beep options\n\nOption          | Type      | Default               | Description\n----------------|-----------|-----------------------|------------\nduration        | number    | 200                   | The duration of the applied beep in ms.\nfrequency       | number    | 700                   | The frequency of the beep (sine wave).\nlevel           | number    | 1.0                   | The volume of the beep (between 0..1).\n\n## Engine events\n\nEventName            | Signature                            | Description\n---------------------|--------------------------------------|------------\ndata                 | (inputBuffer: number[]): number[]    | Will be called when a new `inputBuffer` is available to be processed and returned. **Note: If the processing function takes to long to process the buffer you might experience dropouts.**\ninfo                 | ({min: number[], max: number[]})     | This event gets fired with messurements of the inputBuffer such as peaks (min) for every channel.\nplayback_started     |                                      | Gets fired when playback started.\nplayback_stopped     |                                      | Gets fired when playback stopped.\nplayback_paused      |                                      | Gets fired when playback paused.\nplayback_progress    | (progress: number)                   | Gets fired when playback progressed with the relative progress.\nplayback_finished    |                                      | Gets fired when playback reached the end of the recording or loaded wave.\nrecording_loaded     |                                      | Gets fired when the `loadRecording` loaded a file successfully.\nrecording_started    |                                      | Gets fired when recording started.\nrecording_stopped    |                                      | Gets fired when recording stopped.\nrecording_progress   |                                      | Gets fired when recording progressed.\nrecording_saved      |                                      | Gets fired when the recording was saved with `saveRecording`.\nrecording_deleted    |                                      | Gets fired when the recording in memory was deleted.\nbeep_started         |                                      | Gets fired when the `beep` method started apply a beep to the output.\nbeep_stopped         |                                      | Gets fired when the `beep` method stopped apply a beep to the output.\n\n\n## Todos\n\n* Implement fft stuff","created":"2017-03-08T11:29:40.487Z","modified":"2017-05-22T12:18:27.177Z","lastPublisher":{"name":"mmende","email":"martin.mende@aristech.de"},"owners":[{"name":"mmende","email":"martin.mende@aristech.de"}],"other":{"_attachments":{},"_from":".","_id":"soundengine","_nodeVersion":"5.9.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/soundengine-1.3.1.tgz_1495455506007_0.16056775813922286"},"_npmUser":{"name":"mmende","email":"martin.mende@aristech.de"},"_npmVersion":"4.4.1","_rev":"9-85ae53c6ed52aee88bb3d55c0eb7e307","_shasum":"4d5a8b8dfd8488f1146fdca76b17e306956728f4","author":{"name":"Martin Mende"},"bugs":{"url":"https://github.com/mmende/soundengine/issues"},"directories":{},"dist-tags":{"latest":"1.3.1"},"dist":{"shasum":"4d5a8b8dfd8488f1146fdca76b17e306956728f4","tarball":"https://registry.npmjs.org/soundengine/-/soundengine-1.3.1.tgz"},"maintainers":[{"name":"mmende","email":"martin.mende@aristech.de"}],"readmeFilename":"README.md","time":{"modified":"2017-05-22T12:18:27.177Z","created":"2017-03-08T11:29:40.487Z","1.0.0":"2017-03-08T11:29:40.487Z","1.0.1":"2017-03-08T11:35:14.293Z","1.0.2":"2017-03-10T10:28:46.904Z","1.1.0":"2017-03-13T15:00:00.663Z","1.1.1":"2017-03-14T09:28:20.500Z","1.1.2":"2017-03-16T15:26:25.909Z","1.2.0":"2017-03-17T10:24:31.357Z","1.3.0":"2017-05-22T11:21:18.675Z","1.3.1":"2017-05-22T12:18:27.177Z"}}}