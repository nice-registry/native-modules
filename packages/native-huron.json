{"name":"native-huron","version":"0.1.3","description":"Utility classes for writing native addons for node.js.","main":"include_dirs.js","repository":"https://github.com/gerhardberger/native-huron","scripts":{"test":"node tests/test.js"},"keywords":["native","huron","addon","dictionary"],"license":"MIT","dependencies":{"nan":"^2.1.0"},"gitHead":"c7f380b33970de77165687eec027bc6b8ce2890b","homepage":"https://github.com/gerhardberger/native-huron#readme","versions":[{"number":"0.0.1","date":"2015-11-15T20:53:30.778Z"},{"number":"0.0.2","date":"2015-11-17T15:52:54.473Z"},{"number":"0.0.3","date":"2015-11-18T10:09:55.357Z"},{"number":"0.0.4","date":"2015-11-26T19:31:51.255Z"},{"number":"0.0.5","date":"2016-02-08T17:50:06.829Z"},{"number":"0.0.6","date":"2016-02-09T11:09:59.431Z"},{"number":"0.0.7","date":"2016-03-03T10:41:01.909Z"},{"number":"0.1.0","date":"2016-06-11T15:57:05.976Z"},{"number":"0.1.1","date":"2016-07-27T11:47:28.071Z"},{"number":"0.1.2","date":"2016-10-25T19:50:17.265Z"},{"number":"0.1.3","date":"2017-08-15T13:26:55.932Z"}],"readme":"# native-huron\r\n\r\nA set of utility classes to make writing native addons easier. The majority of the code is from [zcbenz's](https://github.com/zcbenz) [native-mate](https://github.com/zcbenz/native-mate) library. See `tests` folder for example. Current list of classes:\r\n- **Converter:** Converting from primitive and basic C++ variables to V8 variables and from V8 variables to C++ variables.\r\n- **Dictionary:** Handle dictionaries that represents a Javascript Object.\r\n- **PersistentDictionary:** Same as Dictionaries but stored on the heap.\r\n- **ScopedPersistent:** Store V8 objects on the heap.\r\n- **Emitter:** Event emitter class.\r\n\r\n## Install\r\n```\r\n$ npm i native-huron\r\n```\r\n\r\n## Usage\r\nIn your `binding.gyp`:\r\n``` gyp\r\n{\r\n  'includes': [ 'path/to/native-huron/module/native_huron_files.gypi' ],\r\n  'targets': [ {\r\n    'target_name': 'test'\r\n    , 'sources': [ '<@(native_huron_files)' ]\r\n    , 'include_dirs': [ \"<!(node -e \\\"require('native-huron')\\\")\" ]\r\n  } ]\r\n}\r\n```\r\n\r\nIn your C++ files:\r\n``` c++\r\n#include <native_huron/converter.h>\r\n#include <native_huron/dictionary.h>\r\n\r\n// Use utility classes...\r\n```\r\n\r\n## API\r\n\r\n### Converter\r\n\r\n##### ConvertToV8(isolate, value)\r\nConverts the value, a primitive or simple C++ variable (e.g. `double` or `std::string`) to a V8 variable. **Returns** the converted V8 variable.\r\n\r\n##### TryConvertToV8(isolate, value, result)\r\nTries to convert the value, a primitive or simple C++ variable (e.g. `double` or `std::string`) to a V8 variable. **Returns** a `boolean` wether the conversion was successful, if it was, the result is written to the `result` address.\r\n\r\n##### ConvertFromV8(isolate, value, result)\r\nTries to convert the value, a V8 variable, primitive or simple C++ variable (e.g. `double` or `std::string`). **Returns** a `boolean` wether the conversion was successful, if it was, the result is written to the `result` address.\r\n\r\n##### StringToV8(isolate, input)\r\nConvenience function to convert a `std::string` to a `v8::String`. **Returns** the converted string.\r\n\r\n##### V8ToString(isolate, input)\r\nConvenience function to convert a `v8::String` to a `std::string`. **Returns** the converted string.\r\n\r\n### Dictionary\r\nThis class can also be used with Converter's `ConvertTo/FromV8` functions.\r\n\r\n##### Dictionary::Dictionary(isolate, object)\r\nCreates a `Dictionary` object from the `object` parameter, which is a `v8::Local<v8::Object>`.\r\n\r\n##### Dictionary::CreateEmpty(isolate)\r\nCreates an empty `Dictionary` object. **Returns** the created dictionary.\r\n\r\n##### dict.Get(key, out)\r\n**Returns** `true`, if the `key` (`std::string`) exists in the dictionary and writes it to the `out` address.\r\n\r\n##### dict.GetHidden(key, out)\r\n**Returns** `true`, if the `key` (`std::string`) exists as a hidden value in the dictionary and writes it to the `out` address.\r\n\r\n##### dict.Set(key, value)\r\n**Returns** `true`, if the `key` (`std::string`) is successfully set in the dictionary with the given `value`.\r\n\r\n##### dict.SetHidden(key, value)\r\n**Returns** `true`, if the `key` (`std::string`) is successfully set as hidden value in the dictionary with the given `value`.\r\n\r\n##### dict.SetMethod(key, callback)\r\n**Returns** `true`, if the `key` (`std::string`) method is successfully set in the dictionary with the given `callback`, which is a C++ method with V8 `FunctionCallback` signature (standard V8 addon method signature).\r\n\r\n##### dict.Delete(key)\r\n**Returns** `true`, if the `key` (`std::string`) is successfully deleted from the dictionary.\r\n\r\n##### dict.IsEmpty()\r\n**Returns** if the dictionary is empty.\r\n\r\n### PersistentDictionary\r\nSame functionality as `Dictionary`, but it is stored on the heap. *Use only if really neccessary.*\r\n\r\n### Emitter\r\nClasses derived from this class can use the `Emit` method to fire listeners added in Javascript. In your class you have to add `Emitter`'s `On` method to use it (see test folder).\r\n\r\n##### Emit(V8String eventName, V8Types args...)\r\nEmits the `eventName` event handlers with the specified `args`. **All parameters' type should be V8 types!**\r\n\r\n##### Emit(std::string eventName, V8Types args...)\r\nAlias for the above method.\r\n\r\n##### Emit(const char* eventName, V8Types args...)\r\nAlias for the above method.\r\n\r\n##### Emit(std::string eventName, lambda(Dictionary &dict))\r\nEmits the `eventName` event handlers with the `dict` object as a parameter. So you have to add the desired parameters in your `lambda` function your dictionary. **This is needed to emit events from different threads as V8's thread.**\r\n\r\n##### Emit(const char* eventName, lambda(Dictionary &dict))\r\nAlias for the above method.\r\n\r\n##### On(std::string eventName, Local<Function> callback)\r\nThis *member method* lets you set listeners from c++ code.\r\n\r\n##### Off(std::string eventName, Local<Function> callback)\r\nThis *member method* lets you remove listeners from c++ code.\r\n\r\n##### Once(std::string eventName, Local<Function> callback)\r\nThis *member method* lets you set listeners from c++ code that fire only once.\r\n","created":"2015-11-15T20:53:30.778Z","modified":"2017-08-15T13:26:55.932Z","lastPublisher":{"name":"brenca","email":"benecene@gmail.com"},"owners":[{"name":"brenca","email":"benecene@gmail.com"},{"name":"gerhardberger","email":"93.morph@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"native-huron","_nodeVersion":"7.8.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/native-huron-0.1.3.tgz_1502803615049_0.8529223452787846"},"_npmUser":{"name":"brenca","email":"benecene@gmail.com"},"_npmVersion":"4.6.1","_rev":"4-56f9cbc654dcfaa72ae61a63abd02d29","_shasum":"02aafb844dd5262d9872f1c410b64be65f080ff6","author":{"name":"@thekaliprince"},"bugs":{"url":"https://github.com/gerhardberger/native-huron/issues"},"directories":{},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"02aafb844dd5262d9872f1c410b64be65f080ff6","tarball":"https://registry.npmjs.org/native-huron/-/native-huron-0.1.3.tgz"},"maintainers":[{"name":"brenca","email":"benecene@gmail.com"},{"name":"gerhardberger","email":"93.morph@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-15T13:26:55.932Z","created":"2015-11-15T20:53:30.778Z","0.0.1":"2015-11-15T20:53:30.778Z","0.0.2":"2015-11-17T15:52:54.473Z","0.0.3":"2015-11-18T10:09:55.357Z","0.0.4":"2015-11-26T19:31:51.255Z","0.0.5":"2016-02-08T17:50:06.829Z","0.0.6":"2016-02-09T11:09:59.431Z","0.0.7":"2016-03-03T10:41:01.909Z","0.1.0":"2016-06-11T15:57:05.976Z","0.1.1":"2016-07-27T11:47:28.071Z","0.1.2":"2016-10-25T19:50:17.265Z","0.1.3":"2017-08-15T13:26:55.932Z"}}}