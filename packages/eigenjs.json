{"name":"eigenjs","description":"The goal of this project is to port Eigen library into JavaScript for linear algebra.","version":"0.0.89","homepage":"https://github.com/rick68/eigenjs","main":"index.js","scripts":{"test":"mocha test/*.js","install":"node-gyp rebuild"},"repository":"https://github.com/rick68/eigenjs","keywords":["eigen","linear algebra","matrix","vector","numerical solver","related algorithm"],"dependencies":{"bindings":"^1.2.1","nan":"^1.3.0","node-gyp":"^1.0.1"},"devDependencies":{"mocha":"^1.21.4","should":"^4.0.4"},"licenses":[{"type":"MPL2","url":"https://raw.githubusercontent.com/rick68/eigenjs/master/LICENSE"}],"gypfile":true,"gitHead":"31b8b1bd1bb94923eecc473676532940f885e64b","versions":[{"number":"0.0.0","date":"2014-07-22T05:49:09.461Z"},{"number":"0.0.1","date":"2014-07-22T10:43:31.957Z"},{"number":"0.0.2","date":"2014-07-22T17:39:17.164Z"},{"number":"0.0.3","date":"2014-07-26T11:43:32.021Z"},{"number":"0.0.4","date":"2014-07-26T14:25:28.528Z"},{"number":"0.0.5","date":"2014-07-27T15:17:15.351Z"},{"number":"0.0.6","date":"2014-07-29T00:00:51.784Z"},{"number":"0.0.7","date":"2014-07-29T08:48:47.498Z"},{"number":"0.0.8","date":"2014-07-29T14:59:38.868Z"},{"number":"0.0.9","date":"2014-07-30T08:12:46.936Z"},{"number":"0.0.10","date":"2014-07-30T09:55:37.235Z"},{"number":"0.0.11","date":"2014-08-01T18:40:29.448Z"},{"number":"0.0.12","date":"2014-08-02T10:40:09.832Z"},{"number":"0.0.13","date":"2014-08-04T14:51:22.251Z"},{"number":"0.0.14","date":"2014-08-08T01:46:53.510Z"},{"number":"0.0.15","date":"2014-08-10T00:01:43.423Z"},{"number":"0.0.16","date":"2014-08-10T03:00:09.271Z"},{"number":"0.0.17","date":"2014-08-11T01:24:08.940Z"},{"number":"0.0.18","date":"2014-08-16T23:53:35.188Z"},{"number":"0.0.19","date":"2014-08-18T05:10:51.245Z"},{"number":"0.0.20","date":"2014-08-19T20:23:22.311Z"},{"number":"0.0.21","date":"2014-08-20T09:49:09.616Z"},{"number":"0.0.22","date":"2014-08-27T14:11:05.275Z"},{"number":"0.0.23","date":"2014-09-01T19:28:09.413Z"},{"number":"0.0.24","date":"2014-09-02T13:13:30.759Z"},{"number":"0.0.25","date":"2014-09-02T19:06:59.103Z"},{"number":"0.0.26","date":"2014-09-03T14:20:07.016Z"},{"number":"0.0.27","date":"2014-09-04T09:41:18.667Z"},{"number":"0.0.28","date":"2014-09-04T13:55:17.250Z"},{"number":"0.0.29","date":"2014-09-04T16:13:31.581Z"},{"number":"0.0.30","date":"2014-09-04T18:02:17.091Z"},{"number":"0.0.31","date":"2014-09-04T19:09:37.328Z"},{"number":"0.0.32","date":"2014-09-04T21:35:44.478Z"},{"number":"0.0.33","date":"2014-09-05T11:56:08.961Z"},{"number":"0.0.34","date":"2014-09-05T12:49:32.486Z"},{"number":"0.0.35","date":"2014-09-05T13:49:01.488Z"},{"number":"0.0.36","date":"2014-09-05T15:44:32.097Z"},{"number":"0.0.37","date":"2014-09-05T17:18:29.431Z"},{"number":"0.0.38","date":"2014-09-07T01:16:39.416Z"},{"number":"0.0.39","date":"2014-09-07T23:40:18.680Z"},{"number":"0.0.40","date":"2014-09-08T13:18:40.544Z"},{"number":"0.0.41","date":"2014-09-08T14:00:17.576Z"},{"number":"0.0.42","date":"2014-09-09T21:28:41.326Z"},{"number":"0.0.43","date":"2014-09-11T13:20:22.451Z"},{"number":"0.0.44","date":"2014-09-11T15:36:39.891Z"},{"number":"0.0.45","date":"2014-09-12T01:09:07.279Z"},{"number":"0.0.46","date":"2014-09-12T18:35:49.312Z"},{"number":"0.0.47","date":"2014-09-13T03:34:20.891Z"},{"number":"0.0.48","date":"2014-09-13T22:52:15.289Z"},{"number":"0.0.49","date":"2014-09-14T01:52:17.611Z"},{"number":"0.0.50","date":"2014-09-14T06:53:48.755Z"},{"number":"0.0.51","date":"2014-09-15T21:22:39.320Z"},{"number":"0.0.52","date":"2014-09-15T22:23:45.186Z"},{"number":"0.0.53","date":"2014-09-16T14:23:18.574Z"},{"number":"0.0.54","date":"2014-09-16T16:23:54.979Z"},{"number":"0.0.55","date":"2014-09-16T20:28:45.075Z"},{"number":"0.0.56","date":"2014-09-16T22:24:08.371Z"},{"number":"0.0.57","date":"2014-09-17T23:36:36.606Z"},{"number":"0.0.58","date":"2014-09-18T01:35:41.327Z"},{"number":"0.0.59","date":"2014-09-18T02:32:08.256Z"},{"number":"0.0.60","date":"2014-09-18T18:20:23.443Z"},{"number":"0.0.61","date":"2014-09-18T19:16:14.764Z"},{"number":"0.0.62","date":"2014-09-18T20:17:34.648Z"},{"number":"0.0.63","date":"2014-09-19T00:12:01.461Z"},{"number":"0.0.64","date":"2014-09-19T03:05:03.177Z"},{"number":"0.0.65","date":"2014-09-20T01:38:26.789Z"},{"number":"0.0.66","date":"2014-09-20T20:32:18.623Z"},{"number":"0.0.67","date":"2014-09-21T02:54:56.875Z"},{"number":"0.0.68","date":"2014-09-21T18:37:45.093Z"},{"number":"0.0.69","date":"2014-09-21T20:24:09.763Z"},{"number":"0.0.70","date":"2014-09-21T22:25:48.987Z"},{"number":"0.0.71","date":"2014-09-22T00:02:36.107Z"},{"number":"0.0.72","date":"2014-09-22T01:08:22.509Z"},{"number":"0.0.73","date":"2014-09-22T03:50:00.319Z"},{"number":"0.0.74","date":"2014-09-22T04:35:23.995Z"},{"number":"0.0.75","date":"2014-09-22T05:17:46.098Z"},{"number":"0.0.76","date":"2014-09-24T05:28:16.975Z"},{"number":"0.0.77","date":"2014-09-24T09:47:27.499Z"},{"number":"0.0.78","date":"2014-09-27T12:06:41.576Z"},{"number":"0.0.79","date":"2014-09-27T16:01:03.029Z"},{"number":"0.0.80","date":"2014-09-29T08:44:26.516Z"},{"number":"0.0.81","date":"2014-09-30T04:32:09.716Z"},{"number":"0.0.82","date":"2014-09-30T16:35:41.271Z"},{"number":"0.0.83","date":"2014-10-02T15:33:08.369Z"},{"number":"0.0.84","date":"2014-10-02T16:54:25.835Z"},{"number":"0.0.85","date":"2014-10-04T15:30:27.820Z"},{"number":"0.0.86","date":"2014-10-06T21:28:00.064Z"},{"number":"0.0.87","date":"2014-10-07T22:28:24.949Z"},{"number":"0.0.88","date":"2014-10-10T10:56:22.420Z"},{"number":"0.0.89","date":"2014-10-12T20:27:47.108Z"}],"readme":"# EigenJS\n\nThe goal of this project is to port Eigen library into JavaScript for linear algebar.\n\n[![NPM][nodeico-download]][nodeico-url] [![NPM][nodeico-months]][nodeico-url]\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Build status][appveyor-image]][appveyor-url] [![Gitter chat][gitter-image]][gitter-url] [![gittip.com/rick68][gittip-image]][gittip-url]\n\n[nodeico-download]: https://nodei.co/npm/eigenjs.png?downloads=true&downloadRank=true&stars=true\n[nodeico-months]: https://nodei.co/npm-dl/eigenjs.png?months=6&height=3\n[nodeico-url]: https://nodei.co/npm/eigenjs/\n\n[npm-image]: http://img.shields.io/npm/v/eigenjs.svg\n[npm-url]: https://npmjs.org/package/eigenjs\n\n[downloads-image]: http://img.shields.io/npm/dm/eigenjs.svg\n\n[travis-image]: https://travis-ci.org/rick68/eigenjs.svg?branch=master\n[travis-url]: https://travis-ci.org/rick68/eigenjs\n\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/jot11x58urjndseb/branch/master\n[appveyor-url]: https://ci.appveyor.com/project/rick68/eigenjs/branch/master\n\n[gitter-image]: https://badges.gitter.im/rick68/eigenjs.png\n[gitter-url]: https://gitter.im/rick68/eigenjs\n\n[gittip-image]: http://img.shields.io/gittip/rick68.svg\n[gittip-url]: https://www.gittip.com/rick68\n\n## Installation\n\n+ **OS X** (XCode & Command Line Tools)\n+ **Linux** (GCC >= 4.8):\n\n```bash\n$ npm install eigenjs\n```\n\n+ **Windows7/8** (Visual Studio 2012):\n\n```bash\n$ npm install eigenjs --msvs_version=2012\n```\n\n## API\n\n* [Complex](#complex)\n  * [Complex Class Methods](#complex-class-methods)\n    * [Complex(real, [imag])](#complexreal-imag)\n    * [Complex.polar(scalar, scalar)](#complexpolarscalar-scalar)\n    * [Complex.cos(scalar)](#complexcosscalar)\n    * [Complex.cos(comp)](#complexcoscomp)\n    * [Complex.cosh(scalar)](#complexcoshscalar)\n    * [Complex.cosh(comp)](#complexcoshcomp)\n    * [Complex.exp(scalar)](#complexexpscalar)\n    * [Complex.exp(comp)](#complexexpcomp)\n    * [Complex.log(scalar)](#complexlogscalar)\n    * [Complex.log(comp)](#complexlogcomp)\n    * [Complex.log10(scalar)](#complexlog10scalar)\n    * [Complex.log10(comp)](#complexlog10comp)\n    * [Complex.pow(scalar, scalar)](#complexpowscalar-scalar)\n    * [Complex.pow(scalar, comp)](#complexpowscalar-comp)\n    * [Complex.pow(comp, scalar)](#complexpowcomp-scalar)\n    * [Complex.pow(comp, comp)](#complexpowcomp-comp)\n    * [Complex.sin(scalar)](#complexsinscalar)\n    * [Complex.sin(comp)](#complexsincomp)\n    * [Complex.sinh(scalar)](#complexsinhscalar)\n    * [Complex.sinh(comp)](#complexsinhcomp)\n    * [Complex.sqrt(scalar)](#complexsqrtscalar)\n    * [Complex.sqrt(comp)](#complexsqrtcomp)\n    * [Complex.tan(scalar)](#complextanscalar)\n    * [Complex.tan(comp)](#complextancomp)\n    * [Complex.tanh(scalar)](#complextanhscalar)\n    * [Complex.tanh(comp)](#complextanhcomp)\n    * [Complex.acos(scalar)](#complexacosscalar)\n    * [Complex.acos(comp)](#complexacoscomp)\n    * [Complex.acosh(scalar)](#complexacoshscalar)\n    * [Complex.acosh(comp)](#complexacoshcomp)\n    * [Complex.asin(scalar)](#complexasinscalar)\n    * [Complex.asin(comp)](#complexasincomp)\n    * [Complex.asinh(scalar)](#complexasinhscalar)\n    * [Complex.asinh(comp)](#complexasinhcomp)\n    * [Complex.atan(scalar)](#complexatanscalar)\n    * [Complex.atan(comp)](#complexatancomp)\n    * [Complex.atanh(scalar)](#complexatanhscalar)\n    * [Complex.atanh(comp)](#complexatanhcomp)\n  * [Complex Instance Methods](#complex-instance-methods)\n    * [comp.abs()](#compabs)\n    * [comp.arg()](#comparg)\n    * [comp.norm()](#compnorm)\n    * [comp.conj()](#compconj)\n    * [comp.proj(scalar)](#compprojscalar)\n    * [comp.proj(comp)](#compprojcomp)\n    * [comp.add(scalar)](#compaddscalar)\n    * [comp.add(comp)](#compaddcomp)\n    * [comp.adda(scalar)](#compaddascalar)\n    * [comp.adda(comp)](#compaddacomp)\n    * [comp.sub(scalar)](#compsubscalar)\n    * [comp.sub(comp)](#compsubcomp)\n    * [comp.suba(scalar)](#compsubascalar)\n    * [comp.suba(comp)](#compsubacomp)\n    * [comp.mul(scalar)](#compmulscalar)\n    * [comp.mul(comp)](#compmulcomp)\n    * [comp.mul(mat)](#compmulmat)\n    * [comp.mul(vec)](#compmulvec)\n    * [comp.mul(rvec)](#compmulrvec)\n    * [comp.mul(mblock)](#compmulmblock)\n    * [comp.mul(vblock)](#compmulvblock)\n    * [comp.mul(rvblock)](#compmulrvblock)\n    * [comp.mul(cmat)](#compmulcmat)\n    * [comp.mul(cvec)](#compmulcvec)\n    * [comp.mul(crvec)](#compmulcrvec)\n    * [comp.mul(cmblock)](#compmulcmblock)\n    * [comp.mul(cvblock)](#compmulcvblock)\n    * [comp.mul(crvblock)](#compmulcrvblock)\n    * [comp.mula(scalar)](#compmulascalar)\n    * [comp.mula(comp)](#compmulacomp)\n    * [comp.div(scalar)](#compdivscalar)\n    * [comp.div(comp)](#compdivcomp)\n    * [comp.diva(scalar)](#compdivascalar)\n    * [comp.diva(comp)](#compdivacomp)\n    * [comp.equals(scalar)](#compequalsscalar)\n    * [comp.equals(comp)](#compequalscomp)\n    * [comp.isApprox(comp, [prec = 1e-12])](#compisapproxcomp-prec--1e-12)\n    * [comp.toString()](#comptostring)\n  * [Complex Properties](#complex-properties)\n    * [comp.real](#compreal)\n    * [comp.imag](#compimag)\n* [Matrix](#matrix)\n  * [Matrix Class Methods](#matrix-class-methods)\n    * [Matrix(mat)](#matrixmat)\n    * [Matrix(vec)](#matrixvec)\n    * [Matrix(rvec)](#matrixrvec)\n    * [Matrix(mblock)](#matrixmblock)\n    * [Matrix(vblock)](#matrixvblock)\n    * [Matrix(rvblock)](#matrixrvblock)\n    * [Matrix(rows, cols)](#matrixrows-cols)\n    * [Matrix.Zero(n)](#matrixzeron)\n    * [Matrix.Zero(rows, cols)](#matrixzerorows-cols)\n    * [Matrix.Ones(n)](#matrixonesn)\n    * [Matrix.Ones(rows, cols)](#matrixonesrows-cols)\n    * [Matrix.Constant(rows, cols, scalar)](#matrixconstantrows-cols-scalar)\n    * [Matrix.Constant(rows, cols, comp)](#matrixconstantrows-cols-comp)\n    * [Matrix.Random(n)](#matrixrandomn)\n    * [Matrix.Random(rows, cols)](#matrixrandomrows-cols)\n    * [Matrix.Identity(n)](#matrixidentityn)\n    * [Matrix.Identity(rows, cols)](#matrixidentityrows-cols)\n  * [Matrix Instance Methods](#matrix-instance-methods)\n    * [mat.rows()](#matrows)\n    * [mat.cols()](#matcols)\n    * [mat.set(row, col, scalar)](#matsetrow-col-scalar)\n    * [mat.set(scalar_array)](#matsetscalar_array)\n    * [mat.get(row, col)](#matgetrow-col)\n    * [mat.assign(mat)](#matassignmat)\n    * [mat.assign(vec)](#matassignvec)\n    * [mat.assign(rvec)](#matassignrvec)\n    * [mat.assign(mblock)](#matassignmblock)\n    * [mat.assign(vblock)](#matassignvblock)\n    * [mat.assign(rvblock)](#matassignrvblock)\n    * [mat.value()](#matvalue)\n    * [mat.setZero()](#matsetzero)\n    * [mat.setOnes()](#matsetones)\n    * [mat.setConstant(scalar)](#matsetconstantscalar)\n    * [mat.setRandom()](#matsetrandom)\n    * [mat.setIdentity()](#matsetidentity)\n    * [mat.setDiagonal(index, vec)](#matsetdiagonalindex-vec)\n    * [mat.setDiagonal(index, rvec)](#matsetdiagonalindex-rvec)\n    * [mat.block(startRow, startCol, blockRows, blockCols)](#matblockstartrow-startcol-blockrows-blockcols)\n    * [mat.row(n)](#matrown)\n    * [mat.col(n)](#matcoln)\n    * [mat.topRows(n)](#mattoprowsn)\n    * [mat.bottomRows(n)](#matbottomrowsn)\n    * [mat.middleRows(startRow, n)](#matmiddlerowsstartrow-n)\n    * [mat.leftCols(n)](#matleftcolsn)\n    * [mat.rightCols(n)](#matrightcolsn)\n    * [mat.middleCols(startCol, n)](#matmiddlecolsstartcol-n)\n    * [mat.topLeftCorner(cRows, cCols)](#mattopleftcornercrows-ccols)\n    * [mat.topRightCorner(cRows, cCols)](#mattoprightcornercrows-ccols)\n    * [mat.bottomLeftCorner(cRows, cCols)](#matbottomleftcornercrows-ccols)\n    * [mat.bottomRightCorner(cRows, cCols)](#matbottomrightcornercrows-ccols)\n    * [mat.replicate(rowFactor, colFactor)](#matreplicaterowfactor-colfactor)\n    * [mat.add(mat)](#mataddmat)\n    * [mat.add(vec)](#mataddvec)\n    * [mat.add(rvec)](#mataddrvec)\n    * [mat.add(mblock)](#mataddmblock)\n    * [mat.add(vblock)](#mataddvblock)\n    * [mat.add(rvblock)](#mataddrvblock)\n    * [mat.add(cmat)](#mataddcmat)\n    * [mat.add(cvec)](#mataddcvec)\n    * [mat.add(crvec)](#mataddcrvec)\n    * [mat.add(cmblock)](#mataddcmblock)\n    * [mat.add(cvblock)](#mataddcvblock)\n    * [mat.add(crvblock)](#mataddcrvblock)\n    * [mat.adda(mat)](#mataddamat)\n    * [mat.adda(vec)](#mataddavec)\n    * [mat.adda(rvec)](#mataddarvec)\n    * [mat.adda(mblock)](#mataddamblock)\n    * [mat.adda(vblock)](#mataddavblork)\n    * [mat.adda(rvblock)](#mataddarvblock)\n    * [mat.sub(mat)](#matsubmat)\n    * [mat.sub(vec)](#matsubvec)\n    * [mat.sub(rvec)](#matsubrvec)\n    * [mat.sub(mblock)](#matsubmblock)\n    * [mat.sub(vblock)](#matsubvblock)\n    * [mat.sub(rvblock)](#matsubrvblock)\n    * [mat.sub(cmat)](#matsubcmat)\n    * [mat.sub(cvec)](#matsubcvec)\n    * [mat.sub(crvec)](#matsubcrvec)\n    * [mat.sub(cmblock)](#matsubcmblock)\n    * [mat.sub(cvblock)](#matsubcvblock)\n    * [mat.sub(crvblock)](#matsubcrvblock)\n    * [mat.suba(mat)](#matsubamat)\n    * [mat.suba(vec)](#matsubavec)\n    * [mat.suba(rvec)](#matsubarvec)\n    * [mat.suba(mblock)](#matsubamblock)\n    * [mat.suba(vblock)](#matsubavblock)\n    * [mat.suba(rvblock)](#matsubarvblock)\n    * [mat.mul(scalar)](#matmulscalar)\n    * [mat.mul(comp)](#matmulcomp)\n    * [mat.mul(mat)](#matmulmat)\n    * [mat.mul(vec)](#matmulvec)\n    * [mat.mul(rvec)](#matmulrvec)\n    * [mat.mul(mblock)](#matmulmblock)\n    * [mat.mul(vblock)](#matmulvblock)\n    * [mat.mul(rvblock)](#matmulrvblock)\n    * [mat.mul(cmat)](#matmulcmat)\n    * [mat.mul(cvec)](#matmulcvec)\n    * [mat.mul(crvec)](#matmulcrvec)\n    * [mat.mul(cmblock)](#matmulcmblock)\n    * [mat.mul(cvblock)](#matmulcvblock)\n    * [mat.mul(crvblock)](#matmulcrvblock)\n    * [mat.mula(scalar)](#matmulascalar)\n    * [mat.mula(mat)](#matmulamat)\n    * [mat.mula(vec)](#matmulavec)\n    * [mat.mula(rvec)](#matmularvec)\n    * [mat.mula(mblock)](#matmulamblock)\n    * [mat.mula(vblock)](#matmulavblock)\n    * [mat.mula(rvblock)](#matmularvblock)\n    * [mat.div(scalar)](#matdivscalar)\n    * [mat.div(comp)](#matdivcomp)\n    * [mat.diva(scalar)](#matdivascalar)\n    * [mat.transpose()](#mattranspose)\n    * [mat.conjugate()](#matconjugate)\n    * [mat.adjoint()](#matadjoint)\n    * [mat.determinant()](#matdeterminant)\n    * [mat.inverse()](#matinverse)\n    * [mat.trace()](#mattrace)\n    * [mat.diagonal([index = 0])](#matdiagonalindex--0)\n    * [mat.norm()](#matnorm)\n    * [mat.redux(func)](#matreduxfunc)\n    * [mat.sum()](#matsum)\n    * [mat.prod()](#matprod)\n    * [mat.mean()](#matmean)\n    * [mat.visit(func)](#matvisitfunc)\n    * [mat.maxCoeff()](#matmaxcoeff)\n    * [mat.maxCoeff(obj)](#matmaxcoeffobj)\n    * [mat.maxCoeff(func)](#matmaxcoefffunc)\n    * [mat.minCoeff()](#matmincoeff)\n    * [mat.minCoeff(obj)](#matmincoeffobj)\n    * [mat.minCoeff(func)](#matmincoefffunc)\n    * [mat.equals(mat)](#matequalsmat)\n    * [mat.equals(vec)](#matequalsvec)\n    * [mat.equals(rvec)](#matequalsrvec)\n    * [mat.equals(mblock)](#matequalsmblock)\n    * [mat.equals(vblock)](#matequalsvblock)\n    * [mat.equals(rvblock)](#matequalsrvblock)\n    * [mat.isApprox(mat, [prec = 1e-12])](#matisapproxmat-prec--1e-12)\n    * [mat.isApprox(vec, [prec = 1e-12])](#matisapproxvec-prec--1e-12)\n    * [mat.isApprox(rvec, [prec = 1e-12])](#matisapproxrvec-prec--1e-12)\n    * [mat.isApprox(mblock, [prec = 1e-12])](#matisapproxmblock-prec--1e-12)\n    * [mat.isApprox(vblock, [prec = 1e-12])](#matisapproxvblock-prec--1e-12)\n    * [mat.isApprox(rvblock, [prec = 1e-12])](#matisapproxrvblock-prec--1e-12)\n    * [mat.isSquare()](#matissquare)\n    * [mat.isZero([prec = 1e-12])](#matiszeroprec--1e-12)\n    * [mat.isOnes([prec = 1e-12])](#matisonesprec--1e-12)\n    * [mat.isIdentity([prec = 1e-12])](#matisidentityprec--1e-12)\n    * [mat.isDiagonal([prec = 1e-12])](#matisdiagonalprec--1e-12)\n    * [mat.all()](#matall)\n    * [mat.any()](#matany)\n    * [mat.count()](#matcount)\n    * [mat.allFinite()](#matallfinite)\n    * [mat.hasNaN()](#mathasnan)\n    * [mat.partialPivLu()](#matpartialpivlu)\n    * [mat.fullPivLu()](#matfullpivlu)\n    * [mat.toString([options])](#mattostringoptions)\n* [Complex Matrix](#complex-matrix)\n  * [Complex Matrix Class Methods](#complex-matrix-class-methods)\n    * [CMatrix(mat)](#cmatrixmat)\n    * [CMatrix(vec)](#cmatrixvec)\n    * [CMatrix(rvec)](#cmatrixrvec)\n    * [CMatrix(mblock)](#cmatrixmblock)\n    * [CMatrix(vblock)](#cmatrixvblock)\n    * [CMatrix(rvblock)](#cmatrixrvblock)\n    * [CMatrix(cmat)](#cmatrixcmat)\n    * [CMatrix(cvec)](#cmatrixcvec)\n    * [CMatrix(crvec)](#cmatrixcrvec)\n    * [CMatrix(cmblock)](#cmatrixcmblock)\n    * [CMatrix(cvblock)](#cmatrixcvblock)\n    * [CMatrix(crvblock)](#cmatrixcrvblock)\n    * [CMatrix(rows, cols)](#cmatrixrows-cols)\n    * [CMatrix.Zero(n)](#cmatrixzeron)\n    * [CMatrix.Zero(rows, cols)](#cmatrixzerorows-cols)\n    * [CMatrix.Ones(n)](#cmatrixonesn)\n    * [CMatrix.Ones(rows, cols)](#cmatrixonesrows-cols)\n    * [CMatrix.Constant(rows, cols, scalar)](#cmatrixconstantrows-cols-scalar)\n    * [CMatrix.Constant(rows, cols, comp)](#cmatrixconstantrows-cols-comp)\n    * [CMatrix.Random(n)](#cmatrixrandomn)\n    * [CMatrix.Random(rows, cols)](#cmatrixrandomrows-cols)\n    * [CMatrix.Identity(n)](#cmatrixidentityn)\n    * [CMatrix.Identity(rows, cols)](#cmatrixidentityrows-cols)\n  * [Complex Matrix Instance Methods](#complex-matrix-instance-methods)\n    * [cmat.rows()](#cmatrows)\n    * [cmat.cols()](#cmatcols)\n    * [cmat.set(row, col, comp)](#cmatsetrow-col-comp)\n    * [cmat.set(comp_array)](#cmatsetcomp_array)\n    * [cmat.get(row, col)](#cmatgetrow-col)\n    * [cmat.assign(mat)](#cmatassignmat)\n    * [cmat.assign(vec)](#cmatassignvec)\n    * [cmat.assign(rvec)](#cmatassignrvec)\n    * [cmat.assign(mblock)](#cmatassignmblock)\n    * [cmat.assign(vblock)](#cmatassignvblock)\n    * [cmat.assign(rvblock)](#cmatassignrvblock)\n    * [cmat.assign(cmat)](#cmatassigncmat)\n    * [cmat.assign(cvec)](#cmatassigncvec)\n    * [cmat.assign(crvec)](#cmatassigncrvec)\n    * [cmat.assign(cmblock)](#cmatassigncmblock)\n    * [cmat.assign(cvblock)](#cmatassigncvblock)\n    * [cmat.assign(crvblock)](#cmatassigncrvblock)\n    * [cmat.value()](#cmatvalue)\n    * [cmat.setZero()](#cmatsetzero)\n    * [cmat.setOnes()](#cmatsetones)\n    * [cmat.setConstant(scalar)](#cmatsetconstantscalar)\n    * [cmat.setConstant(comp)](#cmatsetconstantcomp)\n    * [cmat.setRandom()](#cmatsetrandom)\n    * [cmat.setIdentity()](#cmatsetidentity)\n    * [cmat.setDiagonal(index, vec)](#cmatsetdiagonalindex-vec)\n    * [cmat.setDiagonal(index, rvec)](#cmatsetdiagonalindex-rvec)\n    * [cmat.setDiagonal(index, cvec)](#cmatsetdiagonalindex-cvec)\n    * [cmat.setDiagonal(index, crvec)](#cmatsetdiagonalindex-crvec)\n    * [cmat.block(startRow, startCol, blockRows, blockCols)](#cmatblockstartrow-startcol-blockrows-blockcols)\n    * [cmat.row(n)](#cmatrown)\n    * [cmat.col(n)](#cmatcoln)\n    * [cmat.topRows(n)](#cmattoprowsn)\n    * [cmat.bottomRows(n)](#cmatbottomrowsn)\n    * [cmat.middleRows(startRow, n)](#cmatmiddlerowsstartrow-n)\n    * [cmat.leftCols(n)](#cmatleftcolsn)\n    * [cmat.rightCols(n)](#cmatrightcolsn)\n    * [cmat.middleCols(startCol, n)](#cmatmiddlecolsstartcol-n)\n    * [cmat.topLeftCorner(cRows, cCols)](#cmattopleftcornercrows-ccols)\n    * [cmat.topRightCorner(cRows, cCols)](#cmattoprightcornercrows-ccols)\n    * [cmat.bottomLeftCorner(cRows, cCols)](#cmatbottomleftcornercrows-ccols)\n    * [cmat.bottomRightCorner(cRows, cCols)](#cmatbottomrightcornercrows-ccols)\n    * [cmat.replicate(rowFactor, colFactor)](#cmatreplicaterowfactor-colfactor)\n    * [cmat.add(mat)](#cmataddmat)\n    * [cmat.add(vec)](#cmataddvec)\n    * [cmat.add(rvec)](#cmataddrvec)\n    * [cmat.add(mblock)](#cmataddmblock)\n    * [cmat.add(vblock)](#cmataddvblock)\n    * [cmat.add(rvblock)](#cmataddrvblock)\n    * [cmat.add(cmat)](#cmataddcmat)\n    * [cmat.add(cvec)](#cmataddcvec)\n    * [cmat.add(crvec)](#cmataddcrvec)\n    * [cmat.add(cmblock)](#cmataddcmblock)\n    * [cmat.add(cvblock)](#cmataddcvblock)\n    * [cmat.add(crvblock)](#cmataddcrvblock)\n    * [cmat.adda(mat)](#cmataddamat)\n    * [cmat.adda(vec)](#cmataddavec)\n    * [cmat.adda(rvec)](#cmataddarvec)\n    * [cmat.adda(mblock)](#cmataddamblock)\n    * [cmat.adda(vblock)](#cmataddavblock)\n    * [cmat.adda(rvblock)](#cmataddarvblock)\n    * [cmat.adda(cmat)](#cmataddacmat)\n    * [cmat.adda(cvec)](#cmataddacvec)\n    * [cmat.adda(crvec)](#cmataddacrvec)\n    * [cmat.adda(cmblock)](#cmataddacmblock)\n    * [cmat.adda(cvblock)](#cmataddacvblock)\n    * [cmat.adda(crvblock)](#cmataddacrvblock)\n    * [cmat.sub(mat)](#cmatsubmat)\n    * [cmat.sub(vec)](#cmatsubvec)\n    * [cmat.sub(rvec)](#cmatsubrvec)\n    * [cmat.sub(mblock)](#cmatsubmblock)\n    * [cmat.sub(vblock)](#cmatsubvblock)\n    * [cmat.sub(rvblock)](#cmatsubrvblock)\n    * [cmat.sub(cmat)](#cmatsubcmat)\n    * [cmat.sub(cvec)](#cmatsubcvec)\n    * [cmat.sub(crvec)](#cmatsubcrvec)\n    * [cmat.sub(cmblock)](#cmatsubcmblock)\n    * [cmat.sub(cvblock)](#cmatsubcvblock)\n    * [cmat.sub(crvblock)](#cmatsubcrvblock)\n    * [cmat.suba(mat)](#cmatsubamat)\n    * [cmat.suba(vec)](#cmatsubavec)\n    * [cmat.suba(rvec)](#cmatsubarvec)\n    * [cmat.suba(mblock)](#cmatsubamblock)\n    * [cmat.suba(vblock)](#cmatsubavblock)\n    * [cmat.suba(rvblock)](#cmatsubarvblock)\n    * [cmat.suba(cmat)](#cmatsubacmat)\n    * [cmat.suba(cvec)](#cmatsubacvec)\n    * [cmat.suba(crvec)](#cmatsubacrvec)\n    * [cmat.suba(cmblock)](#cmatsubacmblock)\n    * [cmat.suba(cvblock)](#cmatsubacvblock)\n    * [cmat.suba(crvblock)](#cmatsubacrvblock)\n    * [cmat.mul(scalar)](#cmatmulscalar)\n    * [cmat.mul(comp)](#cmatmulcomp)\n    * [cmat.mul(mat)](#cmatmulmat)\n    * [cmat.mul(vec)](#cmatmulvec)\n    * [cmat.mul(rvec)](#cmatmulrvec)\n    * [cmat.mul(mblock)](#cmatmulmblock)\n    * [cmat.mul(vblock)](#cmatmulvblock)\n    * [cmat.mul(rvblock)](#cmatmulrvblock)\n    * [cmat.mul(cmat)](#cmatmulcmat)\n    * [cmat.mul(cvec)](#cmatmulcvec)\n    * [cmat.mul(crvec)](#cmatmulcrvec)\n    * [cmat.mul(cmblock)](#cmatmulcmblock)\n    * [cmat.mul(cvblock)](#cmatmulcvblock)\n    * [cmat.mul(crvblock)](#cmatmulcrvblock)\n    * [cmat.mula(scalar)](#cmatmulascalar)\n    * [cmat.mula(comp)](#cmatmulacomp)\n    * [cmat.mula(mat)](#cmatmulamat)\n    * [cmat.mula(vec)](#cmatmulavec)\n    * [cmat.mula(rvec)](#cmatmularvec)\n    * [cmat.mula(mblock)](#cmatmulamblock)\n    * [cmat.mula(vblock)](#cmatmulavblock)\n    * [cmat.mula(rvblock)](#cmatmularvblock)\n    * [cmat.mula(cmat)](#cmatmulacmat)\n    * [cmat.mula(cvec)](#cmatmulacvec)\n    * [cmat.mula(crvec)](#cmatmulacrvec)\n    * [cmat.mula(cmblock)](#cmatmulacmblock)\n    * [cmat.mula(cvblock)](#cmatmulacvblock)\n    * [cmat.mula(crvblock)](#cmatmulacrvblock)\n    * [cmat.div(scalar)](#cmatdivscalar)\n    * [cmat.div(comp)](#cmatdivcomp)\n    * [cmat.diva(scalar)](#cmatdivascalar)\n    * [cmat.diva(comp)](#cmatdivacomp)\n    * [cmat.transpose()](#cmattranspose)\n    * [cmat.conjugate()](#cmatconjugate)\n    * [cmat.adjoint()](#cmatadjoint)\n    * [cmat.determinant()](#cmatdeterminant)\n    * [cmat.inverse()](#cmatinverse)\n    * [cmat.trace()](#cmattrace)\n    * [cmat.diagonal([index = 0])](#cmatdiagonalindex--0)\n    * [cmat.norm()](#cmatnorm)\n    * [cmat.redux(func)](#cmatreduxfunc)\n    * [cmat.sum()](#cmatsum)\n    * [cmat.prod()](#cmatprod)\n    * [cmat.mean()](#cmatmean)\n    * [cmat.visit(func)](#cmatvisitfunc)\n    * [cmat.equals(cmat)](#cmatequalscmat)\n    * [cmat.equals(cvec)](#cmatequalscvec)\n    * [cmat.equals(crvec)](#cmatequalscrvec)\n    * [cmat.equals(cmblock)](#cmatequalscmblock)\n    * [cmat.equals(cvblock)](#cmatequalscvblock)\n    * [cmat.equals(crvblock)](#cmatequalscrvblock)\n    * [cmat.isApprox(cmat, [prec = 1e-12])](#cmatisapproxcmat-prec--1e-12)\n    * [cmat.isApprox(cvec, [prec = 1e-12])](#cmatisapproxcvec-prec--1e-12)\n    * [cmat.isApprox(crvec, [prec = 1e-12])](#cmatisapproxcrvec-prec--1e-12)\n    * [cmat.isApprox(cmblock, [prec = 1e-12])](#cmatisapproxcmblock-prec--1e-12)\n    * [cmat.isApprox(cvblock, [prec = 1e-12])](#cmatisapproxcvblock-prec--1e-12)\n    * [cmat.isApprox(crvblock, [prec = 1e-12])](#cmatisapproxcrvblock-prec--1e-12)\n    * [cmat.isSquare()](#cmatissquare)\n    * [cmat.isZero([prec = 1e-12])](#cmatisonesprec--1e-12)\n    * [cmat.isOnes([prec = 1e-12])](#cmatisonesprec--1e-12)\n    * [cmat.isIdentity([prec = 1e-12])](#cmatisidentityprec--1e-12)\n    * [cmat.isDiagonal([prec = 1e-12])](#cmatisdiagonalprec--1e-12)\n    * [cmat.allFinite()](#cmatallfinite)\n    * [cmat.hasNaN()](#cmathasnan)\n    * [cmat.partialPivLu()](#cmatpartialpivlu)\n    * [cmat.fullPivLu()](#cmatfullpivlu)\n    * [cmat.toString([options])](#cmattostringoptions)\n* [Vector](#vector) **inherits from Matrix**\n  * [Vector Class Methods](#vector-class-methods)\n    * [Vector(mat)](#vectormat)\n    * [Vector(vec)](#vectorvec)\n    * [Vector(rvec)](#vectorrvec)\n    * [Vector(mblock)](#vectormblock)\n    * [Vector(vblock)](#vectorvblock)\n    * [Vector(rvblock)](#vectorrvblock)\n    * [Vector(rows)](#vectorrows)\n    * [Vector(scalar_array)](#vectorscalar_array)\n    * [Vector.Constant(rows, scalar)](#vectorconstantrows-scalar)\n    * [Vector.Constant(rows, comp)](#vectorconstantrows-comp)\n    * [Vector.LinSpaced(size, low, high)](#vectorlinspacedsize-low-high)\n  * [Vector Instance Methods](#vector-instance-methods)\n    * [vec.set(row, scalar)](#vecsetrow-scalar)\n    * [vec.set(scalar_array)](#vecsetscalar_array)\n    * [vec.get(row)](#vecgetrow)\n    * [vec.setLinSpaced(low, high)](#vecsetlinspacedlow-high)\n    * [vec.setLinSpaced(size, low, high)](#vecsetlinspacedsize-low-high)\n    * [vec.block(startRow, blockRows)](#vecblockstartrow-blockrows)\n    * [vec.head(n)](#vecheadn)\n    * [vec.tail(n)](#vectailn)\n    * [vec.dot(mat)](#vecdotmat)\n    * [vec.dot(vec)](#vecdotvec)\n    * [vec.dot(rvec)](#vecdotrvec)\n    * [vec.dot(mblock)](#vecdotmblock)\n    * [vec.dot(vblock)](#vecdotvblock)\n    * [vec.dot(rvblock)](#vecdotrvblock)\n    * [vec.dot(cmat)](#vecdotcmat)\n    * [vec.dot(cvec)](#vecdotcvec)\n    * [vec.dot(crvec)](#vecdotcrvec)\n    * [vec.dot(cmblock)](#vecdotcmblock)\n    * [vec.dot(cvblock)](#vecdotcvblock)\n    * [vec.dot(crvblock)](#vecdotcrvblock)\n    * [vec.asDiagonal()](#vecasdiagonal)\n    * [vec.normalize()](#vecnormalize)\n    * [vec.maxCoeff()](#vecmaxcoeff)\n    * [vec.maxCoeff(obj)](#vecmaxcoeffobj)\n    * [vec.maxCoeff(func)](#vecmaxcoefffunc)\n    * [vec.minCoeff()](#vecmincoeff)\n    * [vec.minCoeff(obj)](#vecmincoeffobj)\n    * [vec.minCoeff(func)](#vecmincoefffunc)\n* [Complex Vector](#complex-vector) **inherits from CMatrix**\n  * [Complex Vector Class Methods](#complex-vector-class-methods)\n    * [CVector(mat)](#cvectormat)\n    * [CVector(vec)](#cvectorvec)\n    * [CVector(rvec)](#cvectorrvec)\n    * [CVector(mblock)](#cvectormblock)\n    * [CVector(vblock)](#cvectorvblock)\n    * [CVector(rvblock)](#cvectorrvblock)\n    * [CVector(cmat)](#cvectorcmat)\n    * [CVector(cvec)](#cvectorcvec)\n    * [CVector(crvec)](#cvectorcrvec)\n    * [CVector(cmblock)](#cvectorcmblock)\n    * [CVector(cvblock)](#cvectorcvblock)\n    * [CVector(crvblock)](#cvectorcrvblock)\n    * [CVector(rows)](#cvectorrows)\n    * [CVector(comp_array)](#cvectorcomp_array)\n    * [CVector.Constant(rows, scalar)](#cvectorconstantrows-scalar)\n    * [CVector.Constant(rows, comp)](#cvectorconstantrows-comp)\n  * [Complex Vector Instance Methods](#complex-vector-instance-methods)\n    * [cvec.set(row, comp)](#cvecsetrow-comp)\n    * [cvec.set(comp_array)](#cvecsetcomp_array)\n    * [cvec.get(row)](#cvecgetrow)\n    * [cvec.block(startRow, blockRows)](#cvecblockstartrow-blockrows)\n    * [cvec.head(n)](#cvecheadn)\n    * [cvec.tail(n)](#cvectailn)\n    * [cvec.dot(mat)](#cvecdotmat)\n    * [cvec.dot(vec)](#cvecdotvec)\n    * [cvec.dot(rvec)](#cvecdotrvec)\n    * [cvec.dot(mblock)](#cvecdotmblock)\n    * [cvec.dot(vblock)](#cvecdotvblock)\n    * [cvec.dot(rvblock)](#cvecdotrvblock)\n    * [cvec.dot(cmat)](#cvecdotcmat)\n    * [cvec.dot(cvec)](#cvecdotcvec)\n    * [cvec.dot(crvec)](#cvecdotcrvec)\n    * [cvec.dot(cmblock)](#cvecdotcmblock)\n    * [cvec.dot(cvblock)](#cvecdotcvblock)\n    * [cvec.dot(crvblock)](#cvecdotcrvblock)\n    * [cvec.asDiagonal()](#cvecasdiagonal)\n    * [cvec.normalize()](#cvecnormalize)\n* [Row Vector](#row-vector) **inherits from Matrix**\n  * [Row Vector Class Methods](#row-vector-class-methods)\n    * [RowVector(mat)](#rowvectormat)\n    * [RowVector(vec)](#rowvectorvec)\n    * [RowVector(rvec)](#rowvectorrvec)\n    * [RowVector(mblock)](#rowvectormblock)\n    * [RowVector(vblock)](#rowvectorvblock)\n    * [RowVector(rvblock)](#rowvectorrvblock)\n    * [RowVector(cols)](#rowvectorcols)\n    * [RowVector(scalar_array)](#rowvectorscalar_array)\n    * [RowVector.Constant(cols, scalar)](#rowvectorconstantcols-scalar)\n    * [RowVector.Constant(cols, comp)](#rowvectorconstantcols-comp)\n    * [RowVector.LinSpaced(size, low, high)](#rowvectorlinspacedsize-low-high)\n  * [Row Vector Instance Methods](#row-vector-instance-methods)\n    * [rvec.set(col, scalar)](#rvecsetcol-scalar)\n    * [rvec.set(scalar_array)](#rvecsetscalar_array)\n    * [rvec.get(col)](#rvecgetcol)\n    * [rvec.setLinSpaced(low, high)](#rvecsetlinspacedlow-high)\n    * [rvec.setLinSpaced(size, low, high)](#rvecsetlinspacedsize-low-high)\n    * [rvec.block(startCol, blockCols)](#rvecblockstartcol-blockcols)\n    * [rvec.head(n)](#rvecheadn)\n    * [rvec.tail(n)](#rvectailn)\n    * [rvec.dot(mat)](#rvecdotmat)\n    * [rvec.dot(vec)](#rvecdotvec)\n    * [rvec.dot(rvec)](#rvecdotrvec)\n    * [rvec.dot(mblock)](#rvecdotmblock)\n    * [rvec.dot(vblock)](#rvecdotvblock)\n    * [rvec.dot(rvblock)](#rvecdotrvblock)\n    * [rvec.dot(cmat)](#rvecdotcmat)\n    * [rvec.dot(cvec)](#rvecdotcvec)\n    * [rvec.dot(crvec)](#rvecdotcrvec)\n    * [rvec.dot(cmblock)](#rvecdotcmblock)\n    * [rvec.dot(cvblock)](#rvecdotcvblock)\n    * [rvec.dot(crvblock)](#rvecdotcrvblock)\n    * [rvec.asDiagonal()](#rvecasdiagonal)\n    * [rvec.normalize()](#rvecnormalize)\n    * [rvec.maxCoeff()](#rvecmaxcoeff)\n    * [rvec.maxCoeff(obj)](#rvecmaxcoeffobj)\n    * [rvec.maxCoeff(func)](#rvecmaxcoefffunc)\n    * [rvec.minCoeff()](#rvecmincoeff)\n    * [rvec.minCoeff(obj)](#rvecmincoeffobj)\n    * [rvec.minCoeff(func)](#rvecmincoefffunc)\n* [Complex Row Vector](#complex-row-vector) **inherits from CMatrix**\n  * [Complex Row Vector Class Methods](#complex-row-vector-class-methods)\n    * [CRowVector(mat)](#crowvectormat)\n    * [CRowVector(vec)](#crowvectorvec)\n    * [CRowVector(rvec)](#crowvectorrvec)\n    * [CRowVector(mblock)](#crowvectormblock)\n    * [CRowVector(vblock)](#crowvectorvblock)\n    * [CRowVector(rvblock)](#crowvectorrvblock)\n    * [CRowVector(cmat)](#crowvectorcmat)\n    * [CRowVector(cvec)](#crowvectorcvec)\n    * [CRowVector(crvec)](#crowvectorcrvec)\n    * [CRowVector(cmblock)](#crowvectorcmblock)\n    * [CRowVector(cvblock)](#crowvectorcvblock)\n    * [CRowVector(crvblock)](#crowvectorcrvblock)\n    * [CRowVector(cols)](#crowvectorcols)\n    * [CRowVector(comp_array)](#crowvectorcomp_array)\n    * [CRowVector.Constant(cols, scalar)](#crowvectorconstantcols-scalar)\n    * [CRowVector.Constant(cols, comp)](#crowvectorconstantcols-comp)\n  * [Complex Row Vector Instance Methods](#complex-row-vector-instance-methods)\n    * [crvec.set(col, comp)](#crvecsetcol-comp)\n    * [crvec.set(comp_array)](#crvecsetcomp_array)\n    * [crvec.get(col)](#crvecgetcol)\n    * [crvec.block(startCol, blockCols)](#crvecblockstartcol-blockcols)\n    * [crvec.head(n)](#crvecheadn)\n    * [crvec.tail(n)](#crvectailn)\n    * [crvec.dot(mat)](#crvecdotmat)\n    * [crvec.dot(vec)](#crvecdotvec)\n    * [crvec.dot(rvec)](#crvecdotrvec)\n    * [crvec.dot(mblock)](#crvecdotmblock)\n    * [crvec.dot(vblock)](#crvecdotvblock)\n    * [crvec.dot(rvblock)](#crvecdotrvblock)\n    * [crvec.dot(cmat)](#crvecdotcmat)\n    * [crvec.dot(cvec)](#crvecdotcvec)\n    * [crvec.dot(crvec)](#crvecdotcrvec)\n    * [crvec.dot(cmblock)](#crvecdotcmblock)\n    * [crvec.dot(cvblock)](#crvecdotcvblock)\n    * [crvec.dot(crvblock)](#crvecdotcrvblock)\n    * [crvec.asDiagonal()](#crvecasdiagonal)\n    * [crvec.normalize()](#crvecnormalize)\n* [Matrix Block](#matrix-block) **inherits from Matrix**\n  * [Matrix Block Class Methods](#matrix-block-class-methods)\n    * [MatrixBlock(mat, startRow, startCol, blockRows, blockCols)](#matrixblockmat-startrow-startcol-blockrows-blockcols)\n    * [MatrixBlock(mblock, startRow, startCol, blockRows, blockCols)](#matrixblockmblock-startrow-startcol-blockrows-blockcols)\n  * [Matrix Block Instance Methods](#matrix-block-instance-methods)\n* [Complex Matrix Block](#complex-matrix-block) **inherits from CMatrix**\n  * [Complex Matrix Block Class Methods](#complex-matrix-block-class-methods)\n    * [CMatrixBlock(cmat, startRow, startCol, blockRows, blockCols)](#cmatrixblockcmat-startrow-startcol-blockrows-blockcols)\n    * [CMatrixBlock(cmblock, startRow, startCol, blockRows, blockCols)](#cmatrixblockcmblock-startrow-startcol-blockrows-blockcols)\n  * [Complex Matrix Block Instance Methods](#complex-matrix-block-instance-methods)\n* [Vector Block](#vector-block) **inherits from Vector and MatrixBlock**\n  * [Vector Block Class Methods](#vector-block-class-methods)\n    * [VectorBlock(vec, startRow, blockRows)](#vectorblockvec-startrow-blockrows)\n    * [VectorBlock(vblock, startRow, blockRows)](#vectorblockvblock-startrow-blockrows)\n  * [Vector Block Instance Methods](#vector-block-instance-methods)\n* [Complex Vector Block](#complex-vector-block) **inherits from CVector and CMatrixBlock**\n  * [Complex Vector Block Class Methods](#complex-vector-block-class-methods)\n    * [CVectorBlock(cvec, startRow, blockRows)](#cvectorblockcvec-startrow-blockrows)\n    * [CVectorBlock(cvblock, startRow, blockRows)](#cvectorblockcvblock-startrow-blockrows)\n  * [Complex Vector Block Instance Methods](#complex-vector-block-instance-methods)\n* [Row Vector Block](#row-vector-block) **inherits from RowVector and MatrixBlock**\n  * [Row Vector Block Class Methods](#row-vector-block-class-methods)\n    * [RowVectorBlock(rvec, startCol, blockCols)](#rowvectorblockrvec-startcol-blockcols)\n    * [RowVectorBlock(rvblock, startCol, blockCols)](#rowvectorblockrvblock-startcol-blockcols)\n  * [Row Vector Block Instance Methods](#row-vector-block-instance-methods)\n* [Complex Row Vector Block](#complex-row-vector-block) **inherits from CRowVector and CMatrixBlock**\n  * [Complex Row Vector Block Class Methods](#complex-row-vector-block-class-methods)\n    * [CRowVectorBlock(crvec, startCol, blockCols)](#crowvectorblockcrvec-startcol-blockcols)\n    * [CRowVectorBlock(crvblock, startCol, blockCols)](#crowvectorblockcrvblock-startcol-blockcols)\n  * [Complex Row Vector Block Instance Methods](#complex-row-vector-block-instance-methods)\n* [Partial Pivoting LU](#partial-pivoting-lu)\n  * [Partial Pivoting LU Class Methods](#partial-pivoting-lu-class-methods)\n    * [PartialPivLU(mat)](#partialpivlumat)\n    * [PartialPivLU(mblock)](#partialpivlumblock)\n  * [Partial Pivoting LU Instance Methods](#partial-pivoting-lu-instance-methods)\n    * [pplu.permutationP()](#pplupermutationp)\n    * [pplu.martixL()](#pplumatrixl)\n    * [pplu.martixU()](#pplumatrixu)\n    * [pplu.determinant()](#ppludeterminant)\n    * [pplu.inverse()](#ppluinverse)\n    * [pplu.solve(mat)](#pplusolvemat)\n    * [pplu.solve(vec)](#pplusolvevec)\n* [Complex Partial Pivoting LU](#complex-partial-pivoting-lu)\n  * [Complex Partial Pivoting LU Class Methods](#complex-partial-pivoting-lu-class-methods)\n    * [CPartialPivLU(cmat)](#cpartialpivlucmat)\n    * [CPartialPivLU(cmblock)](#cpartialpivlucmblock)\n  * [Complex Partial Pivoting LU Instance Methods](#complex-partial-pivoting-lu-instance-methods)\n    * [cpplu.permutationP()](#cpplupermutationp)\n    * [cpplu.martixL()](#cpplumatrixl)\n    * [cpplu.martixU()](#cpplumatrixu)\n    * [cpplu.determinant()](#cppludeterminant)\n    * [cpplu.inverse()](#cppluinverse)\n    * [cpplu.solve(cmat)](#cpplusolvecmat)\n    * [cpplu.solve(cvec)](#cpplusolvecvec)\n* [Full Pivoting LU](#full-pivoting-lu)\n  * [Full Pivoting LU Class Methods](#full-pivoting-lu-class-methods)\n    * [FullPivLU(mat)](#fullpivlumat)\n    * [FullPivLU(mblock)](#fullpivlumblock)\n  * [Full Pivoting LU Instance Methods](#full-pivoting-lu-instance-methods)\n    * [fplu.permutationP()](#fplupermutationp)\n    * [fplu.permutationQ()](#fplupermutationq)\n    * [fplu.martixL()](#fplumatrixl)\n    * [fplu.martixU()](#fplumatrixu)\n    * [fplu.determinant()](#fpludeterminant)\n    * [fplu.inverse()](#fpluinverse)\n    * [fplu.isInvertible()](#fpluisinvertible)\n    * [fplu.solve(mat)](#fplusolvemat)\n    * [fplu.solve(vec)](#fplusolvevec)\n    * [fplu.rank()](#fplurank)\n    * [fplu.dimensionOfKernel()](#fpludimensionofkernel)\n    * [fplu.kernel()](#fplukernel)\n* [Complex Full Pivoting LU](#complex-full-pivoting-lu)\n  * [Complex Full Pivoting LU Class Methods](#complex-full-pivoting-lu-class-methods)\n    * [CFullPivLU(cmat)](#cfullpivlucmat)\n    * [CFullPivLU(cmblock)](#cfullpivlucmblock)\n  * [Complex Full Pivoting LU Instance Methods](#complex-full-pivoting-lu-instance-methods)\n    * [cfplu.permutationP()](#cfplupermutationp)\n    * [cfplu.permutationQ()](#cfplupermutationq)\n    * [cfplu.martixL()](#cfplumatrixl)\n    * [cfplu.martixU()](#cfplumatrixu)\n    * [cfplu.determinant()](#cfpludeterminant)\n    * [cfplu.inverse()](#cfpluinverse)\n    * [cfplu.isInvertible()](#cfpluisinvertible)\n    * [cfplu.solve(cmat)](#cfplusolvecmat)\n    * [cfplu.solve(cvec)](#cfplusolvecvec)\n    * [cfplu.rank()](#cfplurank)\n    * [cfplu.dimensionOfKernel()](#cfpludimensionofkernel)\n    * [cfplu.kernel()](#cfplukernel)\n\n## Complex\n\n### Complex Class Methods\n\n#### Complex(real, [imag])\n\n```js\nvar C = require('eigenjs').Complex\n  , c = new C(3, -4);\nconsole.log('c = %s', c);\n```\n\n```txt\nc = (3,-4)\n```\n\n#### Complex.polar(scalar, scalar)\n\n```js\nvar C = require('eigenjs').Complex\n  , rho = 5\n  , theta = -0.9272952180016122\n  , c = C.polar(rho, theta);\nconsole.log(c.conj().toString());\nconsole.log(c.real * Math.cos(c.imag));\nconsole.log(c.real * Math.sin(c.imag));\n```\n\n```txt\n(5,0.927295)\n3.0000000000000004\n-3.9999999999999996\n```\n\n#### Complex.cos(scalar)\n#### Complex.cos(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(Math.PI/4, 0)\n  , c2 = C.cos(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(0.707107,-0)\n```\n\n#### Complex.cosh(scalar)\n#### Complex.cosh(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(0, 0)\n  , c2 = C.cosh(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(1,0)\n```\n\n#### Complex.exp(scalar)\n#### Complex.exp(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(1, 0)\n  , c2 = C.exp(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(2.71828,0)\n```\n\n#### Complex.log(scalar)\n#### Complex.log(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(Math.E, 0)\n  , c2 = C.log(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(1,0)\n```\n\n#### Complex.log10(scalar)\n#### Complex.log10(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(1000, 0)\n  , c2 = C.log10(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(3,0)\n```\n\n#### Complex.pow(scalar, scalar)\n#### Complex.pow(scalar, comp)\n#### Complex.pow(comp, scalar)\n#### Complex.pow(comp, comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c = C.pow(2, 3)\nconsole.log(c.toString());\n```\n\n```txt\n(8,0)\n```\n\n#### Complex.sin(scalar)\n#### Complex.sin(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(Math.PI/4, 0)\n  , c2 = C.sin(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(0.707107,0)\n```\n\n#### Complex.sinh(scalar)\n#### Complex.sinh(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(0, 0)\n  , c2 = C.sinh(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(0,0)\n```\n\n#### Complex.sqrt(scalar)\n#### Complex.sqrt(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(9, 0)\n  , c2 = C.sqrt(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(3,0)\n```\n\n#### Complex.tan(scalar)\n#### Complex.tan(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(Math.PI/4, 0)\n  , c2 = C.tan(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(1,0)\n```\n\n#### Complex.tanh(scalar)\n#### Complex.tanh(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(Infinity, 0)\n  , c2 = C.tanh(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(1,0)\n```\n\n#### Complex.acos(scalar)\n#### Complex.acos(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(1, 0)\n  , c2 = C.acos(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(0,0)\n```\n\n#### Complex.acosh(scalar)\n#### Complex.acosh(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(1.54308, 0)\n  , c2 = C.acosh(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(0.999999,0)\n```\n\n#### Complex.asin(scalar)\n#### Complex.asin(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(1, 0)\n  , c2 = C.asin(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(1.5708,7.82511e-09)\n```\n\n#### Complex.asinh(scalar)\n#### Complex.asinh(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(1, 0)\n  , c2 = C.asinh(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(0.881374,0)\n```\n\n#### Complex.atan(scalar)\n#### Complex.atan(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(Infinity, 0)\n  , c2 = C.atan(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(1.5708,0)\n```\n\n#### Complex.atanh(scalar)\n#### Complex.atanh(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(1, 0)\n  , c2 = C.atanh(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(inf,0)\n```\n\n### Complex Instance Methods\n\n#### comp.abs()\n\n```js\nvar C = require('eigenjs').Complex\n  , c = new C(3, -4);\nconsole.log(c.abs());\n```\n\n```txt\n5\n```\n\n#### comp.arg()\n\n```js\nvar C = require('eigenjs').Complex\n  , c = new C(3, -4);\nconsole.log(c.arg());\nconsole.log('(%d,%d)', c.abs() * Math.cos(c.arg()), c.abs() * Math.sin(c.arg()));\n```\n\n```txt\n-0.9272952180016122\n(3.0000000000000004,-3.9999999999999996)\n```\n\n#### comp.norm()\n\n```js\nvar C = require('eigenjs').Complex\n  , c = new C(3, -4);\nconsole.log(c.norm());\n```\n\n```txt\n25\n```\n\n#### comp.conj()\n\n```js\nvar C = require('eigenjs').Complex\n  , c = new C(3, -4);\nconsole.log(c.conj().toString());\n```\n\n```txt\n(3,4)\n```\n\n#### comp.proj(scalar)\n#### comp.proj(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(0, -Infinity)\n  , c2 = C.proj(c1);\nconsole.log(c2.toString());\n```\n\n```txt\n(inf, -0)\n```\n\n#### comp.add(scalar)\n#### comp.add(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(3, 0)\n  , c2 = new C(0, 4)\n  , c3 = c1.add(c2);\nconsole.log(c3.toString());\n```\n\n```txt\n(3,4)\n```\n\n#### comp.adda(scalar)\n#### comp.adda(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(3, 0)\n  , c2 = new C(0, 4);\nc1.adda(c2);\nconsole.log(c1.toString());\n```\n\n```txt\n(3,4)\n```\n\n#### comp.sub(scalar)\n#### comp.sub(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(3, 4)\n  , c2 = new C(2, -3)\n  , c3 = c1.sub(c2);\nconsole.log(c3.toString());\n```\n\n```txt\n(1,7)\n```\n\n#### comp.suba(scalar)\n#### comp.suba(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(5, 8)\n  , c2 = new C(-3, 4);\nc1.suba(c2);\nconsole.log(c1.toString());\n```\n\n```txt\n(8,4)\n```\n\n#### comp.mul(scalar)\n#### comp.mul(comp)\n#### comp.mul(mat)\n#### comp.mul(vec)\n#### comp.mul(rvec)\n#### comp.mul(mblock)\n#### comp.mul(vblock)\n#### comp.mul(rvblock)\n#### comp.mul(cmat)\n#### comp.mul(cvec)\n#### comp.mul(crvec)\n#### comp.mul(cmblock)\n#### comp.mul(cvblock)\n#### comp.mul(crvblock)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(1, 8)\n  , c2 = new C(6, 4)\n  , c3 = c1.mul(c2);\nconsole.log(c3.toString());\n```\n\n```txt\n(-26,52)\n```\n\n#### comp.mula(scalar)\n#### comp.mula(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(3, 1)\n  , c2 = new C(2, 4)\nc1.mula(c2);\nconsole.log(c1.toString());\n```\n\n```txt\n(2,14)\n```\n\n#### comp.div(scalar)\n#### comp.div(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(4, 8)\n  , c2 = new C(2, 0)\n  , c3 = c1.div(c2);\nconsole.log(c3.toString());\n```\n\n```txt\n(2,4)\n```\n\n#### comp.diva(scalar)\n#### comp.diva(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(3, 9)\n  , c2 = new C(9, 0)\nc1.diva(c2);\nconsole.log(c2.toString());\n```\n\n```txt\n(0.333333,1)\n```\n\n#### comp.equals(scalar)\n#### comp.equals(comp)\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(1, 0)\n  , c2 = c1.conj();\nconsole.log(c1.equals(c2));\n```\n\n```txt\ntrue\n```\n#### comp.isApprox(comp, [prec = 1e-12])\n\n```js\nvar C = require('eigenjs').Complex\n  , c1 = new C(1/3, 0)\n  , c2 = new C(0.3333, 0);\nconsole.log(c1.isApprox(c2, 1e-3));\n```\n\n```txt\ntrue\n```\n\n##### comp.toString()\n\n```js\nvar C = require('eigenjs').Complex\n  , c = new C(3, -4);\nconsole.log(c.toString());\n```\n\n```txt\n(3,-4)\n```\n\n### Complex Properties\n\n#### comp.real\n#### comp.imag\n\n```js\nvar C = require('eigenjs').Complex\n  , c = new C(3, -4);\nc.real = 6;\nc.imag = 8;\nconsole.log('(%d,%d)', c.real, c.imag);\n```\n\n```txt\n(6,8)\n```\n\n## Matrix\n\n### Matrix Class Methods\n\n#### Matrix(mat)\n#### Matrix(vec)\n#### Matrix(rvec)\n#### Matrix(mblock)\n#### Matrix(vblock)\n#### Matrix(rvblock)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Random(2, 3)\n  , mat2 = new M(mat);\nconsole.log('mat =\\n%s\\n', mat);\nconsole.log('mat2 =\\n%s', mat2);\n```\n\n```txt\nmat =\n  0.381981  -0.373117  -0.866239\n-0.0467884  -0.981309  -0.885573\n\nmat2 =\n  0.381981  -0.373117  -0.866239\n-0.0467884  -0.981309  -0.885573\n```\n\n#### Matrix(rows, cols)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(2, 3);\nconsole.log('mat =\\n%s', mat);\n```\n\n```txt\nmat =\n0 0 0\n0 0 0\n```\n\n#### Matrix.Zero(n)\n#### Matrix.Zero(rows, cols)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = M.Zero(2, 3);\nconsole.log('mat = \\n%s', mat);\n```\n\n```txt\nmat =\n0 0 0\n0 0 0\n```\n\n#### Matrix.Ones(n)\n#### Matrix.Ones(rows, cols)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = M.Ones(2, 3);\nconsole.log('mat = \\n%s', mat);\n```\n\n```txt\nmat =\n1 1 1\n1 1 1\n```\n\n#### Matrix.Constant(rows, cols, scalar)\n#### Matrix.Constant(rows, cols, comp)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = M.Constant(4, 4, 0.6);\nconsole.log('mat = \\n%s', mat);\n```\n\n```txt\nmat =\n0.6 0.6 0.6 0.6\n0.6 0.6 0.6 0.6\n0.6 0.6 0.6 0.6\n0.6 0.6 0.6 0.6\n```\n\n#### Matrix.Random(n)\n#### Matrix.Random(rows, cols)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = M.Random(2, 3);\nconsole.log('mat = \\n%s', mat);\n```\n\n```txt\nmat =\n-0.421952 -0.671276  0.547419\n 0.260209  -0.13622  0.464891\n```\n\n#### Matrix.Identity(n)\n#### Matrix.Identity(rows, cols)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = M.Identity(2)\n  , mat2 = M.Identity(2, 3);\nconsole.log('mat1 = \\n%s', mat1);\nconsole.log('mat2 = \\n%s', mat2);\n```\n\n```txt\nmat1 =\n1 0\n0 1\nmat2 =\n1 0 0\n0 1 0\n```\n\n### Matrix Instance Methods\n\n#### mat.rows()\n#### mat.cols()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(2, 3);\nconsole.log(mat.rows());\nconsole.log(mat.cols());\n```\n\n```txt\n2\n3\n```\n\n#### mat.set(row, col, scalar)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(2, 2);\nmat.set(0, 0, 1)\n   .set(0, 1, 2)\n   .set(1, 0, 3)\n   .set(1, 1, 4);\nconsole.log('mat = \\n%s', mat);\n```\n\n```txt\nmat =\n1 2\n3 4\n```\n\n#### mat.set(scalar_array)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3);\nmat.set([\n  1, 2, 3,\n  4, 5, 6,\n  7, 8, 9\n]);\nconsole.log('mat = \\n%s', mat);\n```\n\n```txt\nmat =\n1 2 3\n4 5 6\n7 8 9\n```\n\n#### mat.get(row, col)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(2, 2);\nmat.set([\n  1, 2,\n  3, 4\n]);\nconsole.log(mat.get(0, 0) + ' ' + mat.get(0, 1));\nconsole.log(mat.get(1, 0) + ' ' + mat.get(1, 1));\n```\n\n```txt\n1 2\n3 4\n```\n\n#### mat.assign(mat)\n#### mat.assign(vec)\n#### mat.assign(rvec)\n#### mat.assign(mblock)\n#### mat.assign(vblock)\n#### mat.assign(rvblock)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = M.Random(4, 4);\nmat.assign(M.Zero(4, 4));\nconsole.log('mat = \\n%s', mat);\n```\n\n```txt\nmat =\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n```\n\n#### mat.value()\n\nReturns the unique coefficient of a 1x1 expression\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = M.Random(1, 1);\nconsole.log('%d', mat.value());\n```\n\n```txt\n-0.7131525574778916\n```\n\n#### mat.setZero()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Random(3, 3);\nconsole.log('mat =\\n%s\\n', mat);\nconsole.log('mat =\\n%s', mat.setZero());\n```\n\n```txt\nmat =\n 0.244911 -0.752925 -0.562905\n 0.215088 -0.406688 -0.750836\n 0.983236  0.800109  0.695126\n\nmat =\n0 0 0\n0 0 0\n0 0 0\n```\n\n#### mat.setOnes()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Zero(3, 3);\nconsole.log('mat =\\n%s\\n', mat);\nconsole.log('mat =\\n%s', mat.setOnes());\n```\n\n```txt\nmat =\n0 0 0\n0 0 0\n0 0 0\n\nmat =\n1 1 1\n1 1 1\n1 1 1\n```\n\n#### mat.setConstant(scalar)\n\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Zero(3, 3);\nconsole.log('mat =\\n%s\\n', mat);\nconsole.log('mat =\\n%s', mat.setConstant(0.6));\n```\n\n```txt\nmat =\n0 0 0\n0 0 0\n0 0 0\n\nmat =\n0.6 0.6 0.6\n0.6 0.6 0.6\n0.6 0.6 0.6\n```\n\n#### mat.setRandom()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Zero(3, 3);\nconsole.log('mat =\\n%s\\n', mat);\nconsole.log('mat =\\n%s', mat.setRandom());\n```\n\n```txt\nmat =\n0 0 0\n0 0 0\n0 0 0\n\nmat =\n -0.292434 -0.0673437   0.283946\n -0.938224   0.154289   0.283845\n -0.725773  -0.862362   0.583097\n```\n\n#### mat.setIdentity()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Zero(3, 3);\nconsole.log('mat =\\n%s\\n', mat);\nconsole.log('mat =\\n%s', mat.setIdentity());\n```\n\n```txt\nmat =\n0 0 0\n0 0 0\n0 0 0\n\nmat =\n1 0 0\n0 1 0\n0 0 1\n```\n\n#### mat.setDiagonal(index, vec)\n#### mat.setDiagonal(index, rvec)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Zero(3, 3)\n  , dia = mat.diagonal(1);\nconsole.log('mat =\\n%s\\n', mat);\ndia.setRandom();\nconsole.log('mat =\\n%s', mat.setDiagonal(1, dia));\n```\n\n```txt\nmat =\n0 0 0\n0 0 0\n0 0 0\n\nmat =\n        0 -0.294006         0\n        0         0  0.634569\n        0         0         0\n```\n\n#### mat.block(startRow, startCol, blockRows, blockCols)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Identity(4, 4)\n  , mblock = mat.block(1, 1, 2, 2);\nmblock.assign(M.Random(2, 2));\nconsole.log('mat =\\n%s', mat);\n```\n\n```txt\nmat =\n        1         0         0         0\n        0 -0.822352  0.533723         0\n        0  0.721993  0.287646         0\n        0         0         0         1\n```\n\n#### mat.row(n)\n\n```js\nvar Eigen = require('eigenjs')\n  , M = Eigen.Matrix\n  , RV = Eigen.RowVector\n  , mat = new M.Zero(3, 3)\n  , mblock = mat.row(1);\nmblock.assign(RV.Random(3));\nconsole.log('mat =\\n%s', mat);\n```\n\n```txt\nmat =\n        0         0         0\n-0.843392 -0.891355  0.991578\n        0         0         0\n```\n\n#### mat.col(n)\n\n```js\nvar Eigen = require('eigenjs')\n  , M = Eigen.Matrix\n  , V = Eigen.Vector\n  , mat = new M.Zero(3, 3)\n  , mblock = mat.col(1);\nmblock.assign(V.Random(3));\nconsole.log('mat =\\n%s', mat);\n```\n\n```txt\nmat =\n         0   0.674939          0\n         0  -0.303923          0\n         0 -0.0302965          0\n```\n\n#### mat.topRows(n)\n\nReturns a block consisting of the top rows of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5,  3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.topRows(2));\n```\n\n```txt\n 7  9 -5  3\n-2 -6  1  0\n```\n\n#### mat.bottomRows(n)\n\nReturns a block consisting of the bottom rows of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5,  3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.bottomRows(2));\n```\n\n```txt\n 6 -3  0  9\n 6  6  3  9\n```\n\n#### mat.middleRows(startRow, n)\n\nReturns a block consisting of a range of rows of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5,  3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.middleRows(1, 2));\n```\n\n```txt\n-2 -6  1  0\n 6 -3  0  9\n```\n\n#### mat.leftCols(n)\n\nReturns a block consisting of the left columns of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5,  3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.leftCols(2));\n```\n\n```txt\n 7  9\n-2 -6\n 6 -3\n 6  6\n```\n\n#### mat.rightCols(n)\n\nReturns a block consisting of the right columns of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5,  3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.rightCols(2));\n```\n\n```txt\n-5  3\n 1  0\n 0  9\n 3  9\n```\n\n#### mat.middleCols(startCol, n)\n\nReturns a block consisting of a range of columns of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5,  3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.middleCols(1, 2));\n```\n\n```txt\n 9 -5\n-6  1\n-3  0\n 6  3\n```\n\n#### mat.topLeftCorner(cRows, cCols)\n\nReturns a block consisting of a top-left corner of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5,  3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.topLeftCorner(2, 2));\n```\n\n```txt\n 7  9\n-2 -6\n```\n\n#### mat.topRightCorner(cRows, cCols)\n\nReturns a block consisting of a top-right corner of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5,  3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.topRightCorner(2, 2));\n```\n\n```txt\n-5  3\n 1  0\n```\n\n#### mat.bottomLeftCorner(cRows, cCols)\n\nReturns a block consisting of a bottom-left corner of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5,  3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.bottomLeftCorner(2, 2));\n```\n\n```txt\n 6 -3\n 6  6\n```\n\n#### mat.bottomRightCorner(cRows, cCols)\n\nReturns a block consisting of a bottom-right corner of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5,  3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.bottomRightCorner(2, 2));\n```\n\n```txt\n0 9\n3 9\n```\n\n#### mat.replicate(rowFactor, colFactor)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 1).set([\n             7,\n            -2,\n             6\n          ]);\nconsole.log('%s', mat.replicate(2, 5));\n```\n\n```txt\n 7  7  7  7  7\n-2 -2 -2 -2 -2\n 6  6  6  6  6\n 7  7  7  7  7\n-2 -2 -2 -2 -2\n 6  6  6  6  6\n```\n\n#### mat.add(mat)\n#### mat.add(vec)\n#### mat.add(rvec)\n#### mat.add(mblock)\n#### mat.add(vblock)\n#### mat.add(rvblock)\n#### mat.add(cmat)\n#### mat.add(cvec)\n#### mat.add(crvec)\n#### mat.add(cmblock)\n#### mat.add(cvblock)\n#### mat.add(crvblock)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M(2, 2)\n  , mat2 = new M(2, 2)\n  , mat3;\nmat1.set([\n  1, 3,\n  2, 4\n]);\nmat2.set([\n  5, 6,\n  7, 8\n]);\nmat3 = mat1.add(mat2);\nconsole.log('mat3 = \\n%s', mat3);\n```\n\n```txt\nmat3 =\n 6  9\n 9 12\n```\n\n#### mat.adda(mat)\n#### mat.adda(vec)\n#### mat.adda(rvec)\n#### mat.adda(mblock)\n#### mat.adda(vblock)\n#### mat.adda(rvblock)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M(2, 2)\n  , mat2 = new M(2, 2);\nmat1.set([\n  1, 3,\n  2, 4\n]);\nmat2.set([\n  5, 6,\n  7, 8\n]);\nmat1.adda(mat2);\nconsole.log('mat1 = \\n%s', mat1);\n```\n\n```txt\nmat1 =\n 6  9\n 9 12\n```\n\n#### mat.sub(mat)\n#### mat.sub(vec)\n#### mat.sub(rvec)\n#### mat.sub(mblock)\n#### mat.sub(vblock)\n#### mat.sub(rvblock)\n#### mat.sub(cmat)\n#### mat.sub(cvet)\n#### mat.sub(crvet)\n#### mat.sub(cmblock)\n#### mat.sub(cvblock)\n#### mat.sub(crvblock)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M(2, 2)\n  , mat2 = new M(2, 2)\n  , mat3;\nmat1.set([\n  1, 3,\n  2, 4\n]);\nmat2.set([\n  5, 6,\n  7, 8\n]);\nmat3 = mat1.sub(mat2);\nconsole.log('mat3 = \\n%s', mat3);\n```\n\n```txt\nmat3 =\n-4 -3\n-5 -4\n```\n\n#### mat.suba(mat)\n#### mat.suba(vec)\n#### mat.suba(rvec)\n#### mat.suba(mblock)\n#### mat.suba(vblock)\n#### mat.suba(rvblock)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M(2, 2)\n  , mat2 = new M(2, 2);\nmat1.set([\n  1, 3,\n  2, 4\n]);\nmat2.set([\n  5, 6,\n  7, 8\n]);\nmat1.suba(mat2);\nconsole.log('mat1 = \\n%s', mat1);\n```\n\n```txt\nmat1 =\n-4 -3\n-5 -4\n```\n\n#### mat.mul(scalar)\n#### mat.mul(comp)\n#### mat.mul(mat)\n#### mat.mul(vec)\n#### mat.mul(rvec)\n#### mat.mul(mblock)\n#### mat.mul(vblock)\n#### mat.mul(rvblock)\n#### mat.mul(cmat)\n#### mat.mul(cvec)\n#### mat.mul(crvec)\n#### mat.mul(cvblock)\n#### mat.mul(crvblock)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M(2, 3)\n  , vec = new M(3, 1)\n  , mat2;\nmat1.set([\n  1, 2, 3,\n  4, 5, 6\n]);\nvec.set([\n  1,\n  6,\n  8\n]);\nmat2 = mat1.mul(vec);\nconsole.log('mat2 = \\n%s', mat2);\n```\n\n```txt\nmat2 =\n37\n82\n```\n\n#### mat.mula(scalar)\n#### mat.mula(mat)\n#### mat.mula(vec)\n#### mat.mula(rvec)\n#### mat.mula(mblock)\n#### mat.mula(vblock)\n#### mat.mula(rvblock)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(2, 3)\n  , vec = new M(3, 1);\nmat.set([\n  1, 2, 3,\n  4, 5, 6\n]);\nvec.set([\n  1,\n  6,\n  8\n]);\nmat.mula(vec);\nconsole.log('mat = \\n%s', mat);\n```\n\n```txt\nmat =\n37\n82\n```\n\n#### mat.div(scalar)\n#### mat.div(comp)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M(2, 2)\n  , mat2;\nmat1.set([\n  1, 2,\n  3, 4\n]);\nmat2 = mat1.div(2);\nconsole.log('mat2 = \\n%s', mat2);\n```\n\n```txt\nmat2 =\n0.5   1\n1.5   2\n```\n\n#### mat.diva(scalar)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(2, 2);\nmat.set([\n  1, 2,\n  3, 4\n]);\nmat.diva(2);\nconsole.log('mat = \\n%s', mat);\n```\n\n```txt\nmat =\n0.5   1\n1.5   2\n```\n\n#### mat.transpose()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M.Random(3, 2)\n  , mat2 = mat1.transpose();\nconsole.log('mat1 = \\n%s', mat1);\nconsole.log('mat2 = \\n%s', mat2);\n```\n\n```txt\nmat1 =\n -0.112813  -0.325566\n-0.0500345   0.213005\n -0.930346  -0.022705\nmat2 =\n -0.112813 -0.0500345  -0.930346\n -0.325566   0.213005  -0.022705\n```\n\n#### mat.conjugate()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M.Random(2, 2)\n  , mat2 = mat1.conjugate();\nconsole.log(mat1.equals(mat2));\n```\n\n```txt\ntrue\n```\n\n#### mat.adjoint()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M.Random(3, 2)\n  , mat2 = mat1.adjoint();\nconsole.log('mat1 = \\n%s', mat1);\nconsole.log('mat2 = \\n%s', mat2);\n```\n\n```txt\nmat1 =\n 0.997487 0.0670765\n 0.770148 -0.645138\n -0.12185 -0.835853\nmat2 =\n 0.997487  0.770148  -0.12185\n0.0670765 -0.645138 -0.835853\n```\n\n#### mat.determinant()\n\nReturns the determinant of this matrix. This method uses class [PartialPivLU](#partial-pivoting-lu).\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Random(2, 2);\nconsole.log('mat = \\n%s\\n', mat);\nconsole.log('det = %d', mat.determinant());\n```\n\n```txt\nmat =\n 0.132371 -0.813862\n 0.758326  -0.58171\n\ndet = 0.540171350604003\n```\n\n#### mat.inverse()\n\nReturns the matrix inverse of this matrix. This method uses class [PartialPivLU](#partial-pivoting-lu).\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3).set([\n            1, 2, 3,\n            0, 1, 4,\n            5, 6, 0\n          ])\n  , inv = mat.inverse();\nconsole.log('inv = \\n%s', inv);\n```\n\n```txt\ninv =\n-24  18   5\n 20 -15  -4\n -5   4   1\n```\n\n#### mat.trace()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(2, 3).set([\n            1, 2, 3,\n            4, 5, 6\n          ])\n  , tr = mat.trace();\nconsole.log('mat = \\n%s\\n', mat);\nconsole.log('tr = ', tr);\n```\n\n```txt\nmat =\n1 2 3\n4 5 6\n\ntr =  6\n```\n\n#### mat.diagonal([index = 0])\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(4, 4).set([\n             7,  9, -5, -3,\n            -2, -6,  1,  0,\n             6, -3,  0,  9,\n             6,  6,  3,  9\n          ]);\nconsole.log('%s', mat.diagonal(1).transpose());\nconsole.log('%s', mat.diagonal(-2).transpose());\n```\n\n```txt\n9 1 9\n6 6\n```\n\n#### mat.norm()\n\nReturns the Frobenius norm.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3).set([\n            1, 2, 3,\n            4, 5, 6,\n            7, 8, 9\n          ]);\nconsole.log('%d', mat.norm());\n```\n\n```txt\n16.881943016134134\n```\n\n#### mat.redux(func)\n\n* func `Function` The result of a full redux operation on the whoie matrix or vector using `func`.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3).set([\n            1, 2, 3,\n            4, 5, 6,\n            7, 8, 9\n          ])\n  , func = function(a, b) { return a + b; };\nconsole.log('%d', mat.redux(func));\n```\n\n```txt\n45\n```\n\n#### mat.sum()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3).set([\n            1, 2, 3,\n            4, 5, 6,\n            7, 8, 9\n          ]);\nconsole.log('%d', mat.sum());\n```\n\n```txt\n45\n```\n\n#### mat.prod()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3).set([\n            1, 2, 3,\n            4, 5, 6,\n            7, 8, 9\n          ]);\nconsole.log('%d', mat.prod());\n```\n\n```txt\n362880\n```\n\n#### mat.mean()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3).set([\n            1, 2, 3,\n            4, 5, 6,\n            7, 8, 9\n          ]);\nconsole.log('%d', mat.mean());\n```\n\n```txt\n5\n```\n\n#### mat.visit(func)\n\n* func `Function` Applies the `func` to the whole coefficients of the matrix or vector.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3).set([\n            1, 2, 3,\n            4, 5, 6,\n            7, 8, 9\n          ]);\nmat.visit(function(value, row, col) {\n  console.log('mat(%d, %d) = %d', row, col, value);\n});\n```\n\n```txt\nmat(0, 0) = 1\nmat(1, 0) = 4\nmat(2, 0) = 7\nmat(0, 1) = 2\nmat(1, 1) = 5\nmat(2, 1) = 8\nmat(0, 2) = 3\nmat(1, 2) = 6\nmat(2, 2) = 9\n```\n\n#### mat.maxCoeff()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Random(3, 3);\nconsole.log('mat = \\n%s\\n', mat);\nconsole.log('max = %d', mat.maxCoeff());\n```\n\n```txt\nmat =\n  0.175793  -0.547068  -0.959701\n  0.561311  -0.579446   0.297471\n-0.0382309  -0.743676  -0.411312\n\nmax = 0.5613114636211243\n```\n\n#### mat.maxCoeff(obj)\n\n+ obj `Object`\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Random(3, 3)\n  , obj = {};\nconsole.log('mat = \\n%s\\n', mat);\nconsole.log('max = %s', mat.maxCoeff(obj));\nconsole.log('obj = %s', JSON.stringify(obj));\n```\n\n```txt\nmat =\n -0.68294  0.690895 -0.698356\n-0.174138 -0.119934  0.733219\n-0.743578  0.262349 -0.795382\n\nmax = 0.7332185766348702\nobj = {\"maxCoeff\":0.7332185766348702,\"rowId\":1,\"colId\":2}\n```\n\n#### mat.maxCoeff(func)\n\n+ func `Function`\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Random(3, 3)\n  , func = function(rowId, colId) {\n             console.log('rowId = %d, colId = %d', rowId, colId);\n           };\nconsole.log('mat = \\n%s\\n', mat);\nconsole.log('max = %d', mat.maxCoeff(func));\n```\n\n```txt\nmat =\n-0.552622 -0.355055  0.141004\n0.0814275   0.58272  -0.13819\n 0.552011 -0.217758 -0.551142\n\nrowId = 1, colId = 1\nmax = 0.5827204285109044\n```\n\n#### mat.minCoeff()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Random(3, 3);\nconsole.log('mat = \\n%s\\n', mat);\nconsole.log('min = %d', mat.minCoeff());\n```\n\n```txt\nmat =\n-0.725041  0.511321   0.29833\n 0.233345  -0.22101 0.0355704\n-0.167162 -0.514649 -0.168438\n\nmin = -0.7250411527813604\n```\n\n#### mat.minCoeff(obj)\n\n+ obj `Object`\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Random(3, 3)\n  , obj = {};\nconsole.log('mat = \\n%s\\n', mat);\nconsole.log('min = %d', mat.minCoeff(obj));\nconsole.log('obj = %s', JSON.stringify(obj));\n```\n\n```txt\nmat =\n  0.74568  0.870563  -0.82341\n 0.636928 -0.455949  0.944912\n 0.855648  0.872564  -0.87055\n\nmin = -0.8705498761825962\nobj = {\"minCoeff\":-0.8705498761825962,\"rowId\":2,\"colId\":2}\n```\n\n#### mat.minCoeff(func)\n\n+ func `Function`\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Random(3, 3)\n  , func = function(rowId, colId) {\n             console.log('rowId = %d, colId = %d', rowId, colId);\n           };\nconsole.log('mat = \\n%s\\n', mat);\nconsole.log('min = %d', mat.minCoeff(func));\n```\n\n```txt\n 0.371743  0.261372  0.144462\n-0.111958  0.884582  -0.02937\n 0.314765 -0.823458  0.378298\n\nrowId = 2, colId = 1\nmin = -0.8234578174648144\n```\n\n#### mat.equals(mat)\n#### mat.equals(vec)\n#### mat.equals(rvec)\n#### mat.equals(mblock)\n#### mat.equals(vblock)\n#### mat.equals(rvblock)\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M(2, 2)\n  , mat2 = new M(2, 2)\n  , mat3 = new M(2, 2);\nmat1.set([\n  1, 2,\n  3, 4\n]);\nmat2.set([\n  1, 0,\n  0, 1\n]);\nmat3.set([\n  0, 2,\n  3, 3\n]);\nconsole.log(mat1.equals(mat2.add(mat3)));\n```\n\n```txt\ntrue\n```\n\n#### mat.isApprox(mat, [prec = 1e-12])\n#### mat.isApprox(vec, [prec = 1e-12])\n#### mat.isApprox(rvec, [prec = 1e-12])\n#### mat.isApprox(mblock, [prec = 1e-12])\n#### mat.isApprox(vblock, [prec = 1e-12])\n#### mat.isApprox(rvblock, [prec = 1e-12])\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M(2, 2)\n  , mat2 = new M(2, 2);\nmat1.set([\n  1, 3,\n  5, 7\n]).diva(11);\nmat2.set([\n  0.091, 0.273,\n  0.455, 0.636\n]);\nconsole.log(mat1.isApprox(mat2, 1e-3));\n```\n\n```txt\ntrue\n```\n\n#### mat.isSquare()\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat1 = new M(4, 4)\n  , mat2 = new M(3, 2);\nconsole.log(mat1.isSquare());\nconsole.log(mat2.isSquare());\n```\n\n```txt\ntrue\nfalse\n```\n\n#### mat.isZero([prec = 1e-12])\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(2, 3).set([\n            0,      0, 0.0001,\n            0,      0,      0\n          ]);\nconsole.log(mat.isZero());\nconsole.log(mat.isZero(1e-3));\n```\n\n```txt\nfalse\ntrue\n```\n\n#### mat.isOnes([prec = 1e-12])\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(2, 3).set([\n            1,      1, 1.0001,\n            1, 0.9997,      1\n          ]);\nconsole.log(mat.isOnes());\nconsole.log(mat.isOnes(1e-3));\n```\n\n```txt\nfalse\ntrue\n```\n\n#### mat.isIdentity([prec = 1e-12])\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3).set([\n            1,       0, 0.0001,\n            0,  0.9997,      0,\n            0,       0,      1\n          ]);\nconsole.log(mat.isIdentity());\nconsole.log(mat.isIdentity(1e-3));\n```\n\n```txt\nfalse\ntrue\n```\n\n#### mat.isDiagonal([prec = 1e-12])\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3).set([\n            1e+04,     0,     1,\n                0, 1e+04,     0,\n                0,     0, 1e+04\n          ]);\nconsole.log(mat.isDiagonal());\nconsole.log(mat.isDiagonal(1e-3));\n```\n\n```txt\nfalse\ntrue\n```\n\n#### mat.all()\n\nReturns true if all coefficients are true.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Constant(3, 3, 1);\nconsole.log('mat = \\n%s\\n%s\\n', mat, mat.all());\nmat.set(0, 0, 0);\nconsole.log('mat = \\n%s\\n%s', mat, mat.all());\n```\n\n```txt\nmat =\n1 1 1\n1 1 1\n1 1 1\ntrue\n\nmat =\n0 1 1\n1 1 1\n1 1 1\nfalse\n```\n\n#### mat.any()\n\nReturns true if at least one coefficient is true.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Zero(3, 3);\nconsole.log('mat = \\n%s\\n%s\\n', mat, mat.any());\nmat.set(0, 0, 1);\nconsole.log('mat = \\n%s\\n%s', mat, mat.any());\n```\n\n```txt\nmat =\n0 0 0\n0 0 0\n0 0 0\nfalse\n\nmat =\n1 0 0\n0 0 0\n0 0 0\ntrue\n```\n\n#### mat.count()\n\nReturns the number of coefficients which evaluate to true.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Zero(3, 3);\nmat.block(0, 1, 3, 2).setOnes();\nconsole.log('mat = \\n%s\\n', mat);\nconsole.log('%d', mat.count());\n```\n\n```txt\nmat =\n0 1 1\n0 1 1\n0 1 1\n\n6\n```\n\n#### mat.allFinite()\n\nReturns true if *this contains only finite numbers, i.e., no NaN and no +/-INF values.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Random(3, 3);\nconsole.log('mat = \\n%s\\n%s\\n', mat, mat.allFinite());\nmat.set(0, 0, Infinity);\nconsole.log('mat = \\n%s\\n%s', mat, mat.allFinite());\n```\n\n```txt\nmat =\n 0.202332  0.271506 -0.887678\n 0.592388 -0.806422  0.799406\n  0.26443  0.461303 -0.389755\ntrue\n\nmat =\n      inf  0.271506 -0.887678\n 0.592388 -0.806422  0.799406\n  0.26443  0.461303 -0.389755\nfalse\n```\n\n#### mat.hasNaN()\n\nReturns true if *this contains at least one Not A Number (NaN).\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M.Zero(3, 3);\nconsole.log('mat = \\n%s\\n%s\\n', mat, mat.hasNaN());\nmat.set(1, 1, NaN);\nconsole.log('mat = \\n%s\\n%s', mat, mat.hasNaN());\n```\n\n```txt\nmat =\n0 0 0\n0 0 0\n0 0 0\nfalse\n\nmat =\n  0   0   0\n  0 nan   0\n  0   0   0\ntrue\n```\n\n#### mat.partialPivLu()\n\nReturns the partial-pivoting LU decomposition of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(3, 3).set([\n            1, 4, 5,\n            4, 2, 6,\n            5, 6, 3\n          ])\n  , pplu = mat.partialPivLu();\nconsole.log('P = \\n%s\\n', pplu.permutationP());\nconsole.log('L = \\n%s\\n', pplu.matrixL());\nconsole.log('U = \\n%s', pplu.matrixU());\n```\n\n```txt\nP =\n0 0 1\n0 1 0\n1 0 0\n\nL =\n  1   0   0\n0.8   1   0\n0.2  -1   1\n\nU =\n   5    6    3\n   0 -2.8  3.6\n   0    0    8\n```\n\n#### mat.fullPivLu()\n\nReturns the full-pivoting LU decomposition of *this.\n\n```js\nvar M = require('eigenjs').Matrix\n  , mat = new M(2, 4).set([\n             1,  1,  1,  3,\n             1,  2, -1,  4\n          ])\n  , fplu = mat.fullPivLu();\nconsole.log('P = \\n%s\\n', fplu.permutationP());\nconsole.log('L = \\n%s\\n', fplu.matrixL());\nconsole.log('U = \\n%s\\n', fplu.matrixU());\nconsole.log('Q = \\n%s', fplu.permutationQ());\n```\n\n```txt\nP =\n0 1\n1 0\n\nL =\n   1    0\n0.75    1\n\nU =\n   4   -1    2    1\n   0 1.75 -0.5 0.25\n\nQ =\n0 0 0 1\n0 0 1 0\n0 1 0 0\n1 0 0 0\n```\n\n#### mat.toString([options])\n\n+ options `Object`\n  - precision `Number` Default=`6`. The number of digits for floating point values.\n  - fullPrecision `Booleam` Default=`false`. If set to true, then the number of digits will be computed to match the full precision of each floating-point type.\n  - dontAlignCols `Booleam` Default=`false`. If set to true, it allows to disable the alignment of columnt, resulting in faster code.\n  - coeffSeparator `String` Default=`' '`. The string printed between two coefficients of the same row.\n  - rowSepara","starsCount":1,"created":"2014-07-22T05:49:09.461Z","modified":"2014-10-12T20:27:47.108Z","lastPublisher":{"name":"rick68","email":"rick68@gmail.com"},"owners":[{"name":"rick68","email":"rick68@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"eigenjs","_nodeVersion":"0.10.32","_npmUser":{"name":"rick68","email":"rick68@gmail.com"},"_npmVersion":"2.1.3","_rev":"1-8b3fcd97bfb8be78bbdefd35a846e8d7","_shasum":"8bf724b4fcf33071f318bf0954e44ce5a62688d1","author":{"name":"Rick Yang","email":"rick68@gmail.com"},"bugs":{"url":"https://github.com/rick68/eigenjs/issues"},"contributors":[],"directories":{},"dist-tags":{"latest":"0.0.89"},"dist":{"shasum":"8bf724b4fcf33071f318bf0954e44ce5a62688d1","tarball":"http://registry.npmjs.org/eigenjs/-/eigenjs-0.0.89.tgz"},"maintainers":[{"name":"rick68","email":"rick68@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-10-12T20:27:47.108Z","created":"2014-07-22T05:49:09.461Z","0.0.0":"2014-07-22T05:49:09.461Z","0.0.1":"2014-07-22T10:43:31.957Z","0.0.2":"2014-07-22T17:39:17.164Z","0.0.3":"2014-07-26T11:43:32.021Z","0.0.4":"2014-07-26T14:25:28.528Z","0.0.5":"2014-07-27T15:17:15.351Z","0.0.6":"2014-07-29T00:00:51.784Z","0.0.7":"2014-07-29T08:48:47.498Z","0.0.8":"2014-07-29T14:59:38.868Z","0.0.9":"2014-07-30T08:12:46.936Z","0.0.10":"2014-07-30T09:55:37.235Z","0.0.11":"2014-08-01T18:40:29.448Z","0.0.12":"2014-08-02T10:40:09.832Z","0.0.13":"2014-08-04T14:51:22.251Z","0.0.14":"2014-08-08T01:46:53.510Z","0.0.15":"2014-08-10T00:01:43.423Z","0.0.16":"2014-08-10T03:00:09.271Z","0.0.17":"2014-08-11T01:24:08.940Z","0.0.18":"2014-08-16T23:53:35.188Z","0.0.19":"2014-08-18T05:10:51.245Z","0.0.20":"2014-08-19T20:23:22.311Z","0.0.21":"2014-08-20T09:49:09.616Z","0.0.22":"2014-08-27T14:11:05.275Z","0.0.23":"2014-09-01T19:28:09.413Z","0.0.24":"2014-09-02T13:13:30.759Z","0.0.25":"2014-09-02T19:06:59.103Z","0.0.26":"2014-09-03T14:20:07.016Z","0.0.27":"2014-09-04T09:41:18.667Z","0.0.28":"2014-09-04T13:55:17.250Z","0.0.29":"2014-09-04T16:13:31.581Z","0.0.30":"2014-09-04T18:02:17.091Z","0.0.31":"2014-09-04T19:09:37.328Z","0.0.32":"2014-09-04T21:35:44.478Z","0.0.33":"2014-09-05T11:56:08.961Z","0.0.34":"2014-09-05T12:49:32.486Z","0.0.35":"2014-09-05T13:49:01.488Z","0.0.36":"2014-09-05T15:44:32.097Z","0.0.37":"2014-09-05T17:18:29.431Z","0.0.38":"2014-09-07T01:16:39.416Z","0.0.39":"2014-09-07T23:40:18.680Z","0.0.40":"2014-09-08T13:18:40.544Z","0.0.41":"2014-09-08T14:00:17.576Z","0.0.42":"2014-09-09T21:28:41.326Z","0.0.43":"2014-09-11T13:20:22.451Z","0.0.44":"2014-09-11T15:36:39.891Z","0.0.45":"2014-09-12T01:09:07.279Z","0.0.46":"2014-09-12T18:35:49.312Z","0.0.47":"2014-09-13T03:34:20.891Z","0.0.48":"2014-09-13T22:52:15.289Z","0.0.49":"2014-09-14T01:52:17.611Z","0.0.50":"2014-09-14T06:53:48.755Z","0.0.51":"2014-09-15T21:22:39.320Z","0.0.52":"2014-09-15T22:23:45.186Z","0.0.53":"2014-09-16T14:23:18.574Z","0.0.54":"2014-09-16T16:23:54.979Z","0.0.55":"2014-09-16T20:28:45.075Z","0.0.56":"2014-09-16T22:24:08.371Z","0.0.57":"2014-09-17T23:36:36.606Z","0.0.58":"2014-09-18T01:35:41.327Z","0.0.59":"2014-09-18T02:32:08.256Z","0.0.60":"2014-09-18T18:20:23.443Z","0.0.61":"2014-09-18T19:16:14.764Z","0.0.62":"2014-09-18T20:17:34.648Z","0.0.63":"2014-09-19T00:12:01.461Z","0.0.64":"2014-09-19T03:05:03.177Z","0.0.65":"2014-09-20T01:38:26.789Z","0.0.66":"2014-09-20T20:32:18.623Z","0.0.67":"2014-09-21T02:54:56.875Z","0.0.68":"2014-09-21T18:37:45.093Z","0.0.69":"2014-09-21T20:24:09.763Z","0.0.70":"2014-09-21T22:25:48.987Z","0.0.71":"2014-09-22T00:02:36.107Z","0.0.72":"2014-09-22T01:08:22.509Z","0.0.73":"2014-09-22T03:50:00.319Z","0.0.74":"2014-09-22T04:35:23.995Z","0.0.75":"2014-09-22T05:17:46.098Z","0.0.76":"2014-09-24T05:28:16.975Z","0.0.77":"2014-09-24T09:47:27.499Z","0.0.78":"2014-09-27T12:06:41.576Z","0.0.79":"2014-09-27T16:01:03.029Z","0.0.80":"2014-09-29T08:44:26.516Z","0.0.81":"2014-09-30T04:32:09.716Z","0.0.82":"2014-09-30T16:35:41.271Z","0.0.83":"2014-10-02T15:33:08.369Z","0.0.84":"2014-10-02T16:54:25.835Z","0.0.85":"2014-10-04T15:30:27.820Z","0.0.86":"2014-10-06T21:28:00.064Z","0.0.87":"2014-10-07T22:28:24.949Z","0.0.88":"2014-10-10T10:56:22.420Z","0.0.89":"2014-10-12T20:27:47.108Z"},"users":{"rick68":true}}}