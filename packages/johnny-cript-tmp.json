{"name":"johnny-cript-tmp","description":"A bcrypt library for NodeJS.","keywords":["bcrypt","password","auth","authentication","encryption","crypt","crypto"],"main":"./bcrypt","version":"1.0.2","engines":{"node":">= 0.6.0"},"repository":"https://github.com/johnny333/node.bcrypt.js","license":"MIT","scripts":{"test":"npm install --build-from-source && nodeunit test","install":"node-pre-gyp install --fallback-to-build"},"dependencies":{"bindings":"1.2.1","nan":"2.5.0","node-pre-gyp":"0.6.32"},"devDependencies":{"nodeunit":"~0.9.1"},"binary":{"module_name":"bcrypt_lib","module_path":"./lib/binding/","host":"https://github.com","remote_path":"/kelektiv/node.bcrypt.js/archive/v{version}/"},"gitHead":"f4343fb2e6514d5e02a1b171cbf79c5e7f283128","homepage":"https://github.com/johnny333/node.bcrypt.js#readme","versions":[{"number":"1.0.2","date":"2017-02-27T13:35:57.320Z"}],"readme":"# node.bcrypt.js\n[![Build Status](https://travis-ci.org/kelektiv/node.bcrypt.js.svg?branch=master)](https://travis-ci.org/kelektiv/node.bcrypt.js)\n[![Dependency Status](https://david-dm.org/kelektiv/node.bcrypt.js.svg)](https://david-dm.org/kelektiv/node.bcrypt.js)\n\nLib to help you hash passwords.\n[bcrypt on wikipedia][bcryptwiki]\n\nCatalyst for this module: [How To Safely Store A Password][codahale]\n\n## If You Are Submitting Bugs/Issues\n\nFirst, make sure that the version of node you are using is a _stable_ version. You'll know this because it'll have an even major release number. We do not currently support unstable versions and while the module may happen to work on some unstable versions you'll find that we quickly close issues if you're not using a stable version.\n\nIf you are on a stable version of node, we can't magically know what you are doing to expose an issue, it is best if you provide a snippet of code or log files if you're having an install issue. This snippet need not include your secret sauce, but it must replicate the issue you are describing. The issues that get closed without resolution tend to be the ones that don't help us help you. Thanks.\n\n\n## Version Compatibility\n\n| Node Version | Bcrypt Version |\n| ---- | ---- |\n| 0.4.x | <= 0.4.x |\n| 0.6.x | >= 0.5.x |\n| 0.8.x | >= 0.5.x |\n| 0.10.x | >= 0.5.x |\n| 0.11.x | >= 0.8.x |\n\nWindows users should make sure to have at least node 0.8.5 installed and version >= 0.7.1 of this module.\n\n`node-gyp` only works with stable/released versions of node. Since the `bcrypt` module uses `node-gyp` to build and install you'll need a stable version of node to use bcrypt. If you do not you'll likely see an error that starts with:\n\n```\ngyp ERR! stack Error: \"pre\" versions of node cannot be installed, use the --nodedir flag instead\n```\n\n## Security Issues/Concerns\n\n> Per bcrypt implementation, only the first 72 characters of a string are used. Any extra characters are ignored when matching passwords.\n\nAs should be the case with any security tool, this library should be scrutinized by anyone using it. If you find or suspect an issue with the code- please bring it to my attention and I'll spend some time trying to make sure that this tool is as secure as possible.\n\nTo make it easier for people using this tool to analyze what has been surveyed, here is a list of BCrypt related security issues/concerns as they've come up.\n\n* An [issue with passwords][jtr] was found with a version of the Blowfish algorithm developed for John the Ripper. This is not present in the OpenBSD version and is thus not a problem for this module. HT [zooko][zooko].\n\n## Dependencies\n\n* NodeJS\n* `node-gyp`\n * Please check the dependencies for this tool at: https://github.com/nodejs/node-gyp\n  * Windows users will need the options for c# and c++ installed with their visual studio instance.\n  * Python 2.x\n* `OpenSSL` - This is only required to build the `bcrypt` project if you are using versions <= 0.7.7. Otherwise, we're using the builtin node crypto bindings for seed data (which use the same OpenSSL code paths we were, but don't have the external dependency).\n\n## Install via NPM\n```\nnpm install bcrypt\n```\n\n***Note:*** OS X users using Xcode 4.3.1 or above may need to run the following command in their terminal prior to installing if errors occur regarding xcodebuild: ```sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer```\n\n## Usage\n\n### async (recommended)\n\n```javascript\nvar bcrypt = require('bcrypt');\nconst saltRounds = 10;\nconst myPlaintextPassword = 's0/\\/\\P4$$w0rD';\nconst someOtherPlaintextPassword = 'not_bacon';\n```\n\n#### To hash a password:\n\nTechnique 1 (generate a salt and hash on separate function calls):\n\n```javascript\nbcrypt.genSalt(saltRounds, function(err, salt) {\n    bcrypt.hash(myPlaintextPassword, salt, function(err, hash) {\n        // Store hash in your password DB.\n    });\n});\n```\n\nTechnique 2 (auto-gen a salt and hash):\n\n```javascript\nbcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash) {\n  // Store hash in your password DB.\n});\n```\n\nNote that both techniques achieve the same end-result.\n\n#### To check a password:\n\n```javascript\n// Load hash from your password DB.\nbcrypt.compare(myPlaintextPassword, hash, function(err, res) {\n    // res == true\n});\nbcrypt.compare(someOtherPlaintextPassword, hash, function(err, res) {\n    // res == false\n});\n```\n### with promises\n\nbcrypt uses whatever Promise implementation is available in `global.Promise`. NodeJS >= 0.12 has a native Promise implementation built in. However, this should work in any Promises/A+ compilant implementation.\n\nAsync methods that accept a callback, return a `Promise` when callback is not specified if Promise support is available.\n\n```javascript\nbcrypt.hash(myPlaintextPassword, saltRounds).then(function(hash) {\n    // Store hash in your password DB.\n});\n```\n```javascript\n// Load hash from your password DB.\nbcrypt.compare(myPlaintextPassword, hash).then(function(res) {\n    // res == true\n});\nbcrypt.compare(someOtherPlaintextPassword, hash).then(function(res) {\n    // res == false\n});\n```\n\n### sync\n\n```javascript\nvar bcrypt = require('bcrypt');\nconst saltRounds = 10;\nconst myPlaintextPassword = 's0/\\/\\P4$$w0rD';\nconst someOtherPlaintextPassword = 'not_bacon';\n```\n\n#### To hash a password:\n\nTechnique 1 (generate a salt and hash on separate function calls):\n\n```javascript\nvar salt = bcrypt.genSaltSync(saltRounds);\nvar hash = bcrypt.hashSync(myPlaintextPassword, salt);\n// Store hash in your password DB.\n```\n\nTechnique 2 (auto-gen a salt and hash):\n\n```javascript\nvar hash = bcrypt.hashSync(myPlaintextPassword, saltRounds);\n// Store hash in your password DB.\n```\n\nAs with async, both techniques achieve the same end-result.\n\n#### To check a password:\n\n```javascript\n// Load hash from your password DB.\nbcrypt.compareSync(myPlaintextPassword, hash); // true\nbcrypt.compareSync(someOtherPlaintextPassword, hash); // false\n```\n\n### Why is async mode recommended over sync mode?\nIf you are using bcrypt on a simple script, using the sync mode is perfectly fine. However, if you are using bcrypt on a server, the async mode is recommended. This is because the hashing done by bcrypt is CPU intensive, so the sync version will block the event loop and prevent your application from servicing any other inbound requests or events.\n\n## API\n\n`BCrypt.`\n\n  * `genSaltSync(rounds)`\n    * `rounds` - [OPTIONAL] - the cost of processing the data. (default - 10)\n  * `genSalt(rounds, cb)`\n    * `rounds` - [OPTIONAL] - the cost of processing the data. (default - 10)\n    * `cb` - [OPTIONAL] - a callback to be fired once the salt has been generated. uses eio making it asynchronous. If `cb` is not specified, a `Promise` is returned if Promise support is available.\n      * `err` - First parameter to the callback detailing any errors.\n      * `salt` - Second parameter to the callback providing the generated salt.\n  * `hashSync(data, salt)`\n    * `data` - [REQUIRED] - the data to be encrypted.\n    * `salt` - [REQUIRED] - the salt to be used to hash the password. if specified as a number then a salt will be generated with the specified number of rounds and used (see example under **Usage**).\n  * `hash(data, salt, cb)`\n    * `data` - [REQUIRED] - the data to be encrypted.\n    * `salt` - [REQUIRED] - the salt to be used to hash the password. if specified as a number then a salt will be generated with the specified number of rounds and used (see example under **Usage**).\n    * `cb` - [OPTIONAL] - a callback to be fired once the data has been encrypted. uses eio making it asynchronous. If `cb` is not specified, a `Promise` is returned if Promise support is available.\n      * `err` - First parameter to the callback detailing any errors.\n      * `encrypted` - Second parameter to the callback providing the encrypted form.\n  * `compareSync(data, encrypted)`\n    * `data` - [REQUIRED] - data to compare.\n    * `encrypted` - [REQUIRED] - data to be compared to.\n  * `compare(data, encrypted, cb)`\n    * `data` - [REQUIRED] - data to compare.\n    * `encrypted` - [REQUIRED] - data to be compared to.\n    * `cb` - [OPTIONAL] - a callback to be fired once the data has been compared. uses eio making it asynchronous. If `cb` is not specified, a `Promise` is returned if Promise support is available.\n      * `err` - First parameter to the callback detailing any errors.\n      * `same` - Second parameter to the callback providing whether the data and encrypted forms match [true | false].\n  * `getRounds(encrypted)` - return the number of rounds used to encrypt a given hash\n    * `encrypted` - [REQUIRED] - hash from which the number of rounds used should be extracted.\n\n## A Note on Rounds\n\nA note about the cost. When you are hashing your data the module will go through a series of rounds to give you a secure hash. The value you submit there is not just the number of rounds that the module will go through to hash your data. The module will use the value you enter and go through `2^rounds` iterations of processing.\n\nFrom @garthk, on a 2GHz core you can roughly expect:\n\n    rounds=8 : ~40 hashes/sec\n    rounds=9 : ~20 hashes/sec\n    rounds=10: ~10 hashes/sec\n    rounds=11: ~5  hashes/sec\n    rounds=12: 2-3 hashes/sec\n    rounds=13: ~1 sec/hash\n    rounds=14: ~1.5 sec/hash\n    rounds=15: ~3 sec/hash\n    rounds=25: ~1 hour/hash\n    rounds=31: 2-3 days/hash\n\n\n## Hash Info\n\nThe characters that comprise the resultant hash are `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$`.\n\nResultant hashes will be 60 characters long.\n\n## Testing\n\nIf you create a pull request, tests better pass :)\n\n```\nnpm install\nnpm test\n```\n\n## Credits\n\nThe code for this comes from a few sources:\n\n* blowfish.cc - OpenBSD\n* bcrypt.cc - OpenBSD\n* bcrypt::gen_salt - [gen_salt inclusion to bcrypt][bcryptgs]\n* bcrypt_node.cc - me\n\n## Contributors\n\n* [Antonio Salazar Cardozo][shadowfiend] - Early MacOS X support (when we used libbsd)\n* [Ben Glow][pixelglow] - Fixes for thread safety with async calls\n* [Van Nguyen][thegoleffect] - Found a timing attack in the comparator\n* [NewITFarmer][newitfarmer] - Initial Cygwin support\n* [David Trejo][dtrejo] - packaging fixes\n* [Alfred Westerveld][alfredwesterveld] - packaging fixes\n* [Vincent Côté-Roy][vincentr] - Testing around concurrency issues\n* [Lloyd Hilaiel][lloyd] - Documentation fixes\n* [Roman Shtylman][shtylman] - Code refactoring, general rot reduction, compile options, better memory management with delete and new, and an upgrade to libuv over eio/ev.\n* [Vadim Graboys][vadimg] - Code changes to support 0.5.5+\n* [Ben Noordhuis][bnoordhuis] - Fixed a thread safety issue in nodejs that was perfectly mappable to this module.\n* [Nate Rajlich][tootallnate] - Bindings and build process.\n* [Sean McArthur][seanmonstar] - Windows Support\n* [Fanie Oosthuysen][weareu] - Windows Support\n* [Amitosh Swain Mahapatra][agathver] - ES6 Promise Support\n\n## License\nUnless stated elsewhere, file headers or otherwise, the license as stated in the LICENSE file.\n\n[bcryptwiki]: https://en.wikipedia.org/wiki/Bcrypt\n[bcryptgs]: http://mail-index.netbsd.org/tech-crypto/2002/05/24/msg000204.html\n[codahale]: http://codahale.com/how-to-safely-store-a-password/\n[gh13]: https://github.com/ncb000gt/node.bcrypt.js/issues/13\n[jtr]: http://www.openwall.com/lists/oss-security/2011/06/20/2\n\n[shadowfiend]:https://github.com/Shadowfiend\n[thegoleffect]:https://github.com/thegoleffect\n[pixelglow]:https://github.com/pixelglow\n[dtrejo]:https://github.com/dtrejo\n[alfredwesterveld]:https://github.com/alfredwesterveld\n[newitfarmer]:https://github.com/newitfarmer\n[zooko]:https://twitter.com/zooko\n[vincentr]:https://twitter.com/vincentcr\n[lloyd]:https://github.com/lloyd\n[shtylman]:https://github.com/shtylman\n[vadimg]:https://github.com/vadimg\n[bnoordhuis]:https://github.com/bnoordhuis\n[tootallnate]:https://github.com/tootallnate\n[seanmonstar]:https://github.com/seanmonstar\n[weareu]:https://github.com/weareu\n[agathver]:https://github.com/Agathver\n","created":"2017-02-27T13:35:57.320Z","modified":"2017-02-27T13:35:57.320Z","lastPublisher":{"name":"johnny333","email":"jakubkolecki93@gmail.pl"},"owners":[{"name":"johnny333","email":"jakubkolecki93@gmail.pl"}],"other":{"_attachments":{},"_from":".","_id":"johnny-cript-tmp","_nodeVersion":"6.4.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/johnny-cript-tmp-1.0.2.tgz_1488202555083_0.02856222167611122"},"_npmUser":{"name":"johnny333","email":"jakubkolecki93@gmail.pl"},"_npmVersion":"3.10.3","_rev":"1-de054866f3dadf548f6c795dacca0a84","_shasum":"ab9ed8e0a239a9308b4277e6273448b01e4fd2c1","author":{"name":"Nick Campbell","url":"https://github.com/ncb000gt"},"bugs":{"url":"https://github.com/kelektiv/node.bcrypt.js/issues"},"contributors":[{"name":"Antonio Salazar Cardozo","email":"savedfastcool@gmail.com","url":"https://github.com/Shadowfiend"},{"name":"Van Nguyen","email":"the.gol.effect@gmail.com","url":"https://github.com/thegoleffect"},{"name":"David Trejo","email":"david@dtrejo.com","url":"https://github.com/dtrejo"},{"name":"Ben Glow","email":"glen.low@pixelglow.com","url":"https://github.com/pixelglow"},{"name":"NewITFarmer.com","url":"https://github.com/newitfarmer"},{"name":"Alfred Westerveld","email":"alfredwesterveld@gmail.com","url":"https://github.com/alfredwesterveld"},{"name":"Vincent Côté-Roy","email":"vincentcr@gmail.com","url":"https://github.com/vincentcr"},{"name":"Lloyd Hilaiel","email":"lloyd@hilaiel.com","url":"https://github.com/lloyd"},{"name":"Roman Shtylman","email":"shtylman@gmail.com","url":"https://github.com/shtylman"},{"name":"Vadim Graboys","email":"dimva13@gmail.com","url":"https://github.com/vadimg"},{"name":"Ben Noorduis","url":"https://github.com/bnoordhuis"},{"name":"Nate Rajlich","email":"nathan@tootallnate.net","url":"https://github.com/tootallnate"},{"name":"Sean McArthur","email":"sean.monstar@gmail.com","url":"https://github.com/seanmonstar"},{"name":"Fanie Oosthuysen","email":"fanie.oosthuysen@gmail.com","url":"https://github.com/weareu"},{"name":"Amitosh Swain Mahapatra","email":"amitosh.swain@gmail.com","url":"https://github.com/Agathver"}],"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"ab9ed8e0a239a9308b4277e6273448b01e4fd2c1","tarball":"https://registry.npmjs.org/johnny-cript-tmp/-/johnny-cript-tmp-1.0.2.tgz"},"maintainers":[{"name":"johnny333","email":"jakubkolecki93@gmail.pl"}],"readmeFilename":"README.md","time":{"modified":"2017-02-27T13:35:57.320Z","created":"2017-02-27T13:35:57.320Z","1.0.2":"2017-02-27T13:35:57.320Z"}}}