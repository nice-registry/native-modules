{"name":"drng","version":"0.0.12","description":"The hardware-random number generator library using libdrng by Intel","main":"lib/index.js","types":"lib/index.d.ts","scripts":{"install":"node-gyp rebuild"},"repository":"https://github.com/project-pp/drng.js","keywords":["DRNG","random"],"license":"MIT","homepage":"https://github.com/project-pp/drng.js#readme","dependencies":{"bindings":"^1.2.1","nan":"^2.6.2"},"gitHead":"3dbd8f41b9121c0c04ebe45b1cc72d302ce8b868","gypfile":true,"versions":[{"number":"0.0.1","date":"2017-05-14T11:54:59.415Z"},{"number":"0.0.2","date":"2017-05-14T14:44:52.656Z"},{"number":"0.0.3","date":"2017-05-15T00:36:39.213Z"},{"number":"0.0.4","date":"2017-05-15T09:03:05.824Z"},{"number":"0.0.5","date":"2017-05-15T10:40:32.108Z"},{"number":"0.0.6","date":"2017-05-16T11:12:34.640Z"},{"number":"0.0.7","date":"2017-05-16T14:34:18.262Z"},{"number":"0.0.8","date":"2017-05-17T16:18:50.555Z"},{"number":"0.0.9","date":"2017-05-17T16:38:24.582Z"},{"number":"0.0.10","date":"2017-05-17T16:48:15.314Z"},{"number":"0.0.11","date":"2017-05-18T11:50:40.291Z"},{"number":"0.0.12","date":"2017-05-20T10:51:27.252Z"}],"readme":"# drng.js\n\nThe hardware-random number generator library using [libdrng by Intel](https://software.intel.com/en-us/articles/the-drng-library-and-manual#).\n\n[![NPM](https://nodei.co/npm/drng.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/drng/)\n\nThe recent Intel CPU has a TRNG instructions called RDRAND/RDSEED.\nYou can generate a good-random numbers without any external, expensive hardware.\nThis NPM module enables you to use those instructions from Node.js,\napplicable for simulation, analysis, games, or anything you want.\n\n## API\n\n```typescript\n// node.js\nconst drng = require('drng');\n\n// typescript\nimport * as drng from 'drng';\n```\n\n### Basic API\n\n- `drng.Random(): number` - returns [0, 1) number; alternative for `Math.random()`.\n- `drng.GetInteger(): number` - returns [0, 1] integer; ramdom binary bits.\n- `drng.GetInteger(max: number): number` - returns [0, max] integer.\n- `drng.GetInteger(min: number, max: number): number` - returns [min, max] integer.\n\nThe implementation of these methods will be selected automatically based on your hardware.\nFor example, your processor supports *RDSEED* instruction and it is 64bit mode,\n`drng.Random()` will be an alias of `drng.RdSeed.Random64()`.\n\n### Instruction specified API\n\n- The methods `drng.RdRand.*` uses *RDRAND* instruction.\n- The methods `drng.RdSeed.*` uses *RDSEED* instruction.\n\nFor each set contains below:\n\n- `IsAvailable: boolean` - if your hardware is supported a instruction, set `true`.\n- `Rand16(): number` - returns `uint16_t` width integer.\n- `Rand16(retry: number): number` - returns `uint16_t` width integer, set the maximum number of retry generation.\n- `Rand32(): number` - returns `uint32_t` width integer.\n- `Rand32(retry: number): number` - returns `uint32_t` width integer, set the maximum number of retry generation.\n- `Rand32Array(length: number): Uint32Array` - returns `Uint32Array` filled by a random numbers.\n- `Rand32Array(length: number, skip: number): Uint32Array` - returns `Uint32Array` filled by a random numbers, set start index.\n- `Rand32Array(length: number, skip: number, max_retries: number): Uint32Array` - returns `Uint32Array` filled by a random numbers, set start index and the maximum number of retry generation.\n- `RandBytes(length: number): Uint8Array` - returns `Uint8Array` filled by a random numbers.\n- `RandBytes(length: number, skip: number): Uint8Array` - returns `Uint8Array` filled by a random numbers, set start index.\n- `RandBytes(length: number, skip: number, max_retries: number): Uint8Array` - returns `Uint8Array` filled by a random numbers, set start index and the maximum number of retry generation.\n- `Random32(): number` - returns [0, 1) float ramdom number, uses `uint32_t` value internally.\n- `Random64(): number` - returns [0, 1) float ramdom number, uses `uint64_t` value internally.\n- `GetInteger(): number` - returns [0, 1] integer; ramdom binary bits.\n- `GetInteger(max: number): number` - returns [0, max] integer.\n- `GetInteger(min: number, max: number): number` - returns [min, max] integer.\n\nFor more detail, see *lib/index.d.ts*.\n\n## Tested platforms\n\n- Windows10 Pro x64, node-gyp v3.6.1, node v7.10.0\n\n## Notes\n\n- This is my first native-addon, so if you find some bug/issue on my code, please report it or create a fix pull-request. Thanks!!\n- Not implemented APIs; V8 never supported 64bit integer, there's no way to implement with a native value types.\n  - rd{rand,seed}_64\n  - rd{rand,seed}\\_get\\_n\\_64\n\n## Lisence\n\nFor libdrng, see [LICENSE.txt](https://github.com/project-pp/drng.js/blob/master/libdrng-1.0/LICENSE.txt).\nThe module itself is under the MIT License.\n\n## Changelog\n\n- v0.0.12: Set default retry value for each method\n- v0.0.11: Support TypeScript\n- <del>v0.0.10:</del>\n- <del>v0.0.9:</del>\n- <del>v0.0.8:</del>\n- v0.0.7: Classify APIs\n- v0.0.6: Add helper functions Random\\*/GetInteger\\*, switch export API by hardware condition\n- v0.0.5: Add Rd{Rand,Seed}Bytes, use TypedArray for the result value for *32Array/*Bytes\n- v0.0.4: Support linux\n- <del>v0.0.3:</del>\n- v0.0.2: Add Rd{Rand,Seed}32Array, fix IsSupportedRd{Rand,Seed} result\n- v0.0.1: Initial reelase\n","starsCount":1,"created":"2017-05-14T11:54:59.415Z","modified":"2017-05-20T10:51:27.252Z","lastPublisher":{"name":"project-pp","email":"project-pp@users.noreply.github.com"},"owners":[{"name":"project-pp","email":"project-pp@users.noreply.github.com"}],"other":{"_attachments":{},"_from":".","_id":"drng","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/drng-0.0.12.tgz_1495277487115_0.08840225194580853"},"_npmUser":{"name":"project-pp","email":"project-pp@users.noreply.github.com"},"_npmVersion":"4.2.0","_rev":"13-8cc64c707f80fac606addf3b1d88d87b","_shasum":"1ed4dcd7adc3d28531292c89fbeecf8536349181","author":{"name":"project-pp.com"},"bugs":{"url":"https://github.com/project-pp/drng.js/issues"},"directories":{},"dist-tags":{"latest":"0.0.12"},"dist":{"shasum":"1ed4dcd7adc3d28531292c89fbeecf8536349181","tarball":"https://registry.npmjs.org/drng/-/drng-0.0.12.tgz"},"maintainers":[{"name":"project-pp","email":"project-pp@users.noreply.github.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-20T10:51:27.252Z","created":"2017-05-14T11:54:59.415Z","0.0.1":"2017-05-14T11:54:59.415Z","0.0.2":"2017-05-14T14:44:52.656Z","0.0.3":"2017-05-15T00:36:39.213Z","0.0.4":"2017-05-15T09:03:05.824Z","0.0.5":"2017-05-15T10:40:32.108Z","0.0.6":"2017-05-16T11:12:34.640Z","0.0.7":"2017-05-16T14:34:18.262Z","0.0.8":"2017-05-17T16:18:50.555Z","0.0.9":"2017-05-17T16:38:24.582Z","0.0.10":"2017-05-17T16:48:15.314Z","0.0.11":"2017-05-18T11:50:40.291Z","0.0.12":"2017-05-20T10:51:27.252Z"},"users":{"project-pp":true}}}