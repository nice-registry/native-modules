{"name":"libtidy","version":"0.3.6","description":"Node bindings to the HTML Tidy library","main":"src/index.js","binary":{"module_name":"tidy","module_path":"./lib/","host":"https://github.com","remote_path":"./gagern/node-libtidy/releases/download/v{version}/","package_name":"{node_abi}-{platform}-{arch}.tar.gz"},"scripts":{"install":"node-pre-gyp install --fallback-to-build","test":"mocha"},"repository":"https://github.com/gagern/node-libtidy","keywords":["htmltidy","libtidy","tidylib","html","tidy","html5","beautify","format","indent"],"license":"MIT","gypfile":true,"homepage":"https://github.com/gagern/node-libtidy#readme","devDependencies":{"chai":"^3.4.1","chai-subset":"^1.2.0","htmltidy2":"^0.1.4","mocha":"^3.1.2"},"dependencies":{"nan":"^2.1.0","node-pre-gyp":"^0.6.36"},"files":["src/","test/","/*.js","/*.md","binding.gyp","tidy-html5/version.txt","tidy-html5/README.md","tidy-html5/README/","tidy-html5/src/","tidy-html5/include/"],"gitHead":"13a3a52c7122925eae211170dda7327944086770","bundleDependencies":["node-pre-gyp"],"versions":[{"number":"0.1.0","date":"2015-12-14T19:03:28.157Z"},{"number":"0.1.1","date":"2015-12-15T23:13:32.841Z"},{"number":"0.2.0","date":"2016-04-04T08:54:29.680Z"},{"number":"0.3.0","date":"2016-05-17T22:14:13.095Z"},{"number":"0.3.1","date":"2016-11-10T08:22:22.830Z"},{"number":"0.3.2","date":"2016-11-10T08:30:00.157Z"},{"number":"0.3.6","date":"2017-08-05T23:22:14.261Z"}],"readme":"# libtidy\n\nThis package provides bindings to\n[libtidy](http://www.html-tidy.org/developer/)\na.k.a. [TidyLib][tidylib]\nwhich can be used to parse and tidy up HTML 5.\nThe library is built as a native node extension,\ncompiled from sources shipped with the package.\nSo you don't have to have the HTML Tidy package installed on your system.\n\n## Alternatives\n\n* [tidy-html5](https://www.npmjs.com/package/tidy-html5)\n  has libtidy compiled to JavaScript using\n  [emscripten](http://emscripten.org/).\n  It is likely more portable, but at the cost of performance.\n  Only supports synchroneous operation.\n* [tidy](https://www.npmjs.com/package/tidy)\n  and [tidy2](https://www.npmjs.com/package/tidy2)\n  also provide bindings for libtidy,\n  but they expect the library and its header files\n  to be installed on the system.\n  Only supports synchroneous operation.\n* [htmltidy](https://www.npmjs.com/package/htmltidy)\n  and [htmltidy2](https://www.npmjs.com/package/htmltidy2)\n  use the command line tool to tidy up html,\n  so they incur some process creation overhead.\n  The binaries for the most common platforms are shipped with the package,\n  but other platforms are not supported.\n  This approach requires no build tools, though.\n  Only supports asynchroneous operation.\n\nThe project will try to provide drop-in replacements for these libraries,\nso that people can easily compare implementations.\nAt the moment, the `tidy` method shared with the `htmltidy` modules\nis the only such replacement which has been implemented.\n\n## Usage\n\nThe project aims to provide fine-grained access to a growing set of\nlibrary functions, with a rather direct mapping between JavaScript and\nC functions.\nOn the other hand, the project offers high-level functions to easily\ndeal with common workflows.\n\n### Callback convention\n\nMost asynchroneous operations in this library take a callback with the\nconventional node signature `cb(err, res)`.\nIn the case of a serious error, `err` will contain an exception\nproviding details about the problem.\nIn less severe situations, `err` will be `null`\nand `res` will be an object containing several properties:\n\n* **`errlog`** contains the error messages generated during the run,\n  formatted as a string including a trailing newline.\n* **`output`** contains the output buffer if output was generated.\n  The property is unset if generating output was not part of the\n  method in question, or `null` if no output was generated due to errors.\n\nOther useful properties may be added in the future.\n\n### High-level\n\nHigh-level functions automate the most common workflows.\n\n#### tidyBuffer(document, [options,] callback)\n\nThe `document` is assumed to be a buffer or a string.\nAnything else will be converted to a string and then turned into a buffer.\n`options` is an optional dictionary of options,\nsee [the section on options](#options) for details.\n`callback` follows the [convention described above](#callback-convention).\n\n### Basic workflow\n\nThe type `libtidy.TidyDoc` is the central object for dealing with the\nlibrary at a low level.\nSuch an object will hold a configuration and be able to process one\ninput file at a time, while multiple such objects can deal with\nmultiple inputs simultaneously using an independent configuration for\neach of them.\n\nThe basic workflow consists of these four steps executed on such an object:\n\nStep | C API | Synchroneous JavaScript | Asynchroneous JavaScript\n--- | --- | --- | ---\n1. | [`tidyParseBuffer(doc,&buf)`][tidyParseBuffer] | `doc.parseBufferSync(buf)` | `doc.parseBuffer(buf,cb)`\n2. | [`tidyCleanAndRepair(doc)`][tidyCleanAndRepair] | `doc.cleanAndRepairSync()` | `doc.cleanAndRepair(cb)`\n3. | [`tidyRunDiagnostics(doc)`][tidyRunDiagnostics] | `doc.runDiagnosticsSync()` | `doc.runDiagnostics(cb)`\n4. | [`tidySaveBuffer(doc,&buf)`][tidySaveBuffer] | `doc.saveBufferSync()` | `doc.saveBuffer(cb)`\n\nMost synchroneous functions take no argument\nand return any diagnostic messages generated in the process.\nThe first of the methods takes a buffer as an argument,\nand the last returns the resulting output buffer.\nThe asynchroneous methods take a callback function as last argument,\nfollowing the [convention described above](#callback-convention).\n\n### Options\n\nFor the list of available options, please refer to the\n[Quick Reference][quick_ref].\n\nThere are various ways to operate on options.\nEach time an option is identified, the library offers several choices:\nthe option may be identified by name (i.e. a string),\nby id (i.e. an integer) or by a `TidyOption` object.\nWhen using a string, you may choose between the original hyphenated name,\na version where hyphens are replaced by underscores, or a camelCase version.\nSo `alt-text`, `alt_text` and `altText` all describe the same option.\n\nThe lowest level of option access are the `optGet(key)` and\n`optSet(key, value)` methods of the `TidyDoc` object.\nThese encompass the whole `tidyOpt{Get,Set}{Value,Int,Bool}`\nfamily of functions in the C API.\n\nThe methods `getOption(key)` and `getOptionList()` return a single\n`TidyOption` object resp. the list of all available options.\nEach such option object contains getters for the following properties:\n`name`, `category`, `id`, `type`, `readOnly`, `default`, `pickList`.\n\nThe `options` property of each `TidyDoc` object can be used for elegant\nhigh-level access to all the options.\nIt provides a dictionary of getter/setter pairs,\nwhich can be used to directly inspect modify each of the options.\nThe keys in this dictionary use the underscore notation.\nThe `options` property itself is implemented using a getter/setter pair,\nand the setter takes its argument and configures all its keys-value pairs.\nIn this case you again have full choice of naming convention.\nSo one way to configure a document object would be this:\n\n```js\nvar libtidy = require(\"libtidy\");\nvar doc = libtidy.TidyDoc();\ndoc.options = {\n  forceOutput = true,\n  output_xhtml = false,\n};\n```\n\n## API\n\nThe following lists the full public interface of the package.\nDetails on each item can be found in the\n[API documentation](https://github.com/gagern/node-libtidy/blob/master/API.md).\n\n- **tidyBuffer(input, cb)** – async function\n- **TidyDoc()** – constructor\n  - **cleanAndRepair(cb)** – async method\n  - **cleanAndRepairSync()** – method\n  - **getOption(key)** – method\n  - **getOptionList()** – method\n  - **optGet(key)** – method\n  - **optGetCurrPick(key)** – method\n  - **optGetDoc(key)** – method\n  - **optGetDocLinksList(key)** – method\n  - **optSet(key, value)** – method\n  - **options** – getter and setter\n  - **parseBuffer(buf, cb)** – async method\n  - **parseBufferSync(buf)** – method\n  - **runDiagnostics(cb)** – async method\n  - **runDiagnosticsSync()** – method\n  - **saveBuffer(cb)** – async method\n  - **saveBufferSync()** – method\n  - **tidyBuffer(buf, cb)** – async method\n- **TidyOption()** – constructor (not for public use)\n  - **category** – getter\n  - **default** – getter\n  - **id** – getter\n  - **name** – getter\n  - **pickList** – getter\n  - **readOnly** – getter\n  - **toString()** – method\n  - **type** – getter\n- **compat** – namespace\n  - **libtidy** – namespace\n    - **tidy** – async function\n\n## License\n\nThe project itself uses [the MIT license](LICENSE.md).\nFor the license of the underlying library, please see\n[its license file][upstream-license]\n\n## Contributing\n\nTo clone the project and start developing run the following commands\n\n```sh\ngit clone --recursive https://github.com/gagern/node-libtidy.git\ncd node-libtidy\nnpm install\nnpm test\n```\n\nIf you want to update to the latest version of libtidy, you can execute\n\n```sh\ncd tidy-html5\ngit checkout master\necho \"Bump libtidy to `git describe --tags`\" | tee ../commit_message.tmp\ngit add tidy-html5\nnpm install\nnpm test\ngit commit -e -F commit_message.tmp\nrm commit_message.tmp\n```\n\nYou may want to substitute some other branch name instead of `master`,\ne.g. in order to get the latest version of some release branch.\n\nIf you think that using a given version is important not just for yourself,\nbut for others as well, then please open an issue and request a release\nusing that version.\nIf the version in question is not the latest release,\nthen please provide some reason why that particular version would be useful.\n\n[tidylib]: http://api.html-tidy.org/tidy/tidylib_api_5.2.0/tidylib.html\n[tidyParseBuffer]: http://api.html-tidy.org/tidy/tidylib_api_5.2.0/group__Parse.html#gaa28ce34c95750f150205843885317851\n[tidyCleanAndRepair]: http://api.html-tidy.org/tidy/tidylib_api_5.2.0/group__Clean.html#ga11fd23eeb4acfaa0f9501effa0c21269\n[tidyRunDiagnostics]: http://api.html-tidy.org/tidy/tidylib_api_5.2.0/group__Clean.html#ga6170500974cc02114f6e4a29d44b7d77\n[tidySaveBuffer]: http://api.html-tidy.org/tidy/tidylib_api_5.2.0/group__Save.html#ga7e8642262c8c4d34cf7cc426647d29f0\n[quick_ref]: http://api.html-tidy.org/tidy/tidylib_api_5.2.0/quick_ref.html\n[upstream-license]: https://github.com/htacg/tidy-html5/blob/5.2.0/README/LICENSE.md\n","created":"2015-12-14T19:03:28.157Z","modified":"2017-08-05T23:22:14.261Z","lastPublisher":{"name":"gagern","email":"Martin.vGagern@gmx.net"},"owners":[{"name":"gagern","email":"Martin.vGagern@gmx.net"}],"other":{"_attachments":{},"_id":"libtidy","_nodeVersion":"8.2.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/libtidy-0.3.6.tgz_1501975332073_0.9165396010503173"},"_npmUser":{"name":"gagern","email":"Martin.vGagern@gmx.net"},"_npmVersion":"5.3.0","_rev":"5-058a619d9ca0789a15b2d59a5fd7efb6","author":{"name":"Martin von Gagern","email":"Martin.vGagern@gmx.net"},"bugs":{"url":"https://github.com/gagern/node-libtidy/issues"},"contributors":[{"name":"Raphael Ackermann","email":"raphael.ackermann@gmail.com"}],"directories":{},"dist-tags":{"latest":"0.3.6"},"dist":{"integrity":"sha512-FK2/O4FX4uGEgCUqriPV0BRqOO0lxznYCVg4oQDIl0gH7//5MSdCUU+zN7/nqItNvGAv4Ne0FF5lNVFRuKFy+A==","shasum":"d07e0e00764631b2d13e8f3848fa975151099092","tarball":"https://registry.npmjs.org/libtidy/-/libtidy-0.3.6.tgz"},"maintainers":[{"name":"gagern","email":"Martin.vGagern@gmx.net"}],"readmeFilename":"README.md","time":{"modified":"2017-08-05T23:22:14.261Z","created":"2015-12-14T19:03:28.157Z","0.1.0":"2015-12-14T19:03:28.157Z","0.1.1":"2015-12-15T23:13:32.841Z","0.2.0":"2016-04-04T08:54:29.680Z","0.3.0":"2016-05-17T22:14:13.095Z","0.3.1":"2016-11-10T08:22:22.830Z","0.3.2":"2016-11-10T08:30:00.157Z","0.3.6":"2017-08-05T23:22:14.261Z"}}}