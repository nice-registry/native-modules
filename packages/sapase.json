{"name":"sapase","description":"ASE ODBC bindings for node","version":"1.0.1","main":"lib/odbc.js","homepage":"https://github.com/SAP/node-sapase#readme","repository":"https://github.com/SAP/node-sapase","binary":{"module_name":"odbc_bindings","module_path":"./build/","host":"https://dmphhhdczacc8.cloudfront.net/","remote_path":".","package_name":"{node_abi}-{platform}-{arch}.tar.gz"},"engines":{"node":">=5.5.0"},"scripts":{"install":"node-pre-gyp install --fallback-to-build","test":"cd test && node run-tests.js"},"dependencies":{"bindings":"^1.2.1","nan":"^2.0.9"},"versions":[{"number":"1.0.0-rc1","date":"2017-07-06T03:03:05.513Z"},{"number":"1.0.0-rc2","date":"2017-07-06T03:11:52.583Z"},{"number":"1.0.0","date":"2017-07-06T03:19:08.063Z"},{"number":"1.0.1","date":"2017-07-07T07:34:27.490Z"},{"number":"1.0.0-beta.3","date":"2017-07-13T06:13:32.494Z"}],"readme":"#node-sapase\nAn asynchronous interface for node.js for SAP Adaptive Server Enterprise using ODBC driver.\n\n##Note\nTHIS PACKAGE IS UNDERGOING TESTING SO PLEASE DO NOT INSTALL YET.\n\n##Requirements\n* Linux or Windows platform.\n* ODBC driver for SAP Adaptive Server Enterprise.\n* Properly configured odbc.ini.\n* This Node.js driver communicates with the SAP Adaptive Server Enterprise ODBC driver, which will be installed using [`node-pre-gyp`](https://github.com/mapbox/node-pre-gyp). If the installation of the shared dynamic library were unsuccessful, it would failback to using native compilation managed by [`node-gyp`](https://github.com/nodejs/node-gyp).\n\n##Install\nYou can install an asynchronous interface for node.js to ODBC by using one of the following two options:\n\n###git\n```bash\ngit clone https://github.com/SAP/node-sapase.git\ncd sapase\nnode-pre-gyp install --fallback-to-build\n```\n###npm\n```bash\nnpm install sapase\n```\n##Getting Started\n\n```javascript\nvar db = require('sapase')()\n  , cn = process.env.ODBC_CONNECTION_STRING\n  ;\n\ndb.connect(cn, function (err) {\n  if (err) return console.log(err);\n\n  db.exec('select * from user where user_id = ?', [42], function (err, data) {\n    if (err) console.log(err);\n\n    console.log(data);\n\n    db.disconnect(function () {\n      console.log('done');\n    });\n  });\n});\n```\n\n##Establish a database connection\nThe first step to establing a database connection is to create an instance of the `Database` class. You may get an instance in one of the following ways:\n\n```javascript\nrequire(\"sapase\").connect(connectionString, function (err, db){\n  //db is already connected now if err is false\n});\n```\n\nor by using the helper function:\n\n```javascript\nvar db = require(\"sapase\")();\n```\n\nor by creating an instance with the constructor function:\n\n```javascript\nvar Database = require(\"sapase\").Database\n  , db = new Database();\n```\n\n###Connecting\nOpen a connection to a database by calling the connect method of the Database object, and passing a connection string representing the connection parameters.\n\n\n```javascript\nvar db = require(\"sapase\")()\n\t, cn = \"DRIVER=Adaptive Server Enterprise;SERVER=host;Port=port;UID=user;PWD=password;DATABASE=dbname\"\n\t;\n\ndb.connect(cn, function (err) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//we now have an open connection to the database\n});\n```\n\n####Disconnecting\n\n```javascript\nvar db = require(\"sapase\")()\n\t, cn = \"DRIVER=Adaptive Server Enterprise;SERVER=host;Port=port;UID=user;PWD=password;DATABASE=dbname\"\n\t;\n\ndb.connect(cn, function (err) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//we now have an open connection to the database\n\n\tdb.disconnect(function (err) {\n\t\tconsole.log(\"the database connection is now closed\");\n\t});\n});\n```\n\n## Direct Statement Execution\nDirect statement execution is the simplest way to execute SQL statements. The only required input parameter is the SQL command to be executed. The result will be returned via callbacks. The type of returned result depends on the kind of statement.\n\n### Query\n\nThe `exec` function is a convenient way to completely retrieve the result of a query. In this case all selected rows are fetched and returned in the callback.\n\n```javascript\nvar db = require(\"sapase\")()\n\t, cn = \"DRIVER=Adaptive Server Enterprise;SERVER=host;Port=port;UID=user;PWD=password;DATABASE=dbname\"\n\t;\n\ndb.connect(cn, function (err) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//we now have an open connection to the database\n\t//so lets get some data\n\tdb.exec(\"select top 10 * from customers\", function (err, rows) {\n\t\tif (err) {\n\t\t\treturn console.log(err);\n\t\t}\n\n\t\tconsole.log(rows);\n\t});\n});\n```\n\n##Prepared Statement Execution\nThe connection returns a `statement` object which can be executed multiple times.\n```javascript\nvar db = require(\"sapase\")()\n  , cn = \"DRIVER=Adaptive Server Enterprise;SERVER=host;Port=port;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\n\ndb.connect(cn, function (err) {\n  if (err)\n  {\n   console.log(err);\n   return (1);\n  }\n\n  db.prepare(\"insert into hits (col1, col2) VALUES (?, ?)\", function (err, stmt) {\n  if (err) {\n    console.log(err);\n    return db.disconnect();\n  }\n\n  stmt.execute(['something', 42], function (err, result) {\n    db.disconnect();\n    });\n  });\n});\n```\n\n##Transaction Handling\n__Transactions are  not automatically commited.__ Executing a statement implicitly starts a new transaction that must be explicitly committed, or rolled back.\n\n###Commit a Transaction\n```javascript\nvar db = require(\"sapase\")()\n  , cn = \"DRIVER=Adaptive Server Enterprise;SERVER=host;Port=port;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\ndb.connect(cn, function (err) {\n  if (err)\n  {\n   console.log(err);\n   return (1);\n  }\n\n  db.beginTransaction(function (err)\n  {\n    if (err)\n    {\n      console.log(err);\n      return db.disconnect();\n    }\n    db.exec(\"insert into hits (col1) values ('stevedave')\", function (err, data){\n    if (err)\n    {\n      console.log(err);\n      return db.disconnect();\n    }\n    db.commitTransaction(function (err)\n    {\n    if (err)\n\t{\n      console.log(err);\n      return db.disconnect();\n    }\n    db.exec(\"select * from hits where col1 = 'stevedave'\", function (err, data){\n    if (err)\n    {\n       console.log(err);\n       return db.disconnect();\n    }\n    console.log(data);\n    });\n    db.disconnect();\n    });\n   });\n  });\n});\n```\n\n###Rollback a Transaction\n```javascript\nvar db = require(\"sapase\")()\n  , cn = \"DRIVER=Adaptive Server Enterprise;SERVER=host;Port=port;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\ndb.connect(cn, function (err) {\n  if (err)\n  {\n   console.log(err);\n   return (1);\n  }\n\n  db.beginTransaction(function (err) {\n    if (err)\n    {\n      console.log(err);\n      return db.disconnect();\n    }\n    db.exec(\"insert into hits (col1) values ('stevedave1')\", function (err, data){\n    if (err)\n    {\n      console.log(err);\n      return db.disconnect();\n    }\n    db.rollbackTransaction(function (err)\n    {\n    if (err) {\n      console.log(err);\n      return db.disconnect();\n    }\n    db.exec(\"select * from hits where col1 = 'stevedave1'\", function (err, data){\n    if (err)\n    {\n       console.log(err);\n       return db.disconnect();\n    }\n    console.log(data);\n    });\n    db.disconnect();\n    });\n   });\n  });\n});\n```\n\n##Example\n\n```javascript\nvar odbc = require(\"sapase\")\n\t, util = require('util')\n\t, db = new odbc.Database()\n\t;\n\nvar connectionString = \"DRIVER=Adaptive Server Enterprise;SERVER=host;Port=port;UID=user;PWD=password;DATABASE=dbname\";\n\ndb.connect(connectionString, function(err) {\n\tdb.exec(\"select * from table\", function(err, rows, moreResultSets) {\n\t\tconsole.log(util.inspect(rows, null, 10));\n\n\t\tdb.disconnect(function() {\n\t\t\tconsole.log(\"Database connection closed\");\n\t\t});\n\t});\n});\n```\n\n##Testing\n\nTests can be run by executing `npm test` from within the root of the sapase directory. You can also run the tests by executing `node run-tests.js` from within the `/test` directory.\n\nBy default, the tests are setup to run against the pubs2 database using datasource name (DSN) sampledsn. The directory (subdirectory build under sapase) containing the ODBC driver for SAP Adaptive Server Enterprise must be included in your library path (for Linux) or system path (Windows).\n\n##Build options\n\n###Debugging\n\nTo display the debugging messages, add the `DEBUG` flag to the defines section of the `binding.gyp` file and then execute\n`node-gyp.js rebuild`.\n\n```javascript\n<snip>\n'defines' : [\n  \"DEBUG\"\n],\n<snip>\n```\n\n##Resources\n+ [SAP Adaptive Server Enterprise ODBC driver](http://infocenter.sybase.com/help/topic/com.sybase.infocenter.dc20116.1570100/doc/pdf/aseodbc.pdf)\n\n##License\nCopyright (c) 2013 Dan VerWeire <dverweire@gmail.com>\n\nCopyright (c) 2010 Lee Smith <notwink@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","created":"2017-07-06T03:03:05.513Z","modified":"2017-07-13T06:13:32.494Z","lastPublisher":{"name":"i062381","email":"meng.teck.lee@sap.com"},"owners":[{"name":"i062381","email":"meng.teck.lee@sap.com"}],"other":{"_attachments":{},"_id":"sapase","_nodeVersion":"5.5.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sapase-1.0.1.tgz_1499412867105_0.34064552444033325"},"_npmUser":{"name":"i062381","email":"meng.teck.lee@sap.com"},"_npmVersion":"5.1.0","_rev":"5-129f1b076c01e37ef13483b19c81edf6","bugs":{"url":"https://github.com/SAP/node-sapase/issues"},"contributors":[{"name":"Upasana Gaikwad","email":"upasana.gaikwad@sap.com"},{"name":"Lee Meng Teck","email":"meng.teck.lee@sap.com"}],"directories":{"lib":"."},"dist-tags":{"beta":"1.0.0-beta.3","latest":"1.0.1"},"dist":{"integrity":"sha512-RkwvvXJz7sIXEZrZWUZ6eWg6hkm5uiXhEuEnxEsPaUoGlVJx8JryiwYUpv9UcuAWQ3gyKR1N/uQLCBiW6/GvuA==","shasum":"0a3c0dae990251c5624a1284cc4488e2ba29a983","tarball":"https://registry.npmjs.org/sapase/-/sapase-1.0.1.tgz"},"maintainers":[{"name":"i062381","email":"meng.teck.lee@sap.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-13T06:13:32.494Z","created":"2017-07-06T03:03:05.513Z","1.0.0-rc1":"2017-07-06T03:03:05.513Z","1.0.0-rc2":"2017-07-06T03:11:52.583Z","1.0.0":"2017-07-06T03:19:08.063Z","1.0.1":"2017-07-07T07:34:27.490Z","1.0.0-beta.3":"2017-07-13T06:13:32.494Z"}}}