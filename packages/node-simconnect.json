{"name":"node-simconnect","version":"1.1.1","description":"Wrapper for the SimConnect SDK for FSX and Prepar3D (Windows)","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","build":"node-gyp configure rebuild --msvs_version=2013 --arch=ia32","install":"node-gyp rebuild"},"license":"ISC","gypfile":true,"dependencies":{"nan":"^2.6.2"},"devDependencies":{},"repository":"https://github.com/EvenAR/node-simconnect","keywords":["FSX","P3D","SDK","SimConnect","Prepar3D","FlightSimulator","Simulator"],"homepage":"https://github.com/EvenAR/node-simconnect#readme","readme":"# node-simconnect\r\nAn easy way to interact with FSX and Prepar3D through SimConnect. (Windows only)\r\n\r\nThis project is at a very early stage and wraps only a few basic SimConnect function calls. Feel free to join the development :)\r\n\r\n## Installation\r\n**Important: node-simconnect can only be used with Node.js 32 bit**\r\n\r\n`npm install node-simconnect`\r\n\r\nA pre-built binary file for SimConnect 10.0.61259.0 (FSX SP2) is included. This is compatible with all simulators from FSX SP2 up to Prepar3D v4.\r\n\r\n\r\n## Usage\r\nFor better readability, start by defining these constants in your code. More values can be found here: [SIMCONNECT_DATATYPE](https://msdn.microsoft.com/en-us/library/cc526983.aspx#SIMCONNECT_DATATYPE), and here: [SIMCONNECT_CLIENT_DATA_PERIOD](https://msdn.microsoft.com/en-us/library/cc526983.aspx#SIMCONNECT_CLIENT_DATA_PERIOD) (first item has value 0, next item has value 1, then 2, etc).\r\n```javascript\r\nconst SIMCONNECT_OBJECT_ID_USER = 0;\r\n\r\nconst SIMCONNECT_DATATYPE_FLOAT64 = 4\r\nconst SIMCONNECT_DATATYPE_STRINGV = 11\r\n\r\nconst SIMCONNECT_PERIOD_NEVER = 0\r\nconst SIMCONNECT_PERIOD_ONCE = 1\r\nconst SIMCONNECT_PERIOD_VISUAL_FRAME = 2\r\nconst SIMCONNECT_PERIOD_SIM_FRAME = 3\r\nconst SIMCONNECT_PERIOD_SECOND = 4\r\n```\r\n\r\n### open\r\nOpen connection and provide callback functions for handling critical events. Returns `false` if it failed to call `open`.\r\n```javascript\r\nvar success = simConnect.open(\"MyAppName\", \r\n    function(name, version) {\r\n        console.log(\"Connected to: \" + name + \"\\nSimConnect version: \" + version);\r\n        // Safe to start interacting with SimConnect here (request data, etc)\r\n    }, () => {\r\n        console.log(\"Simulator exited by user\");\r\n    }, (exception) => {\r\n        console.log(\"SimConnect exception: \" + exception.name + \" (\" + exception.dwException + \", \" + exception.dwSendID + \", \" + exception.dwIndex + \", \" + exception.cbData + \")\");\r\n    }, (error) => {\r\n        console.log(\"Undexpected disconnect/error: \" + error); // Look up error code in ntstatus.h for details\r\n});\r\n```\r\n\r\n### requestDataOnSimObject\r\nRequest one or more [Simulation Variables](https://msdn.microsoft.com/en-us/library/cc526981.aspx) and set a callback function to later handle the received data. Each simulation variable is defined by an array. Example:\r\n```javascript\r\n[\r\n    \"Plane Latitude\",              // Datum name\r\n    \"degrees\",                     // Units name\r\n    SIMCONNECT_DATATYPE_FLOAT64,   // Datum type (optional, FLOAT64 is default and works for most data types)\r\n    0                              // Epsilon (optional, 0 is default)\r\n]    \r\n```\r\nFull example:\r\n```javascript\r\nsimConnect.requestDataOnSimObject([\r\n        [\"TITLE\", null, SIMCONNECT_DATATYPE_STRINGV],\r\n        [\"Plane Latitude\", \"degrees\"],\r\n        [\"Plane Longitude\", \"degrees\"],  \r\n        [\"PLANE ALTITUDE\", \"feet\"]\r\n    ], (data) => {\r\n        // Called when data is received\r\n        console.log(\r\n            \"Aircraft:  \" + data[0] + \"\\n\" +\r\n            \"Latitude:  \" + data[1] + \"\\n\" +\r\n            \"Longitude: \" + data[2] + \"\\n\" +\r\n            \"Altitude:  \" + data[3] + \" feet\"\r\n        );\r\n    }, \r\n    SIMCONNECT_OBJECT_ID_USER,                // User aircraft\r\n    SIMCONNECT_PERIOD_SIM_FRAME,              // Get data every sim frame...\r\n    SIMCONNECT_DATA_REQUEST_FLAG_CHANGED      // ...but only if one of the variables have changed\r\n);\r\n```\r\n[SDK Reference](https://msdn.microsoft.com/en-us/library/cc526983.aspx#SimConnect_RequestDataOnSimObject)\r\n\r\n### setDataOnSimObject\r\nSet a single [Simulation Variable](https://msdn.microsoft.com/en-us/library/cc526981.aspx) on user aircraft. First parameter is the datum name, second is the units name and last is the value.\r\n```javascript\r\nsimConnect.setDataOnSimObject(\"BRAKE PARKING POSITION:1\", \"Position\", 1);\r\n```\r\n\r\n### subscribeToSystemEvent\r\nSubscribe to a system event. See [SDK Reference](https://msdn.microsoft.com/en-us/library/cc526983.aspx#SimConnect_SubscribeToSystemEvent) for available events.\r\n```javascript\r\nsimConnect.subscribeToSystemEvent(\"Pause\", (paused) => { \r\n    // Called when the system event occurs\r\n    console.log(paused ? \"Sim paused\" : \"Sim un-paused\");\r\n});\r\n```\r\n### close\r\nManually close the connection to SimConnect. Returns `false` if it fails.\r\n```javascript\r\nvar success = simConnect.close();\r\n```\r\n\r\n## Manual build\r\n### Requirements\r\n* Node.js (32-bit version)\r\n* Visual Studio 2013 (32-bit version)\r\n* FSX or P3D SimConnect SDK files (.lib and .h). \r\n\r\nNOTE: If your app need to work with both FSX and P3D you must use the FSX SDK.\r\n\r\n### Build\r\nDue to the licensing of the Flight Simulator / Prepar3D SDK, those libraries are not included in this repository, so automatic build is not possible at the moment. \r\n\r\nTo build the native node module you must provide your own SDK files. For FSX:SE, these can be found under `FSX\\SDK\\Core Utilities Kit\\SimConnect SDK`. Follow these steps carefully:\r\n\r\n* Navigate to `[your project]/node-modules/node-simconnect`. Create a folder named `SimConnect` and copy the two folders `inc` and `lib` from the SimConnect SDK installation over to the new directory. These should include `SimConnect.h` and `SimConnect.lib`, respectively.\r\n* Open a terminal in `[your project]/node-modules/node-simconnect` and run `npm run build`.\r\n* Run the simple example program using `node examples/nodejs/example.js`.\r\n\r\n**Note:** Your app will first try to load the binary from `\\build\\Release` (generated by manual build). If it fails, it will try to load the pre-built binary located in the `bin` folder.\r\n\r\n## Using node-simconnect with Electron or NW.JS\r\nTo use `node-simconnect` with Electron or NW.JS, the package must be built specifically for those frameworks. See build instructions above. Read more about using native addons here: [Electron](https://github.com/electron/electron/blob/master/docs/tutorial/using-native-node-modules.md),  [NW.JS](http://docs.nwjs.io/en/latest/For%20Users/Advanced/Use%20Native%20Node%20Modules/) \r\n\r\n* To build native Electron addon: `node-gyp rebuild --target=1.6.11 --arch=ia32 --msvs_version=2013` (where `--target` is the version of Electron).\r\n* To build native NW.JS addon: `nw-gyp rebuild --target=0.20.3 --arch=ia32 --msvs_version=2013` (where `--target` is the version of NW.JS).\r\n","versions":[{"number":"1.0.0","date":"2017-07-21T08:34:56.256Z"},{"number":"1.0.1","date":"2017-07-21T09:46:24.863Z"},{"number":"1.0.2","date":"2017-07-21T10:33:03.013Z"},{"number":"1.0.3","date":"2017-07-21T11:28:41.946Z"},{"number":"1.0.4","date":"2017-07-21T11:57:28.448Z"},{"number":"1.0.5","date":"2017-08-06T15:04:05.506Z"},{"number":"1.1.0","date":"2017-08-12T11:17:36.624Z"},{"number":"1.1.1","date":"2017-08-12T14:58:34.191Z"}],"created":"2017-07-21T08:34:56.256Z","modified":"2017-08-12T14:58:34.191Z","lastPublisher":{"name":"evenar","email":"even.rognlien@gmail.com"},"owners":[{"name":"evenar","email":"even.rognlien@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-simconnect","_nodeVersion":"8.2.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-simconnect-1.1.1.tgz_1502549913062_0.5748662080150098"},"_npmUser":{"name":"evenar","email":"even.rognlien@gmail.com"},"_npmVersion":"3.10.9","_rev":"9-2fb5568a3816009a02b1e48fb4562b23","_shasum":"41e6f8c4069a27b033ca13d15f206a9df871c68d","author":{"name":"Even Arneberg Rognlien"},"bugs":{"url":"https://github.com/EvenAR/node-simconnect/issues"},"directories":{"example":"examples"},"dist-tags":{"latest":"1.1.1"},"dist":{"shasum":"41e6f8c4069a27b033ca13d15f206a9df871c68d","tarball":"https://registry.npmjs.org/node-simconnect/-/node-simconnect-1.1.1.tgz"},"maintainers":[{"name":"evenar","email":"even.rognlien@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-12T14:58:34.191Z","created":"2017-07-21T08:34:56.256Z","1.0.0":"2017-07-21T08:34:56.256Z","1.0.1":"2017-07-21T09:46:24.863Z","1.0.2":"2017-07-21T10:33:03.013Z","1.0.3":"2017-07-21T11:28:41.946Z","1.0.4":"2017-07-21T11:57:28.448Z","1.0.5":"2017-08-06T15:04:05.506Z","1.1.0":"2017-08-12T11:17:36.624Z","1.1.1":"2017-08-12T14:58:34.191Z"}}}