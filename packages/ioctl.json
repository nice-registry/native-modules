{"name":"ioctl","version":"2.0.1","description":"nodejs ioctl wrapper","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","install":"node-gyp rebuild"},"keywords":["ioctl","syscall"],"license":{"type":"ISC","url":"https://github.com/santigimeno/node-ioctl/blob/master/LICENSE"},"repository":"https://github.com/santigimeno/node-ioctl","dependencies":{"bindings":"^1.1.1","nan":"^2.3.2"},"gypfile":true,"gitHead":"2d352ff438537994445d16f45e88a884752a32b4","homepage":"https://github.com/santigimeno/node-ioctl#readme","readme":"node-ioctl\n==========\n\nnode ioctl wrapper\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ioctl\n```\n\nAPI\n--------\n\n### ioctl(fileDescriptor, request, data)\n**Parameters**\n- **fileDescriptor**: `Integer` Target file descriptor, must be open.\n- **request**: `Integer` Device specific request code.\n- **data**: `Integer|Buffer` Request data.\n\n**Returns**: `Integer` Usually zero is returned, some calls use the return value as a output parameter\nand may return a positive integer.\n\n**Throws**: Throws on failed `ioctl` call.\n\nExamples\n--------\n\nRead bytes of the next pending datagram using FIONREAD.\nAs it takes a pointer as a parameter, it's straightforward using a Buffer as a parameter.\n\n```\nvar dgram = require('dgram');\nvar ioctl = require('ioctl');\n\nvar FIONREAD = 0x541B;\n\nvar s = dgram.createSocket('udp4');\ns.bind(1234, function(err) {\n    if (err) {\n        throw err;\n    }\n\n    var s1 = dgram.createSocket('udp4');\n    var message = new Buffer(\"Some bytes\");\n    s1.send(message, 0, message.length, 1234, \"localhost\", function(err, bytes) {\n        var length = new Buffer(4);\n        var ret = ioctl(s._handle.fd, FIONREAD, length);\n        console.log('Pending bytes: ' + length.readInt32LE(0));\n        s1.close();\n        s.close();\n    });\n});\n```\n\nFor other cases, involving complex structs, we can use the `ref`, `ref-array` and `ref-struct` modules.\n\n```\nvar fs = require('fs');\nvar ioctl = require('ioctl');\nvar ref = require('ref');\nvar ArrayType = require('ref-array');\nvar StructType = require('ref-struct');\n\nvar TTY = '/dev/tty1';\nvar TCGETA = 0x5405;\nvar TIOCEXCL = 0x540C;\n\n// #define NCC 8\n// struct termio {\n// unsigned short c_iflag; /* input mode flags */\n// unsigned short c_oflag; /* output mode flags */\n// unsigned short c_cflag; /* control mode flags */\n// unsigned short c_lflag; /* local mode flags */\n// unsigned char c_line; /* line discipline */\n// unsigned char c_cc[NCC]; /* control characters */\n// };\n\n// define the \"snd_hwdep_info\" struct type\nvar termio = StructType({\n    c_iflag : ref.types.ushort,\n    c_oflag : ref.types.ushort,\n    c_cflag : ref.types.ushort,\n    c_lflag : ref.types.ushort,\n    c_line : ref.types.uchar,\n    c_cc : ArrayType(ref.types.uchar, 8)\n});\n\nfs.open(TTY, 'r+', function(err, fd) {\n    if (err) {\n        throw err;\n    }\n\n    var info = new termio();\n    var ret = ioctl(fd, TCGETA, info.ref());\n    console.log('TCGETA ret: ' + ret);\n    console.log('c_iflag: ' + info.c_iflag);\n    console.log('c_oflag: ' + info.c_oflag);\n    console.log('c_cflag: ' + info.c_cflag);\n    console.log('c_lflag: ' + info.c_lflag);\n    console.log('c_line: ' + info.c_line);\n    console.log('c_cc: ' + info.c_cc.buffer.toString());\n    ret = ioctl(fd, TIOCEXCL);\n    console.log('TIOCEXCL ret: ' + ret);\n    fs.close(fd);\n});\n```\n","versions":[{"number":"0.0.1","date":"2014-04-25T14:43:52.634Z"},{"number":"0.0.2","date":"2014-04-28T08:24:30.044Z"},{"number":"0.0.3","date":"2014-04-28T10:17:08.709Z"},{"number":"0.0.4","date":"2014-06-18T08:07:07.359Z"},{"number":"0.0.5","date":"2014-11-03T16:27:38.588Z"},{"number":"0.0.6","date":"2014-11-21T14:08:00.110Z"},{"number":"0.0.7","date":"2014-11-24T13:33:21.540Z"},{"number":"1.0.0","date":"2015-09-11T12:31:13.707Z"},{"number":"1.0.1","date":"2016-04-28T13:12:37.086Z"},{"number":"2.0.0","date":"2016-06-08T12:58:27.516Z"},{"number":"2.0.1","date":"2017-02-27T11:02:02.794Z"}],"starsCount":1,"created":"2014-04-25T14:43:52.634Z","modified":"2017-02-27T11:02:02.794Z","lastPublisher":{"name":"sgimeno","email":"santiago.gimeno@gmail.com"},"owners":[{"name":"sgimeno","email":"santiago.gimeno@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"ioctl","_nodeVersion":"4.4.5","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/ioctl-2.0.1.tgz_1488193322207_0.5962121658958495"},"_npmUser":{"name":"sgimeno","email":"santiago.gimeno@gmail.com"},"_npmVersion":"2.15.11","_rev":"2-02d230f1780fd3792933d9b9315c37c3","_shasum":"e9c05ee16e5754d7d1586bec5a734a8191175ada","author":{"name":"Santiago Gimeno","email":"santiago.gimeno@gmail.com"},"bugs":{"url":"https://github.com/santigimeno/node-ioctl/issues"},"directories":{},"dist-tags":{"latest":"2.0.1"},"dist":{"shasum":"e9c05ee16e5754d7d1586bec5a734a8191175ada","tarball":"https://registry.npmjs.org/ioctl/-/ioctl-2.0.1.tgz"},"maintainers":[{"name":"sgimeno","email":"santiago.gimeno@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-27T11:02:02.794Z","created":"2014-04-25T14:43:52.634Z","0.0.1":"2014-04-25T14:43:52.634Z","0.0.2":"2014-04-28T08:24:30.044Z","0.0.3":"2014-04-28T10:17:08.709Z","0.0.4":"2014-06-18T08:07:07.359Z","0.0.5":"2014-11-03T16:27:38.588Z","0.0.6":"2014-11-21T14:08:00.110Z","0.0.7":"2014-11-24T13:33:21.540Z","1.0.0":"2015-09-11T12:31:13.707Z","1.0.1":"2016-04-28T13:12:37.086Z","2.0.0":"2016-06-08T12:58:27.516Z","2.0.1":"2017-02-27T11:02:02.794Z"},"users":{"afriend":true}}}