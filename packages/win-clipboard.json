{"name":"win-clipboard","version":"0.0.4","description":"Clipboard access for Windows.","homepage":"https://github.com/mlewand/win-clipboard#readme","main":"lib/index.js","keywords":["addon"],"devDependencies":{"chai":"^3.5.0","clipboardy":"^1.1.1","eslint":"^3.1.1","eslint-config-mlewand-node":"^0.1.0","gulp":"^3.9.0","gulp-eslint":"^3.0.1","gulp-exclude-gitignore":"^1.0.0","gulp-istanbul":"^1.0.0","gulp-line-ending-corrector":"^1.0.1","gulp-mocha":"^3.0.1","gulp-nsp":"^2.1.0","gulp-plumber":"^1.0.0"},"repository":"https://github.com/mlewand/win-clipboard","scripts":{"prepublish":"gulp prepublish","test":"gulp","install":"node-gyp rebuild"},"license":"MIT","dependencies":{"bindings":"^1.2.1","detect-newline":"^2.1.0","iconv-lite":"^0.4.16","nan":"^2.6.2"},"gypfile":true,"gitHead":"9c315c0ed0603865fae0c5139f938cbccecc7f4a","versions":[{"number":"0.0.3","date":"2017-05-01T09:37:38.870Z"},{"number":"0.0.4","date":"2017-05-01T11:19:11.871Z"}],"readme":"# win-clipboard [![NPM version][npm-image]][npm-url] [![Build Status][appveyor-image]][appveyor-url] [![Dependency Status][daviddm-image]][daviddm-url]\n\nAn experimental Node.js module that provides you a full control over host clipboard in Windows environment.\n\n## Installation\n\nIf you haven't ever messed up with C++ addons, you'll have most likely to install `windows-build-tools`. It takes a fair amount of time to complete, but simplifies the installation by **a lot**.\n\n```sh\nnpm install --global --production windows-build-tools\n```\n\nOnce you have the above, it's as simple as:\n\n```sh\nnpm install --save win-clipboard\n```\n\n## Usage\n\n```js\nconst clipboard = require( 'win-clipboard' );\n\nclipboard.getText(); // Returns unicode format as a string.\n\nclipboard.getHTML(); // Returns HTML as a string.\n\nclipboard.getData( 'HTML Format' ); // Returns raw content of a \"HTML Format\".\n\nclipboard.setText( 'ðŸ™€ðŸ™Š' ); // Sets some fancy emoji in your unicode format.\n\nclipboard.getFormats(); // Lists formats in the clipboard.\n```\n\n## API\n\n* `getText( [format, forceAscii] )`\n  * Params:\n    * `format` - `string` - Format name you want to set. Could be one of the [standard builtins](https://msdn.microsoft.com/pl-pl/library/windows/desktop/ff729168(v=vs.85).aspx). Examples are `CF_UNICODETEXT`, `CF_TEXT`, `HTML Format` etc. Defaults to `CF_UNICODETEXT`.\n    * `forceAscii` - `boolean` - Whether ASCII encoding should be used? By default module will attempt to decode UTF-16 to UTF-8. Defaults to `false`.\n  * Returns:\n    * `string` - String retrieved from the clipboard.\n    * `null` - If no data was found.\n* `setText( newText[, format] )`\n  * Params:\n    * `newText` - `string` - Text to be set in the clipboard.\n    * `format` - `string` - Format name you want to set. Could be one of the [standard builtins](https://msdn.microsoft.com/pl-pl/library/windows/desktop/ff729168(v=vs.85).aspx). Examples are `CF_UNICODETEXT`, `CF_TEXT`, `HTML Format` etc. Defaults to `CF_UNICODETEXT`.\n  * Returns:\n    * `number` - Number of bytes written if successful.\n    * `null` - If failed.\n* `getHTML( [fullHtml, format] )`\n  * Params:\n    * `fullHtml` - `boolean` - If set to `true` will return outer context, like `html`, `body` tags. Defaults to `false`.\n    * `format` - `string` - Format name you want to set. Could be one of the [standard builtins](https://msdn.microsoft.com/pl-pl/library/windows/desktop/ff729168(v=vs.85).aspx). Examples are `CF_UNICODETEXT`, `CF_TEXT`, `HTML Format` etc.\n* `setHTML( newHtml, [sourceUrl, format] )`\n  * Params:\n    * `newHtml` - `string` - HTML code to be set.\n    * `sourceUrl` - `string` - URL to be set as a SourceURL header. Defaults to `null`.\n    * `format` - `string` - Format name you want to set. Could be one of the [standard builtins](https://msdn.microsoft.com/pl-pl/library/windows/desktop/ff729168(v=vs.85).aspx). Examples are `CF_UNICODETEXT`, `CF_TEXT`, `HTML Format` etc.\n* `getData( format )`\n  * Params:\n    * `format` - `string` - Format name you want to set. Could be one of the [standard builtins](https://msdn.microsoft.com/pl-pl/library/windows/desktop/ff729168(v=vs.85).aspx). Examples are `CF_UNICODETEXT`, `CF_TEXT`, `HTML Format` etc.\n  * Returns:\n    * [`Buffer`](https://nodejs.org/api/buffer.html) - A raw buffer of what is kept in the memory.\n    * `null` - If nothing is found.\n* `setData( newData, format )` - Sets raw data to a given clipboard format.\n  * Params:\n    * `newData` - [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) - Raw data to be set.\n    * `format` - `string` - Format name you want to set. Could be one of the [standard builtins](https://msdn.microsoft.com/pl-pl/library/windows/desktop/ff729168(v=vs.85).aspx). Examples are `CF_UNICODETEXT`, `CF_TEXT`, `HTML Format` etc.\n  * Returns:\n    * `number` - Number of bytes written if successful.\n    * `null` - If failed.\n* `getFormats`\n  * Returns:\n    * `string[]` - An array of strings with available formats.\n* `clear` - Simply wipes out your clipboard.\n\n## Why?\n\nI needed to put some fancy stuff into a clipboard, and I was surprised that there's no good library for managing the clipboard.\n\nWhat I needed was an ability to set HTML / RTF / plain text together, which was nowhere to be found.\n\nOther requirement that I had in other side project, was retrieve all the formats in clipboard, for a further inspection.\n\nAll the implementation allowed just for setting a plaintext - it was due to the fact that it was based on `clip` bin.\n\n## How?\n\nI implemented it using a Node.js C++ addon, which uses WinAPI.\n\nThe implementation turned out to be extremely easy, while having access to the WinAPI it gives all the power in the world to work with the clipboard.\n\n## License\n\nMIT Â© [Marek Lewandowski]()\n\n\n[npm-image]: https://badge.fury.io/js/win-clipboard.svg\n[npm-url]: https://npmjs.org/package/win-clipboard\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/sbvv75y2edldsktq?svg=true&passingText=master%20%E2%9C%93\n[appveyor-url]: https://ci.appveyor.com/project/mlewand/win-clipboard\n[daviddm-image]: https://david-dm.org/mlewand/win-clipboard.svg?theme=shields.io\n[daviddm-url]: https://david-dm.org/mlewand/win-clipboard\n","created":"2017-05-01T09:37:38.870Z","modified":"2017-05-01T11:19:11.871Z","lastPublisher":{"name":"mlewand","email":"npm@mlewandowski.com"},"owners":[{"name":"mlewand","email":"npm@mlewandowski.com"}],"other":{"_attachments":{},"_from":".","_id":"win-clipboard","_nodeVersion":"6.8.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/win-clipboard-0.0.4.tgz_1493637551129_0.9527938470710069"},"_npmUser":{"name":"mlewand","email":"npm@mlewandowski.com"},"_npmVersion":"3.10.8","_rev":"2-b590662cadd3f6fa87fdcf175d9cc323","_shasum":"138ea3f5336fc255228f010669d11e4bdb9e2d57","author":{"name":"Marek Lewandowski","email":"code@mlewandowski.com"},"bugs":{"url":"https://github.com/mlewand/win-clipboard/issues"},"directories":{},"dist-tags":{"latest":"0.0.4"},"dist":{"shasum":"138ea3f5336fc255228f010669d11e4bdb9e2d57","tarball":"https://registry.npmjs.org/win-clipboard/-/win-clipboard-0.0.4.tgz"},"maintainers":[{"name":"mlewand","email":"npm@mlewandowski.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-01T11:19:11.871Z","created":"2017-05-01T09:37:38.870Z","0.0.3":"2017-05-01T09:37:38.870Z","0.0.4":"2017-05-01T11:19:11.871Z"}}}