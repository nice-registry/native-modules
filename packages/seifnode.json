{"name":"seifnode","version":"1.0.3","description":"Node.js Implementation of Seif random and crypto services","main":"index.js","scripts":{"preinstall":"bash installrng.sh","test":"mocha","postinstall":"bash postinstall.sh"},"dependencies":{"nan":"*"},"devDependencies":{"glob":"*","mocha":"*"},"repository":"https://github.com/paypal/seifnode","gypfile":true,"engines":{"node":">=6.9.2"},"license":"MIT","homepage":"http://www.seif.place","keywords":["security","crypto","encryption","random"],"gitHead":"3fb492d4f14475810c2edce2dea2575ed8535f08","versions":[{"number":"1.0.0","date":"2016-06-02T20:36:35.936Z"},{"number":"1.0.1","date":"2016-06-03T18:54:18.917Z"},{"number":"1.0.2","date":"2016-08-09T18:16:08.041Z"},{"number":"1.0.3","date":"2017-04-17T23:40:27.256Z"}],"readme":"seifnode\n========\n\nNode.js Implementation of Seif Crypto Modules\n\nGetting Started\n===============\n\nFrom your project directory, run (see below for requirements):\n\n```\n$ npm install seifnode\n```\n\nSeifnode depends on the c++ library [Seifrng](https://github.com/paypal/seifrng) which will be installed locally during pre-install; Seifrng uses the [CMake](https://cmake.org) build system which too will be installed locally if not found. The node module also depends of Crypto++ which will be locally installed by [Seifrng](https://github.com/paypal/seifrng) if not found during pre-install.\n\nOn Linux systems the node module requires [PatchELF](https://nixos.org/patchelf.html) utility which will be installed locally if not found during pre-install.\n\n\n\nAlternatively, to use the latest development version from Github:\n\n```\n$ npm install <git-path>\n```\n\nTest\n====\n\nPlease refer to the \"test\" directory to view the \"mocha\" unit tests. To run the tests, please run the following command from the top-level directory.\n\n```\n$ npm test\n```\n\nExamples\n========\n\nPlease refer to the \"examples\" directory to see examples of how to use the various modules.\n\nInterface\n=========\n\nThe module exposes four different interfaces useful for different purposes.\n\n### 1. RNG\n\nThis module exposes the ISAAC random number generator to node.js from the c++ library [seifrng](https://github.com/paypal/seifrng). We haven't made any changes to the random number generation process as such. The only enhancement is that we are accessing the random number generator state and encrypting it before persisting it to the disk.\n\n**Initialization:**\n\n```javascript\nlet seifnode = require(\"seifnode\");\nlet seifrng = seifnode.RNG();\n```\n\n**Usage:**\n\nThe functions exposed are as follows:\n\n**function isInitialized(key, filename, function callback(result){...})**\n\nCreates an async worker to check if the RNG has been initialized by checking if the state file exists and can be decrypted using the given key. Once the async work is complete, the RNG is initialized with the state on the disk if present or an appropriate error is given to the callback.\n\n```javascript\nseifrng.isInitialized(key, filename, function(result) {\n\n\tconsole.log(result.code);\n\tconsole.log(result.message);\n\n});\n// 'key' is a buffer containing the disk encryption/decryption key\n// 'filename' is the name of the RNG saved state file on disk\n// 'result' is an object containing the code('code') and message('message')\n```\n\n**function initialize(key, filename)**\n\nInitilizes the RNG by gathering entropy from the available sources (Please look at the \"rng\" repo for more details at <>). Once the entropy generation is complete, the RNG is initialized using the generated seed and it is ready to be used.\n\n```javascript\nseifrng.initialize(key, filename);\n// 'key' is a buffer containing the disk encryption/decryption key\n// 'filename' is the name of the RNG saved state file on disk\n```\n\n**function getBytes(n)**\n\nGets the number of random bytes required and returns a buffer with the random output. If the RNG has not been initialized an error will be thrown.\n\n```javascript\nlet numbytes = 32;\nlet buffer = seifrng.getBytes(numBytes);\n// 'numBytes' is the number of required random bytes\n// 'buffer' is a node.js buffer\n```\n\n**function saveState()**\n\nEncrypts and saves the RNG state to disk.\n\n```javascript\nseifrng.saveState(function(result) {\n\n\tconsole.log(result.code);\n\tconsole.log(result.message);\n\n});\n```\n\n**function destroy()**\n\nDestroys the underlying RNG object thus saving the state to disk.\n\n```javascript\nseifrng.destroy();\n```\n\n\n### 2. ECC\n\nThis module is responsible for exposing Crypto++ ECC functions using our implementation of isaac random number generator.\n\n**Initialization:**\n\n```javascript\nlet seifnode = require(\"seifnode\");\nlet seifecc = seifnode.ECC(diskKey, folder);\n// 'diskKey' is the key used to encrypt the keys and rng state\n// 'folder' is the folder where the keys and rng state are saved on disk\n```\n\n**Usage:**\n\nThe functions exposed are as follows:\n\n**function loadKeys()**\n\nCreates an async worker to load keys from the disk (encrypted using the key provided during initialization) and invokes the callback function with the error object (if applicable) and/or the object containing the keys.\n\n```javascript\nseifecc.loadKeys(function(status, keys) {\n\n\t// 'status' (if applicable) is of the form: {code: [statusCode], message: [statusMessage]}\n\tconsole.log(status);\n\t// 'keys' (if available) is of the form: {enc: [publicKey], dec: [privateKey]}\n\tconsole.log(keys);\n\n});\n```\n\n**function generateKeys()**\n\nInitializes the isaac RNG and uses it to generate the public/private keys and return them to the caller. These keys are also encrypted and saved to the disk.\n\n```javascript\nlet keys = seifecc.generateKeys();\n// 'keys' (if available) is of the form: {enc: [publicKey], dec: [privateKey]}\n```\n\n**function encrypt(publicKey, message)**\n\nEncrypts the message buffer using the public key to return the cipher string (We are using Cryptopp ECIES for this purpose and the curve used is the NIST approved SECP521r1).\n\n```javascript\nseifecc.loadKeys(function(status, keys) {\n\n\tif (status === undefined && keys !== undefined) {\n\n\t\tlet cipher = obj.encrypt(keys.enc, message);\n\t\t// 'keys.enc' is the string containing the hex encoded ECC public key\n\t\t// 'message' is the buffer containing the message to be encrypted\n\t\t// 'cipher' is a buffer containing the encrypted cipher\n\n\t}\n\n});\n```\n\n**function decrypt(privateKey, cipher)**\n\nDecrypts the cipher buffer using the private key to return the original message buffer (We are using Cryptopp ECIES for this purpose and the curve used is the NIST approved SECP521r1).\n\n```javascript\nseifecc.loadKeys(function(status, keys) {\n\n\tif (status === undefined && keys !== undefined) {\n\n\t\tlet message = seifecc.decrypt(keys.dec, cipher);\n\t\t// 'keys.dec' is the string containing the hex encoded ECC private key\n\t\t// 'cipher' is the buffer containing the cipher to be decrypted\n\t\t// 'message' is the buffer containing the decrypted message\n\n\t}\n\n});\n```\n\n\n### 3. AESXOR\n\nThis module is responsible for exposing our implementation of link encryption. We are exposing the Cryptopp AES implementation in the GCM mode with slight modifications to enhance security as explained below. Similary, after the cipher bytes have been decrypted they are XOR'd with XORShift+ random bytes to get the original message.\n\n**Initialization:**\n\n```javascript\nlet seifnode = require(\"seifnode\");\nlet seifaes = seifnode.AESXOR(seed);\n// 'seed' is a buffer containing bytes representing the uint64 pcg seed\n```\n\n**Usage:**\n\nThe functions exposed are as follows:\n\n**function encrypt(key, message)**\n\nEncrypts the message using the given key to return the cipher. As part of this process, the message bytes are first XOR'd with equal number of random bytes generated using XORShift+ and then encrypted using the AES-GCM mode.\n\n```javascript\nlet cipher = seifaes.encrypt(key, message);\n// 'key' is the buffer containing the AES key\n// 'message' is the buffer containing the message to be encrypted\n// 'cipher' is the buffer containing the encrypted cipher\n```\n\n**function decrypt(key, cipher)**\n\nDecrypts the cipher to return the original message. As part of this process, after the cipher bytes have been decrypted using the AES-GCM mode, the decrypted buffer is XOR'd with as many XORShift+ random bytes to get the original message.\n\n```javascript\nlet message = seifaes.decrypt(key, cipher);\n// 'key' is the buffer containing the AES key\n// 'cipher' is the buffer containing the cipher to be decrypted\n// 'message' is the buffer containing the decrypted message\n```\n\n\n### 4. SEIFSHA3\n\nThis module is responsible for exposing Crypto++ SHA3 function\n\n**Initialization:**\n\n```javascript\nlet seifnode = require(\"seifnode\");\nlet seifsha3 = seifnode.SEIFSHA3();\n```\n\n**Usage:**\n\nThe functions exposed are as follows:\n\n**function hash(data)**\n\nGets the string data and returns the hash (using Cryptopp implementation of SHA3-256) of the given input as a buffer object.\n\n```javascript\nlet hash = seifsha3.hash(stringData);\n// 'stringData' is the string data to be hashed\n// 'hash' is the output buffer containing the SHA3-256 hash\n```\n\n\n\n\nDependencies\n============\n\n### 1. [Seifrng](https://github.com/paypal/seifrng)\n\nFor generating cryptographically secure random numbers.\n\n**License:**\nhttps://github.com/paypal/seifrng/license.md\n\n### 2. [CryptoPP/Crypto++](https://www.cryptopp.com/)\n\nUsed for all cryptographic functions. Library installed version 5.6.5\n\n**License:**\nCrypto++ Library is copyrighted as a compilation and (as of version 5.6.5) licensed under the Boost Software License 1.0, while the individual files in the compilation are all public domain.\nhttps://www.cryptopp.com/License.txt\n\n### 3. Node modules: [nan](https://github.com/nodejs/nan)\n\nThis is basically a header file containing macros and utilities to store all logic necessary to develop native Node.js addons without having to inspect NODE_MODULE_VERSION\n\n**License & copyright:**\nhttps://github.com/nodejs/nan/blob/master/LICENSE.md\n\nLicense\n=======\n\nThe MIT License (MIT)\n\nCopyright (c) 2015, 2016, 2017 PayPal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n","created":"2016-06-02T20:36:35.936Z","modified":"2017-04-17T23:40:27.256Z","lastPublisher":{"name":"aashishs","email":"aashish.sheshadri@gmail.com"},"owners":[{"name":"aashishs","email":"aashish.sheshadri@gmail.com"},{"name":"harchu","email":"rharchu@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"seifnode","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/seifnode-1.0.3.tgz_1492472426961_0.139539914438501"},"_npmUser":{"name":"aashishs","email":"aashish.sheshadri@gmail.com"},"_npmVersion":"3.10.8","_rev":"2-3c9fc5353d4a3b8f1b6cfc36d2420562","_shasum":"918371a9298e1a3cff38fb36b78d8ce601af0430","bugs":{"url":"https://github.com/paypal/seifnode/issues"},"contributors":[{"name":"Aashish Sheshadri","email":"aashish.sheshadri@gmail.com","url":"http://www.aashish.me"},{"name":"Rohit Harchandani","email":"harchu@gmail.com"}],"directories":{},"dist-tags":{"latest":"1.0.3"},"dist":{"shasum":"918371a9298e1a3cff38fb36b78d8ce601af0430","tarball":"https://registry.npmjs.org/seifnode/-/seifnode-1.0.3.tgz"},"maintainers":[{"name":"aashishs","email":"aashish.sheshadri@gmail.com"},{"name":"harchu","email":"rharchu@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-17T23:40:27.256Z","created":"2016-06-02T20:36:35.936Z","1.0.0":"2016-06-02T20:36:35.936Z","1.0.1":"2016-06-03T18:54:18.917Z","1.0.2":"2016-08-09T18:16:08.041Z","1.0.3":"2017-04-17T23:40:27.256Z"}}}