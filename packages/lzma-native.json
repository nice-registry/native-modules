{"name":"lzma-native","version":"3.0.1","engines":{"node":">=4"},"description":"Provides bindings to the native liblzma library (.xz file format, among others)","main":"index","bin":{"lzmajs":"./bin/lzmajs"},"dependencies":{"nan":"2.5.1","node-pre-gyp":"^0.6.21","readable-stream":"^2.0.5","rimraf":"^2.6.1"},"keywords":["lzma","compression","crc32","xz","liblzma"],"homepage":"https://github.com/addaleax/lzma-native","license":"MIT","repository":"https://github.com/addaleax/lzma-native","scripts":{"install":"node-pre-gyp install --fallback-to-build && node node_modules/rimraf/bin.js build","test":"mocha --expose-gc -s 1000 -t 5000","prepare":"cd deps && 7z x -y xz-5.2.3-windows.7z bin_i686/liblzma.dll bin_x86-64/liblzma.dll include doc/liblzma.def","jshint":"jshint ."},"gypfile":true,"devDependencies":{"bl":"^1.1.2","coveralls":"^2.11.6","istanbul":"^0.4.2","jshint":"^2.9.1","mocha":"^3.0.2"},"binary":{"module_name":"lzma_native","module_path":"./binding-v{version}-{node_abi}-{platform}-{arch}/","host":"https://node-pre-gyp.entless.org","remote_path":"./lzma-native/"},"gitHead":"58fb963ce4609cec0f5bed3cff0955180ea6e436","bundleDependencies":["node-pre-gyp","rimraf"],"versions":[{"number":"0.0.1","date":"2014-05-25T16:05:04.852Z"},{"number":"0.0.2","date":"2014-05-27T01:19:34.234Z"},{"number":"0.0.3","date":"2014-05-27T01:28:05.036Z"},{"number":"0.0.4","date":"2014-05-28T21:09:16.769Z"},{"number":"0.0.5","date":"2014-06-25T20:34:25.911Z"},{"number":"0.1.0","date":"2014-06-26T02:13:47.178Z"},{"number":"0.1.1","date":"2014-06-26T03:06:34.607Z"},{"number":"0.1.2","date":"2014-07-04T23:44:54.975Z"},{"number":"0.1.3","date":"2014-08-20T20:41:58.749Z"},{"number":"0.1.4","date":"2014-09-08T20:34:16.491Z"},{"number":"0.1.5","date":"2014-11-20T08:38:37.287Z"},{"number":"0.1.6","date":"2014-11-20T15:19:38.764Z"},{"number":"0.1.7","date":"2014-12-02T13:09:28.046Z"},{"number":"0.2.0","date":"2014-12-10T22:09:32.927Z"},{"number":"0.2.1","date":"2014-12-11T04:01:58.917Z"},{"number":"0.2.2","date":"2014-12-13T08:21:14.563Z"},{"number":"0.2.3","date":"2014-12-14T09:44:44.784Z"},{"number":"0.2.4","date":"2014-12-23T13:47:44.515Z"},{"number":"0.2.5","date":"2015-01-17T03:11:34.988Z"},{"number":"0.2.6","date":"2015-01-24T19:58:22.298Z"},{"number":"0.2.7","date":"2015-02-04T03:55:16.691Z"},{"number":"0.2.8","date":"2015-02-08T17:04:52.121Z"},{"number":"0.2.9","date":"2015-02-12T20:45:56.312Z"},{"number":"0.2.10","date":"2015-02-26T21:02:10.312Z"},{"number":"0.2.11","date":"2015-03-09T23:04:17.563Z"},{"number":"0.2.12","date":"2015-06-03T22:38:47.237Z"},{"number":"0.2.13","date":"2015-07-14T16:17:09.064Z"},{"number":"0.2.14","date":"2015-08-09T20:08:43.506Z"},{"number":"0.3.0","date":"2015-08-15T16:42:26.090Z"},{"number":"0.3.1","date":"2015-08-19T03:35:25.898Z"},{"number":"0.3.2","date":"2015-08-19T19:26:48.586Z"},{"number":"0.2.15","date":"2015-08-19T19:27:03.091Z"},{"number":"0.3.3","date":"2015-08-19T19:50:51.893Z"},{"number":"0.2.16","date":"2015-08-30T13:19:38.551Z"},{"number":"0.3.4","date":"2015-08-30T13:29:31.263Z"},{"number":"0.3.5","date":"2015-09-04T09:21:04.510Z"},{"number":"0.3.6","date":"2015-09-04T21:42:13.518Z"},{"number":"0.3.7","date":"2015-09-04T23:16:32.255Z"},{"number":"0.3.8","date":"2015-09-09T00:27:23.828Z"},{"number":"0.2.17","date":"2015-09-22T00:06:05.794Z"},{"number":"0.3.9","date":"2015-09-22T00:06:38.433Z"},{"number":"0.3.10","date":"2015-10-15T12:07:08.242Z"},{"number":"0.4.0","date":"2015-11-06T20:20:21.276Z"},{"number":"0.5.0","date":"2015-12-08T05:18:02.798Z"},{"number":"0.3.11","date":"2015-12-11T02:09:09.599Z"},{"number":"0.5.1","date":"2015-12-11T02:09:54.673Z"},{"number":"0.5.2","date":"2016-01-08T03:26:36.809Z"},{"number":"0.5.3","date":"2016-01-10T01:19:24.553Z"},{"number":"1.0.0","date":"2016-01-11T07:50:47.691Z"},{"number":"1.0.1","date":"2016-01-11T07:55:49.200Z"},{"number":"1.0.2","date":"2016-01-11T08:21:46.399Z"},{"number":"1.0.3","date":"2016-01-12T03:06:34.577Z"},{"number":"1.0.4","date":"2016-01-22T17:49:06.609Z"},{"number":"1.1.0","date":"2016-02-13T21:52:52.346Z"},{"number":"1.2.0","date":"2016-04-22T23:05:05.328Z"},{"number":"1.2.1","date":"2016-04-23T10:44:27.342Z"},{"number":"1.3.0","date":"2016-04-28T02:26:50.207Z"},{"number":"1.3.1","date":"2016-04-28T15:09:23.383Z"},{"number":"1.4.0","date":"2016-05-16T19:05:07.420Z"},{"number":"1.4.1","date":"2016-05-18T23:59:55.476Z"},{"number":"1.5.0","date":"2016-06-29T09:14:27.329Z"},{"number":"1.5.1","date":"2016-06-29T23:27:13.520Z"},{"number":"1.5.2","date":"2016-08-26T11:05:09.890Z"},{"number":"2.0.0","date":"2017-03-19T20:50:44.141Z"},{"number":"2.0.1","date":"2017-03-24T20:13:26.902Z"},{"number":"2.0.2","date":"2017-05-18T17:03:21.831Z"},{"number":"2.0.3","date":"2017-06-21T16:26:06.968Z"},{"number":"2.0.4","date":"2017-06-25T19:28:38.443Z"},{"number":"3.0.0","date":"2017-06-26T22:18:58.066Z"},{"number":"3.0.1","date":"2017-07-04T21:23:24.112Z"}],"readme":"lzma-native\n===========\n\n[![NPM Version](https://img.shields.io/npm/v/lzma-native.svg?style=flat)](https://npmjs.org/package/lzma-native)\n[![NPM Downloads](https://img.shields.io/npm/dm/lzma-native.svg?style=flat)](https://npmjs.org/package/lzma-native)\n[![Build Status](https://travis-ci.org/addaleax/lzma-native.svg?style=flat&branch=master)](https://travis-ci.org/addaleax/lzma-native?branch=master)\n[![Windows](https://img.shields.io/appveyor/ci/addaleax/lzma-native/master.svg?label=windows)](https://ci.appveyor.com/project/addaleax/lzma-native)\n[![Coverage Status](https://coveralls.io/repos/addaleax/lzma-native/badge.svg?branch=master)](https://coveralls.io/r/addaleax/lzma-native?branch=master)\n[![Dependency Status](https://david-dm.org/addaleax/lzma-native.svg?style=flat)](https://david-dm.org/addaleax/lzma-native)\n[![devDependency Status](https://david-dm.org/addaleax/lzma-native/dev-status.svg?style=flat)](https://david-dm.org/addaleax/lzma-native#info=devDependencies)\n\nNode.js interface to the native liblzma compression library (.xz file format, among others)\n\nThis package provides interfaces for compression and decompression\nof `.xz` (and legacy `.lzma`) files, both stream-based and string-based.\n\n<a name=\"example-usage\"></a>\n\n## Example usage\n\n<a name=\"installation\"></a>\n\n### Installation\n\nSimply install `lzma-native` via npm:\n```bash\n$ npm install --save lzma-native\n```\n\n*Note*: As of version 1.0.0, this module provides pre-built binaries for multiple Node.js\nversions and all major OS using [node-pre-gyp](https://github.com/mapbox/node-pre-gyp),\nso for 99 % of users no compiler toolchain is necessary.\nPlease [create an issue here](https://github.com/addaleax/lzma-native/issues/new)\nif you have any trouble installing this module.\n\n*Note*: `lzma-native@2.x` requires a Node version >= 4. If you want to support\nNode `0.10` or `0.12`, you can feel free to use `lzma-native@1.x`.\n\n<a name=\"streams-usage\"></a>\n\n### For streams\n\nIf you don’t have any fancy requirements, using this library is quite simple:\n\n<!--\nSome examples in this README file are executed as part of the automatic\ntesting process. See test/readme-examples.js for details.\n-->\n\n<!-- runtest:{Compress the README.md file} -->\n\n```js\nvar lzma = require('lzma-native');\n\nvar compressor = lzma.createCompressor();\nvar input = fs.createReadStream('README.md');\nvar output = fs.createWriteStream('README.md.xz');\n\ninput.pipe(compressor).pipe(output);\n```\n\nFor decompression, you can simply use `lzma.createDecompressor()`.\n\nBoth functions return a stream where you can pipe your\ninput in and read your (de)compressed output from.\n\n<a name=\"buffers-usage\"></a>\n\n### For simple strings/Buffers\n\nIf you want your input/output to be Buffers (strings will be accepted as input),\nthis even gets a little simpler:\n\n<!-- runtest:{Compress a simple string directly} -->\n\n```js\nlzma.compress('Banana', function(result) {\n    console.log(result); // <Buffer fd 37 7a 58 5a 00 00 01 69 22 de 36 02 00 21 ...>\n});\n```\n\nAgain, replace `lzma.compress` with `lzma.decompress` and you’ll get the inverse transformation.\n\n`lzma.compress()` and `lzma.decompress()`\nwill return promises and you don’t need to provide any kind of callback\n([Example code](#api-q-compress-examle)).\n\n<a name=\"api\"></a>\n\n## API\n\n<a name=\"api-compat-implementations\"></a>\n\n### Compatibility implementations\n\nApart from the API described here, `lzma-native` implements the APIs of the following\nother LZMA libraries so you can use it nearly as a drop-in replacement:\n\n* [node-xz][node-xz] via `lzma.Compressor` and `lzma.Decompressor`\n* [LZMA-JS][LZMA-JS] via `lzma.LZMA().compress` and `lzma.LZMA().decompress`,\n  though without actual support for progress functions and returning `Buffer` objects\n  instead of integer arrays. (This produces output in the `.lzma` file format, *not* the `.xz` format!)\n\n<a name=\"api-multithreading\"></a>\n\n### Multi-threaded encoding\n\nSince version `1.5.0`, lzma-native supports liblzma’s built-in multi-threading\nencoding capabilities. To make use of them, set the `threads` option to\nan integer value: `lzma.createCompressor({ threads: n });`. You can use\nvalue of `0` to use the number of processor cores. This option is only\navailable for the `easyEncoder` (the default) and `streamEncoder` encoders.\n\nNote that, by default, encoding will take place in Node’s libuv thread pool\nregardless of this option, and setting it when multiple encoders are running\nis likely to affect performance negatively.\n\n<a name=\"api-reference\"></a>\n\n### Reference\n\n[Encoding strings and Buffer objects](#api-encoding-buffers)\n * [`compress()`](#api-compress) – Compress strings and Buffers\n * [`decompress()`](#api-decompress) – Decompress strings and Buffers\n * [`LZMA().compress()`](#api-LZMA_compress) ([LZMA-JS][LZMA-JS] compatibility)\n * [`LZMA().decompress()`](#api-LZMA_decompress) ([LZMA-JS][LZMA-JS] compatibility)\n\n[Creating streams for encoding](#api-creating-streams)\n * [`createCompressor()`](#api-create-compressor) – Compress streams\n * [`createDecompressor()`](#api-create-decompressor) – Decompress streams\n * [`createStream()`](#api-create-stream) – (De-)Compression with advanced options\n * [`Compressor()`](#api-robey_compressor) ([node-xz][node-xz] compatibility)\n * [`Decompressor()`](#api-robey_decompressor) ([node-xz][node-xz] compatibility)\n\n[.xz file metadata](#api-parse-indexes)\n * [`isXZ()`](#api-isxz) – Test Buffer for `.xz` file format\n * [`parseFileIndex()`](#api-parse-file-index) – Read `.xz` file metadata\n * [`parseFileIndexFD()`](#api-parse-file-index-fd) – Read `.xz` metadata from a file descriptor\n\n[Miscellaneous functions](#api-functions)\n * [`crc32()`](#api-crc32) – Calculate CRC32 checksum\n * [`checkSize()`](#api-check-size) – Return required size for specific checksum type\n * [`easyDecoderMemusage()`](#api-easy-decoder-memusage) – Expected memory usage\n * [`easyEncoderMemusage()`](#api-easy-encoder-memusage) – Expected memory usage\n * [`rawDecoderMemusage()`](#api-raw-decoder-memusage) – Expected memory usage\n * [`rawEncoderMemusage()`](#api-raw-encoder-memusage) – Expected memory usage\n * [`versionString()`](#api-version-string) – Native library version string\n * [`versionNumber()`](#api-version-number) – Native library numerical version identifier\n\n<a name=\"api-encoding-buffers\"></a>\n\n### Encoding strings and Buffer objects\n\n<a name=\"api-compress\"></a>\n<a name=\"api-decompress\"></a>\n\n#### `lzma.compress()`, `lzma.decompress()`\n\n* `lzma.compress(string, [opt, ]on_finish)`\n* `lzma.decompress(string, [opt, ]on_finish)`\n\nParam        |  Type            |  Description\n------------ | ---------------- | --------------\n`string`     | Buffer / String  | Any string or buffer to be (de)compressed (that can be passed to `stream.end(…)`)\n[`opt`]      | Options / int    | Optional. See [options](#api-options)\n`on_finish`  | Callback         | Will be invoked with the resulting Buffer as the first parameter when encoding is finished, and as `on_finish(null, err)` in case of an error.\n\nThese methods will also return a promise that you can use directly.\n\nExample code:\n<!-- runtest:{Compress and decompress directly} -->\n\n```js\nlzma.compress('Bananas', 6, function(result) {\n    lzma.decompress(result, function(decompressedResult) {\n        assert.equal(decompressedResult.toString(), 'Bananas');\n    });\n});\n```\n\n<a name=\"api-q-compress-examle\"></a>\nExample code for promises:\n<!-- runtest:{Compress and decompress directly using promises} -->\n\n```js\nlzma.compress('Bananas', 6).then(function(result) {\n    return lzma.decompress(result);\n}).then(function(decompressedResult) {\n    assert.equal(decompressedResult.toString(), 'Bananas');\n}).catch(function(err) {\n    // ...\n});\n```\n\n<a name=\"api-LZMA_compress\"></a>\n<a name=\"api-LZMA_decompress\"></a>\n\n#### `lzma.LZMA().compress()`, `lzma.LZMA().decompress()`\n\n* `lzma.LZMA().compress(string, mode, on_finish[, on_progress])`\n* `lzma.LZMA().decompress(string, on_finish[, on_progress])`\n\n(Compatibility; See [LZMA-JS][LZMA-JS] for the original specs.)\n\n**Note that the result of compression is in the older LZMA1 format (`.lzma` files).**\nThis is different from the more universally used LZMA2 format (`.xz` files) and you will\nhave to take care of possible compatibility issues with systems expecting `.xz` files.\n\nParam         |  Type                   |  Description\n------------- | ----------------------- | --------------\n`string`      | Buffer / String / Array | Any string, buffer, or array of integers or typed integers (e.g. `Uint8Array`)\n`mode`        | int                     | [A number between 0 and 9](#api-options-preset), indicating compression level\n`on_finish`   | Callback                | Will be invoked with the resulting Buffer as the first parameter when encoding is finished, and as `on_finish(null, err)` in case of an error.\n`on_progress` | Callback                | Indicates progress by passing a number in [0.0, 1.0]. Currently, this package only invokes the callback with 0.0 and 1.0.\n\nThese methods will also return a promise that you can use directly.\n\nThis does not work exactly as described in the original [LZMA-JS][LZMA-JS] specification:\n * The results are `Buffer` objects, not integer arrays. This just makes a lot\n   more sense in a Node.js environment.\n * `on_progress` is currently only called with `0.0` and `1.0`.\n\nExample code:\n<!-- runtest:{Compress and decompress directly using LZMA-JS compatibility} -->\n\n```js\nlzma.LZMA().compress('Bananas', 4, function(result) {\n    lzma.LZMA().decompress(result, function(decompressedResult) {\n        assert.equal(decompressedResult.toString(), 'Bananas');\n    });\n});\n```\n\nFor an example using promises, see [`compress()`](#api-q-compress-examle).\n\n<a name=\"api-creating-streams\"></a>\n\n### Creating streams for encoding\n\n<a name=\"api-create-compressor\"></a>\n<a name=\"api-create-decompressor\"></a>\n\n#### `lzma.createCompressor()`, `lzma.createDecompressor()`\n\n* `lzma.createCompressor([options])`\n* `lzma.createDecompressor([options])`\n\nParam       |  Type            |  Description\n----------- | ---------------- | --------------\n[`options`] | Options / int    | Optional. See [options](#api-options)\n\nReturn a [duplex][duplex] stream, i.e. a both readable and writable stream.\nInput will be read, (de)compressed and written out. You can use this to pipe\ninput through this stream, i.e. to mimick the `xz` command line util, you can write:\n\n<!-- runtest:{Compress and decompress using streams} -->\n\n```js\nvar compressor = lzma.createCompressor();\n\nprocess.stdin.pipe(compressor).pipe(process.stdout);\n```\n\nThe output of compression will be in LZMA2 format (`.xz` files), while decompression\nwill accept either format via automatic detection.\n\n<a name=\"api-robey_compressor\"></a>\n<a name=\"api-robey_decompressor\"></a>\n\n#### `lzma.Compressor()`, `lzma.Decompressor()`\n\n* `lzma.Compressor([preset], [options])`\n* `lzma.Decompressor([options])`\n\n(Compatibility; See [node-xz][node-xz] for the original specs.)\n\nThese methods handle the `.xz` file format.\n\nParam       |  Type            |  Description\n----------- | ---------------- | --------------\n[`preset`]  | int              | Optional. See [options.preset](#api-options-preset)\n[`options`] | Options          | Optional. See [options](#api-options)\n\nReturn a [duplex][duplex] stream, i.e. a both readable and writable stream.\nInput will be read, (de)compressed and written out. You can use this to pipe\ninput through this stream, i.e. to mimick the `xz` command line util, you can write:\n\n<!-- runtest:{Compress and decompress using streams with node-xz compatibility} -->\n\n```js\nvar compressor = lzma.Compressor();\n\nprocess.stdin.pipe(compressor).pipe(process.stdout);\n```\n\n<a name=\"api-create-stream\"></a>\n\n#### `lzma.createStream()`\n\n* `lzma.createStream(coder, options)`\n\nParam       |  Type            |  Description\n----------- | ---------------- | --------------\n[`coder`]   | string           | Any of the [supported coder names](#api-coders), e.g. `\"easyEncoder\"` (default) or `\"autoDecoder\"`.\n[`options`] | Options / int    | Optional. See [options](#api-options)\n\nReturn a [duplex][duplex] stream for (de-)compression. You can use this to pipe\ninput through this stream.\n\n<a name=\"#api-coders\"></a>\nThe available coders are (the most interesting ones first):\n\n* `easyEncoder` \n  Standard LZMA2 ([`.xz` file format](https://en.wikipedia.org/wiki/.xz)) encoder.\n  Supports [`options.preset`](#api-options-preset) and [`options.check`](#api-options-check) options.\n* `autoDecoder`\n  Standard LZMA1/2 (both `.xz` and `.lzma`) decoder with auto detection of file format.\n  Supports [`options.memlimit`](#api-options-memlimit) and [`options.flags`](#api-options-flags) options.\n* `aloneEncoder`\n  Encoder which only uses the legacy `.lzma` format.\n  Supports the whole range of [LZMA options](#api-options-lzma).\n\nLess likely to be of interest to you, but also available:\n\n* `aloneDecoder`\n  Decoder which only uses the legacy `.lzma` format.\n  Supports the [`options.memlimit`](#api-options-memlimit) option.\n* `rawEncoder`\n  Custom encoder corresponding to `lzma_raw_encoder` (See the native library docs for details).\n  Supports the [`options.filters`](#api-options-filters) option.\n* `rawDecoder`\n  Custom decoder corresponding to `lzma_raw_decoder` (See the native library docs for details).\n  Supports the [`options.filters`](#api-options-filters) option.\n* `streamEncoder`\n  Custom encoder corresponding to `lzma_stream_encoder` (See the native library docs for details).\n  Supports [`options.filters`](#api-options-filters) and [`options.check`](#api-options-check) options.\n* `streamDecoder`\n  Custom decoder corresponding to `lzma_stream_decoder` (See the native library docs for details).\n  Supports [`options.memlimit`](#api-options-memlimit) and [`options.flags`](#api-options-flags) options.\n\n<a name=\"api-options\"></a>\n\n#### Options\n\n<a name=\"api-options-check\"></a>\n<a name=\"api-options-memlimit\"></a>\n<a name=\"api-options-preset\"></a>\n<a name=\"api-options-flags\"></a>\n<a name=\"api-options-synchronous\"></a>\n\nOption name   |  Type      |  Description\n------------- | ---------- | -------------\n`check`       | check      |  Any of `lzma.CHECK_CRC32`, `lzma.CHECK_CRC64`, `lzma.CHECK_NONE`, `lzma.CHECK_SHA256`\n`memlimit`    | float      |  A memory limit for (de-)compression in bytes \n`preset`      | int        |  A number from 0 to 9, 0 being the fastest and weakest compression, 9 the slowest and highest compression level. (Please also see the [xz(1) manpage][xz-manpage] for notes – don’t just blindly use 9!) You can also OR this with `lzma.PRESET_EXTREME` (the `-e` option to the `xz` command line utility).\n`flags`       | int        |  A bitwise or of `lzma.LZMA_TELL_NO_CHECK`, `lzma.LZMA_TELL_UNSUPPORTED_CHECK`, `lzma.LZMA_TELL_ANY_CHECK`, `lzma.LZMA_CONCATENATED`\n`synchronous` | bool       |  If true, forces synchronous coding (i.e. no usage of threading)\n`bufsize`     | int        |  The default size for allocated buffers\n`threads`     | int        |  Set to an integer to use liblzma’s multi-threading support. 0 will choose the number of CPU cores.\n`blockSize`   | int        |  Maximum uncompressed size of a block in multi-threading mode\n`timeout`     | int        |  Timeout for a single encoding operation in multi-threading mode\n\n<a name=\"api-options-filters\"></a>\n\n`options.filters` can, if the coder supports it, be an array of filter objects, each with the following properties:\n\n* `.id`\n  Any of `lzma.FILTERS_MAX`, `lzma.FILTER_ARM`, `lzma.FILTER_ARMTHUMB`, `lzma.FILTER_IA64`,\n  `lzma.FILTER_POWERPC`, `lzma.FILTER_SPARC`, `lzma.FILTER_X86` or\n  `lzma.FILTER_DELTA`, `lzma.FILTER_LZMA1`, `lzma.FILTER_LZMA2`\n\nThe delta filter supports the additional option `.dist` for a distance between bytes (see the [xz(1) manpage][xz-manpage]).\n\n<a name=\"api-options-lzma\"></a>\n\nThe LZMA filter supports the additional options `.dict_size`, `.lp`, `.lc`, `pb`, `.mode`, `nice_len`, `.mf`, `.depth`\nand `.preset`. See the [xz(1) manpage][xz-manpage] for meaning of these parameters and additional information.\n\n<a name=\"api-functions\"></a>\n\n### Miscellaneous functions\n\n<a name=\"api-crc32\"></a>\n\n#### `lzma.crc32()`\n\n* `lzma.crc32(input[, encoding[, previous]])`\n\nCompute the CRC32 checksum of a Buffer or string.\n\nParam        |  Type            |  Description\n------------ | ---------------- | --------------\n`input`      | string / Buffer  | Any string or Buffer.\n[`encoding`] | string           | Optional. If `input` is a string, an encoding to use when converting into binary.\n[`previous`] | int              | The result of a previous CRC32 calculation so that you can compute the checksum per each chunk\n\nExample usage:\n<!-- runtest:{Compute the CRC32 of a string} -->\n\n```js\nlzma.crc32('Banana') // => 69690105\n```\n\n<a name=\"api-check-size\"></a>\n\n#### `lzma.checkSize()`\n\n* `lzma.checkSize(check)`\n\nReturn the byte size of a check sum.\n\nParam        |  Type            |  Description\n------------ | ---------------- | --------------\n`check`      | check            | Any supported check constant.\n\nExample usage:\n<!-- runtest:{Calculate some check sizes} -->\n\n```js\nlzma.checkSize(lzma.CHECK_SHA256) // => 16\nlzma.checkSize(lzma.CHECK_CRC32)  // => 4\n```\n\n<a name=\"api-easy-decoder-memusage\"></a>\n\n#### `lzma.easyDecoderMemusage()`\n\n* `lzma.easyDecoderMemusage(preset)`\n\nReturns the approximate memory usage when decoding using easyDecoder for a given preset.\n\nParam        |  Type       |  Description\n------------ | ----------- | --------------\n`preset`     | preset      |  A compression level from 0 to 9\n\nExample usage:\n<!-- runtest:{Return memory usage for decoding} -->\n\n```js\nlzma.easyDecoderMemusage(6) // => 8454192\n```\n\n<a name=\"api-easy-encoder-memusage\"></a>\n\n#### `lzma.easyEncoderMemusage()`\n\n* `lzma.easyEncoderMemusage(preset)`\n\nReturns the approximate memory usage when encoding using easyEncoder for a given preset.\n\nParam        |  Type       |  Description\n------------ | ----------- | --------------\n`preset`     | preset      |  A compression level from 0 to 9\n\nExample usage:\n<!-- runtest:{Return memory usage for encoding} -->\n\n```js\nlzma.easyEncoderMemusage(6) // => 97620499\n```\n\n<a name=\"api-raw-decoder-memusage\"></a>\n\n#### `lzma.rawDecoderMemusage()`\n\n* `lzma.rawDecoderMemusage(filters)`\n\nReturns the approximate memory usage when decoding using rawDecoder for a given filter list.\n\nParam        |  Type       |  Description\n------------ | ----------- | --------------\n`filters`    | array       |  An array of [filters](#api-options-filters)\n\n<a name=\"api-raw-encoder-memusage\"></a>\n\n#### `lzma.rawEncoderMemusage()`\n\n* `lzma.rawEncoderMemusage(filters)`\n\nReturns the approximate memory usage when encoding using rawEncoder for a given filter list.\n\nParam        |  Type       |  Description\n------------ | ----------- | --------------\n`filters`    | array       |  An array of [filters](#api-options-filters)\n\n<a name=\"api-version-string\"></a>\n\n#### `lzma.versionString()`\n\n* `lzma.versionString()`\n\nReturns the version of the underlying C library.\n\nExample usage:\n<!-- runtest:{Return a version string} -->\n\n```js\nlzma.versionString() // => '5.2.3'\n```\n\n<a name=\"api-version-number\"></a>\n\n#### `lzma.versionNumber()`\n\n* `lzma.versionNumber()`\n\nReturns the version of the underlying C library.\n\nExample usage:\n<!-- runtest:{Return a numeric version identifier} -->\n\n```js\nlzma.versionNumber() // => 50020012\n```\n\n<a name=\"api-parse-indexes\"></a>\n\n### .xz file metadata\n\n<a name=\"api-isxz\"></a>\n\n#### `lzma.isXZ()`\n\n* `lzma.isXZ(input)`\n\nTells whether an input buffer is an XZ file (`.xz`, LZMA2 format) using the\nfile format’s magic number. This is not a complete test, i.e. the data\nfollowing the file header may still be invalid in some way.\n\nParam        |  Type            |  Description\n------------ | ---------------- | --------------\n`input`      | string / Buffer  | Any string or Buffer (integer arrays accepted).\n\nExample usage:\n<!-- runtest:{.isXZ() checks some strings correctly} -->\n\n```js\nlzma.isXZ(fs.readFileSync('test/hamlet.txt.xz')); // => true\nlzma.isXZ(fs.readFileSync('test/hamlet.txt.lzma')); // => false\nlzma.isXZ('Banana'); // => false\n```\n\n(The magic number of XZ files is hex `fd 37 7a 58 5a 00` at position 0.)\n\n<a name=\"api-parse-file-index\"></a>\n\n#### `lzma.parseFileIndex()`\n\n* `lzma.parseFileIndex(options[, callback])`\n\nRead `.xz` file metadata.\n\n`options.fileSize` needs to be an integer indicating the size of the file\nbeing inspected, e.g. obtained by `fs.stat()`.\n\n`options.read(count, offset, cb)` must be a function that reads `count` bytes\nfrom the underlying file, starting at position `offset`. If that is not\npossible, e.g. because the file does not have enough bytes, the file should\nbe considered corrupt. On success, `cb` should be called with a `Buffer`\ncontaining the read data. `cb` can be invoked as `cb(err, buffer)`, in which\ncase `err` will be passed along to the original `callback` argument when set.\n\n`callback` will be called with `err` and `info` as its arguments.\n\nIf no `callback` is provided, `options.read()` must work synchronously and\nthe file info will be returned from `lzma.parseFileIndex()`.\n\nExample usage:\n<!-- runtest:{Read .xz file metadata} -->\n\n```js\nfs.readFile('test/hamlet.txt.xz', function(err, content) {\n  // handle error\n\n  lzma.parseFileIndex({\n    fileSize: content.length,\n    read: function(count, offset, cb) {\n      cb(content.slice(offset, offset + count));\n    }\n  }, function(err, info) {\n    // handle error\n    \n    // do something with e.g. info.uncompressedSize\n  });\n});\n```\n\n<a name=\"api-parse-file-index-fd\"></a>\n\n#### `lzma.parseFileIndexFD()`\n\n* `lzma.parseFileIndexFD(fd, callback)`\n\nRead `.xz` metadata from a file descriptor.\n\nThis is like [`parseFileIndex()`](#api-parse-file-index), but lets you \npass an file descriptor in `fd`. The file will be inspected using\n`fs.stat()` and `fs.read()`. The file descriptor will not be opened or closed\nby this call.\n\nExample usage:\n<!-- runtest:{Read .xz file metadata from a file descriptor} -->\n\n```js\nfs.open('test/hamlet.txt.xz', 'r', function(err, fd) {\n  // handle error\n\n  lzma.parseFileIndexFD(fd, function(err, info) {\n    // handle error\n    \n    // do something with e.g. info.uncompressedSize\n    \n    fs.close(fd, function(err) { /* handle error */ });\n  });\n});\n```\n\n## Installation\n\nThis package includes the native C library, so there is no need to install it separately.\n\n## Licensing\n\nThe original C library package contains code under various licenses,\nwith its core (liblzma) being public domain. See its contents for details.\nThis wrapper is licensed under the MIT License.\n\n## Related projects\n\nOther implementations of the LZMA algorithms for node.js and/or web clients include:\n\n* [lzma-purejs](https://github.com/cscott/lzma-purejs)\n* [LZMA-JS](https://github.com/nmrugg/LZMA-JS)\n* [node-xz](https://github.com/robey/node-xz) (native)\n* [node-liblzma](https://github.com/oorabona/node-liblzma) (native)\n\nNote that LZMA has been designed to have much faster decompression than\ncompression, which is something you may want to take into account when\nchoosing an compression algorithm for large files. Almost always, LZMA achieves\nhigher compression ratios than other algorithms, though.\n\n## Acknowledgements\n\nInitial development of this project was financially supported by [Tradity](https://tradity.de/).\n\n[node-xz]: https://github.com/robey/node-xz\n[LZMA-JS]: https://github.com/nmrugg/LZMA-JS\n[Q]: https://github.com/kriskowal/q\n[duplex]: https://nodejs.org/api/stream.html#stream_class_stream_duplex\n[xz-manpage]: https://www.freebsd.org/cgi/man.cgi?query=xz&sektion=1&manpath=FreeBSD+8.3-RELEASE\n","starsCount":2,"created":"2014-05-25T16:04:44.182Z","modified":"2017-07-04T21:23:24.112Z","lastPublisher":{"name":"addaleax","email":"anna@addaleax.net"},"owners":[{"name":"addaleax","email":"anna@addaleax.net"}],"other":{"_attachments":{},"_id":"lzma-native","_nodeVersion":"9.0.0-pre","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lzma-native-3.0.1.tgz_1499203401311_0.977329688379541"},"_npmUser":{"name":"addaleax","email":"anna@addaleax.net"},"_npmVersion":"5.0.3","_rev":"10-3df00512f92a3049500aa62a73802f4c","author":{"name":"Anna Henningsen","email":"anna@addaleax.net"},"bugs":{"url":"https://github.com/addaleax/lzma-native/issues"},"directories":{},"dist-tags":{"latest":"3.0.1","0.3.0-rc":"0.3.0"},"dist":{"integrity":"sha512-RZsLWwvuCpkaXEt2p2pmx7dI20UUfXK9OTyG8KGxSiZA79i67TWLnhlNtCMGGZ0xP3NaWjkq4W5+gol7l7RyPQ==","shasum":"2eca857eba8d38b9ee187dddf42d8532009e7ed4","tarball":"https://registry.npmjs.org/lzma-native/-/lzma-native-3.0.1.tgz"},"maintainers":[{"name":"addaleax","email":"anna@addaleax.net"}],"readmeFilename":"README.md","time":{"modified":"2017-07-04T21:23:24.112Z","created":"2014-05-25T16:04:44.182Z","0.0.1":"2014-05-25T16:05:04.852Z","0.0.2":"2014-05-27T01:19:34.234Z","0.0.3":"2014-05-27T01:28:05.036Z","0.0.4":"2014-05-28T21:09:16.769Z","0.0.5":"2014-06-25T20:34:25.911Z","0.1.0":"2014-06-26T02:13:47.178Z","0.1.1":"2014-06-26T03:06:34.607Z","0.1.2":"2014-07-04T23:44:54.975Z","0.1.3":"2014-08-20T20:41:58.749Z","0.1.4":"2014-09-08T20:34:16.491Z","0.1.5":"2014-11-20T08:38:37.287Z","0.1.6":"2014-11-20T15:19:38.764Z","0.1.7":"2014-12-02T13:09:28.046Z","0.2.0":"2014-12-10T22:09:32.927Z","0.2.1":"2014-12-11T04:01:58.917Z","0.2.2":"2014-12-13T08:21:14.563Z","0.2.3":"2014-12-14T09:44:44.784Z","0.2.4":"2014-12-23T13:47:44.515Z","0.2.5":"2015-01-17T03:11:34.988Z","0.2.6":"2015-01-24T19:58:22.298Z","0.2.7":"2015-02-04T03:55:16.691Z","0.2.8":"2015-02-08T17:04:52.121Z","0.2.9":"2015-02-12T20:45:56.312Z","0.2.10":"2015-02-26T21:02:10.312Z","0.2.11":"2015-03-09T23:04:17.563Z","0.2.12":"2015-06-03T22:38:47.237Z","0.2.13":"2015-07-14T16:17:09.064Z","0.2.14":"2015-08-09T20:08:43.506Z","0.3.0":"2015-08-15T16:42:26.090Z","0.3.1":"2015-08-19T03:35:25.898Z","0.3.2":"2015-08-19T19:26:48.586Z","0.2.15":"2015-08-19T19:27:03.091Z","0.3.3":"2015-08-19T19:50:51.893Z","0.2.16":"2015-08-30T13:19:38.551Z","0.3.4":"2015-08-30T13:29:31.263Z","0.3.5":"2015-09-04T09:21:04.510Z","0.3.6":"2015-09-04T21:42:13.518Z","0.3.7":"2015-09-04T23:16:32.255Z","0.3.8":"2015-09-09T00:27:23.828Z","0.2.17":"2015-09-22T00:06:05.794Z","0.3.9":"2015-09-22T00:06:38.433Z","0.3.10":"2015-10-15T12:07:08.242Z","0.4.0":"2015-11-06T20:20:21.276Z","0.5.0":"2015-12-08T05:18:02.798Z","0.3.11":"2015-12-11T02:09:09.599Z","0.5.1":"2015-12-11T02:09:54.673Z","0.5.2":"2016-01-08T03:26:36.809Z","0.5.3":"2016-01-10T01:19:24.553Z","1.0.0":"2016-01-11T07:50:47.691Z","1.0.1":"2016-01-11T07:55:49.200Z","1.0.2":"2016-01-11T08:21:46.399Z","1.0.3":"2016-01-12T03:06:34.577Z","1.0.4":"2016-01-22T17:49:06.609Z","1.1.0":"2016-02-13T21:52:52.346Z","1.2.0":"2016-04-22T23:05:05.328Z","1.2.1":"2016-04-23T10:44:27.342Z","1.3.0":"2016-04-28T02:26:50.207Z","1.3.1":"2016-04-28T15:09:23.383Z","1.4.0":"2016-05-16T19:05:07.420Z","1.4.1":"2016-05-18T23:59:55.476Z","1.5.0":"2016-06-29T09:14:27.329Z","1.5.1":"2016-06-29T23:27:13.520Z","1.5.2":"2016-08-26T11:05:09.890Z","2.0.0":"2017-03-19T20:50:44.141Z","2.0.1":"2017-03-24T20:13:26.902Z","2.0.2":"2017-05-18T17:03:21.831Z","2.0.3":"2017-06-21T16:26:06.968Z","2.0.4":"2017-06-25T19:28:38.443Z","3.0.0":"2017-06-26T22:18:58.066Z","3.0.1":"2017-07-04T21:23:24.112Z"},"users":{"moinism":true,"marianoviola":true}}}