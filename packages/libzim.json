{"name":"libzim","version":"1.0.0","description":"Bindings to zimlib (read/write OpenZIM files)","main":"lib/index","scripts":{"configure":"node-pre-gyp configure","build":"node-pre-gyp build","debug-build":"node-pre-gyp --debug build","rebuild":"node-pre-gyp rebuild","debug-rebuild":"node-pre-gyp --debug rebuild","mocha-check-es6":"if node -e 'process.exit(/v0[.]/.test(process.version) ? 0 : 1)' ; then npm run mocha-es5 ; else npm run mocha ; fi","mocha-es5":"mocha test/sanity.js","mocha":"mocha --harmony","jscs-check-node":"if node -e 'process.exit(/v0[.]/.test(process.version) ? 0 : 1)' ; then echo Skipping jscs ; else npm run jscs ; fi","jslint":"jshint . && npm run jscs-check-node","jscs":"jscs .","jscs-fix":"jscs --fix .","cpplint":"scripts/cpplint.py --root=src src/*.h src/*.cc","lint":"npm run jslint && npm run cpplint","test":"npm run lint && npm run mocha-check-es6","valgrind":"valgrind --trace-children=yes --leak-check=full node --gc_interval=1 node_modules/.bin/_mocha --timeout 0","install":"node-pre-gyp install --fallback-to-build","prepublishx":"npm-package-integrity","gh-publish":"scripts/publish.js","clean":"rm -rf node_modules lib/binding build"},"bin":{"zimdump":"./bin/zimdump.js"},"binary":{"module_name":"zim","module_path":"./lib/binding/{node_abi}-{platform}-{arch}","host":"https://github.com","remote_path":"/cscott/node-libzim/releases/download/{version}/"},"dependencies":{"nan":"^2.1.0","node-pre-gyp":"^0.6.28","yargs":"^4.7.1"},"bundleDependencies":["node-pre-gyp"],"devDependencies":{"jscs":"^3.0.4","jshint":"^2.9.2","mocha":"^2.5.3","npm-package-integrity":"^1.1.1","should":"^9.0.2"},"repository":"https://github.com/cscott/node-libzim","keywords":["zim","libzim","zimlib","openzim"],"license":"GPL-2.0","gitHead":"18f80bb59dc20d1f097716796a069a3d593c07f7","homepage":"https://github.com/cscott/node-libzim#readme","versions":[{"number":"0.0.2","date":"2016-06-23T16:44:05.599Z"},{"number":"0.0.3","date":"2016-06-23T23:11:42.112Z"},{"number":"0.0.4","date":"2016-06-23T23:12:35.799Z"},{"number":"1.0.0","date":"2016-06-30T22:19:22.910Z"}],"readme":"# libzim\n[![NPM][NPM1]][NPM2]\n\n[![Build Status][1]][2] [![dependency status][3]][4] [![dev dependency status][5]][6]\n\nThe node `libzim` package binds to the `zimlib` library from [OpenZIM][]\nto allow read/write access to ZIM files.\n\n## USAGE\n\n```js\nvar zim = require('libzim');\n\nclass TestArticle extends zim.writer.Article {\n  constructor(id) {\n    super();\n    this._id = id;\n    this._data = new Buffer(\"this is article \" + id);\n  }\n  getAid() { return this._id; }\n  getNamespace() { return 'A'; }\n  getUrl() { return this._id; }\n  getTitle() { return this._id; }\n  isRedirect() { return false; }\n  getMimeType() { return \"text/plain\"; }\n  getRedirectAid() { return \"\"; }\n  getData() {\n    return new zim.Blob(this._data);\n  }\n}\n\nclass TestArticleSource extends zim.writer.ArticleSource {\n  constructor(max = 16, szfunc) {\n    super();\n    this._next = 0;\n    this._articles = [];\n    this.getCurrentSize = szfunc;\n    for (var n = 0; n < max ; n++) {\n      this._articles[n] = new TestArticle(\"\" + (n+1));\n    }\n  }\n  getNextArticle() {\n    console.log('After ' + this._next + ' articles:',\n                this.getCurrentSize(), 'bytes');\n    return this._articles[this._next++];\n  }\n}\n\nc = new zim.writer.ZimCreator();\nsrc = new TestArticleSource(8, () => c.getCurrentSize());\nc.create(\"foo.zim\", src);\n```\n\n## INSTALLING\nYou can use [`npm`](https://github.com/isaacs/npm) to download and install:\n\n* The latest `libzim` package: `npm install libzim`\n\n* GitHub's `master` branch: `npm install https://github.com/cscott/node-libzim/tarball/master`\n\nIn both cases the module is automatically built with npm's internal\nversion of `node-gyp`, and thus your system must meet [node-gyp's\nrequirements](https://github.com/TooTallNate/node-gyp#installation).\n\nIt is also possible to make your own build of `libzim` from its source\ninstead of its npm package ([see below](#building-from-the-source)).\n\n## BUILDING FROM THE SOURCE\n\nUnless building via `npm install` (which uses its own `node-gyp`) you\nwill need `node-gyp` installed globally:\n\n    npm install node-gyp -g\n\nThe `libzim` module depends only on the `zimlib` library from\nOpenZIM. By default, an internal/bundled copy of OpenZIM's `zimlib`\nwill be built and statically linked, so an externally installed\n`zimlib` is not required.\n\nIf you wish to install against an external `zimlib` then you need to\npass the `--libzim` argument to `node-gyp`, `npm install` or the\n`configure` wrapper.\n\n    ./configure --libzim=external\n    make\n\nOr, using the node-gyp directly:\n\n     node-gyp --libzim=external rebuild\n\nOr, using npm:\n\n     npm install --libzim=external\n\nIf building against an external `zimlib` make sure to have the\ndevelopment headers available. Mac OS X ships with these by\ndefault. If you don't have them installed, install the `-dev` package\nwith your package manager, e.g. `apt-get install libzim-dev` for\nDebian/Ubuntu.\n\n## TESTING\n\n[mocha](https://github.com/visionmedia/mocha) is required to run unit tests.\n\n    npm install mocha\n    npm test\n\n\n## API\nWe follow the `zimlib` API closely where possible.\n\n<hr>\n### `zim.Article`\n[`zim.Article`]: #zimarticle\nA read-only object representing an individual article in a ZIM file.\n#### `new zim.Article()`\nCreate a new placeholder `Article` object for which the `good` method will\nreturn false.\n#### `zim.Article#getDirent()` → [`zim.Dirent`][]\n#### `zim.Article#getParameter()` → [`Buffer`]\n#### `zim.Article#getTitle()` → `string`\n#### `zim.Article#getUrl()` → `string`\n#### `zim.Article#getLongUrl()` → `string`\n#### `zim.Article#getLibraryMimeType()` → `number`\n#### `zim.Article#getMimeType()` → `string`\n#### `zim.Article#isRedirect()` → `boolean`\n#### `zim.Article#isLinktarget()` → `boolean`\n#### `zim.Article#isDeleted()` → `boolean`\n#### `zim.Article#getNamespace()` → `string`\n#### `zim.Article#getRedirectIndex()` → `number`\n#### `zim.Article#getRedirectArticle()` → [`zim.Article`][]\n#### `zim.Article#getArticleSize()` → `number`\n#### `zim.Article#getCluster()` → [`zim.Cluster`][]\n#### `zim.Article#getData()` → [`zim.Blob`][]\n#### `zim.Article#getPage([boolean layout [, number maxRecurse]])` → `string`\n#### `zim.Article#getIndex()` → `number`\n#### `zim.Article#good()` → `boolean`\n<hr>\n### `zim.Blob`\n[`zim.Blob`]: #zimblob\n[`Buffer`]: https://nodejs.org/api/buffer.html\n\n#### `new zim.Blob(Buffer data)`\nCreates an object representing the data in the supplied node\n[`Buffer`][].\n#### `zim.Blob#data` → [`Buffer`][]\nReturns a buffer object containing the data represented by this blob.\nThis buffer is live: changing the values in the buffer will change the\ndata in the blob.\n#### `zim.Blob#size` → `number`\nReturns the (uncompressed) number of bytes of data in this blob.\n<hr>\n### `zim.Cluster`\n[`zim.Cluster`]: #zimcluster\n#### `new zim.Cluster()`\n#### `zim.Cluster#setCompression(number compressionType)` → `undefined`\n#### `zim.Cluster#getCompression()` → `number`\n#### `zim.Cluster#isCompressed()` → `boolean`\n#### `zim.Cluster#getBlob(number n)` → [`zim.Blob`]\n#### `zim.Cluster#getBlobSize(number n)` → `number`\n#### `zim.Cluster#count()` → `number`\n#### `zim.Cluster#size()` → `number`\n#### `zim.Cluster#clear()` → `undefined`\n#### `zim.Cluster#addBlob(zim.Blob|Buffer data)` → `undefined`\n#### `zim.Cluster#good()` → `boolean`\n<hr>\n### `zim.Dirent`\n[`zim.Dirent`]: #zimdirent\n#### `new zim.Dirent()`\nCreate a new mutable directory entry object.\n#### `zim.Dirent#isRedirect()` → `boolean`\n#### `zim.Dirent#isLinktarget()` → `boolean`\n#### `zim.Dirent#isDeleted()` → `boolean`\n#### `zim.Dirent#isArticle()` → `boolean`\n#### `zim.Dirent#getMimeType()` → `number`\nSee `zim.File#getMimeType(n)` to convert this to a string.\n#### `zim.Dirent#getVersion()` → `number`\n#### `zim.Dirent#setVersion(number v)` → `undefined`\n#### `zim.Dirent#getClusterNumber()` → `number`\n#### `zim.Dirent#getBlobNumber()` → `number`\n#### `zim.Dirent#setCluster(number cluster, number blob)` → `undefined`\n#### `zim.Dirent#getRedirectIndex()` → `number`\n#### `zim.Dirent#getNamespace()` → `string`\n#### `zim.Dirent#getTitle()` → `string`\n#### `zim.Dirent#getUrl()` → `string`\n#### `zim.Dirent#getLongUrl()` → `string`\n#### `zim.Dirent#getParameter()` → [`Buffer`]\n#### `zim.Dirent#getDirentSize()` → `number`\n#### `zim.Dirent#setTitle(string title)` → `undefined`\n#### `zim.Dirent#setUrl(string ns, string url)` → `undefined`\n#### `zim.Dirent#setParameter(Buffer b)` → `undefined`\n#### `zim.Dirent#setRedirect(number idx)` → `undefined`\n#### `zim.Dirent#setMimeType(number mime)` → `undefined`\n#### `zim.Dirent#setLinktarget()` → `undefined`\n#### `zim.Dirent#setDeleted()` → `undefined`\n#### `zim.Dirent#setArticle(number mime, number cluster, number blob)` → `undefined`\n\n#### `number zim.Dirent.redirectMimeType`\nInteger index used as the mime type for redirect articles.\n#### `number zim.Dirent.linktargetMimeType`\nInteger index used as the mime type for link target articles.\n#### `number zim.Dirent.deletedMimeType`\nInteger index used as the mime type for deleted articles.\n<hr>\n### `zim.File`\n[`zim.File`]: #zimfile\n#### `new zim.File(string filename)`\nOpen the given `filename` and return a `zim.File` object describing it.\n#### `zim.File#getFilename()` → `string`\n#### `zim.File#getFileheader()` → [`zim.Fileheader`]\n#### `zim.File#getFilesize()` → `number`\n#### `zim.File#getDirent(number idx)` → [`zim.Dirent`]\nReturns the dirent with the given index in the URL index.\n#### `zim.File#getDirentByTitle(number idx)` → [`zim.Dirent`]\nReturns the dirent with the given index in the title index.\n#### `zim.File#getCountArticles()` → `number`\nThe number of articles in the index.\n(This will be the same value for both URL and title indices.)\n#### `zim.File#getArticle(number idx)` → [`zim.Article`]\nReturns the article with the given index in the URL index.\n#### `zim.File#getArticle(string ns, string url)` → [`zim.Article`]\n#### `zim.File#getArticleByUrl(string url)` → [`zim.Article`]\n#### `zim.File#getArticleByTitle(number idx)` → [`zim.Article`]\nReturns the article with the given index in the title index.\n#### `zim.File#getArticleByTitle(string ns, string title)` → [`zim.Article`]\n#### `zim.File#getCluster(number idx)` → [`zim.Cluster`]\n#### `zim.File#getClusterOffset(number idx)` → `number`\n#### `zim.File#getCountClusters()` → `number`\n#### `zim.File#getBlob(number cluster, number blob)` → [`zim.Blob`]\n#### `zim.File#getNamespaceBeginOffset(string ns)` → `number`\nIndex of the first entry in the given namespace.\n(This will be the same value for both URL and title indices.)\n#### `zim.File#getNamespaceEndOffset(string ns)` → `number`\nIndex of the first entry *not* in the given namespace.\n(This will be the same value for both URL and title indices.)\n#### `zim.File#getNamespaceCount(string ns)` → `number`\nThe number of articles in the given namespace.\n#### `zim.File#getNamespaces()` → `string`\nA string with one character per namespace in the file.\n#### `zim.File#hasNamespace(string ns)` → `boolean`\n#### `zim.File#good()` → `boolean`\n#### `zim.File#getMTime()` → `number`\n#### `zim.File#getChecksum()` → `string`\nReturns the MD5 checksum as a 32 character hexadecimal number.\n#### `zim.File#verify()` → `boolean`\nReturns true iff the checksum validates.\n#### `zim.File#iterator([number idx])` → [`zim.FileIterator`]\n#### `zim.File#iteratorByTitle([number idx])` → [`zim.FileIterator`]\n#### `zim.File#find(string url)` → [`zim.FileIterator`]\n#### `zim.File#find(string ns, string url)` → [`zim.FileIterator`]\n#### `zim.File#findByTitle(string ns, string title)` → [`zim.FileIterator`]\n<hr>\n### `zim.FileIterator`\n[`zim.FileIterator`]: #zimfileiterator\n#### `zim.FileIterator#getIndex()` → `number`\n#### `zim.FileIterator#getFile()` → [`zim.File`]\n#### `zim.FileIterator#hasNext()` → `boolean`\n#### `zim.FileIterator#get()` → [`zim.Article`]\n#### `zim.FileIterator#next()` → { [`zim.Article`] value, boolean done }\n<hr>\n### `zim.Fileheader`\n[`zim.Fileheader`]: #zimfileheader\n`Fileheader` objects can't be constructed directly; they are obtained only via\n`zim.File#getFileheader()`.\n#### `zim.Fileheader#getUuid()` → [`zim.Uuid`]\n#### `zim.Fileheader#setUuid(zim.Uuid uuid)` → `undefined`\n#### `zim.Fileheader#getArticleCount()` → `number`\n#### `zim.Fileheader#setArticleCount(number count)` → `undefined`\n#### `zim.Fileheader#getTitleIdxPos()` → `number`\n#### `zim.Fileheader#setTitleIdxPos(number pos)` → `undefined`\n#### `zim.Fileheader#getUrlPtrPos()` → `number`\n#### `zim.Fileheader#setUrlPtrPos(number pos)` → `undefined`\n#### `zim.Fileheader#getMimeListPos()` → `number`\n#### `zim.Fileheader#setMimeListPos(number pos)` → `undefined`\n#### `zim.Fileheader#getClusterCount()` → `number`\n#### `zim.Fileheader#setClusterCount(number count)` → `undefined`\n#### `zim.Fileheader#getClusterPtrPos()` → `number`\n#### `zim.Fileheader#setClusterPtrPos(number pos)` → `undefined`\n#### `zim.Fileheader#hasMainPage()` → `boolean`\n#### `zim.Fileheader#getMainPage()` → `number`\n#### `zim.Fileheader#setMainPage(number idx)` → `undefined`\n#### `zim.Fileheader#hasLayoutPage()` → `boolean`\n#### `zim.Fileheader#getLayoutPage()` → `number`\n#### `zim.Fileheader#setLayoutPage(number idx)` → `undefined`\n#### `zim.Fileheader#hasChecksum()` → `boolean`\n#### `zim.Fileheader#getChecksumPos()` → `number`\n#### `zim.Fileheader#setChecksumPos(number pos)` → `undefined`\n<hr>\n### `zim.Uuid`\n[`zim.Uuid`]: #zimuuid\n#### `new zim.Uuid()`\nCreate a new UUID which is all zeros.\n#### `zim.Uuid.generate()` → `number`\nCreate a new UUID based on a hash of the time of day.\n#### `zim.Uuid#data()` → [`Buffer`]\nReturns a buffer with 16 bytes of UUID data.\n#### `zim.Uuid#size()` → `number`\nReturns 16.\n#### `zim.Uuid#toString()` → `string`\nReturns a pretty-printed UID.\n<hr>\n### `zim.ZIntStream`\n[`zim.ZIntStream`]: #zimzintstream\n#### `zim.ZIntStream.fromBuffer(Buffer buf)` → `array`\nConverts an array of numbers between `0` and `2^53` to a [`Buffer`].\nSee `zim.writer.Article.getParameter()`.\n#### `zim.ZIntStream.toBuffer(array of number)` → [`Buffer`]\nConverts a [`Buffer`] to an array of numbers between `0` and `2^53`.\nSee `zim.Article.getParameter()`.\n<hr>\n### `zim.writer.Article`\n[`zim.writer.Article`]: #zimwriterarticle\nAn abstract base class describing an article for use by\n[`zim.writer.ZimCreator`].\n#### `zim.writer.Article#getAid()` → `string`\nAbstract method.\n#### `zim.writer.Article#getNamespace()` → `string`\nAbstract method.\n#### `zim.writer.Article#getUrl()` → `string`\nAbstract method.\n#### `zim.writer.Article#getTitle()` → `string`\nAbstract method.\n#### `zim.writer.Article#getVersion()` → `number`\nDefault implementation returns `0`.\n#### `zim.writer.Article#isRedirect()` → `boolean`\nDefault implementation returns `false`.\n#### `zim.writer.Article#isLinktarget()` → `boolean`\nDefault implementation returns `false`.\n#### `zim.writer.Article#isDeleted()` → `boolean`\nDefault implementation returns `false`.\n#### `zim.writer.Article#getMimeType()` → `string`\nAbstract method.\n#### `zim.writer.Article#shouldCompress()` → `boolean`\nDefault implementation returns `true` iff mime type is `image/jpeg`,\n`image/png`, `image/tiff`, `image/gif`, or `application/zip`.\n#### `zim.writer.Article#getRedirectAid()` → `string`\nDefault implemention returns empty string.\n#### `zim.writer.Article#getParameter()` → [`Buffer`]\nDefault implemention returns empty buffer.\n#### `zim.writer.Article#getNextCategory()` → `string`\nDefault implemention returns empty string.\n#### `zim.writer.Article#getData()` → [`zim.Blob`]\nAbstract method.\n<hr>\n### `zim.writer.ArticleSource`\n[`zim.writer.ArticleSource`]: #zimwriterarticlesource\nAn abstract base class describing a collection of articles for use by\n[`zim.writer.ZimCreator`].\n#### `zim.writer.ArticleSource#setFilename(string filename)` → `undefined`\nDefault implemention ignores the provided filename.\n#### `zim.writer.ArticleSource#getNextArticle()` → [`zim.writer.Article`]\nAbstract method.\n#### `zim.writer.ArticleSource#getUuid()` → [`zim.Uuid`]\nDefault implementation calls `zim.Uuid.generate()`.\n#### `zim.writer.ArticleSource#getMainPage()` → `string`\nDefault implementation returns the empty string.\n#### `zim.writer.ArticleSource#getLayoutPage()` → `string`\nDefault implementation returns the empty string.\n#### `zim.writer.ArticleSource#getCategory()` → [`zim.writer.Category`]\nDefault implementation returns `null`.\n<hr>\n### `zim.writer.Category`\n[`zim.writer.Category`]: #zimwritercategory\nAn abstract base class describing a category for use by\n[`zim.writer.ZimCreator`].\n#### `zim.writer.Category#getData()` → [`zim.Blob`]\nAbstract method.\n#### `zim.writer.Category#getUrl()` → `string`\nAbstract method.\n#### `zim.writer.Category#getTitle()` → `string`\nAbstract method.\n<hr>\n### `zim.writer.ZimCreator`\n[`zim.writer.ZimCreator`]: #zimwriterzimcreator\n#### `new zim.writer.ZimCreator()`\n#### `zim.writer.ZimCreator#create(string filename, zim.writer.ArticleSource src)` → `undefined`\nWrite a ZIM file with the given `filename` using the articles described\nby `src`.\n#### `zim.writer.ZimCreator#getMinChunkSize()` → `number`\n#### `zim.writer.ZimCreator#setMinChunkSize(number s)` → `undefined`\n#### `zim.writer.ZimCreator#getCurrentSize()` → `number`\nReturns an approximation to the current size of the ZIM file.\n\n## CONTRIBUTORS\n\n* [C. Scott Ananian](https://github.com/cscott)\n\n## RELATED PROJECTS\n\n* [OpenZIM][]\n\n## LICENSE\nCopyright (c) 2016 C. Scott Ananian.\n\n`libzim` is licensed using the same license as the zimlib library\nin [OpenZIM][]: GPLv2.\n\n[OpenZIM]:     http://openzim.org/\n\n[NPM1]: https://nodei.co/npm/libzim.png\n[NPM2]: https://nodei.co/npm/libzim/\n\n[1]: https://travis-ci.org/cscott/node-libzim.png\n[2]: https://travis-ci.org/cscott/node-libzim\n[3]: https://david-dm.org/cscott/node-libzim.png\n[4]: https://david-dm.org/cscott/node-libzim\n[5]: https://david-dm.org/cscott/node-libzim/dev-status.png\n[6]: https://david-dm.org/cscott/node-libzim#info=devDependencies\n","created":"2016-06-23T16:44:05.599Z","modified":"2016-06-30T22:19:22.910Z","lastPublisher":{"name":"cscott","email":"cscott@cscott.net"},"owners":[{"name":"cscott","email":"cscott@cscott.net"}],"other":{"_attachments":{},"_from":".","_id":"libzim","_nodeVersion":"6.2.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/libzim-1.0.0.tgz_1467325159427_0.5852031144313514"},"_npmUser":{"name":"cscott","email":"cscott@cscott.net"},"_npmVersion":"3.10.2","_rev":"1-bd7a2649d631472503b1efdbdac74930","_shasum":"6094c9818927550d541c9c707cfcf3137816e892","author":{"name":"C. Scott Ananian","email":"cscott@cscott.net"},"bugs":{"url":"https://github.com/cscott/node-libzim/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"6094c9818927550d541c9c707cfcf3137816e892","tarball":"http://registry.npmjs.org/libzim/-/libzim-1.0.0.tgz"},"maintainers":[{"name":"cscott","email":"cscott@cscott.net"}],"readmeFilename":"README.md","time":{"modified":"2016-06-30T22:19:22.910Z","created":"2016-06-23T16:44:05.599Z","0.0.2":"2016-06-23T16:44:05.599Z","0.0.3":"2016-06-23T23:11:42.112Z","0.0.4":"2016-06-23T23:12:35.799Z","1.0.0":"2016-06-30T22:19:22.910Z"}}}