{"name":"@ronomon/base64","version":"2.1.0","description":"Fast, robust Base64 encoder/decoder for Buffers in C++. Ignores whitespace. Detects corruption and truncation. Ships with extensive tests, a fuzz test and a benchmark.","main":"index.js","repository":"https://github.com/ronomon/base64","keywords":["base64","mime","wrap"],"license":"MIT","homepage":"https://github.com/ronomon/base64#readme","scripts":{"postinstall":"node-gyp clean","test":"node test.js","install":"node-gyp rebuild"},"dependencies":{"@ronomon/queue":"^2.1.0","nan":"^2.6.2"},"gypfile":true,"gitHead":"e61adaad05b2b2cc9b21dfd30dbc6d0b55ca351f","versions":[{"number":"1.0.0","date":"2017-04-03T10:46:06.834Z"},{"number":"1.0.1","date":"2017-04-03T13:23:21.130Z"},{"number":"1.1.0","date":"2017-04-17T11:12:52.564Z"},{"number":"2.0.0","date":"2017-04-18T11:15:27.479Z"},{"number":"2.0.1","date":"2017-05-23T11:46:21.716Z"},{"number":"2.1.0","date":"2017-08-03T12:56:38.041Z"}],"readme":"# base64\nFast, robust Base64 encoder/decoder for Buffers in C++. Ignores whitespace. Detects corruption and truncation. Ships with extensive tests, a fuzz test and a benchmark.\n\n## Motivation\n\nNode has native Base64 methods, but these either encode a buffer and return a string (`buffer.toString('base64')`) or decode a string and return a buffer (`Buffer.from(string, 'base64')`). Node currently has no efficient way to encode a buffer as a Base64 buffer without creating an interim V8 String. Node currently has no efficient way to decode a Base64 buffer without creating an interim V8 String. This costs a few hundred megabytes per second of throughput for email servers which send and receive large email attachments. See [issue 11866](https://github.com/nodejs/node/issues/11866) for more information.\n\nNode also silently ignores obviously corrupted or truncated Base64 data, which is conflated with whitespace or missing padding and handled by Node in the same way. While it is right that whitespace or missing padding should be ignored when decoding, illegal code points or truncated Base64 data should raise an exception to avoid data loss. See [issue 8569](https://github.com/nodejs/node/issues/8569) for more information.\n\n## Installation\n\n#### Linux, OS X\nThis will compile the native binding automatically:\n```\nnpm install @ronomon/base64\n```\n\n#### Windows\nThis will skip compiling the native binding automatically:\n```\nnpm install --ignore-scripts @ronomon/base64\n```\n\n## Performance\n```\n           CPU: Intel(R) Xeon(R) CPU E5-1620 v3 @ 3.50GHz\n         Cores: 8\n       Threads: 1\n\n============================================================\n\n        Encode: 8192 x 128 Bytes\n    Javascript: Latency: 0.003ms Throughput: 34.95 MB/s\n        Native: Latency: 0.001ms Throughput: 74.90 MB/s\n          Node: Latency: 0.001ms Throughput: 87.38 MB/s\n\n        Encode: 1024 x 1024 Bytes\n    Javascript: Latency: 0.005ms Throughput: 174.76 MB/s\n        Native: Latency: 0.002ms Throughput: 524.29 MB/s\n          Node: Latency: 0.003ms Throughput: 262.14 MB/s\n\n        Encode: 32 x 32768 Bytes\n    Javascript: Latency: 0.055ms Throughput: 524.29 MB/s\n        Native: Latency: 0.029ms Throughput: 1048.58 MB/s\n          Node: Latency: 0.037ms Throughput: 1048.58 MB/s\n\n        Encode: 10 x 1048576 Bytes\n    Javascript: Latency: 1.907ms Throughput: 551.88 MB/s\n        Native: Latency: 1.104ms Throughput: 953.25 MB/s\n          Node: Latency: 1.554ms Throughput: 655.36 MB/s\n\n        Encode: 10 x 4194304 Bytes\n    Javascript: Latency: 7.605ms Throughput: 551.88 MB/s\n        Native: Latency: 4.350ms Throughput: 953.25 MB/s\n          Node: Latency: 6.420ms Throughput: 655.36 MB/s\n\n============================================================\n\n        Decode: 8192 x 128 Bytes\n    Javascript: Latency: 0.002ms Throughput: 64.42 MB/s\n        Native: Latency: 0.003ms Throughput: 52.49 MB/s\n          Node: Latency: 0.001ms Throughput: 101.23 MB/s\n\n        Decode: 1024 x 1024 Bytes\n    Javascript: Latency: 0.008ms Throughput: 155.76 MB/s\n        Native: Latency: 0.002ms Throughput: 467.29 MB/s\n          Node: Latency: 0.003ms Throughput: 467.29 MB/s\n\n        Decode: 32 x 32768 Bytes\n    Javascript: Latency: 0.150ms Throughput: 279.64 MB/s\n        Native: Latency: 0.046ms Throughput: 1398.18 MB/s\n          Node: Latency: 0.094ms Throughput: 466.06 MB/s\n\n        Decode: 10 x 1048576 Bytes\n    Javascript: Latency: 4.523ms Throughput: 303.94 MB/s\n        Native: Latency: 1.402ms Throughput: 998.65 MB/s\n          Node: Latency: 1.986ms Throughput: 699.05 MB/s\n\n        Decode: 10 x 4194304 Bytes\n    Javascript: Latency: 18.337ms Throughput: 305.60 MB/s\n        Native: Latency: 5.575ms Throughput: 998.64 MB/s\n          Node: Latency: 8.018ms Throughput: 699.05 MB/s\n```\n\n## Native Binding (Optional)\nThe native binding will be installed automatically when installing `@ronomon/base64` without the `--ignore-scripts` argument. The Javascript binding will be used if the native binding could not be compiled or is not available. To compile the native binding manually after installing, install [node-gyp](https://www.npmjs.com/package/node-gyp) globally:\n```\nsudo npm install node-gyp -g\n```\nThen build the binding from within the `@ronomon/base64` module directory:\n```\ncd node_modules/@ronomon/base64\nnode-gyp rebuild\n```\n\n## Usage\n\n#### Encoding\n```javascript\nvar Base64 = require('@ronomon/base64');\nvar buffer = Buffer.from('Ecclesiastes 9:11-18', 'utf-8');\nvar bufferEncoded = Base64.encode(buffer);\nconsole.log(bufferEncoded.toString('ascii'));\n// \"RWNjbGVzaWFzdGVzIDk6MTEtMTg=\"\n```\n\n#### Encoding 76 characters per line\n```javascript\nvar bufferEncoded = Base64.encode(buffer, { wrap: true });\n```\n\n#### Decoding\n```javascript\nvar Base64 = require('@ronomon/base64');\nvar bufferEncoded = Buffer.from('RWNjbGVzaWFzdGVzIDk6MTEtMTg=', 'ascii');\nvar buffer = Base64.decode(bufferEncoded);\nconsole.log(buffer.toString('utf-8'));\n// \"Ecclesiastes 9:11-18\"\n```\n\n#### Decoding corrupt or truncated data\nBase64 will raise an exception for corrupt or truncated data by default as a defensive measure to prevent data loss and security vulnerabilities. To silence these exceptions and continue decoding in the face of bad data (not recommended), use `options.silent`:\n```javascript\nvar Base64 = require('@ronomon/base64');\nvar bufferEncoded = Buffer.from('...RWNjbGVzaWFzdGVzIDk6MTEtMTg=', 'ascii');\nvar buffer = Base64.decode(bufferEncoded, { silent: true });\nconsole.log(buffer.toString('utf-8'));\n// \"Ecclesiastes 9:11-18\"\n```\n\n## Tests\nTo test the native and Javascript bindings:\n```\nnode test.js\n```\n\n## Benchmark\nTo benchmark the native and Javascript bindings:\n```\nnode benchmark.js\n```\n","created":"2017-04-03T10:46:06.834Z","modified":"2017-08-03T12:56:38.041Z","lastPublisher":{"name":"ronomon","email":"info@ronomon.com"},"owners":[{"name":"ronomon","email":"info@ronomon.com"}],"other":{"_attachments":{},"_id":"@ronomon/base64","_nodeVersion":"8.2.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/base64-2.1.0.tgz_1501764997961_0.7350124830845743"},"_npmUser":{"name":"ronomon","email":"info@ronomon.com"},"_npmVersion":"5.3.0","_rev":"7-6370795de154f4dbef99fac69b8b4a02","author":{"name":"Joran Dirk Greef"},"bugs":{"url":"https://github.com/ronomon/base64/issues"},"directories":{},"dist-tags":{"latest":"2.1.0"},"dist":{"integrity":"sha512-MWRxzsUAXHXfAvBXHKbVppqY4nDQPsLPX2tYctYY9l8wWm2eXusm4CyPPnqtihvqcpncBzKPQ3AzB9XVfSeptw==","shasum":"eb73232df90008c05a370d17af097f732fcb72a7","tarball":"https://registry.npmjs.org/@ronomon/base64/-/base64-2.1.0.tgz"},"maintainers":[{"name":"ronomon","email":"info@ronomon.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-03T12:56:38.041Z","created":"2017-04-03T10:46:06.834Z","1.0.0":"2017-04-03T10:46:06.834Z","1.0.1":"2017-04-03T13:23:21.130Z","1.1.0":"2017-04-17T11:12:52.564Z","2.0.0":"2017-04-18T11:15:27.479Z","2.0.1":"2017-05-23T11:46:21.716Z","2.1.0":"2017-08-03T12:56:38.041Z"}}}