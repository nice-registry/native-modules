{"name":"durable","version":"0.36.75","description":"A lightweight rules engine for real-time, consistent and scalable coordination of events.","keywords":["business rules","rules engine","rete","forward chaining","streaming analytics","complex event processing","state machine","workflow"],"dependencies":{"express":"3.4.x","node-static":"0.7.x","body-parser":"1.12.x","bindings":"*","nan":"~1.1.0","esprima":"3.1.x","escodegen":"1.8.x"},"repository":"https://github.com/jruizgit/rules","main":"./libjs/durable","scripts":{"install":"node-gyp rebuild"},"license":"MIT","gypfile":true,"engines":{"node":"4.6.x","npm":"2.5.x"},"gitHead":"7e0d612c9733c641ff1dd24f3bc851a90b1730bc","homepage":"https://github.com/jruizgit/rules#readme","versions":[{"number":"0.0.1","date":"2013-08-11T07:20:41.404Z"},{"number":"0.0.2","date":"2013-08-11T07:40:33.114Z"},{"number":"0.0.3","date":"2013-08-12T06:00:02.185Z"},{"number":"0.0.4","date":"2013-08-12T06:03:18.592Z"},{"number":"0.0.5","date":"2013-08-13T05:09:28.142Z"},{"number":"0.0.6","date":"2013-08-26T06:10:26.274Z"},{"number":"0.0.8","date":"2014-01-26T23:38:06.604Z"},{"number":"0.10.1","date":"2014-01-26T23:52:33.548Z"},{"number":"0.10.2","date":"2014-01-27T00:13:22.791Z"},{"number":"0.10.3","date":"2014-01-28T06:55:00.417Z"},{"number":"0.10.4","date":"2014-02-07T07:07:04.300Z"},{"number":"0.20.2","date":"2014-10-13T06:13:29.393Z"},{"number":"0.20.3","date":"2014-11-11T07:43:16.780Z"},{"number":"0.30.1","date":"2015-02-09T02:38:19.515Z"},{"number":"0.30.2","date":"2015-02-09T06:14:45.784Z"},{"number":"0.30.3","date":"2015-02-09T06:29:01.848Z"},{"number":"0.30.4","date":"2015-02-09T06:58:33.147Z"},{"number":"0.30.5","date":"2015-02-09T07:12:24.523Z"},{"number":"0.30.6","date":"2015-02-09T07:24:16.404Z"},{"number":"0.30.7","date":"2015-02-10T05:49:40.015Z"},{"number":"0.30.8","date":"2015-02-15T20:06:20.456Z"},{"number":"0.30.9","date":"2015-02-15T20:17:19.119Z"},{"number":"0.30.10","date":"2015-02-15T20:47:51.586Z"},{"number":"0.31.10","date":"2015-03-05T06:42:38.298Z"},{"number":"0.31.11","date":"2015-03-05T06:43:49.784Z"},{"number":"0.31.12","date":"2015-03-05T07:03:34.272Z"},{"number":"0.31.13","date":"2015-03-05T07:06:16.592Z"},{"number":"0.32.1","date":"2015-07-04T17:31:33.527Z"},{"number":"0.32.2","date":"2015-07-04T17:35:35.453Z"},{"number":"0.33.1","date":"2015-07-04T17:41:19.847Z"},{"number":"0.33.2","date":"2015-07-10T06:20:33.901Z"},{"number":"0.33.3","date":"2015-07-21T05:36:37.000Z"},{"number":"0.33.4","date":"2015-10-09T04:52:43.025Z"},{"number":"0.34.16","date":"2016-03-26T19:57:32.375Z"},{"number":"0.35.1","date":"2016-03-28T01:04:14.348Z"},{"number":"0.36.1","date":"2016-03-28T01:23:36.286Z"},{"number":"0.36.2","date":"2016-03-30T05:33:28.862Z"},{"number":"0.36.3","date":"2016-04-30T20:27:24.824Z"},{"number":"0.36.4","date":"2016-04-30T23:35:45.281Z"},{"number":"0.36.5","date":"2016-04-30T23:59:50.972Z"},{"number":"0.36.6","date":"2016-05-01T00:07:24.754Z"},{"number":"0.36.7","date":"2016-05-01T00:10:24.218Z"},{"number":"0.36.8","date":"2016-05-01T00:17:33.637Z"},{"number":"0.36.9","date":"2016-05-01T00:22:52.815Z"},{"number":"0.36.10","date":"2016-05-01T00:27:23.575Z"},{"number":"0.36.11","date":"2016-05-01T00:30:56.650Z"},{"number":"0.36.12","date":"2016-05-01T00:35:30.343Z"},{"number":"0.36.13","date":"2016-05-01T00:55:34.573Z"},{"number":"0.36.14","date":"2016-05-01T00:59:13.825Z"},{"number":"0.36.15","date":"2016-05-01T01:14:02.007Z"},{"number":"0.36.16","date":"2016-05-01T01:19:49.207Z"},{"number":"0.36.17","date":"2016-05-01T01:22:06.566Z"},{"number":"0.36.18","date":"2016-05-01T17:34:03.055Z"},{"number":"0.36.19","date":"2016-05-01T17:46:16.353Z"},{"number":"0.36.20","date":"2016-05-01T18:06:30.400Z"},{"number":"0.36.21","date":"2016-05-01T18:18:40.822Z"},{"number":"0.36.22","date":"2016-05-01T18:52:36.462Z"},{"number":"0.36.23","date":"2016-05-01T18:56:56.832Z"},{"number":"0.36.24","date":"2016-05-01T19:05:58.517Z"},{"number":"0.36.25","date":"2016-05-01T22:45:39.957Z"},{"number":"0.36.26","date":"2016-05-01T23:50:56.274Z"},{"number":"0.36.27","date":"2016-05-01T23:58:52.390Z"},{"number":"0.36.28","date":"2016-05-10T07:21:25.126Z"},{"number":"0.36.29","date":"2016-05-13T01:00:29.705Z"},{"number":"0.36.30","date":"2016-05-22T19:41:16.801Z"},{"number":"0.36.31","date":"2016-06-06T01:57:54.652Z"},{"number":"0.36.32","date":"2016-06-06T02:01:47.274Z"},{"number":"0.36.33","date":"2016-06-08T04:59:24.424Z"},{"number":"0.36.34","date":"2016-06-13T00:54:36.203Z"},{"number":"0.36.35","date":"2016-07-02T19:28:27.631Z"},{"number":"0.36.36","date":"2016-07-28T12:32:33.980Z"},{"number":"0.36.37","date":"2016-07-30T15:34:27.460Z"},{"number":"0.36.38","date":"2016-08-14T02:00:37.464Z"},{"number":"0.36.39","date":"2016-08-14T19:11:22.005Z"},{"number":"0.36.40","date":"2016-08-29T00:16:15.506Z"},{"number":"0.36.41","date":"2016-09-06T02:18:48.087Z"},{"number":"0.36.42","date":"2016-09-19T05:00:52.846Z"},{"number":"0.36.43","date":"2016-09-28T05:34:54.373Z"},{"number":"0.36.44","date":"2016-09-29T05:02:36.863Z"},{"number":"0.36.45","date":"2016-10-10T04:57:57.668Z"},{"number":"0.36.46","date":"2016-11-24T21:37:42.783Z"},{"number":"0.36.47","date":"2016-11-28T02:52:26.179Z"},{"number":"0.36.48","date":"2016-11-28T02:56:58.309Z"},{"number":"0.36.49","date":"2017-01-15T05:14:59.199Z"},{"number":"0.36.50","date":"2017-01-20T06:20:26.973Z"},{"number":"0.36.51","date":"2017-01-22T04:26:51.126Z"},{"number":"0.36.53","date":"2017-01-29T20:45:50.959Z"},{"number":"0.36.54","date":"2017-02-06T01:24:06.498Z"},{"number":"0.36.55","date":"2017-02-11T18:19:13.905Z"},{"number":"0.36.56","date":"2017-02-20T02:23:58.410Z"},{"number":"0.36.57","date":"2017-04-17T05:31:40.053Z"},{"number":"0.36.58","date":"2017-04-18T05:39:59.809Z"},{"number":"0.36.59","date":"2017-04-24T04:33:48.575Z"},{"number":"0.36.60","date":"2017-04-27T05:45:33.136Z"},{"number":"0.36.61","date":"2017-04-30T02:27:00.355Z"},{"number":"0.36.62","date":"2017-04-30T17:08:41.279Z"},{"number":"0.36.63","date":"2017-05-07T22:58:20.673Z"},{"number":"0.36.64","date":"2017-05-08T00:00:58.251Z"},{"number":"0.36.65","date":"2017-05-13T15:56:40.347Z"},{"number":"0.36.67","date":"2017-05-27T16:47:43.627Z"},{"number":"0.36.68","date":"2017-05-28T18:31:01.135Z"},{"number":"0.36.69","date":"2017-05-30T18:32:41.395Z"},{"number":"0.36.70","date":"2017-06-05T05:41:23.131Z"},{"number":"0.36.71","date":"2017-06-10T15:19:51.548Z"},{"number":"0.36.72","date":"2017-06-12T02:28:24.596Z"},{"number":"0.36.73","date":"2017-06-19T04:52:27.804Z"},{"number":"0.36.74","date":"2017-06-25T19:51:43.314Z"},{"number":"0.36.75","date":"2017-08-22T04:15:25.668Z"}],"readme":"<sub>*note 1: The new node.js syntax was just pushed as of npm 0.36.57. The old syntax is still supported. Your feedback is welcomed.*</sub>  \n<sub>*note 2: Passing 'sid' and 'id' in events and facts is no longer required as of npm 0.36.59, gem 0.34.25 and pypi 0.33.96.*</sub> \n\n\n# durable_rules    \n#### for real time analytics (a Ruby, Python and Node.js Rules Engine)\n[![Build Status](https://travis-ci.org/jruizgit/rules.svg?branch=master)](https://travis-ci.org/jruizgit/rules)\n[![Gem Version](https://badge.fury.io/rb/durable_rules.svg)](https://badge.fury.io/rb/durable_rules)\n[![npm version](https://badge.fury.io/js/durable.svg)](https://badge.fury.io/js/durable)\n[![PyPI version](https://badge.fury.io/py/durable_rules.svg)](https://badge.fury.io/py/durable_rules)  \n\ndurable_rules is a polyglot micro-framework for real-time, consistent and scalable coordination of events. With durable_rules you can track and analyze information about things that happen (events) by combining data from multiple sources to infer more complicated circumstances.\n\nA full forward chaining implementation (A.K.A. Rete) is used to evaluate facts and massive streams of events in real time. A simple, yet powerful meta-liguistic abstraction lets you define simple and complex rulesets as well as control flow structures such as flowcharts, statecharts, nested statecharts and time driven flows. \n\nThe durable_rules core engine is implemented in C, which enables ultra fast rule evaluation as well as muti-language support. durable_rules relies on state of the art technologies: [Node.js](http://www.nodejs.org), [Werkzeug](http://werkzeug.pocoo.org/), [Sinatra](http://www.sinatrarb.com/) are used to host rulesets written in JavaScript, Python and Ruby respectively. Inference state is cached using [Redis](http://www.redis.io). This allows for fault tolerant execution and scale-out without giving up performance.  \n\ndurable_rules is cloud ready. It can easily be hosted and scaled in environments such as Amazon Web Services with EC2 instances and ElastiCache clusters. Or Heroku using web dynos and RedisLabs or RedisToGo.  \n\n## Getting Started  \n\nUsing your scripting language of choice, simply describe the event to match (antecedent) and the action to take (consequent). In this example the rule can be triggered by posting `{ \"subject\": \"World\" }` to url `http://localhost:5000/test/events`. \n\n<sub>Tip: once the test is running, from a terminal type:   \n`curl -H \"Content-type: application/json\" -X POST -d '{\"subject\": \"World\"}' http://localhost:5000/test/events`</sub>  \n\n### Node.js\n```javascript\nvar d = require('durable');\n\nd.ruleset('test', function() {\n    // antecedent\n    whenAll: m.subject == 'World'\n    // consequent\n    run: console.log('Hello ' + m.subject)\n});\n\nd.runAll();\n```  \n### Python\n```python\nfrom durable.lang import *\n\nwith ruleset('test'):\n    # antecedent\n    @when_all(m.subject == 'World')\n    def say_hello(c):\n        # consequent\n        print ('Hello {0}'.format(c.m.subject))\n\nrun_all()\n```  \n### Ruby\n```ruby\nrequire \"durable\"\nDurable.ruleset :test do\n  # antecedent\n  when_all (m.subject == \"World\") do\n    # consequent\n    puts \"Hello #{m.subject}\"\n  end\nend\nDurable.run_all\n```  \n## Forward Inference  \n\ndurable_rules super-power is the foward-chaining evaluation of rules. In other words, the repeated application of logical [modus ponens](https://en.wikipedia.org/wiki/Modus_ponens) to a set of facts or observed events to derive a conclusion. The example below shows a set of rules applied to a small knowledge base (set of facts).\n\n### Node.js\n```javascript\nvar d = require('durable');\n\nd.ruleset('animal', function() {\n    whenAll: {\n        first = m.predicate == 'eats' && m.object == 'flies' \n        m.predicate == 'lives' && m.object == 'water' && m.subject == first.subject\n    }\n    run: assert({ subject: first.subject, predicate: 'is', object: 'frog' })\n\n    whenAll: {\n        first = m.predicate == 'eats' && m.object == 'flies' \n        m.predicate == 'lives' && m.object == 'land' && m.subject == first.subject\n    }\n    run: assert({ subject: first.subject, predicate: 'is', object: 'chameleon' })\n\n    whenAll: m.predicate == 'eats' && m.object == 'worms' \n    run: assert({ subject: m.subject, predicate: 'is', object: 'bird' })\n\n    whenAll: m.predicate == 'is' && m.object == 'frog'\n    run: assert({ subject: m.subject, predicate: 'is', object: 'green' })\n\n    whenAll: m.predicate == 'is' && m.object == 'chameleon'\n    run: assert({ subject: m.subject, predicate: 'is', object: 'green' })\n\n    whenAll: m.predicate == 'is' && m.object == 'bird' \n    run: assert({ subject: m.subject, predicate: 'is', object: 'black' })\n\n    whenAll: +m.subject\n    run: console.log('fact: ' + m.subject + ' ' + m.predicate + ' ' + m.object)\n\n    whenStart: {\n        assert('animal', { subject: 'Kermit', predicate: 'eats', object: 'flies' });\n        assert('animal', { subject: 'Kermit', predicate: 'lives', object: 'water' });\n        assert('animal', { subject: 'Greedy', predicate: 'eats', object: 'flies' });\n        assert('animal', { subject: 'Greedy', predicate: 'lives', object: 'land' });\n        assert('animal', { subject: 'Tweety', predicate: 'eats', object: 'worms' });\n    }\n});\n\nd.runAll();\n```\n### Python\n```python\nfrom durable.lang import *\n\nwith ruleset('animal'):\n    @when_all(c.first << (m.predicate == 'eats') & (m.object == 'flies'),\n              (m.predicate == 'lives') & (m.object == 'water') & (m.subject == c.first.subject))\n    def frog(c):\n        c.assert_fact({ 'subject': c.first.subject, 'predicate': 'is', 'object': 'frog' })\n\n    @when_all(c.first << (m.predicate == 'eats') & (m.object == 'flies'),\n              (m.predicate == 'lives') & (m.object == 'land') & (m.subject == c.first.subject))\n    def chameleon(c):\n        c.assert_fact({ 'subject': c.first.subject, 'predicate': 'is', 'object': 'chameleon' })\n\n    @when_all((m.predicate == 'eats') & (m.object == 'worms'))\n    def bird(c):\n        c.assert_fact({ 'subject': c.m.subject, 'predicate': 'is', 'object': 'bird' })\n\n    @when_all((m.predicate == 'is') & (m.object == 'frog'))\n    def green(c):\n        c.assert_fact({ 'subject': c.m.subject, 'predicate': 'is', 'object': 'green' })\n\n    @when_all((m.predicate == 'is') & (m.object == 'chameleon'))\n    def grey(c):\n        c.assert_fact({ 'subject': c.m.subject, 'predicate': 'is', 'object': 'grey' })\n\n    @when_all((m.predicate == 'is') & (m.object == 'bird'))\n    def black(c):\n        c.assert_fact({ 'subject': c.m.subject, 'predicate': 'is', 'object': 'black' })\n\n    @when_all(+m.subject)\n    def output(c):\n        print('Fact: {0} {1} {2}'.format(c.m.subject, c.m.predicate, c.m.object))\n\n    @when_start\n    def start(host):\n        host.assert_fact('animal', { 'subject': 'Kermit', 'predicate': 'eats', 'object': 'flies' })\n        host.assert_fact('animal', { 'subject': 'Kermit', 'predicate': 'lives', 'object': 'water' })\n        host.assert_fact('animal', { 'subject': 'Greedy', 'predicate': 'eats', 'object': 'flies' })\n        host.assert_fact('animal', { 'subject': 'Greedy', 'predicate': 'lives', 'object': 'land' })\n        host.assert_fact('animal', { 'subject': 'Tweety', 'predicate': 'eats', 'object': 'worms' })\n        \nrun_all()\n```\n### Ruby\n```ruby\nrequire \"durable\"\n\nDurable.ruleset :animal do\n  when_all c.first = (m.predicate == \"eats\") & (m.object == \"flies\"),  \n          (m.predicate == \"lives\") & (m.object == \"water\") & (m.subject == first.subject) do\n    assert :subject => first.subject, :predicate => \"is\", :object => \"frog\"\n  end\n\n  when_all c.first = (m.predicate == \"eats\") & (m.object == \"flies\"),  \n          (m.predicate == \"lives\") & (m.object == \"land\") & (m.subject == first.subject) do\n    assert :subject => first.subject, :predicate => \"is\", :object => \"chameleon\"\n  end\n\n  when_all (m.predicate == \"eats\") & (m.object == \"worms\") do\n    assert :subject => m.subject, :predicate => \"is\", :object => \"bird\"\n  end\n  \n  when_all (m.predicate == \"is\") & (m.object == \"frog\") do\n    assert :subject => m.subject, :predicate => \"is\", :object => \"green\"\n  end\n    \n  when_all (m.predicate == \"is\") & (m.object == \"chameleon\") do\n    assert :subject => m.subject, :predicate => \"is\", :object => \"green\"\n  end\n\n  when_all (m.predicate == \"is\") & (m.object == \"bird\") do\n    assert :subject => m.subject, :predicate => \"is\", :object => \"black\"\n  end\n    \n  when_all +m.subject do\n    puts \"fact: #{m.subject} #{m.predicate} #{m.object}\"\n  end\n    \n  when_start do\n    assert :animal, { :subject => \"Kermit\", :predicate => \"eats\", :object => \"flies\" }\n    assert :animal, { :subject => \"Kermit\", :predicate => \"lives\", :object => \"water\" }\n    assert :animal, { :subject => \"Greedy\", :predicate => \"eats\", :object => \"flies\" }\n    assert :animal, { :subject => \"Greedy\", :predicate => \"lives\", :object => \"land\" }\n    assert :animal, { :subject => \"Tweety\", :predicate => \"eats\", :object => \"worms\" }\n  end\nend\n\nDurable.run_all\n```\n## Flow Structures\n\nThe combination of forward inference and durable_rules tolerance to failures on rule action dispatch, enables work coordination with data flow structures such as statecharts, nested states and flowcharts. \n\n<sub>Tip: once the test is running, from a terminal type:   \n`curl -H \"Content-type: application/json\" -X POST -d '{\"subject\": \"approve\", \"amount\": 100}' http://localhost:5000/expense/events`  \n`curl -H \"Content-type: application/json\" -X POST -d '{\"subject\": \"approved\"}' http://localhost:5000/expense/events`  \n`curl -H \"Content-type: application/json\" -X POST -d '{\"subject\": \"approve\", \"amount\": 100}' http://localhost:5000/expense/events/2`  \n`curl -H \"Content-type: application/json\" -X POST -d '{\"subject\": \"denied\"}' http://localhost:5000/expense/events/2`  \n</sub>\n### Node.js\n```javascript\nvar d = require('durable');\n\nd.statechart('expense', function() {\n    input: {\n        to: 'denied'\n        whenAll: m.subject == 'approve' && m.amount > 1000\n        run: console.log('expense denied')\n\n        to: 'pending'\n        whenAll: m.subject == 'approve' && m.amount <= 1000\n        run: console.log('requesting expense approval')\n    }\n\n    pending: {\n        to: 'approved'\n        whenAll: m.subject == 'approved'\n        run: console.log('expense approved')\n            \n        to: 'denied'\n        whenAll: m.subject == 'denied'\n        run: console.log('expense denied')\n    }\n    \n    denied: {}\n    approved: {}\n});\n\nd.runAll();\n```\n### Python\n```python\nfrom durable.lang import *\n\nwith statechart('expense'):\n    with state('input'):\n        @to('denied')\n        @when_all((m.subject == 'approve') & (m.amount > 1000))\n        def denied(c):\n            print ('expense denied')\n        \n        @to('pending')    \n        @when_all((m.subject == 'approve') & (m.amount <= 1000))\n        def request(c):\n            print ('requesting expense approval')\n        \n    with state('pending'):\n        @to('approved')\n        @when_all(m.subject == 'approved')\n        def approved(c):\n            print ('expense approved')\n            \n        @to('denied')\n        @when_all(m.subject == 'denied')\n        def denied(c):\n            print ('expense denied')\n        \n    state('denied')\n    state('approved')\n    \nrun_all()\n```\n### Ruby\n```ruby\nrequire \"durable\"\n\nDurable.statechart :expense do\n  state :input do\n    to :denied, when_all((m.subject == \"approve\") & (m.amount > 1000)) do\n      puts \"expense denied\"\n    end\n    \n    to :pending, when_all((m.subject == \"approve\") & (m.amount <= 1000)) do\n      puts \"requesting expense approval\"\n    end\n  end  \n  \n  state :pending do\n    to :approved, when_all(m.subject == \"approved\") do\n      puts \"expense approved\"\n    end\n    \n    to :denied, when_all(m.subject == \"denied\") do\n      puts \"expense denied\"\n    end\n  end\n  \n  state :approved\n  state :denied\nend\n\nDurable.run_all\n```\n## Pattern Matching\n\ndurable_rules provides string pattern matching. Expressions are compiled down to a DFA, guaranteeing linear execution time in the order of single digit nano seconds per character (note: backtracking expressions are not supported).\n\n<sub>Tip: once the test is running, from a terminal type:  \n`curl -H \"Content-type: application/json\" -X POST -d '{\"subject\": \"375678956789765\"}' http://localhost:5000/test/events`  \n`curl -H \"Content-type: application/json\" -X POST -d '{\"subject\": \"4345634566789888\"}' http://localhost:5000/test/events`  \n`curl -H \"Content-type: application/json\" -X POST -d '{\"subject\": \"2228345634567898\"}' http://localhost:5000/test/events`  \n</sub>\n\n### Node.js\n```javascript\nvar d = require('durable');\n\nd.ruleset('test', function() {\n    whenAll: m.subject.matches('3[47][0-9]{13}')\n    run: console.log('Amex detected in ' + m.subject)\n    \n    whenAll: m.subject.matches('4[0-9]{12}([0-9]{3})?')\n    run: console.log('Visa detected in ' + m.subject)\n    \n    whenAll: m.subject.matches('(5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|2720)[0-9]{12}')\n    run: console.log('Mastercard detected in ' + m.subject)\n});\n\nd.runAll();\n```\n### Python\n```python\nfrom durable.lang import *\n\nwith ruleset('test'):\n    @when_all(m.subject.matches('3[47][0-9]{13}'))\n    def amex(c):\n        print ('Amex detected {0}'.format(c.m.subject))\n\n    @when_all(m.subject.matches('4[0-9]{12}([0-9]{3})?'))\n    def visa(c):\n        print ('Visa detected {0}'.format(c.m.subject))\n\n    @when_all(m.subject.matches('(5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|2720)[0-9]{12}'))\n    def mastercard(c):\n        print ('Mastercard detected {0}'.format(c.m.subject))\n\nrun_all()\n```\n### Ruby\n```ruby\nrequire \"durable\"\nDurable.ruleset :test do\n  when_all m.subject.matches('3[47][0-9]{13}') do\n    puts \"Amex detected in #{m.subject}\"\n  end\n  \n  when_all m.subject.matches('4[0-9]{12}([0-9]{3})?') do\n    puts \"Visa detected in #{m.subject}\"\n  end\n  \n  when_all m.subject.matches('(5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|2720)[0-9]{12}') do\n    puts \"Mastercard detected in #{m.subject}\"\n  end\nend\nDurable.run_all\n```\n## Business Rules and Miss Manners \n\ndurable_rules can also be used to solve traditional Production Business Rules problems. This example is an industry benchmark. Miss Manners has decided to throw a party. She wants to seat her guests such that adjacent people are of opposite sex and share at least one hobby. \n\nNote how the benchmark flow structure is defined using a statechart to improve code readability without sacrificing performance nor altering the combinatorics required by the benchmark. For 128 guests, 438 facts, the execution time is less than 2 seconds in JavaScript and Python slightly above 2 seconds in Ruby. More details documented in this [blog post](http://jruizblog.com/2015/07/20/miss-manners-and-waltzdb/).   \n\n<div align=\"center\"><img src=\"https://raw.github.com/jruizgit/rules/master/docs/manners.jpg\" width=\"800px\" height=\"300px\" /></div>  \n\n_IMac, 4GHz i7, 32GB 1600MHz DDR3, 1.12 TB Fusion Drive_    \n\n* [Ruby](https://github.com/jruizgit/rules/blob/master/testrb/manners.rb)  \n* [Python](https://github.com/jruizgit/rules/blob/master/testpy/manners.py)  \n* [Node.js](https://github.com/jruizgit/rules/blob/master/testjs/manners.js)\n\n## Image recognition and Waltzdb\n\nWaltzdb is a constraint propagation problem for image recognition: given a set of lines in a 2D space, the system needs to interpret the 3D depth of the image. The first part of the algorithm consists of identifying four types of junctions, then labeling the junctions following Huffman-Clowes notation. Pairs of adjacent junctions constraint each other’s edge labeling. So, after choosing the labeling for an initial junction, the second part of the algorithm iterates through the graph, propagating the labeling constraints by removing inconsistent labels.  \n\nIn this case too, the benchmark flow structure is defined using a statechart to improve code readability. The benchmark requirements are not altered. Execution time is around 3 seconds for the case of 4 regions and around 20 for the case of 50. More details documented in this [blog post](http://jruizblog.com/2015/07/20/miss-manners-and-waltzdb/).  \n\n<div align=\"center\"><img src=\"https://raw.github.com/jruizgit/rules/master/docs/waltzdb.jpg\" width=\"800px\" height=\"300px\" /></div>  \n\n_IMac, 4GHz i7, 32GB 1600MHz DDR3, 1.12 TB Fusion Drive_    \n\n* [Node.js](https://github.com/jruizgit/rules/blob/master/testjs/waltzdb.js)  \n* [Ruby](https://github.com/jruizgit/rules/blob/master/testrb/waltzdb.rb)  \n* [Python](https://github.com/jruizgit/rules/blob/master/testpy/waltzdb.py)  \n\n\n## To Learn More  \nReference Manual:  \n### [Ruby](https://github.com/jruizgit/rules/blob/master/docs/rb/reference.md)  \n\n### [Python](https://github.com/jruizgit/rules/blob/master/docs/py/reference.md)  \n\n### [Node.js](https://github.com/jruizgit/rules/blob/master/docs/js/reference.md)  \n\nBlog:  \n* [Miss Manners and Waltzdb (07/2015)](http://jruizblog.com/2015/07/20/miss-manners-and-waltzdb/)\n* [Polyglot (03/2015)](http://jruizblog.com/2015/03/02/polyglot/)  \n* [Rete_D (02/2015)](http://jruizblog.com/2015/02/23/rete_d/)\n* [Boosting Performance with C (08/2014)](http://jruizblog.com/2014/08/19/boosting-performance-with-c/)\n* [Rete Meets Redis (02/2014)](http://jruizblog.com/2014/02/02/rete-meets-redis/)\n* [Inference: From Expert Systems to Cloud Scale Event Processing (01/2014)](http://jruizblog.com/2014/01/27/event-processing/)\n\n","starsCount":2,"created":"2013-08-11T07:20:39.363Z","modified":"2017-08-22T04:15:25.668Z","lastPublisher":{"name":"jruiznpm","email":"jr3791@live.com"},"owners":[{"name":"jruiznpm","email":"jr3791@live.com"}],"other":{"_attachments":{},"_from":".","_id":"durable","_nodeVersion":"4.5.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/durable-0.36.75.tgz_1503375324885_0.06077428348362446"},"_npmUser":{"name":"jruiznpm","email":"jr3791@live.com"},"_npmVersion":"2.15.9","_rev":"29-96cf610ccd29a79b3f3dfc5d71b3701c","_shasum":"aa79b0ead949ac20e176283cec60ba7ab277c39e","author":{"name":"Jesus Ruiz","email":"jr3791@live.com"},"bugs":{"url":"https://github.com/jruizgit/rules/issues"},"directories":{},"dist-tags":{"latest":"0.36.75"},"dist":{"shasum":"aa79b0ead949ac20e176283cec60ba7ab277c39e","tarball":"https://registry.npmjs.org/durable/-/durable-0.36.75.tgz"},"maintainers":[{"name":"jruiznpm","email":"jr3791@live.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-22T04:15:25.668Z","created":"2013-08-11T07:20:39.363Z","0.0.1":"2013-08-11T07:20:41.404Z","0.0.2":"2013-08-11T07:40:33.114Z","0.0.3":"2013-08-12T06:00:02.185Z","0.0.4":"2013-08-12T06:03:18.592Z","0.0.5":"2013-08-13T05:09:28.142Z","0.0.6":"2013-08-26T06:10:26.274Z","0.0.8":"2014-01-26T23:38:06.604Z","0.10.1":"2014-01-26T23:52:33.548Z","0.10.2":"2014-01-27T00:13:22.791Z","0.10.3":"2014-01-28T06:55:00.417Z","0.10.4":"2014-02-07T07:07:04.300Z","0.20.2":"2014-10-13T06:13:29.393Z","0.20.3":"2014-11-11T07:43:16.780Z","0.30.1":"2015-02-09T02:38:19.515Z","0.30.2":"2015-02-09T06:14:45.784Z","0.30.3":"2015-02-09T06:29:01.848Z","0.30.4":"2015-02-09T06:58:33.147Z","0.30.5":"2015-02-09T07:12:24.523Z","0.30.6":"2015-02-09T07:24:16.404Z","0.30.7":"2015-02-10T05:49:40.015Z","0.30.8":"2015-02-15T20:06:20.456Z","0.30.9":"2015-02-15T20:17:19.119Z","0.30.10":"2015-02-15T20:47:51.586Z","0.31.10":"2015-03-05T06:42:38.298Z","0.31.11":"2015-03-05T06:43:49.784Z","0.31.12":"2015-03-05T07:03:34.272Z","0.31.13":"2015-03-05T07:06:16.592Z","0.32.1":"2015-07-04T17:31:33.527Z","0.32.2":"2015-07-04T17:35:35.453Z","0.33.1":"2015-07-04T17:41:19.847Z","0.33.2":"2015-07-10T06:20:33.901Z","0.33.3":"2015-07-21T05:36:37.000Z","0.33.4":"2015-10-09T04:52:43.025Z","0.34.16":"2016-03-26T19:57:32.375Z","0.35.1":"2016-03-28T01:04:14.348Z","0.36.1":"2016-03-28T01:23:36.286Z","0.36.2":"2016-03-30T05:33:28.862Z","0.36.3":"2016-04-30T20:27:24.824Z","0.36.4":"2016-04-30T23:35:45.281Z","0.36.5":"2016-04-30T23:59:50.972Z","0.36.6":"2016-05-01T00:07:24.754Z","0.36.7":"2016-05-01T00:10:24.218Z","0.36.8":"2016-05-01T00:17:33.637Z","0.36.9":"2016-05-01T00:22:52.815Z","0.36.10":"2016-05-01T00:27:23.575Z","0.36.11":"2016-05-01T00:30:56.650Z","0.36.12":"2016-05-01T00:35:30.343Z","0.36.13":"2016-05-01T00:55:34.573Z","0.36.14":"2016-05-01T00:59:13.825Z","0.36.15":"2016-05-01T01:14:02.007Z","0.36.16":"2016-05-01T01:19:49.207Z","0.36.17":"2016-05-01T01:22:06.566Z","0.36.18":"2016-05-01T17:34:03.055Z","0.36.19":"2016-05-01T17:46:16.353Z","0.36.20":"2016-05-01T18:06:30.400Z","0.36.21":"2016-05-01T18:18:40.822Z","0.36.22":"2016-05-01T18:52:36.462Z","0.36.23":"2016-05-01T18:56:56.832Z","0.36.24":"2016-05-01T19:05:58.517Z","0.36.25":"2016-05-01T22:45:39.957Z","0.36.26":"2016-05-01T23:50:56.274Z","0.36.27":"2016-05-01T23:58:52.390Z","0.36.28":"2016-05-10T07:21:25.126Z","0.36.29":"2016-05-13T01:00:29.705Z","0.36.30":"2016-05-22T19:41:16.801Z","0.36.31":"2016-06-06T01:57:54.652Z","0.36.32":"2016-06-06T02:01:47.274Z","0.36.33":"2016-06-08T04:59:24.424Z","0.36.34":"2016-06-13T00:54:36.203Z","0.36.35":"2016-07-02T19:28:27.631Z","0.36.36":"2016-07-28T12:32:33.980Z","0.36.37":"2016-07-30T15:34:27.460Z","0.36.38":"2016-08-14T02:00:37.464Z","0.36.39":"2016-08-14T19:11:22.005Z","0.36.40":"2016-08-29T00:16:15.506Z","0.36.41":"2016-09-06T02:18:48.087Z","0.36.42":"2016-09-19T05:00:52.846Z","0.36.43":"2016-09-28T05:34:54.373Z","0.36.44":"2016-09-29T05:02:36.863Z","0.36.45":"2016-10-10T04:57:57.668Z","0.36.46":"2016-11-24T21:37:42.783Z","0.36.47":"2016-11-28T02:52:26.179Z","0.36.48":"2016-11-28T02:56:58.309Z","0.36.49":"2017-01-15T05:14:59.199Z","0.36.50":"2017-01-20T06:20:26.973Z","0.36.51":"2017-01-22T04:26:51.126Z","0.36.53":"2017-01-29T20:45:50.959Z","0.36.54":"2017-02-06T01:24:06.498Z","0.36.55":"2017-02-11T18:19:13.905Z","0.36.56":"2017-02-20T02:23:58.410Z","0.36.57":"2017-04-17T05:31:40.053Z","0.36.58":"2017-04-18T05:39:59.809Z","0.36.59":"2017-04-24T04:33:48.575Z","0.36.60":"2017-04-27T05:45:33.136Z","0.36.61":"2017-04-30T02:27:00.355Z","0.36.62":"2017-04-30T17:08:41.279Z","0.36.63":"2017-05-07T22:58:20.673Z","0.36.64":"2017-05-08T00:00:58.251Z","0.36.65":"2017-05-13T15:56:40.347Z","0.36.67":"2017-05-27T16:47:43.627Z","0.36.68":"2017-05-28T18:31:01.135Z","0.36.69":"2017-05-30T18:32:41.395Z","0.36.70":"2017-06-05T05:41:23.131Z","0.36.71":"2017-06-10T15:19:51.548Z","0.36.72":"2017-06-12T02:28:24.596Z","0.36.73":"2017-06-19T04:52:27.804Z","0.36.74":"2017-06-25T19:51:43.314Z","0.36.75":"2017-08-22T04:15:25.668Z"},"users":{"jruiznpm":true,"enriched":true}}}