{"name":"uinput","version":"1.1.0","description":"Linux uinput module","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","install":"node-gyp rebuild"},"repository":"https://github.com/santigimeno/node-uinput","keywords":["uinput","linux","user","input"],"license":"ISC","dependencies":{"array.prototype.fill":"~1.0.1","async":"~2.1.4","bindings":"~1.2.1","ioctl":"~1.0.0","nan":"~2.3.2","ref":"~1.1.0","ref-array":"~1.1.2","ref-struct":"~1.0.2"},"gypfile":true,"gitHead":"2422b2c6b2b65b30b9143a94fff3ed47352c63d3","homepage":"https://github.com/santigimeno/node-uinput#readme","versions":[{"number":"0.0.1","date":"2014-11-25T21:47:16.168Z"},{"number":"0.0.2","date":"2015-09-11T19:56:39.201Z"},{"number":"0.0.3","date":"2015-09-11T20:00:01.633Z"},{"number":"0.0.4","date":"2016-04-19T20:41:11.494Z"},{"number":"1.0.0","date":"2016-04-28T13:21:19.609Z"},{"number":"1.1.0","date":"2017-02-14T16:26:15.237Z"}],"readme":"# node-uinput\n\nLinux uinput nodejs wrapper\n\n## Installation\n\n```\nnpm install uinput\n```\n\n## Example\n\nSay hello BYE\n\n```\nvar uinput = require('uinput');\n\nvar setup_options = {\n    EV_KEY : [ uinput.KEY_H, uinput.KEY_E, uinput.KEY_L, uinput.KEY_O,\n               uinput.KEY_CAPSLOCK, uinput.KEY_B, uinput.KEY_Y, uinput.KEY_SPACE ]\n}\n\nuinput.setup(setup_options, function(err, stream) {\n    if (err) {\n        throw(err);\n    }\n\n    var create_options = {\n        name : 'myuinput',\n        id : {\n            bustype : uinput.BUS_VIRTUAL,\n            vendor : 0x1,\n            product : 0x1,\n            version : 1\n        }\n    };\n\n    uinput.create(stream, create_options, function(err) {\n        if (err) {\n            throw(err);\n        }\n\n        setTimeout(function() {\n            uinput.key_event(stream, uinput.KEY_H, function(err) {\n                if (err) {\n                    throw(err);\n                }\n\n                uinput.key_event(stream, uinput.KEY_E, function(err) {\n                    if (err) {\n                        throw(err);\n                    }\n\n                    uinput.key_event(stream, uinput.KEY_L, function(err) {\n                        if (err) {\n                            throw(err);\n                        }\n\n                        uinput.key_event(stream, uinput.KEY_L, function(err) {\n                            if (err) {\n                                throw(err);\n                            }\n\n                            uinput.key_event(stream, uinput.KEY_O, function(err) {\n                                if (err) {\n                                    throw(err);\n                                }\n                            });\n                        });\n                    });\n                });\n            });\n        }, 2000);\n\n        setTimeout(function() {\n            var keys = [ uinput.KEY_SPACE, uinput.KEY_CAPSLOCK, uinput.KEY_B, uinput.KEY_Y, uinput.KEY_E ];\n            uinput.emit_combo(stream, keys, function(err) {\n                if (err) throw(err);\n            });\n        }, 3000);\n    });\n});\n```\n\n## API\n\n### uinput.setup(options, callback)\n\n* *options* `Object`\n    * *event_type* where event_type can be `EV_KEY`, `EV_ABS`, `EV_REL`, etc. and it's an `Array` with the different events we want the uinput device to handle\n* *callback* `Function` called when the setup operation ends\n    * *error* `Error`\n    * *stream* `WritableStream` to the uinput device.\n\nIt configures the uinput device we are about to create.\n\n### uinput.create(stream, options, callback)\n\n* *stream* `WritableStream`\n* *options* `Object`. See `uinput_user_dev` definition in linux/uinput.h\n    * *name* `String` with the name of the device\n    * *id* `Object`\n        * *bustype* `Number`\n        * *vendor* `Number`\n        * *product* `Number`\n        * *version* `Number`\n    * *ff_effects_max* `Number`\n    * *absmax* `Array` of `Numbers` of size: `uinput.ABS_CNT`\n    * *absmin* `Array` of `Numbers` of size: `uinput.ABS_CNT`\n    * *absfuzz* `Array` of `Numbers` of size: `uinput.ABS_CNT`\n    * *absflat* `Array` of `Numbers` of size: `uinput.ABS_CNT`\n* *callback* `Function` called when the creation operation ends\n    * *error* `Error`\n\nIt creates the uinput device.\n\n### send_event(stream, type, code, value, callback)\n\n* *stream* `WritableStream`\n* *type* `Number`\n* *code* `Number`\n* *value* `Number`\n* *callback* `Function`\n\nIt sends an event to the uinput device.\n\n### key_event(stream, code, callback)\n\n* *stream* `WritableStream`\n* *code* `Number`\n* *callback* `Function`\n\nWrapper over send_event to simulate key presses and mouse clicks.\n\n### emit_combo(stream, code, callback)\n\n* *stream* `WritableStream`\n* *code* `Array with any combination of keys`\n* *callback* `Function`\n\nIt sends an event to the uinput device with the combination\nkeys generated.\n","created":"2014-11-25T21:47:16.168Z","modified":"2017-02-14T16:26:15.237Z","lastPublisher":{"name":"sgimeno","email":"santiago.gimeno@gmail.com"},"owners":[{"name":"sgimeno","email":"santiago.gimeno@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"uinput","_nodeVersion":"4.4.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/uinput-1.1.0.tgz_1487089573075_0.8478204072453082"},"_npmUser":{"name":"sgimeno","email":"santiago.gimeno@gmail.com"},"_npmVersion":"2.15.11","_rev":"2-bf9ef4001bec8339ed946302a4530be1","_shasum":"9352abfcbefd0757c77f2d169f9dd360af1c53ed","author":{"name":"Santiago Gimeno","email":"santiago.gimeno@gmail.com"},"bugs":{"url":"https://github.com/santigimeno/node-uinput/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"9352abfcbefd0757c77f2d169f9dd360af1c53ed","tarball":"https://registry.npmjs.org/uinput/-/uinput-1.1.0.tgz"},"maintainers":[{"name":"sgimeno","email":"santiago.gimeno@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-14T16:26:15.237Z","created":"2014-11-25T21:47:16.168Z","0.0.1":"2014-11-25T21:47:16.168Z","0.0.2":"2015-09-11T19:56:39.201Z","0.0.3":"2015-09-11T20:00:01.633Z","0.0.4":"2016-04-19T20:41:11.494Z","1.0.0":"2016-04-28T13:21:19.609Z","1.1.0":"2017-02-14T16:26:15.237Z"}}}