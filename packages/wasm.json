{"name":"wasm","version":"1.0.0","description":"**An experimental WebAssembly loader for Node.js**","main":"wasm.js","scripts":{"test":"node test.js","install":"node-gyp rebuild"},"repository":"https://github.com/nodesource/node-wasm","license":"MIT","dependencies":{"bindings":"~1.2.1","nan":"~1.8.4","tape":"~4.0.0"},"gypfile":true,"gitHead":"f49b8b9dac6591a7a2bd193e210e99a2005ea424","homepage":"https://github.com/nodesource/node-wasm#readme","versions":[{"number":"1.0.0","date":"2015-06-22T01:14:25.551Z"}],"readme":"# node-wasm\n\n**An experimental WebAssembly loader for Node.js**\n\n## Usage\n\nLoad a `.wasm` file as a stringified JavaScript function:\n\n```js\nvar wasm = require('wasm')\n\nvar fnStr = wasm('/path/to/mod.wasm')\n```\n\nAlternatively, use the Node module system to load executable functions:\n\n```js\nrequire('wasm/require') // requiring .wasm files now works\n\nvar fn = require('/path/to/mod.wasm')\n```\n\n## Wat?\n\n### WebAssembly? Eh?\n\n[WebAssembly](https://github.com/WebAssembly/design/blob/master/HighLevelGoals.md) can be thought of as a step further than asm.js toward making an optimal compile-to target for the web. [Emscripten](http://kripken.github.io/emscripten-site/) does a nice job of encoding C++ code to asm.js but the resulting code is bloated and parse-time heavy. WebAssembly is intended to be compact and quick to load. Eventually WebAssembly is likely to make it possible to run all kinds of code in the browser without the need to compile directly to JavaScript.\n\n### Wow, what can I do with this?\n\nHold up there cowboy! You can't do much with this yet so don't get too excited.\n\nThis project is experimental for now and piggy-backs off the [WebAssembly Polyfill prototype](https://github.com/WebAssembly/polyfill-prototype-1) for the browser which compiles asm.js files to the current experimental WebAssembly binary format, which is far from standardised. So for now, this project is an exploration in what might be possible by combining WebAssembly and Node.js.\n\n### Does this need to be a native add-on?\n\nTechnically no, the current polyfill uses Emscripten to put the `.wasm` decoder into the browser so we could do the same with Node.\n\nHowever, the simplest path for getting this running and allowing experimentation is to connect a decoder directly to Node via a native add-on. Perhaps in the future it will make more sense to distribute this as pure JavaScript.\n\n### Why bother putting this in Node.js?\n\nWebAssembly on the server has the potential to be even more useful and interesting in the browser, depending on what you're trying to achieve. An efficient compile-to target with a single runtime could do for the server what the JVM attempted to do, _except_ without the bloat and with the runtime model of Node.js.\n\n## Example\n\n_Found in the examples subdirectory._\n\n\nGiven an asm.js-compatible Fibonacci number calculator:\n\n```js\nfunction fib(stdlib, foreign, heap) {\n  \"use asm\";\n\n  function fib(n) {\n    n = n|0;\n    var f1=0;\n    var f2=0;\n    if (n >>> 0 < 3) {\n      return 1|0;\n    }\n    f1=fib(n-1)|0;\n    f2=fib(n-2)|0;\n    return f1 + f2;\n  }\n \n  return fib;\n}\n```\n\nCompiled to `.wasm.` using the [WebAssembly Polyfill prototype](https://github.com/WebAssembly/polyfill-prototype-1) asm.js packer:\n\n```\n$ pack-asmjs fib.js fib.wasm\n```\n\nGives us a 54 byte file:\n\n```\n7761 736d 3903 0000 0000 0001 0001 0000\n0000 0000 0000 0001 0000 8204 1135 c0a3\n1001 0fa1 8116 001f c0a1 8216 001f c0a2\n0f1e c1c2 0000\n```\n\nNow we can execute it, passing `global` in place of the asm.js `stdlib` argument:\n\n```\n$ node -pe 'require(\"../require\"); require(\"./fib.wasm\")(global)(35)'\n9227465\n```\n\n## Authors and Contributors\n\n<table><tbody>\n<tr><th align=\"left\">Rod Vagg</th><td><a href=\"https://github.com/rvagg\">GitHub/rvagg</a></td><td><a href=\"http://twitter.com/rvagg\">Twitter/@rvagg</a></td></tr>\n</tbody></table>\n\nContributions are welcomed from experimenters wanting to join the fun!\n\n## License & Copyright\n\n**node-wasm** is Copyright (c) 2015 NodeSource and licensed under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE.md file for more details.\n","starsCount":6,"created":"2015-06-22T01:14:25.551Z","modified":"2017-08-04T11:18:05.308Z","lastPublisher":{"name":"rvagg","email":"rod@vagg.org"},"owners":[{"name":"rvagg","email":"rod@vagg.org"}],"other":{"_attachments":{},"_from":".","_id":"wasm","_nodeVersion":"2.0.1-nightly201506170c305f3581","_npmUser":{"name":"rvagg","email":"rod@vagg.org"},"_npmVersion":"2.9.0","_rev":"4-babff19146a54316bd80125b2853b5ad","_shasum":"30469e3633246da164c4f1b2510bd46e7099b570","author":{"name":"Rod","email":"rod@vagg.org","url":"http://r.va.gg/"},"bugs":{"url":"https://github.com/nodesource/node-wasm/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"30469e3633246da164c4f1b2510bd46e7099b570","tarball":"http://registry.npmjs.org/wasm/-/wasm-1.0.0.tgz"},"maintainers":[{"name":"rvagg","email":"rod@vagg.org"}],"readmeFilename":"README.md","time":{"modified":"2017-08-04T11:18:05.308Z","created":"2015-06-22T01:14:25.551Z","1.0.0":"2015-06-22T01:14:25.551Z"},"users":{"octalmage":true,"aguai":true,"codingchris":true,"amorgaut":true,"alexxnica":true,"daniellink":true}}}