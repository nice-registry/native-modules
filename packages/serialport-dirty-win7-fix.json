{"name":"serialport-dirty-win7-fix","version":"0.0.3","description":"Node.js package to access serial ports. Welcome your robotic javascript overlords. Better yet, program them!","binary":{"module_name":"serialport","module_path":"build/{configuration}/","remote_path":"./voodootikigod/node-serialport/releases/download/3.0.0/","package_name":"serialport-v3.0.0-node-v47-{platform}-{arch}.tar.gz","host":"https://github.com"},"main":"./lib/serialport","keywords":["serialport","nodebots","johnny-five"],"dependencies":{"bindings":"1.2.1","debug":"^2.1.1","es6-promise":"^3.1.2","nan":"~2.2.1","node-pre-gyp":"^0.6.26","object.assign":"^4.0.3","optimist":"~0.6.1","sf":"0.1.7"},"devDependencies":{"chai":"^3.5.0","chai-subset":"^1.2.2","eslint-config-standard":"^5.1.0","eslint-plugin-promise":"^1.1.0","eslint-plugin-standard":"^1.3.2","grunt":"^1.0.0","grunt-mocha-test":"^0.12.7","gruntify-eslint":"^2.0.0","mocha":"^2.4.5","node-pre-gyp-github":"^1.1.2","sandboxed-module":"^2.0.3","sinon":"^1.17.3","sinon-chai":"^2.8.0"},"engines":{"node":">= 0.10.0"},"bin":{"serialportlist":"./bin/serialportList.js","serialportterm":"./bin/serialportTerminal.js"},"license":"MIT","scripts":{"install":"node-pre-gyp install --fallback-to-build","rebuild-all":"npm rebuild && node-pre-gyp rebuild","stress":"mocha --no-timeouts test/arduinoTest/stress.js","grunt":"grunt","test":"grunt --verbose"},"gypfile":true,"gitHead":"92ae904c51e729a4026f8a24f045658b6a0fa3c2","bundleDependencies":["node-pre-gyp"],"versions":[{"number":"0.0.0","date":"2016-04-28T15:14:07.892Z"},{"number":"0.0.1","date":"2016-04-28T15:51:50.347Z"},{"number":"0.0.2","date":"2016-04-28T15:52:05.120Z"},{"number":"0.0.3","date":"2016-04-28T15:52:11.686Z"}],"readme":"# Node Serialport\n\n[![Build Status](https://travis-ci.org/voodootikigod/node-serialport.svg?branch=master)](https://travis-ci.org/voodootikigod/node-serialport)\n[![Gitter chat](https://badges.gitter.im/voodootikigod/node-serialport.svg)](https://gitter.im/voodootikigod/node-serialport)\n[![Dependency Status](https://david-dm.org/voodootikigod/node-serialport.svg)](https://david-dm.org/voodootikigod/node-serialport)\n\nFor support you can open a [github issue](https://github.com/voodootikigod/node-serialport/issues/new), for discussions, designs, and clarifications, we recommend you join our [Gitter Chat room](https://gitter.im/voodootikigod/node-serialport)\n\n***\n\nYou're reading the README for `serialport@3.0.0` the latest `3.x` release. See our [change log](changelog.md) for what's new.\n\n - [`serialport@2.1.2` docs are here](https://github.com/voodootikigod/node-serialport/blob/2.1.2/README.md) it was the last `2.x` release\n - [`serialport@1.7.4` docs are here](https://github.com/voodootikigod/node-serialport/blob/v1.7.4/README.md) it was the last `1.x` release\n\n***\n\nImagine a world where you can write JavaScript to control blenders, lights, security systems, or even robots. Yes, I said robots. That world is here and now with node-serialport. It provides a very simple interface to the low level serial port code necessary to program [Arduino](http://www.arduino.cc/) chipsets, [X10](http://www.smarthome.com/manuals/protocol.txt) wireless communications, or even the rising [Z-Wave](http://www.z-wave.com/modules/ZwaveStart/) and [Zigbee](http://www.zigbee.org/) standards. The physical world is your oyster with this goodie. For a full break down of why we made this, please read [NodeBots - The Rise of JS Robotics](http://www.voodootikigod.com/nodebots-the-rise-of-js-robotics).\n\n***\n\nFor getting started with node-serialport, we recommend you begin with the following articles:\n\n* [Arduino Node Security Sensor Hacking](http://nexxylove.tumblr.com/post/20159263403/arduino-node-security-sensor-hacking) - A great all around \"how do I use this\" article.\n* [NodeBots - The Rise of JS Robotics](http://www.voodootikigod.com/nodebots-the-rise-of-js-robotics) - A survey article of why one would want to program robots in JS.\n* [Johnny-Five](https://github.com/rwaldron/johnny-five#hello-johnny) - The Johnny-Five Robotics and IoT library's introduction \"Hello Johnny\" (awesome).\n\n***\n\n* [Installation](#installation-instructions)\n* [Installation Special Cases](#installation-special-cases)\n  * [Windows](#windows)\n  * [Mac OS X](#mac-os-x)\n  * [Ubuntu Linux](#ubuntu-linux)\n  * [Alpine Linux](#alpine-linux)\n  * [Raspberry Pi Linux](#raspberry-pi-linux)\n* [Usage](#usage)\n  * [Opening a Port](#opening-a-port)\n  * [Listing Ports](#listing-ports)\n  * [Parsers](#parsers)\n* [Methods](#methods)\n  * [SerialPort](#serialport-path-options-openimmediately-callback)\n  * [open()](#open-callback)\n  * [isOpen()](#isopen)\n  * [write()](#write-buffer-callback)\n  * [pause()](#pause-)\n  * [resume()](#resume-)\n  * [flush()](#flush-callback)\n  * [drain()](#drain-callback)\n  * [close()](#close-callback)\n* [Events](#events)\n* [Command Line Tools](#command-line-tools)\n  * [Serial Port List](#serial-port-list)\n  * [Serial Port Terminal](#serial-port-terminal)\n\n***\n\n## Installation Instructions\n\nFor most \"standard\" use cases (node v0.10.x on mac, linux, windows on a x86 or x64 processor), node-serialport will install nice and easy with a simple\n\n```\nnpm install serialport\n```\n\n### Installation Special Cases\n\nWe are using [node-pre-gyp](https://github.com/mapbox/node-pre-gyp) to compile and post binaries of the library for most common use cases (linux, mac, windows on standard processor platforms). If you are on a special case, node-serialport will work, but it will compile the binary when you install.\n\nThis assumes you have everything on your system necessary to compile ANY native module for Node.js. This may not be the case, though, so please ensure the following are true for your system before filing an issue about \"Does not install\". For all operatings systems, please ensure you have Python 2.x installed AND not 3.0, node-gyp (what we use to compile) requires Python 2.x.\n\n#### Windows\n\n * Windows 7, Windows 8.1, and Windows 10 are supported.\n * Might just download and install with no extra steps. If the downloaded binary fails you'll have to build it with the following steps.\n * Install [Visual Studio Express 2013 for Windows Desktop](http://www.microsoft.com/visualstudio/eng/2013-downloads#d-2013-express).\n * If you are hacking on an Arduino, be sure to install [the drivers](http://arduino.cc/en/Guide/windows#toc4).\n * Install [node.js](http://nodejs.org/) matching the bitness (32 or 64) of your operating system.\n * Install [Python 2.7.6](http://www.python.org/download/releases/2.7.6/) matching the bitness of your operating system.  For any questions, please refer to their [FAQ](http://docs.python.org/2/faq/windows.html). Default settings are perfect.\n * Open the 'Visual Studio Command Prompt' and add Python to the path.\n\n#### Mac OS X\n\nEnsure that you have at a minimum the xCode Command Line Tools installed appropriate for your system configuration. If you recently upgraded the OS, it probably removed your installation of Command Line Tools, please verify before submitting a ticket. To compile `node-serialport` with Node.js 4.x+, you will need to use g++ v4.8 or higher.\n\n#### Ubuntu Linux\n\nYou know what you need for your system, basically your appropriate analog of build-essential. Keep rocking! Ubuntu renamed the `node` binary `nodejs` which can cause problems building `node-serialport`. The fix is simple, install the [nodejs-legacy package](https://packages.debian.org/sid/nodejs-legacy) that symlinks `/usr/bin/nodejs => /usr/bin/node` or install the more up to date nodejs package from [Chris Lea's PPA](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os).\n\n\n```\n# Ubuntu node\nsudo apt-get install nodejs nodejs-legacy\n\n# Or Chris Lea's PPA Node (more up to date)\nsudo add-apt-repository ppa:chris-lea/node.js\nsudo apt-get update\nsudo apt-get install nodejs\n\nsudo apt-get install build-essential\nnpm install serialport\n```\n\n#### Alpine Linux\n\n[Alpine](http://www.alpinelinux.org/) is a (very) small distro, but it uses the musl standard library instead of glibc (that most other Linux distros use), so it requires compilation.\n\n```\n# If you don't have node/npm already, add that first\nsudo apk add --no-cache nodejs\n\n# Add the necessary build and runtime dependencies\nsudo apk add --no-cache make gcc g++ python linux-headers udev\n\n# Then we can install serialport, forcing it to compile\nnpm install serialport --build-from-source=serialport\n```\n\n#### Raspberry Pi Linux\n\nFollow the instructions for [setting up a Raspberry pi for use with Johnny-Five and Raspi IO](https://github.com/nebrius/raspi-io/wiki/Getting-a-Raspberry-Pi-ready-for-NodeBots). These projects use Node Serialport under the hood.\n\n## Usage\n\nOpening a serial port:\n\n```js\nvar SerialPort = require(\"serialport\").SerialPort\nvar serialPort = new SerialPort(\"/dev/tty-usbserial1\", {\n  baudrate: 57600\n});\n```\n\nWhen opening a serial port, you can specify (in this order).\n\n1. Path to Serial Port - required.\n1. Options - optional and described below.\n\n### Opening a Port\n\nConstructing a `SerialPort` object will open a port, eventually. You can bind events while the port is opening but you must wait until it is open to `write()` to it. (Most port functions require an open port.) You can call code when a port is opened in three ways.\n\n - The `open` event is always emitted when the port is opened\n - The constructor callback is called when the port is opened and you haven't disabled the `openImmediately` option, if you have disabled it, the callback is only used for errors.\n - The `.open()` function takes a callback that is called when the port is opened. This can be used if you disabled the `openImmediately` option or have previously closed an open port.\n\n\n```js\nvar SerialPort = require('serialport').SerialPort;\nvar port = new SerialPort('/dev/tty-usbserial1');\n\nport.on('open', function () {\n  port.write('main screen turn on', function(err, bytesWritten) {\n    if (err) {\n      return console.log('Error: ', err.message);\n    }\n    console.log(bytesWritten, 'bytes written');\n  });\n});\n```\n\nThis could be moved to the constructor's callback.\n```\nvar SerialPort = require('serialport').SerialPort;\nvar port = new SerialPort('/dev/tty-usbserial1', function () {\n  port.write('main screen turn on', function(err, bytesWritten) {\n    if (err) {\n      return console.log('Error: ', err.message);\n    }\n    console.log(bytesWritten, 'bytes written');\n  });\n});\n```\n\nWhen disabling the `openImmediately` flag you'll need to open the port on your own. Note, in order to disable the `openImmediately` flag, we have to pass an options object.\n\n```js\nvar SerialPort = require('serialport').SerialPort;\nvar port = new SerialPort('/dev/tty-usbserial1', {}, false);\n\nport.open(function (err) {\n  if (err) {\n    return console.log('Error opening port: ', err.message);\n  }\n\n  // errors will be emitted on the port since there is no callback to write\n  port.write('main screen turn on');\n});\n```\n\n### Listing Ports\n\n`.list(callback)`\n\nRetrieves a list of available serial ports with metadata.\n\n* `callback` is a required function that looks should look like: `function (err, ports) { ... }`. `ports` will be an array of objects with port info. Only the `comName` is guaranteed, all the other fields undefined if unavailable. The `comName` is either the path or identifier (eg `COM1`) used to open the serialport.\n\n```js\n// example port information\n{\n  comName: '/dev/cu.usbmodem1421',\n  manufacturer: 'Arduino (www.arduino.cc)',\n  serialNumber: '757533138333964011C1',\n  pnpId: undefined,\n  locationId: '0x14200000',\n  vendorId: '0x2341',\n  productId: '0x0043'\n}\n\n```\n\n```js\nvar serialPort = require('serialport');\nserialPort.list(function (err, ports) {\n  ports.forEach(function(port) {\n    console.log(port.comName);\n    console.log(port.pnpId);\n    console.log(port.manufacturer);\n  });\n});\n```\n\n### Parsers\n\nOut of the box, node-serialport provides two parsers one that simply emits the raw buffer as a data event and the other which provides familiar \"readline\" style parsing. To use the readline parser, you must provide a delimiter as such:\n\n```js\nvar serialport = require('serialport');\nvar SerialPort = serialport.SerialPort;\n\nvar port = new SerialPort('/dev/tty-usbserial1', {\n  parser: serialport.parsers.readline('\\n')\n});\n```\n\nTo use the raw parser, you just provide the function definition (or leave undefined):\n\n```js\nvar serialport = require('serialport');\nvar SerialPort = serialport.SerialPort;\n\nvar port = new SerialPort('/dev/tty-usbserial1', {\n  parser: serialport.parsers.raw\n});\n```\n\n\nYou can get updates of new data from the Serial Port as follows:\n\n```js\nport.on('data', function (data) {\n  console.log('Data: ' + data);\n});\n```\n\nYou can write to the serial port by sending a string or buffer to the write method as follows:\n\n```js\nport.write('Hi Mom!');\nport.write(new Buffer('Hi Mom!'));\n```\n\nEnjoy and do cool things with this code.\n\n## Methods\n\n### SerialPort (path, options, openImmediately, callback)\n\nCreate a new serial port on `path`.\n\n**_path_**\n\nThe system path of the serial port to open. For example, `/dev/tty` on Mac/Linux or `COM1` on Windows.\n\n**_options (optional)_**\n\nPort configuration options.\n\n* `baudRate` Baud Rate, defaults to 9600. Should be one of: 115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 1200, 600, 300, 200, 150, 134, 110, 75, or 50. Custom rates as allowed by hardware is supported.\n* `dataBits` Data Bits, defaults to 8. Must be one of: 8, 7, 6, or 5.\n* `stopBits` Stop Bits, defaults to 1. Must be one of: 1 or 2.\n* `parity` Parity, defaults to 'none'. Must be one of: 'none', 'even', 'mark', 'odd', 'space'\n* `rtscts` defaults to false\n* `xon` defaults to false\n* `xoff` defaults to false\n* `xany` defaults to false\n* `flowControl` `true` for `rtscts` or an array with one or more of the following strings to enable them `xon`, `xoff`, `xany`, `rtscts`. Overwrites any individual settings.\n* `bufferSize` Size of read buffer, defaults to 65536. Must be an integer value.\n* `parser` The parser engine to use with read data, defaults to rawPacket strategy which just emits the raw buffer as a \"data\" event. Can be any function that accepts EventEmitter as first parameter and the raw buffer as the second parameter.\n* `platformOptions` - sets platform specific options, see below.\n\n#### Unix Platform Options\n\nThese properties are ignored for windows. An object with the following properties:\n\n* `vmin` (default: 1) - see [`man termios`](http://linux.die.net/man/3/termios)\n* `vtime` (default: 0) - see [`man termios`](http://linux.die.net/man/3/termios)\n\n**_openImmediately (optional)_**\n\nAttempts to open a connection to the serial port on `process.nextTick`. The default is `true`. Set to `false` to manually call `open()` at a later time, but note you'll need to use factory error listener in the case of constructor errors.\n\n**_callback (optional)_**\n\nCalled when a connection has been opened. The callback should be a function that looks like: `function (error) { ... }`\n\n**Note:** The callback will NOT be called if openImmediately is set to false as the open will not be performed.\n\n### .open (callback)\n\nOpens a connection to the given serial port.\n\n**_callback (optional)_**\n\nCalled when a connection has been opened. The callback should be a function that looks like: `function (error) { ... }`\n\n### .isOpen()\n\nReturns `true` if the port is open.\n\n### .write (buffer, callback)\n\nWrites data to the given serial port.\n\n**_buffer_**\n\nThe `buffer` parameter accepts a [`Buffer` ](http://nodejs.org/api/buffer.html) object, or a type that is accepted by the `Buffer` constructor (ex. an array of bytes or a string).\n\n**_callback (optional)_**\n\nCalled once the write operation returns. The callback should be a function that looks like: `function (error, bytesWritten) { ... }`\n\n**Note:** The write operation is non-blocking. When it returns, data may still have not actually been written to the serial port. See `drain()`.\n\n**Note:** Some devices like the Arduino reset when you open a connection to them. In these cases if you immediately write to the device they wont be ready to receive the data. This is often worked around by having the Arduino send a \"ready\" byte that your node program waits for before writing. You can also often get away with waiting around 400ms.\n\n### .pause ()\n\nPauses an open connection.\n\n### .resume ()\n\nResumes a paused connection.\n\n### .flush (callback)\n\nFlushes data received but not read. See [`tcflush()`](http://linux.die.net/man/3/tcflush) for Mac/Linux and [`FlushFileBuffers`](http://msdn.microsoft.com/en-us/library/windows/desktop/aa364439) for Windows.\n\n**_callback (optional)_**\n\nCalled once the flush operation returns. The callback should be a function that looks like: `function (error) { ... }`\n\n### .drain (callback)\n\nWaits until all output data has been transmitted to the serial port. See [`tcdrain()`](http://linux.die.net/man/3/tcdrain) for more information.\n\n**_callback (optional)_**\n\nCalled once the drain operation returns. The callback should be a function that looks like: `function (error) { ... }`\n\n**Example**\n\nWrites `data` and waits until it has finish transmitting to the target serial port before calling the callback.\n\n```\nfunction writeAndDrain (data, callback) {\n  sp.write(data, function () {\n    sp.drain(callback);\n  });\n}\n```\n\n### .close (callback)\n\nCloses an open connection.\n\n**_callback (optional)_**\n\nCalled once a connection is closed. The callback should be a function that looks like: `function (error) { ... }` If called without an callback and there is an error, an error event will be emitted.\n\n### .set (options, callback)\n\nSets flags on an open port. Uses [`SetCommMask`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363257(v=vs.85).aspx) for windows and [`ioctl`](http://linux.die.net/man/4/tty_ioctl) for mac and linux.\n\n**_options (optional)_**\n\nAll options are operating system default when the port is opened. Every flag is set on each call to the provided or default values. If options isn't provided default options will be used.\n\n * `brk` optional boolean, defaults to false\n * `cts` optional boolean, defaults to false\n * `dsr` optional boolean, defaults to false\n * `dtr` optional boolean, defaults to true\n * `rts` optional boolean, defaults to true\n\n**_callback (optional)_**\n\n`callback: function(err, results)`\n\nCalled once the port's flags have been set. `results` are the return of the underlying system command. If `.set` is called without an callback and there is an error, an error event will be emitted.\n\n## Events\n\n### .on('open', callback)\nCallback is called with no arguments when the port is opened and ready for writing. This happens if you have the constructor open immediately (which opens in the next tick) or if you open the port manually with `open()`. See [Useage/Open Event](#open-event) for more information.\n\n### .on('data', callback)\nCallback is called with data depending on your chosen parser. The default `raw` parser will have a `Buffer` object with a varying amount of data in it. The `readLine` parser will provide a string of your line. See the [parsers](#parsers) section for more information\n\n### .on('close', callback)\nCallback is called with no arguments when the port is closed. In the event of an error, an error event will be triggered\n\n### .on('error', callback)\nCallback is called with an error object whenever there is an error.\n\n### .on('disconnect', callback)\nCallback is called with an error object.\n\n## Command Line Tools\nIf you install `serialport` globally. (eg, `npm install -g serialport`) you'll receive two command line tools.\n\n### Serial Port List\n`serialportlist` will list all available serialports\n\n### Serial Port Terminal\n`serialportterm` provides a basic terminal interface for a serialport. `ctrl+c` will exit.\n","created":"2016-04-28T15:14:07.892Z","modified":"2016-04-28T15:52:11.686Z","lastPublisher":{"name":"paulobarcelos","email":"paulo@azucrina.org"},"owners":[{"name":"paulobarcelos","email":"paulo@azucrina.org"}],"other":{"_attachments":{},"_from":".","_id":"serialport-dirty-win7-fix","_nodeVersion":"6.0.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/serialport-dirty-win7-fix-0.0.3.tgz_1461858730433_0.5611751088872552"},"_npmUser":{"name":"paulobarcelos","email":"paulo@azucrina.org"},"_npmVersion":"3.3.10","_rev":"1-94f5db42c8e8df74eb7dbe00cc5955ad","_shasum":"12da3e61b160d0180d35194d1fbe6d5772714882","directories":{},"dist-tags":{"latest":"0.0.3"},"dist":{"shasum":"12da3e61b160d0180d35194d1fbe6d5772714882","tarball":"http://registry.npmjs.org/serialport-dirty-win7-fix/-/serialport-dirty-win7-fix-0.0.3.tgz"},"maintainers":[{"name":"paulobarcelos","email":"paulo@azucrina.org"}],"readmeFilename":"README.md","time":{"modified":"2016-04-28T15:52:11.686Z","created":"2016-04-28T15:14:07.892Z","0.0.0":"2016-04-28T15:14:07.892Z","0.0.1":"2016-04-28T15:51:50.347Z","0.0.2":"2016-04-28T15:52:05.120Z","0.0.3":"2016-04-28T15:52:11.686Z"}}}