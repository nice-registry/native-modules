{"name":"plc","version":"0.3.0","main":"./lib/plc","description":"module to connect to PLCs","keywords":["plc","libnodave","siemens","logo"],"licenses":[{"type":"LGPL"}],"engines":{"node":">=0.10.x"},"gypfile":true,"dependencies":{"bindings":"^1.2.1","bits":"~0.1.1","nan":"^2.5.1"},"devDependencies":{"chai":"~3.5.0","coffee-script":"~1.12.4","coffeelint":"^1.16.0","mocha":"~3.2.0","node-gyp":"~3.5.0"},"repository":"https://github.com/flosse/node-plc","scripts":{"lint":"coffeelint src/","install":"node-gyp configure build","prepublish":"coffee -c -o lib/ src/*.coffee","test":"npm run lint & npm install && mocha --reporter spec --compilers coffee:coffee-script/register spec/*.spec.coffee"},"gitHead":"fdbd85b21a32fe34d3334fa01b8fb96cdd1c9368","homepage":"https://github.com/flosse/node-plc#readme","_resolved":"file:node-plc","versions":[{"number":"0.1.0","date":"2013-10-14T11:06:03.970Z"},{"number":"0.1.1","date":"2013-12-12T21:09:52.916Z"},{"number":"0.1.2","date":"2013-12-15T22:15:36.310Z"},{"number":"0.2.0","date":"2015-01-22T00:05:50.358Z"},{"number":"0.2.1","date":"2015-04-15T17:43:48.134Z"},{"number":"0.2.2","date":"2015-05-19T02:28:01.006Z"},{"number":"0.3.0","date":"2017-02-28T19:14:45.727Z"}],"readme":"# node-plc\n\nNode.js module to communicate with PLCs.\nAt the moment only the Siemens LOGO! PLC (`0BA7`and `0BA8`) is supported.\n\n[![Build Status](https://secure.travis-ci.org/flosse/node-plc.svg)](http://travis-ci.org/flosse/node-plc)\n[![Dependency Status](https://gemnasium.com/flosse/node-plc.svg)](https://gemnasium.com/flosse/node-plc)\n[![NPM version](https://badge.fury.io/js/plc.svg)](http://badge.fury.io/js/plc)\n\n## Usage\n\n```shell\nnpm install --save plc\n```\n\n```javascript\nvar plc = require(\"plc\");\n```\n\n### Logo class\n\n```javascript\n\nvar myLogo = new plc.Logo(\"192.168.0.1\", {\n  markers: 6,   // default is 8\n  inputs: 4,    // default is 8\n  timeout: 500  // socket timeout in milliseconds\n});\n\nmyLogo.on(\"error\", function(err){\n  console.error(err.message);\n});\n\nmyLogo.on(\"connect\", function(){\n\n  var result = myLogo.getInputs();\n  if (result instanceof Error){\n    return console.error(result.message);\n  }\n  console.log(result); // [true, false, false, true, false, true]\n\n  result = myLogo.getMarkers();\n  if (result instanceof Error){\n    return console.error(result.message);\n  }\n  console.log(result); // [true, false, true, true]\n\n  result = myLogo.setMarker(2);\n  if (result instanceof Error){\n    return console.error(result.message);\n  }\n\n  myLogo.disconnect();\n});\n\nmyLogo.connect();\n```\n\n### Simulation\n\n```javascript\nvar plc  = require(\"plc\");\n\nvar myVirtualLogo = new plc.Logo(\"192.168.0.1\", { simulate: true });\n\nmyLogo.on(\"connect\", function(){\n\n /**\n  * Since we cannot manipulate the inputs of a real PLCs\n  * there is no \"setInput\" method. But within the simulation\n  * mode we can use the special methods \"setSimulatedInput\"\n  * and \"clearSimulatedInput\".\n  */\n\n  myVirtualLogo.setSimulatedInput(2);\n  myLogo.getInput(2); // true\n  myVirtualLogo.clearSimulatedInput(2);\n  myLogo.getInput(2); // false\n\n /**\n  * Markers can be used as usual.\n  */\n\n  myVirtualLogo.setMarker(1);\n  myVirtualLogo.getMarker(1); // true\n  myVirtualLogo.clearMarker(1);\n  myVirtualLogo.getMarker(1); // false\n\n});\n\nmyVirtualLogo.connect();\n```\n\n### Comfort features\n\nThe LOGO! can be configured with state and action schemata.\nA states could be described like this:\n\n```javascript\nvar myStates = {\n  stateOne:   { input:  0 },\n  stateTwo:   { marker: 2 },\n  stateThree: { input:  2 }\n};\n```\n\nAn action consists of an array with defined desired states:\n\n```javascript\nvar actions = {\n  actionOne:\n    [\n      { type: 'clear', marker: 1 },\n      { type: 'set',   marker: 3 }\n    ],\n  actionTwo:\n    [ { type: 'set', marker: 2 } ],\n  actionThree:\n    [ { type: 'alias', actions: ['actionOne','actionTwo'] } ]\n};\n```\n\nThis is a full example:\n\n```javascript\nvar config = {\n  timeout:  500   // connection timeout\n  interval: 250   // read state interval\n  states: {\n    x:   { input:  0 },\n    y:   { input:  2 },\n    foo: { marker: 0 },\n    bar: { input:  1 }\n  actions: {\n    switchOne:\n      [\n        { type: 'set', marker: 3 }\n      ],\n    switchTwo:\n      [\n        { type: 'set',   marker:   1             },\n        { type: 'alias', switches: ['switchOne'] }\n      ]\n    }\n  }\n};\n\nvar dev1 = new Device(\"192.168.0.201\", config);\n\ndev1.on(\"connect\", function(){\n  console.log(\"Device 1 connected\");\n});\n\ndev1.on(\"timeout\", function(){\n  console.log(\"Device 1 connection timeout occoured\");\n});\n\ndev1.on(\"disconnect\", function(){\n  console.log(\"Device 1 disconnected\");\n});\n\ndev1.on(\"error\", function(err){\n  console.error(\"something went wrong: \", err.message);\n});\n\ndev.on('state-change', function(state){\n  console.log(state);\n  // { x: true, y: false, foo: true, bar: false }\n});\n\ndev1.connect();\ndev1.startWatching();\n\n// ...\n\ndev1.stopWatching();\ndev1.disconnect();\n```\n\n### API\n\n#### Constructor\n\n```javascript\nnew require(\"plc\").Logo(ipAddress, options);\n```\n\nFollowing options are available\n\n- `inputs` - number of used inputs\n- `markers` - number of used markers\n- `simulate` - simulation mode\n- `timeout` - the socket timeout\n\n#### Properties\n\n- `ip`\n- `isConnected`\n\n#### Methods\n\n- `connect()`\n- `disconnect()`\n- `setMarker(nr)`\n- `clearMarker(nr)`\n- `getMarker(nr)`\n- `getMarkers()`\n- `getInput(nr)`\n- `getInputs()`\n- `setSimulatedInput(nr)`\n- `clearSimulatedInput(nr)`\n- `getState()`\n- `setSimulatedState(stateName, value)`\n- `setVirtualState(stateName, value)`\n- `triggerAction(action)`\n- `startWatching`\n- `stopWatching`\n\n#### Events\n\n- `error`\n- `connect`\n- `disconnect`\n- `timeout`\n- `state`\n- `state-change`\n\n## Test\n\n```\nnpm test\n```\n\n## License\n\nThis project is licensed under the LGPL license.\n","created":"2013-10-14T11:05:59.927Z","modified":"2017-02-28T19:14:45.727Z","lastPublisher":{"name":"flosse","email":"mail@markus-kohlhase.de"},"owners":[{"name":"flosse","email":"mail@markus-kohlhase.de"}],"other":{"_attachments":{},"_from":"node-plc","_id":"plc","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/plc-0.3.0.tgz_1488309283689_0.7562027692329139"},"_npmUser":{"name":"flosse","email":"mail@markus-kohlhase.de"},"_npmVersion":"3.10.10","_rev":"2-fa5c47d65ba1720b00cd9154ea49a743","_shasum":"a974478b9104ae360576c2ccb48ae3268038b13f","author":{"name":"Markus Kohlhase","email":"mail@markus-kohlhase.de"},"bugs":{"url":"http://github.com/flosse/node-plc/issues"},"directories":{},"dist-tags":{"latest":"0.3.0"},"dist":{"shasum":"a974478b9104ae360576c2ccb48ae3268038b13f","tarball":"https://registry.npmjs.org/plc/-/plc-0.3.0.tgz"},"maintainers":[{"name":"flosse","email":"mail@markus-kohlhase.de"}],"readmeFilename":"README.md","time":{"modified":"2017-02-28T19:14:45.727Z","created":"2013-10-14T11:05:59.927Z","0.1.0":"2013-10-14T11:06:03.970Z","0.1.1":"2013-12-12T21:09:52.916Z","0.1.2":"2013-12-15T22:15:36.310Z","0.2.0":"2015-01-22T00:05:50.358Z","0.2.1":"2015-04-15T17:43:48.134Z","0.2.2":"2015-05-19T02:28:01.006Z","0.3.0":"2017-02-28T19:14:45.727Z"}}}