{"name":"@e2ebridge/sapnwrfc","version":"1.2.1","description":"Bindings for the SAP NetWeaver RFC SDK","license":"MIT","homepage":"https://github.com/e2ebridge/node-sapnwrfc","repository":"https://github.com/e2ebridge/node-sapnwrfc","keywords":["sapnwrfc","sap","rfc"],"main":"sapnwrfc","engines":{"node":">= 0.8.0","iojs":">= 1.0.0"},"dependencies":{"bindings":">=0.3.0","nan":"^2.5.1"},"devDependencies":{"gulp":"^3.9.0","gulp-mocha":"^2.1.3","gulp-util":"^3.0.7","mocha":"^2.3.3","run-sequence":"^1.1.4","should":"^7.1.1"},"scripts":{"install":"node preinstall.js","test":"npm run test:linux","test:linux":"export LD_LIBRARY_PATH=nwrfcsdk/lib && gulp test","test:win32":"gulp test"},"gitHead":"c0ce05ac8ebbd8b213fe74b88bcd0240aeca1790","versions":[{"number":"1.0.0","date":"2016-05-09T14:58:58.216Z"},{"number":"1.0.1","date":"2016-06-03T14:16:09.968Z"},{"number":"1.0.2","date":"2016-06-07T12:22:51.765Z"},{"number":"1.1.0","date":"2016-11-17T16:49:57.662Z"},{"number":"1.1.1","date":"2017-03-22T16:13:00.722Z"},{"number":"1.2.0","date":"2017-04-05T09:58:23.046Z"},{"number":"1.2.1","date":"2017-06-06T12:12:40.902Z"}],"readme":"# SAP Netweaver RFC SDK Bindings for Node.js\n\n## Description\n\nThis module provides bindings to the SAP Netweaver RFC SDK. With it, you will be able to call remote enabled function modules of a SAP system.\nOpening the connection and function invocations are fully/partially asynchronous operations, which will call a callback function upon completion.\n\n## Preparation\n\n**Note:** In order to use this module you will have to obtain the SAP NW RFC SDK via http://service.sap.com. For further instructions see OSS note 1025361.\n\n### Linux\n\n- Extract the SDK archive with SAPCAR\n- Copy the files from the lib and include folders to the corresponding system directories (/usr/local/Lib /usr/local/include)\n\n```sh\n./SAPCAR_3-20002089.EXE -xf NWRFC_8-20004549.SAR\ncd nwrfcsdk\ncp ./lib/* /usr/lib\ncp ./include/* /usr/inlude\n```\n\n### Windows\n\n- Extract the SDK archive with SAPCAR\n- Copy the files from the lib folder to C:\\Windows\\system32\n- Warning: If you are working with NodeJS 32-bit on a Windows 64-bit OS, you should copy the files to C:\\Windows\\SysWOW64 instead.\n\n### OS X\n\nOS X is **not supported** due to the fact that there is no suitable SAP RFC NW SDK available. The module will compile but fail when trying to lazy-load its dependencies.\n\n## Installation (both Linux and Windows)\n\n- You may now download the addon from the [npm registry](http://search.npmjs.org) and install it by using the `npm` command.\n\n```sh\nnpm install sapnwrfc\n```\n\n## Usage\n\nAs with all other Node.js modules, you need to require it:\n\n```js\nvar sapnwrfc = require('sapnwrfc');\n```\n\n## Connection parameters\n\nConnection parameters have to be specified using a JavaScript object. For a complete list of possible parameters, refer to the\n_SAP NetWeaver RFC SDK Guide_ which is available via [SAP Connectors](http://service.sap.com/connectors).\n\nExample:\n\n```js\nvar conParams = {\n  ashost: '192.168.0.10',\n  sysid: 'NPL',\n  sysnr: '42',\n  user: 'DEVELOPER',\n  passwd: 'password',\n  client: '001',\n  lang: 'E'\n};\n```\n\n## Set path to sapnwrfc.ini\n\nBefore you open a connection you can set the directory path to look for the `sapnwrfc.ini` file.\n\nExample:\n\n```js\nvar con = new sapnwrfc.Connection;\nvar iniPath = '/path/to/dir/with/inifile/in/it'\n\ncon.SetIniPath(iniPath);\n```\n\n## Opening the connection\n\nBefore you can invoke a remote function, you will have to open a connection to the SAP system.\n\n```js\nConnection.Open( connectionParameters, callback( errorObject ) );\n```\n\n- **connectionParameters:** JavaScript object containing the parameters used for connecting to a SAP system (see above)\n- **callback:** A function to be executed after the connection has been attempted. In case of an error, an errorObject will be passed as an argument.\n\n```js\nversionInfo = Connection.GetVersion( );\n```\n\n- **versionInfo:** An Array containing major number, minor number and patch level of the NW RFC SDK\n\nExample:\n\n```js\nvar con = new sapnwrfc.Connection;\n\ncon.Open(conParams, function(err) {\n  if (err) {\n    console.log(err);\n    return;\n  }\n  console.log('sapnwrfc: ' + con.GetVersion());\n});\n```\n\n## Calling a remote function module\n\nThis is a two step process:\n\n- You will first have to lookup the function module's definition, getting a Function object in return\n- After a successful lookup, you may invoke the function and pass arguments to it\n\nHowever, you can use the Function object subsequently multiple times for invocations, without having to do another lookup upfront.\n\n```js\nfunctionObject = Connection.Lookup( functionModuleName )\n```\n\n- **functionModuleName:** A string containing the name of the remote function module to be called\n- **functionObject:** A JavaScript object (class name: Function) which represents an interface to invoke the function\n\n```js\nFunction.Invoke( functionParameters, callback( errorObject, result ) )\n```\n\n- **functionParameters:** JavaScript object containing the parameters used for connecting to a SAP system (see above)\n- **callback:** A function to be executed after the connection has been attempted. In case of an error, an errorObject will be passed as an argument. The result will be returned as a JavaScriptObject (see below for details)\n\nFor the sake of simplicity, the following example will neither pass arguments to the remote function nor receive a result:\n\n```js\nvar func = con.Lookup('RFC_PING');\nfunc.Invoke({ }, function(err, result) {\n  console.log('Got pong!');\n});\n```\n\n## Passing and receiving arguments\n\nRemote function arguments are being passed by using a plain JavaScript object. For each parameter to pass in, you'll have to define a\nmember property named according to the remote function's interface. There is no need to distinguish between importing, exporting or table\nparameters.\n\n### Primitives\n\nAssigning primitive types (non-structures, non-tables) is straightforward. You will, however, have to take care that the argument matches\nthe parameter's data type. E.g. if the parameter type is an integer, you may not assign a string value to it.\n\nExample:\n\n```js\nvar params = {\n  QUESTION: 'How are you'\n};\n\nvar func = con.Lookup('STFC_STRING');\nfunc.Invoke(params, function(err, result) {\n  if (err) {\n    console.log(err);\n    return;\n  }\n\n  console.log(result);\n});\n```\n\n### Binary data\n\nSAP data types like XSTRING and RAW need some special treatment as JavaScript does not support binary data very well. In order to safely pass\nbinary data back and forth, you will have to use [Node Buffers](https://nodejs.org/api/buffer.html). This, of course, also holds true for binary\ndata types used within structures and tables.\n\nExample:\n\n```js\n\nvar func = con.Lookup('STFC_XSTRING');\nvar params = { QUESTION: new Buffer('00FF65', 'hex') };\n\nfunc.Invoke(params, function (err, result) {\n  console.log(result); // => <Buffer de ad>\n});\n\n```\n\n### Structures\n\nStructures are represented by JavaScriptObjects, where each field corresponds to a member property.\n\nExample:\n\n```js\nvar params = {\n  IMPORTSTRUCT: { RFCFLOAT: 3.14159, RFCINT1: 123, RFCTIME: '094500', RFCCHAR4: 'NODE' }\n};\n\nvar func = con.Lookup('STFC_STRUCTURE');\nfunc.Invoke(params, function(err, result) {\n  if (err) {\n    console.log(err);\n    return;\n  }\n\n  console.log(result);\n});\n```\n\n### Tables\n\nA table is nothing else than an array of structures. This means, in terms of JavaScript, that you need to put JavaScript objects into an array.\n\nExample:\n\n```js\nvar table = [\n  { I: 1, C: 'A', STR: 'String1' },\n  { I: 2, C: 'B', STR: 'String2' },\n  { I: 3, C: 'C', STR: 'String3' }\n];\n\nvar params = {\n  IMPORT_TAB: table\n};\n\nvar func = con.Lookup('STFC_DEEP_TABLE');\nfunc.Invoke(params, function(err, result) {\n  if (err) {\n    console.log(err);\n    return;\n  }\n\n  for (var i = 0; i < result.EXPORT_TAB.length; i++) {\n    console.log('Row ' + (i + 1) + ':');\n    console.log(result.EXPORT_TAB[i]);\n  }\n  console.log(result.RESPTEXT);\n});\n```\n\n## Retrieving function signature as JSON Schema\n\nYou can retrieve the name and types of remote function arguments with MetaData() call.\n\nExample:\n\n```js\nvar func = con.Lookup('STFC_STRING');\nvar signature = func.MetaData();\nconsole.log(JSON.stringify(signature, null, 2));\n```\n\nThe console output is:\n```js\n{\n  \"title\": \"Signature of SAP RFC function STFC_STRING\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"MYANSWER\": {\n      \"type\": \"string\",\n      \"length\": \"0\",\n      \"sapType\": \"RFCTYPE_STRING\",\n      \"description\": \"\",\n      \"sapDirection\": \"RFC_EXPORT\"\n    },\n    \"QUESTION\": {\n      \"type\": \"string\",\n      \"length\": \"0\",\n      \"sapType\": \"RFCTYPE_STRING\",\n      \"description\": \"\",\n      \"sapDirection\": \"RFC_IMPORT\"\n    }\n  }\n}\n```\n\nThe result of function MetaData() is an object of [JSON Schema](http://json-schema.org/latest/json-schema-core.html).\n\nThe *properties* sub-object specifies the parameter of the remote function. In the above example the remote function STFC_STRING has the parameters MYANSWER and QUESTION. The *sapDirection* specifies if it is an input parameter (RFC_IMPORT) or output parameter (RFC_EXPORT) or input and/or output (RFC_CHANGING | RFC_TABLES).\n\nAttributes with the prefix *sap* are specific to this JSON Schema instance.\n\n- **title:** Name of the JSON Schema.\n- **type:** JavaScript type.\n- **length:** Length of a simple type or structure.\n- **description:** Description of parameters from SAP. Can be empty.\n- **sapType:** Native SAP type. RFCTYPE_TABLE | RFCTYPE_STRUCTURE | RFCTYPE_STRING | RFCTYPE_INT | RFCTYPE_BCD | RFCTYPE_FLOAT | RFCTYPE_CHAR | RFCTYPE_DATE | RFCTYPE_TIME | RFCTYPE_BYTE | RFCTYPE_NUM | ... . You find the complete list of possible values in the SAP header file sapnwrfc.h. Look for enum type *RFCTYPE*.\n- **sapDirection:** Attribute of the first level of properties. RFC_IMPORT | RFC_EXPORT | RFC_CHANGING | RFC_TABLES\n- **sapTypeName:** Name of a structure or name of a structure of a table.\n\n\n## Contributors\n- Alfred Gebert\n- Stefan Scherer\n- Michael Scherer\n- Szilard Novaki\n- Jakub Zakrzewski\n- Alex\n- LeandroDG\n\n## Changelog\n\n### 0.2.0 (2015-11-11)\n- Add SetIniPath\n- RAW fields and XSTRINGs return/expect node Buffers\n\n### 0.1.8 (2015-11-02)\n- Automatic builds for Linux and Windows\n- Add tests\n- Bugfixes\n\n### 0.1.7 (2015-11-01)\n- Add gulp script for bulk compiling\n\n### 0.1.6 (2015-11-01)\n- Support for Node.js 4.x (and io.js)\n- Fix library path issue (Windows)\n- Add parameter msvs_nwrfcsdk_path for node-gyp\n- Add MetaData()\n\n### 0.1.5 (2013-05-25)\n- Support for Node.js 0.10\n\n### 0.1.4 (2013-02-09)\n- Fix compilation on Linux (issue #2)\n\n### 0.1.3 (2012-08-16)\n\n- Support for Node.js >= 0.7.9\n- Change global invocation lock to a connection based lock\n\n## TODO\n\n- Unit tests\n- Missing but probably useful functions:\n  - RfcIsConnectionHandleValid (aka Connection::IsOpen())\n  - RfcRemoveFunctionDesc (invalidate cache)\n  - RfcGetPartnerSSOTicket\n- Use of buffers for xstring\n- Event emission on disconnect\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011-2012 Joachim Dorner\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","created":"2016-05-09T14:58:58.216Z","modified":"2017-06-06T12:12:40.902Z","lastPublisher":{"name":"e2ebridge","email":"Development-E2E@scheer-group.com"},"owners":[{"name":"e2ebridge","email":"Development-E2E@scheer-group.com"}],"other":{"_attachments":{},"_from":".","_id":"@e2ebridge/sapnwrfc","_nodeVersion":"4.4.3","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sapnwrfc-1.2.1.tgz_1496751159379_0.4886423598509282"},"_npmUser":{"name":"e2ebridge","email":"Development-E2E@scheer-group.com"},"_npmVersion":"3.10.2","_rev":"5-156c4c47bb3d2bc6d3e8cc3f2fa59f84","_shasum":"e43de10be9fded230e47c97aab7dc7dd0229004a","author":{"name":"Joachim Dorner","email":"joachim.dorner@gmail.com"},"bugs":{"url":"https://github.com/e2ebridge/node-sapnwrfc/issues"},"contributors":[{"name":"Alex","email":"hypothermia.frost@gmail.com"},{"name":"Alfred Gebert","email":"agebert@e2ebridge.com"},{"name":"Jakub Zakrzewski","email":"jzakrzewski@e2ebridge.com"},{"name":"LeandroDG","email":"sinstereo@gmail.com"},{"name":"Michael Scherer","email":"michael.scherer@sealsystems.de"},{"name":"Stefan Scherer","email":"scherer_stefan@icloud.com"},{"name":"Szilard Novaki","email":"novaki@agmen.hu"}],"directories":{},"dist-tags":{"latest":"1.2.1"},"dist":{"shasum":"e43de10be9fded230e47c97aab7dc7dd0229004a","tarball":"https://registry.npmjs.org/@e2ebridge/sapnwrfc/-/sapnwrfc-1.2.1.tgz"},"maintainers":[{"name":"e2ebridge","email":"Development-E2E@scheer-group.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-06T12:12:40.902Z","created":"2016-05-09T14:58:58.216Z","1.0.0":"2016-05-09T14:58:58.216Z","1.0.1":"2016-06-03T14:16:09.968Z","1.0.2":"2016-06-07T12:22:51.765Z","1.1.0":"2016-11-17T16:49:57.662Z","1.1.1":"2017-03-22T16:13:00.722Z","1.2.0":"2017-04-05T09:58:23.046Z","1.2.1":"2017-06-06T12:12:40.902Z"}}}