{"name":"node-bitmap-ewah","version":"1.0.1","description":"NodeJs bindings for compressed bitmap data structure","main":"index.js","repository":"https://github.com/dimitriosvasilas/node-bitmap-ewah","scripts":{"preinstall":"make","install":"node-gyp rebuild"},"dependencies":{"bindings":"^1.2.1","nan":"^2.2.9"},"license":"MIT","gypfile":true,"gitHead":"28e764d9d94ebf29aa0eb8da5c68a6dbe716965a","homepage":"https://github.com/dimitriosvasilas/node-bitmap-ewah#readme","versions":[{"number":"1.0.0","date":"2016-09-29T10:13:09.676Z"},{"number":"1.0.1","date":"2016-11-07T16:50:11.013Z"}],"readme":"# node-bitmap-ewah\nA set of NodeJS bindings for [a compressed bitmap data structure] (https://github.com/lemire/ewahboolarray).\n\n\n### Installation\n```sh\n# We use node-gyp to build our binaries\nnpm install -g node-gyp\n\n# Install node-bitmap-ewah\nnpm install node-bitmap-ewah\n```\n\n### Usage\n```node\nvar Bitmap = require('node-bitmap-ewah');\n\nvar bitmap = Bitmap.createObject();\n```\n\n### API\n* <a href=\"#ctor\"><code><b>createObject()</b></code></a>\n* <a href=\"#push\"><code><b>push()</b></code></a>\n* <a href=\"#set\"><code><b>set()</b></code></a>\n* <a href=\"#unset\"><code><b>unset()</b></code></a>\n* <a href=\"#str\"><code><b>toString()</b></code></a>\n* <a href=\"#len\"><code><b>length()</b></code></a>\n* <a href=\"#ones\"><code><b>numberOfOnes()</b></code></a>\n* <a href=\"#map\"><code><b>map()</b></code></a>\n* <a href=\"#or\"><code><b>or()</b></code></a>\n* <a href=\"#and\"><code><b>and()</b></code></a>\n* <a href=\"#not\"><code><b>not()</b></code></a>\n* <a href=\"#write\"><code><b>write()</b></code></a>\n* <a href=\"#read\"><code><b>read()</b></code></a>\n\n<a name=\"ctor\"></a>\n#### createObject()\n<code>createObject()</code> is the main entry point for creating a new compressed bitmap instance.\n\n<a name=\"push\"></a>\n#### push(bit_pos)\n<code>push()</code> appends a set bit (1) to the bitmap in position bit_pos. All bits between the last set bit and bit_pos are appended as unset bits (0).\n\n<a name=\"set\"></a>\n#### set(bit_pos)\n<code>set()</code> sets the bit in position bit_pos, provided it is already appended. Has no effect if bit is already set.\n\n<a name=\"unset\"></a>\n#### unset(bit_pos)\n<code>unset()</code> unsets the bit in position bit_pos, provided it is already appended. Has no effect if bit is already unset.\n\n<a name=\"str\"></a>\n#### toString(delimeter)\n<code>toString()</code> returns a string containing the positions of set bits, separated with the delimeter character.\n\n<a name=\"len\"></a>\n#### length()\n<code>length()</code> returns the uncopressed bitmap's size in bits.\n\n<a name=\"ones\"></a>\n#### numberOfOnes()\n<code>numberOfOnes()</code> returns the number of set bits in the bitmap.\n\n<a name=\"map\"></a>\n#### map(callback)\n<code>map()</code> returns an array with the results of calling the `callback` function on each bit positiion that is set.\n\n<a name=\"or\"></a>\n#### or(bitmap)\n<code>or()</code> applies the logical OR between two bitmaps.\n\n<a name=\"and\"></a>\n#### and(bitmap)\n<code>and()</code> applies the logical AND between two bitmaps.\n\n<a name=\"not\"></a>\n#### not()\n<code>not()</code> applies the logical NOT to a bitmap.\n\n<a name=\"write\"></a>\n#### write()\n<code>write()</code> can be used to store a bitmap to persistent storage. It returns a three element array which contains \nthe bitmap's size in bits (1st position), the size (in words) of the underlying C++ STL vector (2nd positions) and a NodeJS \n[`Buffer`] (https://nodejs.org/api/buffer.html#buffer_buffer) class object representing the bitmap's content (3rd position).\n\n<a name=\"read\"></a>\n#### read([sizeInBits, bufferSisze, Buffer])\n<code>read()</code> can be used to retriece a bitmap stored in persistent storage. It takes as argument an array of the same \nformat as returned from the <a href=\"#write\"><code><b>write()</b></code></a> function\n","created":"2016-09-29T10:13:09.676Z","modified":"2016-11-07T16:50:11.013Z","lastPublisher":{"name":"dimvas","email":"dimitrios.vasilas@scality.com"},"owners":[{"name":"dimvas","email":"dimitrios.vasilas@scality.com"}],"other":{"_attachments":{},"_from":".","_id":"node-bitmap-ewah","_nodeVersion":"6.7.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-bitmap-ewah-1.0.1.tgz_1478537409176_0.8134782682172954"},"_npmUser":{"name":"dimvas","email":"dimitrios.vasilas@scality.com"},"_npmVersion":"3.10.3","_rev":"2-198c6a1e8e00e2ad55f090c995f3ece1","_shasum":"d720acc80158a463f1862447c5475b7fced060f8","bugs":{"url":"https://github.com/dimitriosvasilas/node-bitmap-ewah/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"d720acc80158a463f1862447c5475b7fced060f8","tarball":"http://registry.npmjs.org/node-bitmap-ewah/-/node-bitmap-ewah-1.0.1.tgz"},"maintainers":[{"name":"dimvas","email":"dimitrios.vasilas@scality.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-07T16:50:11.013Z","created":"2016-09-29T10:13:09.676Z","1.0.0":"2016-09-29T10:13:09.676Z","1.0.1":"2016-11-07T16:50:11.013Z"}}}