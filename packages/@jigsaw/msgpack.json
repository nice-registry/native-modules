{"name":"@jigsaw/msgpack","description":"A space-efficient object serialization library for node.js","version":"0.2.7","homepage":"https://github.com/e-jigsaw/msgpack-node","repository":"https://github.com/e-jigsaw/msgpack-node","main":"./lib/msgpack","dependencies":{"nan":"^2.0.0"},"devDependencies":{"nodeunit":"https://github.com/godsflaw/nodeunit/archive/master.tar.gz"},"engines":{"node":">=0.8.x"},"bin":{"json2msgpack":"./bin/json2msgpack","msgpack2json":"./bin/msgpack2json"},"scripts":{"test":"./run_tests","install":"node-gyp rebuild"},"gypfile":true,"gitHead":"8f2a43868e6566571b4067bca243f3cd02e5c60d","versions":[{"number":"0.2.7","date":"2015-09-09T03:09:38.935Z"}],"readme":"`node-msgpack` is an addon for [NodeJS](http://nodejs.org) that provides an\nAPI for serializing and de-serializing JavaScript objects using the\n[MessagePack](http://msgpack.sourceforge.net) library. The performance of this\naddon compared to the native `JSON` object isn't too bad, and the space\nrequired for serialized data is far less than JSON.\n\n### Extension: support for undefined\nThe standard msgpack protocol turns `undefined` into `null`.\nThis branch adopts (creationix's extension)[https://github.com/creationix/msgpack-js-browser#extension]\nfor `undefined` and uses for it the reserved value '0xc4'\n\n### Performance\n\n`node-msgpack` is currently slower than the built-in `JSON.stringify()` and\n`JSON.parse()` methods.  In recent versions of node.js, the JSON functions\nhave been heavily optimized.  node-msgpack is still more compact, and we are\ncurrently working performance improvements.  Testing shows that, over 500k\niterations, `msgpack.pack()` is about 5x slower than `JSON.stringify()`, and\n`msgpack.unpack()` is about 3.5x slower than `JSON.parse()`.\n\nOld performance numbers are below.\n\nThe following tests were performed with 500,000 instances of\nthe JavaScript object `{'abcdef' : 1, 'qqq' : 13, '19' : [1, 2, 3, 4]}`:\n\n   * `JSON.stringify()` 7.17 seconds\n   * `JSON.parse(JSON.stringify())` 22.18 seconds\n   * `msgpack.pack()` 5.80 seconds\n   * `msgpack.unpack(msgpack.pack())` 8.62 seconds\n\nNote that `node-msgpack` produces and consumes Buffer objects, and a such does\nnot incur encoding/decoding overhead when performing I/O with native strings.\n\n### Usage\n\nThis module provides two methods: `pack()`, which consumes a JavaScript object\nand produces a node Buffer object; and `unpack()`, which consumes a node Buffer\nobject and produces a JavaScript object. Packing of all native JavaScript types\n(undefined, boolean, numbers, strings, arrays and objects) is supported, as\nis the node Buffer type.\n\nThe below code snippet packs and then unpacks a JavaScript object, verifying\nthe resulting object at the end using `assert.deepEqual()`.\n\n```javascript\n    var assert = require('assert');\n    var msgpack = require('msgpack');\n\n    var o = {\"a\" : 1, \"b\" : 2, \"c\" : [1, 2, 3]};\n    var b = msgpack.pack(o);\n    var oo = msgpack.unpack(b);\n\n    assert.deepEqual(oo, o);\n```\n\nAs a convenience, a higher level streaming API is provided in the\n`msgpack.Stream` class, which can be constructed around a `net.Stream`\ninstance. This object emits `msg` events when an object has been received.\n\n```javascript\n    var msgpack = require('msgpack');\n\n    // ... get a net.Stream instance, s, from somewhere\n\n    var ms = new msgpack.Stream(s);\n    ms.addListener('msg', function(m) {\n        sys.debug('received message: ' + sys.inspect(m));\n    });\n```\n\n### Type Mapping\n\nThe JavaScript type system does not map cleanly on to the MsgPack type system,\nthough it's pretty close.\n\nWhen packing, JavaScript values are mapped to MsgPack types as follows\n\n   * `undefined` and `null` values map to `MSGPACK_OBJECT_NIL`\n   * `boolean` values map to `MSGPACK_OBJECT_BOOLEAN`\n   * `number` values map differently depending on their value\n      * Floating point values map to `MSGPACK_OBJECT_DOUBLE`\n      * Positive values map to `MSGPACK_OBJECT_POSITIVE_INTEGER`\n      * Negative values map to `MSGPACK_OBJECT_NEGATIVE_INTEGER`\n   * `string` values map to `MSGPACK_OBJECT_RAW`; all strings are serialized\n     with UTF-8 encoding\n   * Array values (as defined by `Array.isArray()`) map to\n     `MSGPACK_OBJECT_ARRAY`; each element in the array is packed individually\n     the rules in this list\n   * NodeJS Buffer values map to `MSGPACK_OBJECT_RAW`\n   * Everything else maps to `MSGPACK_OBJECT_MAP`, where we iterate over\n     the object's properties and pack them and their values as per the\n     mappings in this list\n\nWhen unpacking, MsgPack types are mapped to JavaScript values as follows\n\n   * `MSGPACK_OBJECT_NIL` values map to the `null` value\n   * `MSGPACK_OBJECT_BOOLEAN` values map to `boolean` values\n   * `MSGPACK_OBJECT_POSITIVE_INTEGER`, `MSGPACK_OBJECT_NEGATIVE_INTEGER` and\n     `MSGPACK_OBJECT_DOUBLE` values map to `number` values\n   * `MSGPACK_OBJECT_ARRAY` values map to arrays; each object in the array is\n      packed individually using the rules in this list\n   * `MSGPACK_OBJECT_RAW` values are mapped to `string` values; these values are\n      unpacked using either UTF-8 or ASCII encoding, depending on the contents\n      of the raw buffer\n   * `MSGPACK_OBJECT_MAP` values are mapped to JavaScript objects; keys and\n      values are unpacked individually using the rules in this list\n\nStrings are particularly problematic here, as it's difficult to get hints down\ninto the packing and unpacking codepaths about how to interpret a particular\nstring or `MSGPACK_OBJECT_RAW`. If you have strict requirements about the\nencoding of your strings, it's recommended that you populate a Buffer object\nyourself (e.g. using `Buffer.write()`) and pack that buffer rather than the\nstring. This will ensure that you can control what gets packed.\n\nWhen unpacking, things are trickier as there is no way to know the encoding\nused when a string was packed. There is an [an open\nticket](http://github.com/msgpack/msgpack/issues/issue/13) for the MsgPack\nformat to address this.\n\n### Command Line Utilities\n\nAs a convenience and for debugging, `bin/json2msgpack` and `bin/msgpack2json`\nare provided to convert JSON data to and from MessagePack data, reading from\nstdin and writing to stdout.\n\n    % echo '[1, 2, 3]' | ./bin/json2msgpack | xxd -\n    0000000: 9301 0203                                ....\n    % echo '[1, 2, 3]' | ./bin/json2msgpack | ./bin/msgpack2json\n    [1,2,3]\n\n### Building, Installation, Testing\n\nThere are two ways to install msgpack.\n\n## NPM\n\n\t\tnpm install msgpack\n\nThis should build and install msgpack for you. Then just `require('msgpack')`.\n\n## Manually\n\nYou will need node-gyp:\n\n    npm install -g node-gyp\n\nThen from the root of the msgpack repo, you can run:\n\n    node-gyp rebuild\n\n<dl>\n  <dt>NOTE:</dt>\n  <dd>\n    node-gyp attempts to contact the Internet and download the target version\n    of node.js source and store it locally.  This will only happen once for\n    each time it sees a new node.js version.  If you're on a host with no\n    direct Internet access, you may need to shuffle this source over from\n    another box or sneaker net.  Good luck!\n  </dd>\n</dl>\n\n## Testing\n\nTo run all tests use:\n\n    ./run_tests\n\nTo run a specific test:\n\n    ./run_tests test/lib/msgpack.js\n\n<dl>\n  <dt>NOTE:</dt>\n  <dd>\n    Tests are based on a modified version of\n    nodeunit (https://github.com/godsflaw/nodeunit).\n    Follow ./run_tests instructions if you run into problems.\n  </dd>\n</dl>\n\n## Benchmarks\n\nTo run benchmarks:\n\n    ./run_tests test/benchmark/benchmark.js\n","created":"2015-09-09T03:09:38.935Z","modified":"2015-09-09T03:09:38.935Z","lastPublisher":{"name":"jigsaw","email":"jigsaw@live.jp"},"owners":[{"name":"jigsaw","email":"jigsaw@live.jp"}],"other":{"_attachments":{},"_from":".","_id":"@jigsaw/msgpack","_nodeVersion":"4.0.0","_npmUser":{"name":"jigsaw","email":"jigsaw@live.jp"},"_npmVersion":"2.14.2","_rev":"1-15bbdb9c01a6c1f2a8448651b1c3e848","_shasum":"0a46370f015535072f68039eee19829751d573fc","bugs":{"url":"https://github.com/e-jigsaw/msgpack-node/issues"},"contributors":[{"name":"Amos Barreto","url":"https://github.com/squamos"},{"name":"Peter Griess","email":"pg@std.in","url":"https://github.com/pgriess"},{"name":"Maxwell Krohn","url":"https://github.com/maxtaco"},{"name":"Jaye Marshall","url":"https://github.com/jmars"},{"name":"matthiasg","url":"https://github.com/matthiasg"},{"name":"Christopher Mooney","email":"chris@dod.net","url":"https://github.com/godsflaw"},{"name":"Michael Phan-Ba","url":"https://github.com/mikepb"},{"name":"Bob Potter","url":"https://github.com/bpot"},{"name":"rashfael","url":"https://github.com/rashfael"},{"name":"Tom Taylor","email":"tom@tomtaylor.co.uk","url":"https://github.com/tomtaylor"},{"name":"Brian White","url":"https://github.com/mscdex"},{"name":"Keiji Yoshimi","url":"https://github.com/walf443"},{"name":"jigsaw","url":"http://jgs.me"}],"directories":{"lib":"lib"},"dist-tags":{"latest":"0.2.7"},"dist":{"shasum":"0a46370f015535072f68039eee19829751d573fc","tarball":"http://registry.npmjs.org/@jigsaw/msgpack/-/msgpack-0.2.7.tgz"},"maintainers":[{"name":"jigsaw","email":"jigsaw@live.jp"}],"readmeFilename":"README.md","time":{"modified":"2015-09-09T03:09:38.935Z","created":"2015-09-09T03:09:38.935Z","0.2.7":"2015-09-09T03:09:38.935Z"}}}