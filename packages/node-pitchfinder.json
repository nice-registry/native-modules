{"name":"node-pitchfinder","version":"1.0.3","description":"A pitch-detection library for node (using C++ Addon)","scripts":{"clean":"rm -rf ./lib ./build","build":"npm run clean && node-gyp configure build && babel src -d lib","lint":"standard","test":"babel-node spec/support/run.js","ci-test":"npm install && npm run lint && npm test","prepublish":"npm run lint && npm run build","install":"node-gyp rebuild"},"license":"GNU v3","repository":"https://github.com/cristovao-trevisan/node-pitchfinder","keywords":["pitch","frequency","detector","detect","detection","find","YIN","AMDF","autocorrelation","music","audio"],"homepage":"https://github.com/cristovao-trevisan/node-pitchfinder#readme","devDependencies":{"babel-cli":"^6.26.0","babel-eslint":"^7.2.3","babel-preset-es2015":"^6.24.1","babel-preset-stage-0":"^6.24.1","eslint":"^4.4.1","jasmine":"^2.7.0","jasmine-console-reporter":"^2.0.1","standard":"^10.0.3","wave-generator":"^0.1.0"},"dependencies":{"nan":"^2.6.2","node-gyp":"^3.6.2"},"standard":{"parser":"babel-eslint","env":"jasmine","ignore":["build","lib"]},"gypfile":true,"gitHead":"539e45826c6de5f38e9afe59b09dcd4faf1cfe18","readme":"<p align=\"center\">\n  <a href=\"https://travis-ci.org/cristovao-trevisan/node-pitchfinder\"><img src=\"https://travis-ci.org/peterkhayes/pitchfinder.svg?branch=master\"></a>\n  <a href=\"https://standardjs.com\"><img src=\"https://img.shields.io/badge/code_style-standard-brightgreen.svg\" alt=\"Standard - JavaScript Style Guide\"></a>\n</p>\n\n# node-pitchfinder\nA compilation of pitch detection algorithms for Node (Using native C++ Addon).\nBased on [pitchfinder](https://github.com/peterkhayes/pitchfinder), but running a lot faster (because it's native)\n\n## Provided pitch-finding algorithms\n- **MacLeod** - Best results for instruments\n- **YIN** - The best balance of accuracy and speed, in my experience.  Occasionally provides values that are wildly incorrect.\n- **AMDF** - Slow and only accurate to around +/- 2%, but finds a frequency more consistenly than others. *NOT AN ADDON*\n- **Dynamic Wavelet** - Very fast, but struggles to identify lower frequencies. *NOT AN ADDON*\n- **YIN w/ FFT** *TODO*\n- **Goertzel** *TODO*\n\n## Installation\n`npm install --save node-pitchfinder`\n\n## Usage\n\n### Finding the pitch of a wav file in node\n```javascript\nconst fs = require('fs')\nconst WavDecoder = require('wav-decoder')\nconst Pitchfinder = require('node-pitchfinder')\n\n// see below for optional constructor parameters.\nconst detectPitch = new Pitchfinder.YIN()\n\nconst buffer = fs.readFileSync(PATH_TO_FILE)\nconst decoded = WavDecoder.decode(buffer) // get audio data from file using `wav-decoder`\nconst float64Array = decoded.channelData[0] // get a single channel of sound\nconst pitch = detectPitch(float64Array) // All detectors are using float64Array internally, but you can also give an ordinary array of numbers\n```\n\n### Finding a series of pitches\nSet a tempo and a quantization interval, and an array of pitches at each interval will be returned.\n\n```javascript\nconst Pitchfinder = require('node-pitchfinder')\nconst detectPitch = Pitchfinder.MacLeod()\n\nconst frequencies = Pitchfinder.frequencies(detectPitch, float64Array, {\n  tempo: 130, // in BPM, defaults to 120\n  quantization: 4, // samples per beat, defaults to 4 (i.e. 16th notes)\n})\n\n// or use multiple detectors for better accuracy at the cost of speed.\nconst detectors = [detectPitch, Pitchfinder.AMDF()]\nconst moreAccurateFrequencies = Pitchfinder.frequencies(detectors, float64Array, {\n  tempo: 130, // in BPM, defaults to 120\n  quantization: 4, // samples per beat, defaults to 4 (i.e. 16th notes)\n})\n```\n\n## Configuration\n\n### All detectors\n- `sampleRate` - defaults to 44100\n\n### YIN\n- `threshold` - used by the algorithm\n- `probabilityThreshold` - don't return a pitch if probability estimate is below this number.\n\n### AMDF\n- `minFrequency` - Lowest frequency detectable\n- `maxFrequency` - Highest frequency detectable\n- `sensitivity`\n- `ratio`\n\n### MacLeod\n- `bufferSize` - Maximum data size (default 1024)\n- `cutoff` - Defines the relative size the chosen peak (pitch) has. 0.93 means: choose\nthe first peak that is higher than 93% of the highest peak detected. 93% is the default value used in the Tartini user interface.\n- `freqCutoff` - Minimum frequency to be detected (default 80Hz)\n- `probabilityThreshold` - don't return a pitch if probability estimate is below this number.\n\n### Dynamic Wavelet\n*no special config*\n\n## MORE API\n\n### YIN and MacLeod\n- method: getResult (data) - does not use probabilityThreshold, returns an object with probability instead, like `{ pitch: number, probability: number }`\n\n#### Usage\n```js\nconst {MacLeod} = require('node-pitchfinder')\nconst detectPitch = MacLeod().getResult\n\ndetectPitch(data)\n// {pitch: 440, probability: 1}\n```\n\n## Todo\n- MacLeod using FFT\n- Integrate with `teoria` or another music theory tool to add more intelligent parsing.\n- Note-onsite algorithms.\n\n## Thanks\nSeveral of these algorithms were ported from Jonas Six's excellent TarsosDSP library (written in Java).  If you're looking for a far deeper set of tools than this, check out his work [on his website](http://tarsos.0110.be/tag/TarsosDSP) or [on Github](https://github.com/JorenSix/TarsosDSP).\n\nThanks to Aubio for his [YIN code](https://github.com/aubio/aubio/blob/master/src/pitch/pitchyin.c)\n","versions":[{"number":"1.0.0","date":"2017-08-15T06:01:09.695Z"},{"number":"1.0.1-beta-1","date":"2017-08-15T16:14:30.070Z"},{"number":"1.0.1-beta-2","date":"2017-08-15T16:22:10.726Z"},{"number":"1.0.1","date":"2017-08-15T16:23:22.875Z"},{"number":"1.0.2","date":"2017-08-15T16:25:49.998Z"},{"number":"1.0.3","date":"2017-08-20T19:29:57.724Z"}],"created":"2017-08-15T06:01:09.695Z","modified":"2017-08-20T19:29:57.724Z","lastPublisher":{"name":"cristovao-trevisan","email":"cristovao.trevisan@gmail.com"},"owners":[{"name":"cristovao-trevisan","email":"cristovao.trevisan@gmail.com"}],"other":{"_attachments":{},"_id":"node-pitchfinder","_nodeVersion":"8.1.3","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-pitchfinder-1.0.3.tgz_1503257397528_0.23493965016677976"},"_npmUser":{"name":"cristovao-trevisan","email":"cristovao.trevisan@gmail.com"},"_npmVersion":"5.2.0","_rev":"7-16958b5288bd28bae9d27fa0e3a6a7d5","author":{"name":"Peter Hayes"},"bugs":{"url":"https://github.com/cristovao-trevisan/node-pitchfinder/issues"},"directories":{},"dist-tags":{"latest":"1.0.3"},"dist":{"integrity":"sha512-LCgdV6x96NWPsKBSc9UF9sy0sQHsrTt1KDDKbIymHCk53otZJGncXuC6tgQUPJLA/FFwEjP/ZqK0zKJugkiZog==","shasum":"dca01fd525c639c8d819e2873dea1ed2e5a6ba4d","tarball":"https://registry.npmjs.org/node-pitchfinder/-/node-pitchfinder-1.0.3.tgz"},"maintainers":[{"name":"cristovao-trevisan","email":"cristovao.trevisan@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-08-20T19:29:57.724Z","created":"2017-08-15T06:01:09.695Z","1.0.0":"2017-08-15T06:01:09.695Z","1.0.1-beta-1":"2017-08-15T16:14:30.070Z","1.0.1-beta-2":"2017-08-15T16:22:10.726Z","1.0.1":"2017-08-15T16:23:22.875Z","1.0.2":"2017-08-15T16:25:49.998Z","1.0.3":"2017-08-20T19:29:57.724Z"}}}