{"name":"word2vector","version":"2.0.0","description":"a word2vector interface for nodejs","main":"lib/index.js","scripts":{"test":"mocha --timeout 10s -R spec test/loadModel_test.js && mocha --timeout 10s -R spec test/getVector_test.js && mocha --timeout 10s -R spec test/getVectors_test.js","install":"node-gyp rebuild"},"repository":"https://github.com/LeeXun/word2vector","keywords":["word2vector","word2vec","word","vec","machine learning","chinese","deep-learning","向量","vector","文字","機器學習"],"license":"Apache-2.0","dependencies":{"change-case":"^2.1.5","lodash":"^4.17.4","nan":"^2.5.0"},"gypfile":true,"devDependencies":{"should":"^11.1.2"},"gitHead":"7142ea15bb2669c6607a15531742de830dfb64a4","homepage":"https://github.com/LeeXun/word2vector#readme","readme":"# word2vector NodeJS Interface\n=============\nThis is a Node.js interface for Google's [word2vector](https://code.google.com/archive/p/word2vec/).<br>\nHere is an [example](https://github.com/LeeXun/word2vector-Google3G) of how to load large model like [GoogleNews-vectors-negative300.bin](https://github.com/LeeXun/word2vector-Google3G) by this package.<br>\n# Supports both binary model and raw text model.\n# Warning: Windows is not supported.\n\n# Installation\nLinux, Unix OS are supported.\nInstall it via npm:\n``` bash\nnpm install word2vector --save\n```\nIn Node.js, require the module as below:\n``` javascript\nvar w2v = require( 'word2vector' );\n```\n# API Document:\n-----------\n## Overview\n[train](#w2vtrain-trainfile-modelfile-options-callback-)\n[load](#w2vload-modelfile-)\n[getVector](#w2vgetvectorwordword)\n[getVectors](#w2vgetvectorswordsword1-word2-options--)\n[getSimilarWords](#w2vgetsimilarwordsword--word-options--)\n[getNeighbors](#getneighborsvector-options--)\n[similarity](#w2vsimilarityword1--word1-word2--word2)\n[substract](#w2vsubstractword1--word1-word2--word2)\n[add](#w2vaddword1--word1-word2--word2)\n\n-----------\n### w2v.train( trainFile, modelFile, options, callback )\n[Click here to see example TrainFile format.](https://github.com/LeeXun/word2vector/blob/master/data/train.data) <br>\nExample:\n``` javascript\nvar w2v = require(\"./lib\");\nvar trainFile = \"./data/train.data\",\n    modelFile = \"./data/test.model.bin\";\nw2v.train(trainFile, modelFile, {\n  \tcbow: 1,           // use the continuous bag of words model //default\n  \tsize: 10,          // sets the size (dimension) of word vectors // default 100\n  \twindow: 8,         // sets maximal skip length between words // default 5\n    binary: 1,         // save the resulting vectors in binary mode // default off\n  \tnegative: 25,      // number of negative examples; common values are 3 - 10 (0 = not used) // default 5\n  \ths: 0,             // 1 = use  Hierarchical Softmax // default 0\n  \tsample: 1e-4,      \n  \tthreads: 20,\n  \titer: 15,\n  \tminCount: 1,       // This will discard words that appear less than *minCount* times // default 5\n    logOn: false       // sets whether any output should be printed to the console // default false\n  });\n```\n\n### w2v.load( modelFile,?readType = \"\")\n#####Should load model before call any calcuation functions.\n| Params        |   Description                           | Default Value |\n| ------------- |:-------------:| -----:|\n| readType        | Model format, pass \"utf-8\" if using a raw text model.  |     \"bin\"    |\nExample:\n``` javascript\nvar w2v = require(\"../lib\");\nvar modelFile = \"./test.model.bin\";\nw2v.load( modelFile );\n// console.log(w2v.getSimilarWordsWords());\n```\n\n### w2v.getVector(word=\"word\")\n| Params        |   Description                | Default Value |\n| ------------- |:-------------:| -----:|\n| word          | String to be searched.       |     \"word\"    |\nExample:\n``` javascript\n'use strict';\nvar w2v = require(\"./lib\");\nvar modelFile = \"./data/test.model.bin\";\nw2v.load( modelFile );\nconsole.log(w2v.getVector(\"孫悟空\"));\nconsole.log(w2v.getVector(\"李洵\"));\n```\nSample Output:\n``` javascript\n// Array Type Only\n[ 0.104406,\n  -0.160019,\n  -0.604506,\n  -0.622804,\n  0.039482,\n  -0.120058,\n  0.073555,\n  0.05646,\n  0.099059,\n  -0.419282 ]\n\nnull // Return null if this word is not in model.\n```\n\n### w2v.getVectors(words=[\"word1\", \"word2\"], ?options = {})\n| Params        |   Description                           | Default Value |\n| ------------- |:-------------:| -----:|\n| words          | Array of strings to be searched.       |     \"word\"    |\n| options.returnType    | return Array or Object type             | Array         |\nExample:\n``` javascript\nvar w2v = require(\"./lib\");  \nvar modelFile = \"./data/test.model.bin\";\nw2v.load( modelFile );\nconsole.log(w2v.getVectors([\"孫悟空\", \"李洵\"]));\nconsole.log(w2v.getVectors([\"孫悟空\", \"李洵\"], {returnType: \"Object\"}));\n```\nSample Output:\n``` javascript\n// Array Type\n[ { word: '孫悟空',\n    vector:\n     [ 0.104406,\n       -0.160019,\n       -0.604506,\n       -0.622804,\n       0.039482,\n       -0.120058,\n       0.073555,\n       0.05646,\n       0.099059,\n       -0.419282 ] },\n  { word: '李洵', vector: null } ]\n  // this will trigger a error log in console:\n  //'李洵' is not found in the model.\n// Object Type\n{ '孫悟空':\n   [ 0.104406,\n     -0.160019,\n     -0.604506,\n     -0.622804,\n     0.039482,\n     -0.120058,\n     0.073555,\n     0.05646,\n     0.099059,\n     -0.419282 ],\n  '李洵': null }\n  // this will trigger a error log in console:\n  //'李洵' is not found in the model.\n```\n### w2v.getSimilarWords(word = \"word\", ?options = {})\n#####Return 40ish words that is similar to \"word\".\n| Params        |   Description                           | Default Value |\n| ------------- |:-------------:| -----:|\n| word          | Strings to be searched.                 |     \"word\"    |\n| options.N    | return topN results             | Array         |\n| options.returnType    | return Array or Object type             | Array         |\nExample:\n``` javascript\nvar w2v = require(\"./lib\");\nvar modelFile = \"./data/test.model.bin\";\nw2v.load( modelFile );\nconsole.log(w2v.getSimilarWords(\"唐三藏\"));\nconsole.log(w2v.getSimilarWords(\"李洵\"));\nconsole.log(w2v.getSimilarWords(\"唐三藏\", {N:10, returnType: \"Object\"}));\nconsole.log(w2v.getSimilarWords(\"李洵\", {N:10, returnType: \"Object\"}));\n```\nSample Output:\n``` javascript\n// Array Type\n[ { word: '孫悟空', cosineDistance: 0.974369 },\n  { word: '吳承恩', cosineDistance: 0.96686 },\n  { word: '林黛玉', cosineDistance: 0.966664 },\n  { word: '北地', cosineDistance: 0.96264 },\n  { word: '賈寶玉', cosineDistance: 0.962137 },\n  { word: '楚霸王', cosineDistance: 0.955795 },\n  { word: '梁山泊', cosineDistance: 0.932804 },\n  { word: '濮陽', cosineDistance: 0.927542 },\n  { word: '黃天霸', cosineDistance: 0.927459 },\n  { word: '英雄豪傑', cosineDistance: 0.921575 }]\n// Return empty [] if this word is not in model.\n'李洵' is not found in the model.\n[]\n// Object Type\n{ '孫悟空': 0.974369,\n  '吳承恩': 0.96686,\n  '林黛玉': 0.966664,\n  '北地': 0.96264,\n  '賈寶玉': 0.962137,\n  '楚霸王': 0.955795,\n  '梁山泊': 0.932804,\n  '濮陽': 0.927542,\n  '黃天霸': 0.927459,\n  '英雄豪傑': 0.921575}\n// Return empty {} if this word is not in model.\n'李洵' is not found in the model.\n{}\n```\n\n### w2v.getSimilarAsync(word = \"word\", options, callback)\n...........................Discarded.................................\n\n### getNeighbors(vector, ?options = {})\n| Params        |   Description                           | Default Value |\n| ------------- |:-------------:| -----:|\n| vector        | Vector to be searched.                  |     \"word\"    |\n| options.N    | return topN results             | Array         |\n| options.returnType    | return Array or Object type             | Array         |\nExample1:\n``` javascript\nvar w2v = require(\"./lib\");\nvar modelFile = \"./data/test.model.bin\";\nw2v.load( modelFile );\nvar a = w2v.getNeighbors(w2v.getVector(\"唐三藏\"), {N: 9});\nvar b = w2v.getNeighbors(w2v.getVector(\"唐三藏\"), {N: 9, returnType: \"Object\"});\n// These are equal to use w2v.getSimilarWords(\"唐三藏\");\nconsole.log(a);\nconsole.log(b);\n```\nSample Output1:\n``` javascript\n[ { word: '唐三藏', cosineDistance: 0.9999993515200001 },\n  { word: '孫悟空', cosineDistance: 0.974368825898 },\n  { word: '吳承恩', cosineDistance: 0.966859435824 },\n  { word: '林黛玉', cosineDistance: 0.966663471323 },\n  { word: '北地', cosineDistance: 0.962639240211 },\n  { word: '賈寶玉', cosineDistance: 0.9621371820049999 },\n  { word: '楚霸王', cosineDistance: 0.9557946924850002 },\n  { word: '梁山泊', cosineDistance: 0.9328033548890001 },\n  { word: '濮陽', cosineDistance: 0.9275417727409999 } ]\n{ '唐三藏': 0.9999993515200001,\n  '孫悟空': 0.974368825898,\n  '吳承恩': 0.966859435824,\n  '林黛玉': 0.966663471323,\n  '北地': 0.962639240211,\n  '賈寶玉': 0.9621371820049999,\n  '楚霸王': 0.9557946924850002,\n  '梁山泊': 0.9328033548890001,\n  '濮陽': 0.9275417727409999 }\n```\nExample2:\n``` javascript\nvar w2v = require(\"../lib\");\nvar modelFile = \"./test.model.bin\";\nw2v.load( modelFile );\nvar a = w2v.getVectors(['唐三藏'], {returnType: \"Object\"})['唐三藏'];\nvar b = w2v.getVectors(['孫悟空'], {returnType: \"Object\"})['孫悟空'];\nvar c = [];\nfor(var i=0; i<a.length; i++) c.push(a[i] - b[i]);\nvar d = w2v.getNeighbors(c);\nconsole.log(d);\n// vector can do substractioin, while this didn't  mean anything. But you can create a vector by yourself.\n```\nSample Output2:\n``` javascript\n[ { word: '蒙上帝', cosineDistance: 0.794216 },\n  { word: '阿房宮賦', cosineDistance: 0.787006 },\n  { word: '玄秘', cosineDistance: 0.770159 },\n  { word: '檀香山', cosineDistance: 0.755662 },\n  { word: '先賢祠', cosineDistance: 0.746278 },\n  { word: '蘇萊曼', cosineDistance: 0.745826 },\n  { word: '盧梭', cosineDistance: 0.704465 },\n  { word: '夏威夷', cosineDistance: 0.700885 },\n  { word: '伏爾泰', cosineDistance: 0.698588 },\n  { word: '杜爾哥', cosineDistance: 0.688763 },\n  { word: '祝你們', cosineDistance: 0.687257 } ... ...],\n```\n### w2v.similarity(word1 = \"word1\", word2 = \"word2\")\n### w2v.similarity(vector1 = [], word2 = \"word2\")\n### w2v.similarity(word1 = \"word1\", vector2 = [])\n### w2v.similarity(vector1 = [], vector2 = [])\n<pre>Compute the [cosine similarity](https://en.wikipedia.org/wiki/Cosine_similarity) between the two vector.\nWill auto search the vector of passed word in model. Return false if it's not found.</pre>\n| Params        |   Description                           | Default Value |\n| ------------- |:-------------:| -----:|\n| word1          | First Strings to be compared.       |     No default value    |\n| word2    | Second Strings to be compared.            |     No default value    |\n| vector1    | First Vector to be compared.            |     No default value    |\n| vector2    | Second Vector to be compared.            |     No default value    |\nExample:\n``` javascript\n'use strict';\nvar w2v = require(\"./lib\");\nvar modelFile = \"./data/test.model.bin\";\nw2v.load( modelFile );\nvar a = w2v.similarity(\"唐三藏\", \"孫悟空\"); //  0.974368825898\nconsole.log(a);\nvar b = w2v.similarity(\"唐三藏\", \"李洵\"); //  0.974368825898\n// same as var b = w2v.similarity(\"唐三藏\", w2v.getVector(\"李洵\"));\n// same as var b = w2v.similarity(w2v.getVector(\"唐三藏\"), \"李洵\");\n// same as var b = w2v.similarity(w2v.getVector(\"唐三藏\"), w2v.getVector(\"李洵\"));\nconsole.log(b);\n```\nSample Output:\n``` javascript\n0.974368825898\n// '李洵' is not found in the model. // error alert in console\nfalse\n```\n### w2v.substract(word1 = \"word1\", word2 = \"word2\")\n### w2v.substract(vector1 = [], word2 = \"word2\")\n### w2v.substract(word1 = \"word1\", vector2 = [])\n### w2v.substract(vector1 = [], vector2 = [])\n<pre>Substract vector1 from vector2.\nWill auto search the vector of passed word in model. Return false if it's not found.</pre>\n| Params        |   Description                           | Default Value |\n| ------------- |:-------------:| -----:|\n| word1          | Subtrahend       |     No default value    |\n| word2    | Minuend            |     No default value    |\nExample:\n``` javascript\n'use strict';\nvar w2v = require(\"./lib\");\nvar modelFile = \"./data/test.model.bin\";\nw2v.load( modelFile );\nvar a = w2v.substract(\"孫悟空\", \"孫悟空\");\nconsole.log(a);\n```\nSample Output:\n``` javascript\n[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\n```\n### w2v.add(word1 = \"word1\", word2 = \"word2\")\n### w2v.add(vector1 = [], word2 = \"word2\")\n### w2v.add(word1 = \"word1\", vector2 = [])\n### w2v.add(vector1 = [], vector2 = [])\n<pre>Add vector1 to vector2.\nWill auto search the vector of passed word in model. Return false if it's not found.</pre>\n| Params        |   Description                           | Default Value |\n| ------------- |:-------------:| -----:|\n| word1          | Summand       |     No default value    |\n| word2    | Addend           |     No default value    |\nExample:\n``` javascript\n'use strict';\nvar w2v = require(\"./lib\");\nvar modelFile = \"./data/test.model.bin\";\nw2v.load( modelFile );\nvar a = w2v.add(\"孫悟空\", \"孫悟空\");\nvar b = w2v.getVector(\"孫悟空\");\nconsole.log(a);\nconsole.log(b);\n```\nSample Output:\n``` javascript\n[ 0.208812,\n  -0.320038,\n  -1.209012,\n  -1.245608,\n  0.078964,\n  -0.240116,\n  0.14711,\n  0.11292,\n  0.198118,\n  -0.838564 ]\n[ 0.104406,\n  -0.160019,\n  -0.604506,\n  -0.622804,\n  0.039482,\n  -0.120058,\n  0.073555,\n  0.05646,\n  0.099059,\n  -0.419282 ]\n```\n","versions":[{"number":"0.0.0","date":"2017-01-07T19:09:14.105Z"},{"number":"0.0.1","date":"2017-01-07T19:11:54.410Z"},{"number":"0.0.2","date":"2017-01-07T19:16:31.777Z"},{"number":"0.0.3","date":"2017-01-07T19:29:35.715Z"},{"number":"0.0.4","date":"2017-01-07T19:31:30.625Z"},{"number":"0.0.10","date":"2017-01-07T19:44:51.216Z"},{"number":"0.0.11","date":"2017-01-07T19:45:50.934Z"},{"number":"1.0.0","date":"2017-01-07T19:48:38.254Z"},{"number":"1.0.1","date":"2017-01-09T00:55:28.196Z"},{"number":"1.0.2","date":"2017-01-09T12:09:27.190Z"},{"number":"1.0.3","date":"2017-01-09T12:18:26.371Z"},{"number":"1.0.4","date":"2017-01-09T18:30:38.267Z"},{"number":"1.0.5","date":"2017-01-09T18:39:27.849Z"},{"number":"1.0.6","date":"2017-01-09T20:46:45.778Z"},{"number":"1.0.7","date":"2017-01-10T06:59:48.695Z"},{"number":"1.0.8","date":"2017-01-10T07:03:43.499Z"},{"number":"1.0.9","date":"2017-01-10T08:00:43.767Z"},{"number":"1.1.0","date":"2017-01-10T08:02:01.527Z"},{"number":"1.1.1","date":"2017-01-10T09:46:35.576Z"},{"number":"1.1.2","date":"2017-01-10T09:51:31.248Z"},{"number":"1.1.3","date":"2017-01-10T10:35:40.741Z"},{"number":"1.1.4","date":"2017-01-11T08:49:53.037Z"},{"number":"1.1.5","date":"2017-01-11T09:52:15.658Z"},{"number":"1.1.6","date":"2017-01-11T09:54:41.625Z"},{"number":"1.1.7","date":"2017-01-11T09:55:59.640Z"},{"number":"1.1.8","date":"2017-01-11T13:22:59.327Z"},{"number":"1.1.9","date":"2017-01-11T13:56:24.488Z"},{"number":"1.1.10","date":"2017-01-11T14:09:40.105Z"},{"number":"1.2.0","date":"2017-01-11T16:49:50.638Z"},{"number":"1.2.1","date":"2017-01-11T17:09:56.052Z"},{"number":"1.2.2","date":"2017-01-11T17:43:40.504Z"},{"number":"1.3.0","date":"2017-01-12T08:10:04.512Z"},{"number":"1.3.1","date":"2017-01-12T08:11:17.812Z"},{"number":"1.4.0","date":"2017-01-12T09:22:09.092Z"},{"number":"1.4.1","date":"2017-01-12T09:46:08.688Z"},{"number":"1.4.2","date":"2017-01-12T11:53:10.873Z"},{"number":"1.4.3","date":"2017-01-12T12:27:55.753Z"},{"number":"1.4.4","date":"2017-01-14T07:52:00.088Z"},{"number":"1.4.5","date":"2017-01-14T15:36:54.350Z"},{"number":"1.5.0","date":"2017-01-18T16:44:14.735Z"},{"number":"1.5.1","date":"2017-01-18T16:51:17.072Z"},{"number":"1.5.2","date":"2017-01-19T08:30:11.475Z"},{"number":"2.0.0","date":"2017-01-20T15:45:38.792Z"}],"created":"2017-01-07T19:09:14.105Z","modified":"2017-01-20T15:45:38.792Z","lastPublisher":{"name":"leexun","email":"speachlesslee@gmail.com"},"owners":[{"name":"leexun","email":"speachlesslee@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"word2vector","_nodeVersion":"7.3.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/word2vector-2.0.0.tgz_1484927136591_0.4132076839450747"},"_npmUser":{"name":"leexun","email":"speachlesslee@gmail.com"},"_npmVersion":"3.10.10","_rev":"44-e73baaa9d4c02ea81b45c3c5ed081b4d","_shasum":"a5fea1db4b223661b7a6344f9fad73af716b9159","author":{"name":"leexun"},"bugs":{"url":"https://github.com/LeeXun/word2vector/issues"},"directories":{},"dist-tags":{"latest":"2.0.0"},"dist":{"shasum":"a5fea1db4b223661b7a6344f9fad73af716b9159","tarball":"https://registry.npmjs.org/word2vector/-/word2vector-2.0.0.tgz"},"maintainers":[{"name":"leexun","email":"speachlesslee@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-20T15:45:38.792Z","created":"2017-01-07T19:09:14.105Z","0.0.0":"2017-01-07T19:09:14.105Z","0.0.1":"2017-01-07T19:11:54.410Z","0.0.2":"2017-01-07T19:16:31.777Z","0.0.3":"2017-01-07T19:29:35.715Z","0.0.4":"2017-01-07T19:31:30.625Z","0.0.10":"2017-01-07T19:44:51.216Z","0.0.11":"2017-01-07T19:45:50.934Z","1.0.0":"2017-01-07T19:48:38.254Z","1.0.1":"2017-01-09T00:55:28.196Z","1.0.2":"2017-01-09T12:09:27.190Z","1.0.3":"2017-01-09T12:18:26.371Z","1.0.4":"2017-01-09T18:30:38.267Z","1.0.5":"2017-01-09T18:39:27.849Z","1.0.6":"2017-01-09T20:46:45.778Z","1.0.7":"2017-01-10T06:59:48.695Z","1.0.8":"2017-01-10T07:03:43.499Z","1.0.9":"2017-01-10T08:00:43.767Z","1.1.0":"2017-01-10T08:02:01.527Z","1.1.1":"2017-01-10T09:46:35.576Z","1.1.2":"2017-01-10T09:51:31.248Z","1.1.3":"2017-01-10T10:35:40.741Z","1.1.4":"2017-01-11T08:49:53.037Z","1.1.5":"2017-01-11T09:52:15.658Z","1.1.6":"2017-01-11T09:54:41.625Z","1.1.7":"2017-01-11T09:55:59.640Z","1.1.8":"2017-01-11T13:22:59.327Z","1.1.9":"2017-01-11T13:56:24.488Z","1.1.10":"2017-01-11T14:09:40.105Z","1.2.0":"2017-01-11T16:49:50.638Z","1.2.1":"2017-01-11T17:09:56.052Z","1.2.2":"2017-01-11T17:43:40.504Z","1.3.0":"2017-01-12T08:10:04.512Z","1.3.1":"2017-01-12T08:11:17.812Z","1.4.0":"2017-01-12T09:22:09.092Z","1.4.1":"2017-01-12T09:46:08.688Z","1.4.2":"2017-01-12T11:53:10.873Z","1.4.3":"2017-01-12T12:27:55.753Z","1.4.4":"2017-01-14T07:52:00.088Z","1.4.5":"2017-01-14T15:36:54.350Z","1.5.0":"2017-01-18T16:44:14.735Z","1.5.1":"2017-01-18T16:51:17.072Z","1.5.2":"2017-01-19T08:30:11.475Z","2.0.0":"2017-01-20T15:45:38.792Z"}}}