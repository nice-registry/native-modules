{"name":"screenjs","version":"1.0.3","main":"index.js","scripts":{"build":"npm build .","install":"node-gyp rebuild"},"email":"siendsi@gmail.com","url":"https://github.com/lcpo/screenjs","license":"MIT","dependencies":{"nan":"^2.2.1","pngjs":"^3.0.0","prebuild-install":"^2.1.1"},"devDependencies":{"prebuild":"v6.1.0","tape":"^3.5.0"},"description":"Very small cross-platform library, to create a screenshot","gypfile":true,"repository":"https://github.com/lcpo/screenjs","homepage":"https://github.com/lcpo/screenjs#readme","gitHead":"60a590be41039e48e0a100dcdd6abce216444c49","versions":[{"number":"1.0.0","date":"2017-07-05T16:54:28.001Z"},{"number":"1.0.1","date":"2017-07-05T17:13:36.118Z"},{"number":"1.0.2","date":"2017-07-08T02:37:29.953Z"},{"number":"1.0.3","date":"2017-07-11T12:16:09.915Z"}],"readme":"# screenjs\n>Very small, Very fast, cross-platform library, to create a screenshot\nscreenjs supports Mac, Windows, and Linux(X11).\n\n### What is created for?\nFor one project, I needed to make screenshots very quickly, and save them in an array of numbers (intmap), also it was necessary to sometimes save screenshots to the PNG file ...\n\n## Contents\n- [Installation](#installation)\n- [API](#api)\n- [Examples](#examples)\n- [License](#license)\n\n## Installation:\n\n#### For Windows:\n```\nMinGW or other GCC\n```\n\n#### For Mac OS X:\n    Xcode Command Line Tools\n\n##### For Ubuntu:\n```yml\nsudo apt-get install gcc libc6-dev\nsudo apt-get install libx11-dev\nsudo apt-get install xorg-dev\n\n```\n\n### After all this:\n`npm install screenjs --save` or  `npm install -g screenjs --save` (from global)\n\n## API:\n\n#### Import:\n\n```js\nconst Screen = require('screenjs').Screen; // The object responsible for the screenshots\nconst Bitmap = require('screenjs').Bitmap; // Additional functionality, saving to file, or base64, etc.\n```\n\n### Methods:\n\n```js\nScreen.getSize();\n// Will return { width: 1366, height: 768 };\n\n```\n\n\n```js\nScreen.Capture();\n/* Will return\n{ width: 1366,\n  height: 768,\n  byteWidth: 5464,\n  bitsPerPixel: 32,\n  bytesPerPixel: 4,\n  image: <Buffer ... >,\n  intmap: Uint32Array [...] };\n*/\n```\n\n```js\nScreen.Capture(x, y, width, height);\n// Screen.Capture(10, 15, 100, 100);\n/* Will return\n{ width: 100,\n  height: 100,\n  byteWidth: 400,\n  bitsPerPixel: 32,\n  bytesPerPixel: 4,\n  image: <Buffer ... >,\n  intmap: Uint32Array [...] };\n*/\n```\n\n```js\nScreen.CaptureGetIntMap();\n/* Will return\n{ width: 1366,\n  height: 768,\n  byteWidth: 5464,\n  bitsPerPixel: 32,\n  bytesPerPixel: 4,\n  intmap: Uint32Array [...] };\n*/\n```\n\n```js\nScreen.CaptureGetIntMap(x, y, width, height);\n// Screen.CaptureGetIntMap(10, 15, 100, 100);\n/* Will return\n{ width: 100,\n  height: 100,\n  byteWidth: 400,\n  bitsPerPixel: 32,\n  bytesPerPixel: 4,\n  intmap: Uint32Array [...] };\n*/\n```\n\n\n```js\nScreen.CaptureGetImage();\n/* Will return\n{ width: 1366,\n  height: 768,\n  byteWidth: 5464,\n  bitsPerPixel: 32,\n  bytesPerPixel: 4,\n  image: <Buffer ... > };\n*/\n```\n\n\n```js\nScreen.CaptureGetImage(x, y, width, height);\n// Screen.CaptureGetImage(10, 15, 100, 100);\n/* Will return\n{ width: 100,\n  height: 100,\n  byteWidth: 400,\n  bitsPerPixel: 32,\n  bytesPerPixel: 4,\n  image: <Buffer ... > };\n*/\n```\n\n\n```js\nBitmap(img);\n// return js bitmap object\n```\n\n\n```js\nBitmap.rgbaToInt(red, green, blue, alpha);\n// return number\n```\n\n\n```js\nBitmap.intToRGBA(num);\n// return rgba object\n```\n\n```js\nBitmap.getBuffer();\n// return buffer PNG image\n```\n\n```js\nBitmap.getBase64();\n// return base64 string (data:image/png;base64,...etc.)\n```\n\n```js\nBitmap.write(pathFile, callback);\n// save from file Async\n```\n\n\n```js\nBitmap.writeSync(pathFile);\n// save from file Sync\n```\n\n\n## Examples:\n\n```js\nconst Screen = require('screenjs').Screen;\nconst Bitmap = require('screenjs').Bitmap;\n\nconst pic = Screen.Capture(); // It will work very quickly\nconsole.log(pic); // And this will work slowly\nconst image = Bitmap(pic); // It will work very quickly\nconsole.log(image); // And this will work slowly\n```\n\n```js\nconst Screen = require('screenjs').Screen;\nconst Bitmap = require('screenjs').Bitmap;\n\nconst pic = Screen.CaptureGetImage(); // It will work very quickly\nconst image = Bitmap(pic); // It will work very quickly\nimage.writeSync('test.png'); //And this will work very slowly\n```\n\n```js\nconst Screen = require('screenjs').Screen;\n\nconst pic = Screen.CaptureGetIntMap(); // It will work very quickly\nconsole.log(image.intmap.length); //It will work very quickly\n```\n\n## License:\nMIT\n","created":"2017-07-05T16:54:28.001Z","modified":"2017-07-11T12:16:09.915Z","lastPublisher":{"name":"lcpo","email":"siendsi@gmail.com"},"owners":[{"name":"lcpo","email":"siendsi@gmail.com"}],"other":{"_attachments":{},"_id":"screenjs","_nodeVersion":"8.1.3","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/screenjs-1.0.3.tgz_1499775368977_0.9175997253041714"},"_npmUser":{"name":"lcpo","email":"siendsi@gmail.com"},"_npmVersion":"5.2.0","_rev":"4-1b2e993495019b187baf8e9a0c4b0676","author":{"name":"S.S.Korotaev","email":"siendsi@gmail.com"},"bugs":{"url":"https://github.com/lcpo/screenjs/issues"},"directories":{},"dist-tags":{"latest":"1.0.3"},"dist":{"integrity":"sha512-SaHLozQnBdQzUSCzClWC6OcHDvM8mRpfedlx/zqMC3WsATAPYzjf7/LM137lulYSIyYuzHrIRYXeGKyr7yHamw==","shasum":"053ff8548e3c4e2163fef19132bcac8cc21a6a65","tarball":"https://registry.npmjs.org/screenjs/-/screenjs-1.0.3.tgz"},"maintainers":[{"name":"lcpo","email":"siendsi@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-11T12:16:09.915Z","created":"2017-07-05T16:54:28.001Z","1.0.0":"2017-07-05T16:54:28.001Z","1.0.1":"2017-07-05T17:13:36.118Z","1.0.2":"2017-07-08T02:37:29.953Z","1.0.3":"2017-07-11T12:16:09.915Z"}}}