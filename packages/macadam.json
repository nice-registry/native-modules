{"name":"macadam","version":"0.2.9","description":"Async node.js interface to Blackmagic Design capture and playback devices.","main":"index.js","scripts":{"install":"node-gyp rebuild","test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/Streampunk/macadam","license":"Apache-2.0","homepage":"https://github.com/Streampunk/macadam#readme","dependencies":{"bindings":"^1.2.1","highland":"^2.11.1","nan":"^2.6.2"},"gypfile":true,"gitHead":"500e9194d4e444268cab62ae4d385924a2839135","versions":[{"number":"0.1.0","date":"2016-05-19T19:20:25.130Z"},{"number":"0.1.1","date":"2016-05-21T15:33:59.311Z"},{"number":"0.1.2","date":"2016-06-05T09:28:58.742Z"},{"number":"0.1.3","date":"2016-07-04T17:46:16.589Z"},{"number":"0.1.4","date":"2016-07-09T12:14:47.434Z"},{"number":"0.1.5","date":"2016-07-12T12:13:11.892Z"},{"number":"0.1.6","date":"2016-07-12T20:26:05.059Z"},{"number":"0.1.7","date":"2016-07-30T11:02:07.437Z"},{"number":"0.1.8","date":"2016-10-07T19:48:20.084Z"},{"number":"0.1.9","date":"2016-10-08T16:10:20.763Z"},{"number":"0.1.10","date":"2016-10-17T09:52:20.558Z"},{"number":"0.2.0","date":"2017-02-22T16:33:34.136Z"},{"number":"0.2.1","date":"2017-02-22T16:41:49.273Z"},{"number":"0.2.2","date":"2017-02-23T17:06:25.932Z"},{"number":"0.2.3","date":"2017-02-25T13:49:08.285Z"},{"number":"0.2.4","date":"2017-02-25T15:48:35.044Z"},{"number":"0.2.5","date":"2017-03-08T14:29:56.123Z"},{"number":"0.2.6","date":"2017-03-11T12:48:13.582Z"},{"number":"0.2.7","date":"2017-06-04T16:43:24.376Z"},{"number":"0.2.8","date":"2017-06-29T10:02:03.129Z"},{"number":"0.2.9","date":"2017-08-11T14:01:03.336Z"}],"readme":"# Macadam\n\nPrototype bindings to link [Node.js](http://nodejs.org/) and the Blackmagic Desktop Video SDK, enabling asynchronous capture and playback to and from [Blackmagic Design](https://www.blackmagicdesign.com/) devices via a simple Javascript API.\n\nThis is prototype software and is not yet suitable for production use. Currently supported platforms are Mac and Windows.\n\nWhy _macadam_? _Tarmacadam_ is the black stuff that magically makes roads, so it seemed appropriate as a name for a steampunk-style BlackMagic binding.\n\n## Installation\n\nMacadam has a number of prerequisites:\n\n1. Install [Node.js](http://nodejs.org/) for your platform. This software has been developed against the long term stable (LTS) release.\n2. Install the latest version of the Blackmagic Desktop Video SDKs for your platform, available from https://www.blackmagicdesign.com/support.\n3. Install [node-gyp](https://github.com/nodejs/node-gyp) and make sure that you have the prerequisites for compiling Javascript addons for your platform. This requires a C/C++ development kit and python v2.7.\n\nMacadam is designed to be used as a module included into another project. To include macadam into your project:\n\n    npm install --save macadam\n\n## Using macadam\n\nTo use macadam, `require` the module. Capture and playback operations are illustrated below.\n\n### Capture\n\nThe macadam capture class is an event emitter that produces buffers containing video frames. Make sure you release the reference quickly (within ten frames or so) so that the frame data is garbage collected.\n\n```javascript\nvar macadam = require('macadam');\n\n// First argument is the DeckLink device number.\n// Set appropriate values from display mode and pixel format from those macadam provides.\nvar capture = new macadam.Capture(0, macadam.bmdModeHD1080i50, macadam.bmdFormat10BitYUV);\n\n// If audio capture is required, call the following method on capture\n// First param is the audio sample rate, second is bits per sample, third in number of channels\n// Defaults are shown. BMD hardware only supports: 48kHz; 16 or 32 bits; 2, 8 or 16 channels.\ncapture.enableAudio(macadam.bmdAudioSampleRate48kHz, macadam.bmdAudioSampleType16bitInteger, 2);\n\ncapture.on('frame', function (videoData, audioData) {\n  // Do something with each frame received.\n  // frameData is a node.js Buffer, and may be null if only audio is provided\n  // audioData is a node.js Buffer, or null is audio is not enabled/available\n});\n\ncapture.on('error', function (err) {\n  // Handle errors found during the capture.\n});\n\ncapture.start(); // Start capture.\n\n// ... eventually ...\ncapture.stop(); // Stop capture.\n```\n\nThe ancillary data inputs of the card are not yet supported.\n\n### Playback\n\nThe playback event emitter works by sending a sequence of frame buffers (node.js `Buffer` objects) to the playback object. For smooth playback, build a few frames first and then keep adding frames as they are played. A `played` event is emitted each time playback of a frame is complete.\n\nTake care not to hold on to frame buffer references so that they can be garbage collected.\n\n``` javascript\nvar macadam = require('macadam');\n\n// First argument is the DeckLink device number.\n// Set appropriate values from display mode and pixel format from those macadam provides.\nvar playback = new macadam.Playback(0, macadam.bmdModeHD1080i50, macadam.bmdFormat10BitYUV);\n\nplayback.frame( /* first frame */);\nplayback.frame( /* second frame */);\n// Add more here to have a larger buffer to ensure smooth playback\n\nplayback.on('played', function (x) {\n  // Send the next frame in sequence.\n});\n\nplayback.on('error', function (err) {\n  // Handle errors found during playback.\n});\n\n// start playback, typically after 4-10 frames have been accumulatedvar\nplayback.start();\n\n// ... eventually ...\nplayback.stop();\n```\n\nThe audio and ancillary data outputs of the card are not yet supported.\n\nNote that experience shows that the `played` event is not a good way to clock the sending of frames to the video card. It provides an indication that the frame has played. It is best to send frames to the card regularly based on a clock, such as deriving a `setTimeout` interval from `process.hrtime()`.\n\n### Check the DeckLink API version\n\nTo check the DeckLinkAPI version:\n\n```javascript\nvar macadam = require('macadam');\nconsole.log(macadam.deckLinkVersion());\n```\n\n### Modes and formats\n\nThe Blackmagic mode and format enumerations are available as constants, as in the examples\nshown above: `macadam.bmdModeHD1080i50` and `macadam.bmdFormat10BitYUV`. For more\ninformation on the modes, see the Blackmagic DeckLink API documentation provided\nwith the Blackmagic SDK. Note that not all cards support every mode and format.\n\nA set of utility functions are provided that allow access to the mode functions.\nIn summary, there are:\n\n* `modeWidth`, `modeHeight`, `modeGrainDuration` and `modeInterlace`: Extract\n  parameters from a Blackmagic _mode_.\n* `formatDepth`, `formatFourCC`, `formatSampling` and `formatColorimetry`: Extract\n  parameters from a Blackmagic _format_.\n\n## Status, support and further development\n\nThis is prototype software that is not yet suitable for production use. The software is being actively tested and developed.\n\nA variant for the Linux platform is also planned. The developers currently lack a test platform for this work.\n\nContributions can be made via pull requests and will be considered by the author on their merits. Enhancement requests and bug reports should be raised as github issues. For support, please contact [Streampunk Media](http://www.streampunk.media/). For updates follow [@StrmPunkd](https://twitter.com/StrmPunkd) on Twitter.\n\n## License\n\nThis software is released under the Apache 2.0 license. Copyright 2017 Streampunk Media Ltd.\n\nThe software links to the BlackMagic Desktop Video libraries. Include files and examples from which this code is derived include the BlackMagic License in their respective header files. The BlackMagic DeckLink SDK can be downloaded from https://www.blackmagicdesign.com/support.\n","created":"2016-05-19T19:20:25.130Z","modified":"2017-08-11T14:01:03.336Z","lastPublisher":{"name":"streampunk","email":"furnace@streampunk.media"},"owners":[{"name":"streampunk","email":"furnace@streampunk.media"}],"other":{"_attachments":{},"_from":".","_id":"macadam","_nodeVersion":"6.11.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/macadam-0.2.9.tgz_1502460061712_0.11831532209180295"},"_npmUser":{"name":"streampunk","email":"furnace@streampunk.media"},"_npmVersion":"3.10.10","_rev":"10-52e5586194ed00f19370448f2964cc70","_shasum":"2093b1988f3c9baceaae967ccb0579dd712d53e7","author":{"name":"Streampunk Media Ltd"},"bugs":{"url":"https://github.com/Streampunk/macadam/issues"},"directories":{},"dist-tags":{"latest":"0.2.9"},"dist":{"shasum":"2093b1988f3c9baceaae967ccb0579dd712d53e7","tarball":"https://registry.npmjs.org/macadam/-/macadam-0.2.9.tgz"},"maintainers":[{"name":"streampunk","email":"furnace@streampunk.media"}],"readmeFilename":"README.md","time":{"modified":"2017-08-11T14:01:03.336Z","created":"2016-05-19T19:20:25.130Z","0.1.0":"2016-05-19T19:20:25.130Z","0.1.1":"2016-05-21T15:33:59.311Z","0.1.2":"2016-06-05T09:28:58.742Z","0.1.3":"2016-07-04T17:46:16.589Z","0.1.4":"2016-07-09T12:14:47.434Z","0.1.5":"2016-07-12T12:13:11.892Z","0.1.6":"2016-07-12T20:26:05.059Z","0.1.7":"2016-07-30T11:02:07.437Z","0.1.8":"2016-10-07T19:48:20.084Z","0.1.9":"2016-10-08T16:10:20.763Z","0.1.10":"2016-10-17T09:52:20.558Z","0.2.0":"2017-02-22T16:33:34.136Z","0.2.1":"2017-02-22T16:41:49.273Z","0.2.2":"2017-02-23T17:06:25.932Z","0.2.3":"2017-02-25T13:49:08.285Z","0.2.4":"2017-02-25T15:48:35.044Z","0.2.5":"2017-03-08T14:29:56.123Z","0.2.6":"2017-03-11T12:48:13.582Z","0.2.7":"2017-06-04T16:43:24.376Z","0.2.8":"2017-06-29T10:02:03.129Z","0.2.9":"2017-08-11T14:01:03.336Z"}}}