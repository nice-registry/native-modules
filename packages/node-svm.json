{"name":"node-svm","version":"2.1.8","description":"Support Vector Machine for nodejs","main":"lib","scripts":{"test":"grunt","install":"node-gyp rebuild"},"config":{"blanket":{"pattern":["node-svm/lib"]}},"repository":"https://github.com/nicolaspanel/node-svm","keywords":["svm","machine learning","libsvm"],"license":"MIT","homepage":"https://github.com/nicolaspanel/node-svm","dependencies":{"abbrev":"^1.0.5","cardinal":"^0.4.4","chalk":"^0.5.1","graceful-fs":"^4.1.0","handlebars":"^2.0.0","inquirer":"^0.8.0","moment":"^2.8.4","mout":"^0.11.0","nan":"^2.3.3","node-gyp":"~1.0.2","nopt":"~3.0.0","numeric":"^1.2.6","optimist":"^0.6.1","osenv":"^0.1.0","promptly":"^0.2.0","q":"^1.1.2","stringify-object":"^1.0.0","underscore":"^1.7.0"},"devDependencies":{"coveralls":"~2.11.0","expect.js":"^0.3.1","grunt":"~0.4.4","grunt-cli":"^0.1.13","grunt-contrib-jshint":"~0.11.0","grunt-contrib-watch":"~0.6.1","grunt-exec":"~0.4.2","grunt-node-gyp":"^0.5.0","grunt-simple-mocha":"~0.4.0","istanbul":"~0.3.2","load-grunt-tasks":"~0.6.0","mocha":"~1.21.4","mocha-lcov-reporter":"0.0.1"},"bin":{"node-svm":"./bin/node-svm"},"gypfile":true,"gitHead":"ee1482ad72836c9ba7717b72672fc7aa0765a9f4","versions":[{"number":"0.1.0","date":"2014-03-29T17:01:03.068Z"},{"number":"0.1.3","date":"2014-03-30T17:45:33.311Z"},{"number":"0.1.4","date":"2014-03-30T17:59:54.410Z"},{"number":"0.1.5","date":"2014-03-30T20:41:44.767Z"},{"number":"0.2.0","date":"2014-04-04T12:19:24.874Z"},{"number":"0.2.1","date":"2014-04-04T15:19:30.593Z"},{"number":"0.2.2","date":"2014-04-04T17:01:47.951Z"},{"number":"0.2.3","date":"2014-04-05T09:01:05.188Z"},{"number":"0.2.4","date":"2014-04-05T23:11:07.867Z"},{"number":"0.2.5","date":"2014-04-06T10:05:02.768Z"},{"number":"0.2.6","date":"2014-04-06T11:32:51.091Z"},{"number":"0.2.7","date":"2014-04-06T13:32:46.150Z"},{"number":"0.3.0","date":"2014-04-06T19:18:07.432Z"},{"number":"0.3.1","date":"2014-04-06T20:12:02.179Z"},{"number":"0.3.2","date":"2014-04-07T10:20:01.556Z"},{"number":"0.3.3","date":"2014-04-07T17:01:31.933Z"},{"number":"0.3.4","date":"2014-04-07T18:48:40.999Z"},{"number":"1.0.0","date":"2014-04-08T13:49:59.264Z"},{"number":"1.0.1","date":"2014-04-08T14:24:52.926Z"},{"number":"1.1.0","date":"2014-04-09T02:16:45.504Z"},{"number":"1.1.1","date":"2014-04-09T09:41:56.039Z"},{"number":"1.2.1","date":"2014-04-10T12:22:56.055Z"},{"number":"1.3.0","date":"2014-06-21T16:59:12.959Z"},{"number":"2.0.0-beta","date":"2014-12-19T07:45:39.747Z"},{"number":"2.0.0-beta2","date":"2014-12-22T08:15:08.080Z"},{"number":"2.0.0","date":"2014-12-23T21:11:46.162Z"},{"number":"2.1.0","date":"2015-01-04T12:18:58.903Z"},{"number":"2.1.1","date":"2015-01-05T14:34:29.739Z"},{"number":"2.1.2","date":"2015-01-09T08:08:15.672Z"},{"number":"2.1.3","date":"2015-01-12T09:38:03.818Z"},{"number":"2.1.4","date":"2015-02-09T23:58:14.852Z"},{"number":"2.1.5","date":"2015-05-11T16:17:11.292Z"},{"number":"2.1.6","date":"2015-10-08T09:17:10.899Z"},{"number":"2.1.7","date":"2015-12-12T23:53:40.494Z"},{"number":"2.1.8","date":"2016-05-26T13:55:47.258Z"}],"readme":"# node-svm\n\nSupport Vector Machine (SVM) library for [nodejs](http://nodejs.org/) & [io.js](https://iojs.org/en/index.html) .\n\n[![NPM](https://nodei.co/npm/node-svm.png)](https://nodei.co/npm/node-svm/)\n[![Build Status](https://travis-ci.org/nicolaspanel/node-svm.png)](https://travis-ci.org/nicolaspanel/node-svm) [![Coverage Status](https://coveralls.io/repos/nicolaspanel/node-svm/badge.png?branch=master)](https://coveralls.io/r/nicolaspanel/node-svm?branch=master)\n\n# Support Vector Machines\n[Wikipedia](http://en.wikipedia.org/wiki/Support_vector_machine)  :\n\n>Support vector machines are supervised learning models that analyze data and recognize patterns. \n>A special property is that they simultaneously minimize the empirical classification error and maximize the geometric margin; hence they are also known as maximum margin classifiers.\n>[![Wikipedia image](http://upload.wikimedia.org/wikipedia/commons/1/1b/Kernel_Machine.png)](http://en.wikipedia.org/wiki/File:Kernel_Machine.png)\n\n# Installation\n`npm install --save node-svm`\n\n# Quick start\nIf you are not familiar with SVM I highly recommend this [guide](http://www.csie.ntu.edu.tw/~cjlin/papers/guide/guide.pdf).\n\nHere's an example of using [node-svm](https://github.com/nicolaspanel/node-svm) to approximate the XOR function :\n\n```javascript\nvar svm = require('node-svm');\n\nvar xor = [\n    [[0, 0], 0],\n    [[0, 1], 1],\n    [[1, 0], 1],\n    [[1, 1], 0]\n];\n\n// initialize a new predictor\nvar clf = new svm.CSVC();\n\nclf.train(xor).done(function () {\n    // predict things\n    xor.forEach(function(ex){\n        var prediction = clf.predictSync(ex[0]);\n        console.log('%d XOR %d => %d', ex[0][0], ex[0][1], prediction);\n    });\n});\n\n/******** CONSOLE ********\n    0 XOR 0 => 0\n    0 XOR 1 => 1\n    1 XOR 0 => 1\n    1 XOR 1 => 0\n */\n```\n\nMore examples are available [here](https://github.com/nicolaspanel/node-svm/tree/master/examples).\n\n__Note__: There's no reason to use SVM to figure out XOR BTW...\n\n\n# API\n\n## Classifiers\n\nPossible classifiers are:\n\n| Classifier  | Type                   | Params         | Initialization                |\n|-------------|------------------------|----------------|-------------------------------|\n| C_SVC       | multi-class classifier | `c`            | `= new svm.CSVC(opts)`        |\n| NU_SVC      | multi-class classifier | `nu`           | `= new svm.NuSVC(opts)`       |\n| ONE_CLASS   | one-class classifier   | `nu`           | `= new svm.OneClassSVM(opts)` |\n| EPSILON_SVR | regression             | `c`, `epsilon` | `= new svm.EpsilonSVR(opts)`  |\n| NU_SVR      | regression             | `c`, `nu`      | `= new svm.NuSVR(opts)`       |\n\n## Kernels\n\nPossible kernels are:\n\n| Kernel  | Parameters                     |\n|---------|--------------------------------|\n| LINEAR  | No parameter                   |\n| POLY    | `degree`, `gamma`, `r`         |\n| RBF     |`gamma`                         |\n| SIGMOID | `gamma`, `r`                   |\n\n\n## Parameters and options\n\nPossible parameters/options are:  \n\n| Name             | Default value(s)       | Description                                                                                           |\n|------------------|------------------------|-------------------------------------------------------------------------------------------------------|\n| svmType          | `C_SVC`                | Used classifier                                                                                       | \n| kernelType       | `RBF`                  | Used kernel                                                                                           |\n| c                | `[0.01,0.125,0.5,1,2]` | Cost for `C_SVC`, `EPSILON_SVR` and `NU_SVR`. Can be a `Number` or an `Array` of numbers              |\n| nu               | `[0.01,0.125,0.5,1]`   | For `NU_SVC`, `ONE_CLASS` and `NU_SVR`. Can be a `Number` or an `Array` of numbers                    |\n| epsilon          | `[0.01,0.125,0.5,1]`   | For `EPSILON_SVR`. Can be a `Number` or an `Array` of numbers                                         |\n| degree           | `[2,3,4]`              | For `POLY` kernel. Can be a `Number` or an `Array` of numbers                                         |\n| gamma            | `[0.001,0.01,0.5]`     | For `POLY`, `RBF` and `SIGMOID` kernels. Can be a `Number` or an `Array` of numbers                   |\n| r                | `[0.125,0.5,0,1]`      | For `POLY` and `SIGMOID` kernels. Can be a `Number` or an `Array` of numbers                          |\n| kFold            | `4`                    | `k` parameter for [k-fold cross validation]( http://en.wikipedia.org/wiki/Cross-validation_(statistics)#k-fold_cross-validation). `k` must be >= 1. If `k===1` then entire dataset is use for both testing and training.  |\n| normalize        | `true`                 | Whether to use [mean normalization](http://en.wikipedia.org/wiki/Normalization_(statistics)) during data pre-processing  |\n| reduce           | `true`                 | Whether to use [PCA](http://en.wikipedia.org/wiki/Principal_component_analysis) to reduce dataset's dimensions during data pre-processing  |\n| retainedVariance | `0.99`                 | Define the acceptable impact on data integrity (require `reduce` to be `true`)                        |\n| eps              | `1e-3`                 | Tolerance of termination criterion                                                                    |\n| cacheSize        | `200`                  | Cache size in MB.                                                                                     |\n| shrinking        | `true`                 | Whether to use the shrinking heuristics                                                               |\n| probability      | `false`                | Whether to train a SVC or SVR model for probability estimates                                         |\n\nThe example below shows how to use them:\n\n```javascript\nvar svm = require('node-svm');\n\nvar clf = new svm.SVM({\n    svmType: 'C_SVC',\n    c: [0.03125, 0.125, 0.5, 2, 8], \n    \n    // kernels parameters\n    kernelType: 'RBF',  \n    gamma: [0.03125, 0.125, 0.5, 2, 8],\n    \n    // training options\n    kFold: 4,               \n    normalize: true,        \n    reduce: true,           \n    retainedVariance: 0.99, \n    eps: 1e-3,              \n    cacheSize: 200,               \n    shrinking : true,     \n    probability : false     \n});\n```\n\n__Notes__ :   \n * You can override default values by  creating a `.nodesvmrc` file (JSON) at the root of your project.\n * If at least one parameter has multiple values, [node-svm](https://github.com/nicolaspanel/node-svm/) will go through all possible combinations to see which one gives the best results (it performs grid-search to maximize [f-score](http://en.wikipedia.org/wiki/F1_score) for classification and minimize [Mean Squared Error](http://en.wikipedia.org/wiki/Mean_squared_error) for regression).\n\n\n##Training\n\nSVMs can be trained using `svm#train(dataset)` method.\n\nPseudo code : \n```javascript\nvar clf = new svm.SVM(options);\n\nclf\n.train(dataset)\n.progress(function(rate){\n    // ...\n})\n.spread(function(trainedModel, trainingReport){\n    // ...\n});\n```\n\n__Notes__ :  \n * `trainedModel` can be used to restore the predictor later (see [this example](https://github.com/nicolaspanel/node-svm/blob/master/examples/save-prediction-model-example.js) for more information).\n * `trainingReport` contains information about predictor's accuracy (such as MSE, precison, recall, fscore, retained variance etc.)\n\n## Prediction\nOnce trained, you can use the classifier object to predict values for new inputs. You can do so : \n * Synchronously using `clf#predictSync(inputs)`\n * Asynchronously using `clf#predict(inputs).then(function(predicted){ ... });`\n\n**If you enabled probabilities during initialization**  you can also predict probabilities for each class  : \n * Synchronously using `clf#predictProbabilitiesSync(inputs)`. \n * Asynchronously using `clf#predictProbabilities(inputs).then(function(probabilities){ ... })`.\n\n__Note__ : `inputs` must be a 1d array of numbers\n\n## Model evaluation\nOnce the predictor is trained it can be evaluated against a test set. \n\nPseudo code : \n```javascript\nvar svm = require('node-svm');\nvar clf = new svm.SVM(options);\n \nsvm.read(trainFile)\n.then(function(dataset){\n    return clf.train(dataset);\n})\n.then(function(trainedModel, trainingReport){\n     return svm.read(testFile);\n})\n.then(function(testset){\n    return clf.evaluate(testset);\n})\n.done(function(report){\n    console.log(report);\n});\n ```\n# CLI\n\n[node-svm](https://github.com/nicolaspanel/node-svm/) comes with a build-in Command Line Interpreter.\n\nTo use it you have to install [node-svm](https://github.com/nicolaspanel/node-svm/) globally using `npm install -g node-svm`.\n\nSee `$ node-svm -h` for complete command line reference.\n\n\n## help\n```shell\n$ node-svm help [<command>]\n```\nDisplay help information about [node-svm](https://github.com/nicolaspanel/node-svm/) \n\n\n## train\n```shell\n$ node-svm train <dataset file> [<where to save the prediction model>] [<options>]\n```\nTrain a new model with given data set\n\n__Note__: use `$ node-svm train <dataset file> -i` to set parameters values dynamically.\n\n## evaluate\n```shell\n$ node-svm evaluate <model file> <testset file> [<options>]\n```\nEvaluate model's accuracy against a test set\n\n# How it work\n\n`node-svm` uses the official libsvm C++ library, version 3.20. \n\nFor more information see also : \n * [libsvm web site](http://www.csie.ntu.edu.tw/~cjlin/libsvm/)\n * Chih-Chung Chang and Chih-Jen Lin, LIBSVM : a library for support vector machines. ACM Transactions on Intelligent Systems and Technology, 2:27:1--27:27, 2011.\n * [Wikipedia article about SVM](https://en.wikipedia.org/wiki/Support_vector_machine)\n * [node addons](http://nodejs.org/api/addons.html)\n\n# Contributions\nFeel free to fork and improve/enhance `node-svm` in any way your want.\n\nIf you feel that the community will benefit from your changes, please send a pull request : \n * Fork the project.\n * Make your feature addition or bug fix.\n * Add documentation if necessary.\n * Add tests for it. This is important so I don't break it in a future version unintentionally (run `grunt` or `npm test`).\n * Send a pull request to the `develop` branch. \n\n#FAQ\n###Segmentation fault\nQ : Node returns 'segmentation fault' error during training. What's going on?\n\nA1 : Your dataset is empty or its format is incorrect.\n\nA2 : Your dataset is too big.\n\n###Difference between nu-SVC and C-SVC\nQ : What is the difference between nu-SVC and C-SVC?\n\nA : [Answer here](http://www.csie.ntu.edu.tw/~cjlin/libsvm/faq.html#f411)\n\n###Other questions\n * Take a look at [libsvm's FAQ](http://www.csie.ntu.edu.tw/~cjlin/libsvm/faq.html).\n * Create [an issue](https://github.com/nicolaspanel/node-svm/issues)\n\n# License\nMIT\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/92d9dd8573d8b458d19a240629fea97a \"githalytics.com\")](http://githalytics.com/nicolaspanel/node-svm)\n","starsCount":8,"created":"2014-03-29T17:01:03.068Z","modified":"2016-12-18T16:33:23.489Z","lastPublisher":{"name":"nicolaspanel","email":"nicolas.panel@live.fr"},"owners":[{"name":"nicolaspanel","email":"nicolas.panel@live.fr"}],"other":{"_attachments":{},"_from":".","_id":"node-svm","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/node-svm-2.1.8.tgz_1464270945480_0.6418473792728037"},"_npmUser":{"name":"nicolaspanel","email":"nicolas.panel@live.fr"},"_npmVersion":"3.8.9","_rev":"5-044ae22a37abfff0373f26c06a09dab0","_shasum":"5e1c629637fbb8041e65379928a4802305e14157","author":{"name":"Nicolas Panel"},"bugs":{"url":"https://github.com/nicolaspanel/node-svm/issues"},"directories":{},"dist-tags":{"latest":"2.1.8"},"dist":{"shasum":"5e1c629637fbb8041e65379928a4802305e14157","tarball":"http://registry.npmjs.org/node-svm/-/node-svm-2.1.8.tgz"},"maintainers":[{"name":"nicolaspanel","email":"nicolas.panel@live.fr"}],"readmeFilename":"README.md","time":{"modified":"2016-12-18T16:33:23.489Z","created":"2014-03-29T17:01:03.068Z","0.1.0":"2014-03-29T17:01:03.068Z","0.1.3":"2014-03-30T17:45:33.311Z","0.1.4":"2014-03-30T17:59:54.410Z","0.1.5":"2014-03-30T20:41:44.767Z","0.2.0":"2014-04-04T12:19:24.874Z","0.2.1":"2014-04-04T15:19:30.593Z","0.2.2":"2014-04-04T17:01:47.951Z","0.2.3":"2014-04-05T09:01:05.188Z","0.2.4":"2014-04-05T23:11:07.867Z","0.2.5":"2014-04-06T10:05:02.768Z","0.2.6":"2014-04-06T11:32:51.091Z","0.2.7":"2014-04-06T13:32:46.150Z","0.3.0":"2014-04-06T19:18:07.432Z","0.3.1":"2014-04-06T20:12:02.179Z","0.3.2":"2014-04-07T10:20:01.556Z","0.3.3":"2014-04-07T17:01:31.933Z","0.3.4":"2014-04-07T18:48:40.999Z","1.0.0":"2014-04-08T13:49:59.264Z","1.0.1":"2014-04-08T14:24:52.926Z","1.1.0":"2014-04-09T02:16:45.504Z","1.1.1":"2014-04-09T09:41:56.039Z","1.2.1":"2014-04-10T12:22:56.055Z","1.3.0":"2014-06-21T16:59:12.959Z","2.0.0-beta":"2014-12-19T07:45:39.747Z","2.0.0-beta2":"2014-12-22T08:15:08.080Z","2.0.0":"2014-12-23T21:11:46.162Z","2.1.0":"2015-01-04T12:18:58.903Z","2.1.1":"2015-01-05T14:34:29.739Z","2.1.2":"2015-01-09T08:08:15.672Z","2.1.3":"2015-01-12T09:38:03.818Z","2.1.4":"2015-02-09T23:58:14.852Z","2.1.5":"2015-05-11T16:17:11.292Z","2.1.6":"2015-10-08T09:17:10.899Z","2.1.7":"2015-12-12T23:53:40.494Z","2.1.8":"2016-05-26T13:55:47.258Z"},"users":{"jokesterfr":true,"danielbaak":true,"crewmoss":true,"maka":true,"edel":true,"shanewholloway":true,"limingv5":true,"ferrari":true}}}