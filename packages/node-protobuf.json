{"name":"node-protobuf","version":"1.4.3","description":"A Node.js protocol buffer wrapper","license":"MIT","main":"protobuf.js","repository":"https://github.com/fuwaneko/node-protobuf","dependencies":{"bindings":"^1.2.1","nan":"^2.3.5"},"engines":["node >= 0.12.0"],"licence":"MIT","devDependencies":{"grunt":"^1.0.0","grunt-release":"^0.14.0","mocha":"^3.1.0"},"scripts":{"test":"mocha ./test/test.js -R spec","format":"for source in src/* protobuf.js; do clang-format -style=file -i $source; done","install":"node-gyp rebuild"},"gypfile":true,"gitHead":"49248cee74275554170606ff82cbb9bf977a4048","homepage":"https://github.com/fuwaneko/node-protobuf#readme","versions":[{"number":"1.0.0","date":"2013-06-17T05:28:08.396Z"},{"number":"1.0.1","date":"2013-06-17T05:39:31.419Z"},{"number":"1.0.2","date":"2013-07-05T15:24:51.384Z"},{"number":"1.0.3","date":"2013-07-19T07:35:59.977Z"},{"number":"1.0.4","date":"2013-07-19T11:58:38.138Z"},{"number":"1.0.5","date":"2013-07-23T12:07:33.941Z"},{"number":"1.0.5-0","date":"2013-09-19T07:31:55.587Z"},{"number":"1.0.6","date":"2013-10-05T05:50:34.656Z"},{"number":"1.0.7","date":"2013-11-04T14:45:40.831Z"},{"number":"1.0.8","date":"2013-11-16T08:21:05.382Z"},{"number":"1.0.9","date":"2013-12-02T09:22:08.068Z"},{"number":"1.0.10","date":"2014-01-09T12:33:08.966Z"},{"number":"1.1.0","date":"2014-05-18T13:05:40.468Z"},{"number":"1.1.1","date":"2014-06-25T14:33:28.245Z"},{"number":"1.1.2","date":"2014-07-05T16:13:43.193Z"},{"number":"1.1.3","date":"2014-07-05T16:26:50.020Z"},{"number":"1.1.4","date":"2014-07-20T08:55:03.490Z"},{"number":"1.2.0","date":"2014-07-20T11:49:06.970Z"},{"number":"1.2.1","date":"2014-09-09T12:35:03.240Z"},{"number":"1.2.2","date":"2014-10-07T07:42:18.950Z"},{"number":"1.2.3","date":"2015-04-01T16:42:11.730Z"},{"number":"1.2.4","date":"2015-08-03T11:26:37.298Z"},{"number":"1.2.5","date":"2015-08-21T19:41:55.666Z"},{"number":"1.2.7","date":"2015-09-01T16:11:30.377Z"},{"number":"1.2.8","date":"2015-09-26T08:11:09.971Z"},{"number":"1.2.9","date":"2015-09-29T15:40:14.340Z"},{"number":"1.2.10","date":"2015-10-06T07:04:45.984Z"},{"number":"1.2.11","date":"2015-11-03T14:16:26.441Z"},{"number":"1.2.12","date":"2015-12-31T10:46:11.024Z"},{"number":"1.2.13","date":"2016-03-15T11:39:59.958Z"},{"number":"1.2.14","date":"2016-04-07T12:54:29.067Z"},{"number":"1.3.0","date":"2016-06-18T10:56:01.360Z"},{"number":"1.3.1","date":"2016-07-21T09:20:30.111Z"},{"number":"1.3.2","date":"2016-07-22T11:44:49.095Z"},{"number":"1.3.3","date":"2016-08-04T11:26:01.229Z"},{"number":"1.4.0","date":"2016-10-02T14:03:15.068Z"},{"number":"1.4.1","date":"2016-10-02T14:07:59.910Z"},{"number":"1.4.2","date":"2017-02-13T17:42:11.188Z"},{"number":"1.4.3","date":"2017-02-22T13:38:47.062Z"}],"readme":"# node-protobuf\n\n[![Join the chat at https://gitter.im/fuwaneko/node-protobuf](https://badges.gitter.im/fuwaneko/node-protobuf.svg)](https://gitter.im/fuwaneko/node-protobuf?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/fuwaneko/node-protobuf.svg?branch=master)](https://travis-ci.org/fuwaneko/node-protobuf)\n[![Known Vulnerabilities](https://snyk.io/test/github/snyk/snyk/badge.svg)](https://snyk.io/test/github/fuwaneko/node-protobuf)\n\nIt's a very simple wrapper around protocol buffers library by Google.\nIt uses dynamic message building and parsing based on protocol schema you can get by compiling protocol description.\nI know that wrappers do exist, but I didn't like them.\n\n## Current status\n\nSupports Node.js 0.10+ (thanks to [bgdavidx](https://github.com/bgdavidx)).\nFor browser support see alternative pure JS implementation: [ProtoBuf.js](https://github.com/dcodeIO/ProtoBuf.js).\n\n## Custom buffers\n\nAny string/byte field you pass to Serialize can have optional toProtobuf method which must return Buffer.\nThanks to [cleverca22](https://github.com/cleverca22) for this nice suggestion and pull.\n\n## Roadmap\n\n+ Add better support for serializing and parsing int64 from/to JS String\n\n## Requirements\n\n* Protocol Buffers >= 2.1.0\n* Node.js >= 0.12\n\nPlease, note that Node.js versions before 4.x are not officially supported and may break eventually. It is highly recommended to update your project to at least LTS version (currently â€” 4.6.0).\n\nNodeJS 0.10 support ended on October 1st 2016. 0.12 support will be dropped January 1st 2017. See NodeJS LTS schedule.\n\n## Installation\n\n### Linux\n\nMake sure you have node, node-gyp, compiler and libprotobuf binary and development files. Either provide LIBPROTOBUF environment variable: ```LIBPROTOBUF=/usr/local/lib/protobuf npm install node-protobuf```. Or install pkg-config for autodiscovery and then simply install like this: ``` npm install node-protobuf ```.\n\n### Windows\n\nOnly 64-bit version is supported. Won't install on 32-bit systems.\n\n1. Install build tools via NPM: ```npm install --global --production windows-build-tools```.\n2. Install node-protobuf\n\nIf you get errors, please, update npm to the latest version. Precompiled libprotobuf v3.1.0 is included.\n\n### Mac OS X\n\nLooks like it's as simple as ``` brew install protobuf ``` before installing npm package.\n\n## Usage\n\nYou are *not* required to generate any JS code from your protocol buffer description. Everything happens dynamically.\n\n```JavaScript\nvar fs = require(\"fs\")\nvar p = require(\"node-protobuf\") // note there is no .Protobuf part anymore\n// WARNING: next call will throw if desc file is invalid\nvar pb = new p(fs.readFileSync(\"protocol.desc\")) // obviously you can use async methods, it's for simplicity reasons\nvar obj = {\n\t\"name\": \"value\"\n}\ntry {\n\tvar buf = pb.serialize(obj, \"MySchema\") // you get Buffer here, send it via socket.write, etc.\n} catch (e) {\n\t// will throw if MySchema does not exist\n}\ntry {\n\tvar newObj = pb.parse(buf, \"MySchema\") // you get plain object here, it should be exactly the same as obj\n} catch (e) {\n\t// will throw on invalid buffer or if MySchema does not exist\n}\n```\n\n### Construct\n\n**Protobuf(buffer[, preserve_int64])**\n\nParses binary buffer holding schema description. You can get schema by calling ```protoc protocol.proto -o protocol.desc```.\n\nOptional preserve_int64 argument allows to pass int64/uint64 numbers to/from JavaScript in a form of array consisting of high and low bits of such numbers: [hi, lo]. Note, that this is highly experimental and you must work with such numbers only if you really need such whole presicion. In any other case I recommend to use int32/uint32 or double if you need more precision. I added this functionality so JS programs working with existing protocol buffers enabled software could get same amount of presicion when transferring int64/uint64.\n\nPlease note, that both high and low bits must be unsigned if you want to Parse. Serialize will return unsigned only too. You have to work with bit parts to create full number using some other library, e.g. [Int64](https://github.com/broofa/node-int64).\n\nAlso, if you don't care about int64/uint64 presicion in JS, you can forget about preserve_int64 and all 64-bit integers that come to Serialize will become just Numbers, but if they are bigger than 2^53 you'll lose some data.\n\n### Serialize\n\n**Protobuf.serialize(object, schema, [callback])**\n\nSerializes plain object with accordance to protocol schema (i.e. message described in you protocol description file).\n\nAccepts optional callback parameter which is essentially a function in Node.js callback style, i.e. function(error, result) {}. In case of exceptions (see below) they are passed as first parameter to callback.\n\n- Returns Node.js Buffer\n- Throws if schema does not exist\n- Throws if required fields are not present\n\n### Parse\n\n**Protobuf.parse(buffer, schema, [callback, limit, warn])**\n\nParses Buffer (or UInt8Array for example, just anything that is binary data array) according to schema.\n\nAccepts optional callback parameter which is essentially a function in Node.js callback style, i.e. function(error, result) {}. In case of exceptions (see below) they are passed as first parameter to callback.\n\nOptional limit argument allows to set the maximum message limit. If the optional warn argument is not set, the warning threshold is set to limit/2.\n\n- Returns plain object\n- Throws if first argument isn't a Buffer\n- Throws if Buffer is malformed (i.e. not a Protobuf)\n\n**Protobuf.parseWithUnknown(buffer, schema, [callback, limit, warn])**\n\nSame as **parse(...)**, but parses unknown fields and writes them to $unknownFields key in result object. Pull request by [Stephen Parente](https://github.com/webmakersteve).\n\n### Info\n\n**Protobuf.info()**\n\nIn case you want to get list of all available schemas in a descriptor, just call this method.\n\nThanks to [@colprog](https://github.com/colprog) for a suggestion.\n\n```JavaScript\nvar schemas = pb.info()\n// returns an array, e.g. [ \"Test\", \"Data\" ] for test suite (see test/test.proto and compare)\n```\n\n### Enums handling\n\nWhile serializing you can supply either strings or integers as enum values. E.g. you can pass\n```JavaScript\nobj = {\n  enumValue: \"first\"\n}\n\n// also valid\nobj = {\n  enumValue: 0\n}\n```\n\nWhile parsing you *always* get string. E.g. after parsing buffers serialized from both objects from above you'll get this:\n```JavaScript\nparsedObj = {\n  enumValue: \"first\"\n}\n```\n\n## License\n```\nThe MIT License (MIT)\n\nCopyright (c) 2015-2016 Dmitry Gorbunov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n","starsCount":6,"created":"2013-06-17T05:28:03.247Z","modified":"2017-05-16T16:59:36.981Z","lastPublisher":{"name":"fuwaneko","email":"atskiisotona@gmail.com"},"owners":[{"name":"fuwaneko","email":"atskiisotona@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-protobuf","_nodeVersion":"7.2.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-protobuf-1.4.3.tgz_1487770724313_0.7523505364079028"},"_npmUser":{"name":"fuwaneko","email":"atskiisotona@gmail.com"},"_npmVersion":"3.10.10","_rev":"4-692aa76494b7726485981eb906834ede","_shasum":"d26004cffec19481cbadd131937cc183c92e96cd","author":{"name":"Dmitry Gorbunov"},"bugs":{"url":"https://github.com/fuwaneko/node-protobuf/issues"},"directories":{},"dist-tags":{"latest":"1.4.3"},"dist":{"shasum":"d26004cffec19481cbadd131937cc183c92e96cd","tarball":"https://registry.npmjs.org/node-protobuf/-/node-protobuf-1.4.3.tgz"},"maintainers":[{"name":"fuwaneko","email":"atskiisotona@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-16T16:59:36.981Z","created":"2013-06-17T05:28:03.247Z","1.0.0":"2013-06-17T05:28:08.396Z","1.0.1":"2013-06-17T05:39:31.419Z","1.0.2":"2013-07-05T15:24:51.384Z","1.0.3":"2013-07-19T07:35:59.977Z","1.0.4":"2013-07-19T11:58:38.138Z","1.0.5":"2013-07-23T12:07:33.941Z","1.0.5-0":"2013-09-19T07:31:55.587Z","1.0.6":"2013-10-05T05:50:34.656Z","1.0.7":"2013-11-04T14:45:40.831Z","1.0.8":"2013-11-16T08:21:05.382Z","1.0.9":"2013-12-02T09:22:08.068Z","1.0.10":"2014-01-09T12:33:08.966Z","1.1.0":"2014-05-18T13:05:40.468Z","1.1.1":"2014-06-25T14:33:28.245Z","1.1.2":"2014-07-05T16:13:43.193Z","1.1.3":"2014-07-05T16:26:50.020Z","1.1.4":"2014-07-20T08:55:03.490Z","1.2.0":"2014-07-20T11:49:06.970Z","1.2.1":"2014-09-09T12:35:03.240Z","1.2.2":"2014-10-07T07:42:18.950Z","1.2.3":"2015-04-01T16:42:11.730Z","1.2.4":"2015-08-03T11:26:37.298Z","1.2.5":"2015-08-21T19:41:55.666Z","1.2.7":"2015-09-01T16:11:30.377Z","1.2.8":"2015-09-26T08:11:09.971Z","1.2.9":"2015-09-29T15:40:14.340Z","1.2.10":"2015-10-06T07:04:45.984Z","1.2.11":"2015-11-03T14:16:26.441Z","1.2.12":"2015-12-31T10:46:11.024Z","1.2.13":"2016-03-15T11:39:59.958Z","1.2.14":"2016-04-07T12:54:29.067Z","1.3.0":"2016-06-18T10:56:01.360Z","1.3.1":"2016-07-21T09:20:30.111Z","1.3.2":"2016-07-22T11:44:49.095Z","1.3.3":"2016-08-04T11:26:01.229Z","1.4.0":"2016-10-02T14:03:15.068Z","1.4.1":"2016-10-02T14:07:59.910Z","1.4.2":"2017-02-13T17:42:11.188Z","1.4.3":"2017-02-22T13:38:47.062Z"},"users":{"seldo":true,"reiot":true,"maobean":true,"vengarioth":true,"markthethomas":true,"barenko":true}}}