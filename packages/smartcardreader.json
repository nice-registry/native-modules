{"name":"smartcardreader","version":"2.0.0","description":"NFC SmartCardReader for Node.js on Windows","main":"index.js","scripts":{"install":"node-gyp clean configure build"},"repository":"https://github.com/HeliosInteractive/SmartCardReader.node","keywords":["nfc"],"dependencies":{"bindings":"*","nan":"*","node-gyp":"*"},"license":"MIT","gypfile":true,"homepage":"https://github.com/HeliosInteractive/SmartCardReader.node#readme","devDependencies":{},"gitHead":"ab00f36adc18e9e9a796f2fb2db1710d3f9c5c0c","versions":[{"number":"0.0.1","date":"2016-07-13T21:01:05.415Z"},{"number":"0.1.0","date":"2016-07-14T00:06:23.459Z"},{"number":"0.1.1","date":"2016-07-14T00:27:15.187Z"},{"number":"1.0.0","date":"2016-07-14T23:28:00.979Z"},{"number":"2.0.0","date":"2016-07-15T21:29:35.903Z"}],"readme":"# SmartCardReader.node\r\nNFC Smart Card Reader for Node.js on Windows (32 and 64 bit)\r\n\r\n## Installation\r\nThis module is equivalent to [node-nfc](https://github.com/camme/node-nfc) but designed to work specifically on Windows, 32 and 64 bit where node-nfc fails due to driver issues.\r\n\r\n```JS\r\nnpm install smartcardreader && node test\r\n```\r\n\r\n## JavaScript Usage\r\n\r\n### `SmartCardReader`\r\nCreates a new connection to a smart card reader. Optionally specify a reader name\r\n\r\n```\r\nvar SmartCardReaderName = require('smartcardreader')('name of device');\r\nvar SmartCardReaderFirstFound = require('smartcardreader')();\r\n```\r\n\r\n### `SmartCardReader.device`\r\nQueries the first device name attached to Windows.\r\n\r\n**Returns:** Device name on success, undefined on failure\r\n\r\n### `SmartCardReader.devices`\r\nReturns the name of all connected devices\r\n\r\n**Returns:** Array of device names\r\n\r\n### `Events`\r\n\r\n - **read** emits data from the tag when a tag is successfully read\r\n - **connect** when a connected device is found\r\n - **disconnect** when a connected device is removed\r\n\r\n### `Examples`\r\n```\r\nvar SmartCardReader = require('smartcardreader')();\r\n\r\nSmartCardReader.on('connect', (device) => {\r\n  console.info(`connected: ${device}`);\r\n});\r\nSmartCardReader.on('disconnect', (device) => {\r\n  console.info(`disconnected: ${device}`);\r\n});\r\nSmartCardReader.on('read', (data) => {\r\n  console.info(`read: ${data}`);\r\n});\r\n```\r\n\r\n> Some readers register as multiple devices. To ensure connectivity is it advised that you specify the name of the expected device\r\n\r\n## Binding usage\r\n\r\n### `SmartCardReader::queryFirst`\r\nQueries the first device name attached to Windows. This is an actual native query so caller is advised to cache the result.\r\n\r\n### `SmartCardReader::queryAll`\r\nQueries all device names attached to Windows. This is an actual native query so caller is advised to cache the result.\r\n\r\n**Returns:** Array of device names on success, Empty array on failure or when no device is attached.\r\n\r\n### `SmartCardReader::poll`\r\nPolls data from the device. Caller should call this as often as possible to capture the data. Use of `process.nextTick` is advised.\r\n\r\n**Returns:** An object `{ code: 123, data: \"tag\" }`. *Code* is one of [values listed here](https://msdn.microsoft.com/en-us/library/ms936965.aspx). *Data* is the data read from the Smart Card (if any).\r\n\r\n### `SmartCardReader::setup`\r\nRe-initializes internal resources and context associated with the reader object. Calls `release` internally. You may pass a device name or `SmartCardReader::queryFirst` will be used.\r\n\r\n**Returns:** *true* if context is valid AND the device name passed is found and ready.\r\n\r\n### `SmartCardReader::release`\r\nReleases internal resources and context associated with the reader object.\r\n\r\n**Returns:** thin air (void, chaos).\r\n","created":"2016-07-13T21:01:05.415Z","modified":"2016-07-15T21:29:35.903Z","lastPublisher":{"name":"sepehr-laal","email":"sl5@pdx.edu"},"owners":[{"name":"sepehr-laal","email":"sl5@pdx.edu"}],"other":{"_attachments":{},"_from":".","_id":"smartcardreader","_nodeVersion":"4.2.1","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/smartcardreader-2.0.0.tgz_1468618173816_0.48579356516711414"},"_npmUser":{"name":"sepehr-laal","email":"sl5@pdx.edu"},"_npmVersion":"2.14.7","_rev":"1-b29890f95363068c14d2b1529c052e89","_shasum":"336106792a7fa04c91ef79b8a8e24e033ea444ab","author":{"name":"Sepehr Laal","email":"sepehr.laal@heliosinteractive.com"},"bugs":{"url":"https://github.com/HeliosInteractive/SmartCardReader.node/issues"},"directories":{},"dist-tags":{"latest":"2.0.0"},"dist":{"shasum":"336106792a7fa04c91ef79b8a8e24e033ea444ab","tarball":"http://registry.npmjs.org/smartcardreader/-/smartcardreader-2.0.0.tgz"},"maintainers":[{"name":"sepehr-laal","email":"sl5@pdx.edu"}],"readmeFilename":"README.md","time":{"modified":"2016-07-15T21:29:35.903Z","created":"2016-07-13T21:01:05.415Z","0.0.1":"2016-07-13T21:01:05.415Z","0.1.0":"2016-07-14T00:06:23.459Z","0.1.1":"2016-07-14T00:27:15.187Z","1.0.0":"2016-07-14T23:28:00.979Z","2.0.0":"2016-07-15T21:29:35.903Z"}}}