{"name":"node-ios-device-fork","description":"iOS device library","version":"0.4.1","repository":"https://github.com/appcelerator/node-ios-device","keywords":["appcelerator","ios","iphone","ipad","install","mobiledevice","mobile"],"dependencies":{"nan":"~1.8.4","node-gyp":"^1.0.3"},"license":"Apache Public License v2","gypfile":true,"main":"./ios-device","engines":{"node":">=0.10"},"scripts":{"install":"node-gyp rebuild"},"gitHead":"b44153220a971b815f3973195e3b40e0f34a94a5","homepage":"https://github.com/appcelerator/node-ios-device#readme","versions":[{"number":"0.4.1","date":"2015-05-27T14:50:39.430Z"}],"readme":"# node-ios-device [![Build Status](https://travis-ci.org/appcelerator/node-ios-device.svg?branch=master)](https://travis-ci.org/appcelerator/node-ios-device)\n\nQueries connected iOS devices and installs apps.\n\n[![NPM](https://nodei.co/npm/node-ios-device.png?downloads=true&stars=true)](https://nodei.co/npm/node-ios-device/)\n\n## Prerequisites\n\nnode-ios-device is currently compatible with the following versions:\n\n * Node.js\n   * 0.8.x (module API v1)\n   * 0.10.x (module API v11)\n   * 0.12.x (module API v14)\n * io.js\n   * 1.0.x (module API v42)\n   * \\^1.1.0 (module API v43)\n   * 2.x (module API v44)\n\nOnly Mac OS X is supported.\n\n## Installation\n\nFrom NPM:\n\n\tnpm install node-ios-device\n\nFrom GitHub:\n\n\tnpm install git://github.com/appcelerator/node-ios-device.git\n\nFrom Source:\n\n\tgit clone https://github.com/appcelerator/node-ios-device.git\n\tcd node-ios-device\n\tnpm install\n\tmake\n\n## Example\n\n```javascript\nvar iosDevice = require('node-ios-device');\n\n// get all connected iOS devices\niosDevice.devices(function (err, devices) {\n\tconsole.log('Connected devices:');\n\tconsole.log(devices);\n});\n\n// continuously watch for devices to be conected or disconnected\niosDevice.trackDevices(function (err, devices) {\n\tconsole.log('Connected devices:');\n\tconsole.log(devices);\n});\n\n// install an iOS app\niosDevice.installApp('<device udid>', '/path/to/my.app', function (err) {\n\tif (err) {\n\t\tconsole.error(err);\n\t} else {\n\t\tconsole.log('Success!');\n\t}\n});\n\n// dump the syslog output to the console\niosDevice.log('<device udid>', function (msg) {\n\tconsole.log(msg);\n});\n```\n\n## API\n\n### devices(callback)\n\nRetrieves an array of all connected iOS devices.\n\n* `{function} callback(err, devices)` - A function to call with the connected devices\n\t* `{null|Error} err` - An `Error` if there was a problem, otherwise `null`\n\t* `{Array<Object>} devices` - An array of Device objects\n\nDevice objects contain the following information:\n\n* `udid` - The device's unique device id (e.g. \"a4cbe14c0441a2bf87f397602653a4ac71eb0336\")\n* `name` - The name of the device (e.g. \"My iPhone\")\n* `buildVersion` - The build version (e.g. \"10B350\")\n* `cpuArchitecture` - The CPU architecture (e.g. \"armv7s\")\n* `deviceClass` - The type of device (e.g. \"iPhone\", \"iPad\")\n* `deviceColor` - The color of the device (e.g. \"black\", \"white\")\n* `hardwareModel` - The device module (e.g. \"[N41AP](http://theiphonewiki.com/wiki/N41ap)\")\n* `modelNumber` - The model number (e.g. \"MD636\")\n* `productType` - The product type or model id (e.g. \"iPhone5,1\")\n* `productVersion` - The iOS version (e.g. \"6.1.4\")\n* `serialNumber` - The device serial number (e.g. \"XXXXXXXXXXXX\")\n\nThere is more data that could have been retrieved from the device, but the\nproperties above seemed the most reasonable.\n\n### trackDevices(callback)\n\nContinuously retrieves an array of all connected iOS devices. Whenever a device\nis connected or disconnected, the specified callback is fired.\n\n* `{Function} callback(err, devices)` - A function to call with the connected devices\n\t* `{null|Error} err` - An `Error` if there was a problem, otherwise `null`\n\t* `{Array<Object>} devices` - An array of Device objects\n\nReturns a function to discontinue tracking:\n\n\tvar off = iosDevice.trackDevices(function (err, devices) {\n\t\tconsole.log('Connected devices:');\n\t\tconsole.log(devices);\n\t});\n\n\tsetTimeout(function () {\n\t\t// turn off tracking after 1 minute\n\t\toff();\n\t}, 60000);\n\n### installApp(udid, appPath, callback)\n\nInstalls an iOS app on the specified device.\n\n* `{String} udid` - The devices udid\n* `{String} appPath` - The path to the iOS .app\n* `{Function} callback(err)` - A function to call when the install finishes\n\t* `{null|Error} err` - An `Error` if there was a problem, otherwise `null`\n\nCurrently, an `appPath` that begins with `~` is not supported.\n\nThe `appPath` must resolve to an iOS .app, not the .ipa file.\n\n### log(udid, callback)\n\nRelays the iOS device's syslog line-by-line to the specified callback. The\ncallback is fired for every line. Empty lines are omitted.\n\n* `{String} udid` - The devices udid\n* `{Function} callback(msg)` - A function to call with each line from the syslog\n\t* `{String} msg` - The line from the syslog\n\nReturns a function to discontinue relaying the log output:\n\n```javascript\nvar off = iosDevice.log('<device udid>', function (msg) {\n\tconsole.log(msg);\n});\n\nsetTimeout(function () {\n\t// turn off logging after 1 minute\n\toff();\n}, 60000);\n```\n\nAfter calling `log()`, it will print out several older messages. If you are only\ninterested in new messages, then you'll have to have use a timer and some sort\nof ready flag like this:\n\n\n```javascript\nvar ready = false;\nvar timer = null;\n\niosDevice.log('<device udid>', function (msg) {\n\tif (ready) {\n\t\tconsole.log(msg);\n\t} else {\n\t\tclearTimeout(timer);\n\t\ttimer = setTimeout(function () {\n\t\t\tready = true;\n\t\t}, 500);\n\t}\n});\n```\n\n## License\n\nThis project is open source and provided under the Apache Public License\n(version 2). Please make sure you see the `LICENSE` file included in this\ndistribution for more details on the license.  Also, please take notice of the\nprivacy notice at the end of the file.\n\nThis project contains `mobiledevice.h` from\n[https://bitbucket.org/tristero/mobiledeviceaccess](https://bitbucket.org/tristero/mobiledeviceaccess)\nand is available under public domain.\n\n#### (C) Copyright 2012-2015, [Appcelerator](http://www.appcelerator.com/) Inc. All Rights Reserved.\n","created":"2015-05-27T14:50:39.430Z","modified":"2015-05-27T14:50:39.430Z","lastPublisher":{"name":"42loops","email":"paul@42loops.com"},"owners":[{"name":"42loops","email":"paul@42loops.com"}],"other":{"_attachments":{},"_from":".","_id":"node-ios-device-fork","_nodeVersion":"0.12.4","_npmUser":{"name":"42loops","email":"paul@42loops.com"},"_npmVersion":"2.10.1","_rev":"1-c6cf527470c3a78ee5d7e4208904a3b3","_shasum":"a9ab319919c67996fbeb53a46bea663fc28eb769","author":{"name":"Appcelerator, Inc.","email":"info@appcelerator.com"},"bugs":{"url":"https://github.com/appcelerator/node-ios-device/issues"},"directories":{},"dist-tags":{"latest":"0.4.1"},"dist":{"shasum":"a9ab319919c67996fbeb53a46bea663fc28eb769","tarball":"http://registry.npmjs.org/node-ios-device-fork/-/node-ios-device-fork-0.4.1.tgz"},"maintainers":[{"name":"42loops","email":"paul@42loops.com"}],"readmeFilename":"README.md","time":{"modified":"2015-05-27T14:50:39.430Z","created":"2015-05-27T14:50:39.430Z","0.4.1":"2015-05-27T14:50:39.430Z"}}}