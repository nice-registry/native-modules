{"name":"@stheine/pigpiod","version":"2.0.1","description":"node.js interface for pigpiod","main":"lib/pigpiod.js","scripts":{"test":"echo \"There are no tests yet.\" && exit 1","install":"node-gyp rebuild"},"engines":{"node":">=0.10.0"},"dependencies":{"bindings":"1.2.1","moment":"2.14.1","nan":"2.4.0"},"keywords":["gpio","interrupt","pi","raspberry","spi"],"license":"MIT","gypfile":true,"devDependencies":{"eslint":"3.2.2","eslint-config-es":"0.8.0","eslint-plugin-extended":"0.2.0","eslint-plugin-mocha":"4.3.0","eslint-plugin-react":"5.2.2"},"gitHead":"b94d97c59f67a92d618c5ec8ec64c0eec591aca0","versions":[{"number":"0.1.0","date":"2016-08-10T19:12:40.835Z"},{"number":"0.1.1","date":"2016-08-11T19:00:00.428Z"},{"number":"0.1.2","date":"2016-10-01T14:22:00.580Z"},{"number":"1.0.0","date":"2017-02-25T16:46:02.563Z"},{"number":"1.0.1","date":"2017-02-27T07:00:17.317Z"},{"number":"2.0.0","date":"2017-02-28T19:07:24.517Z"},{"number":"2.0.1","date":"2017-06-04T14:04:41.022Z"}],"readme":"# pigpiod\n\nNode.js interface for **pigpiod** on the Raspberry Pi Zero, 1, 2, or 3.\n\n## Contents\n\n## Features\n\n## Installation\n\n#### Step 1\n\nThis step can be skipped on Raspbian Jessie 2016-05-10 or newer as it includes the pigpio C library and pigpiod.\n\nThe pigpio package is based on the\n[pigpio C library](https://github.com/joan2937/pigpio) so the C library needs to be installed first. Version V41 or higher of the pigpio C library is\nrequired. It can be installed with the following commands:\n\n```\nwget abyz.co.uk/rpi/pigpio/pigpio.zip\nunzip pigpio.zip\ncd PIGPIO\nmake\nsudo make install\n```\n\n#### Step 2\n\n```\nnpm install pigpio\n```\n\nI have developed and tested on Node.js 6.2.0, so it should be working ok here. It might very well work on the earlier versions of Node.js.\n\n## Usage\n\n```\nconst pigpiod = require('pigpiod');\n\nlet pi  = pigpiod.pigpio_start();\nlet spi = pigpiod.spi_open(pi, 0); // SPI channel 0\n\n// read A-D converter value on MCP3204 on SPI channel 0, MCP channel 0\nconst a2dValue = pigpiod.mcp3204(pi, spi, 0);\nconsole.log(`a2dValue = ${a2dValue}`);\n\n// DHT22 (this is a C-based implementation reading the sensor data)\ndhtResult = pigpiod.dht22(pi, 18); // read DHT22 sensor on port 18\nconsole.log(dhtResult);\n\npigpiod.spi_close(pi, spi);\npigpiod.pigpio_stop(pi);\n```\n\n## Standard pigpiod API\n\nFollowing APIs are already implemented. See for details: http://abyz.co.uk/rpi/pigpio/pdif2.html\n\nWhere not explicitly stated, the parameters are the same.\n\nThe error handling is different, though: Instead of returning an error code, an exception is thrown.\n\n| | ESSENTIAL | |\n| --- | --- | --- |\n| [x] | pigpio_start | Connects to a pigpio daemon |\n| [x] | pigpio_stop | Disconnects from a pigpio daemon |\n\n| | BEGINNER | |\n| --- | --- | --- |\n| [x] | set_mode | Set a GPIO mode |\n| [x] | get_mode | Get a GPIO mode |\n| [x] | set_pull_up_down | Set/clear GPIO pull up/down resistor |\n| [x] | gpio_read | Read a GPIO |\n| [x] | gpio_write | Write a GPIO |\n| [ ] | set_PWM_dutycycle | Start/stop PWM pulses on a GPIO |\n| [ ] | get_PWM_dutycycle | Get the PWM dutycycle in use on a GPIO |\n| [ ] | set_servo_pulsewidth | Start/stop servo pulses on a GPIO |\n| [ ] | get_servo_pulsewidth | Get the servo pulsewidth in use on a GPIO |\n| [x] | callback | Create GPIO level change callback |\n| [ ] | callback_ex | Create GPIO level change callback |\n| [x] | callback_cancel | Cancel a callback |\n| [ ] | wait_for_edge | Wait for GPIO level change |\n\n| | INTERMEDIATE | |\n| --- | --- | --- |\n| [ ] | gpio_trigger | Send a trigger pulse to a GPIO. |\n| [x] | set_watchdog | Set a watchdog on a GPIO. |\n| [ ] | set_PWM_range | Configure PWM range for a GPIO |\n| [ ] | get_PWM_range | Get configured PWM range for a GPIO |\n| [ ] | set_PWM_frequency | Configure PWM frequency for a GPIO |\n| [ ] | get_PWM_frequency | Get configured PWM frequency for a GPIO |\n| [ ] | read_bank_1 | Read all GPIO in bank 1 |\n| [ ] | read_bank_2 | Read all GPIO in bank 2 |\n| [ ] | clear_bank_1 | Clear selected GPIO in bank 1 |\n| [ ] | clear_bank_2 | Clear selected GPIO in bank 2 |\n| [ ] | set_bank_1 | Set selected GPIO in bank 1 |\n| [ ] | set_bank_2 | Set selected GPIO in bank 2 |\n| [ ] | start_thread | Start a new thread |\n| [ ] | stop_thread | Stop a previously started thread |\n\n| | ADVANCED | |\n| --- | --- | --- |\n| [ ] | get_PWM_real_range | Get underlying PWM range for a GPIO |\n| [ ] | notify_open | Request a notification handle |\n| [ ] | notify_begin | Start notifications for selected GPIO |\n| [ ] | notify_pause | Pause notifications |\n| [ ] | notify_close | Close a notification |\n| [ ] | bb_serial_read_open | Opens a GPIO for bit bang serial reads |\n| [ ] | bb_serial_read | Reads bit bang serial data from a GPIO |\n| [ ] | bb_serial_read_close | Closes a GPIO for bit bang serial reads |\n| [ ] | bb_serial_invert | Invert serial logic (1 invert, 0 normal) |\n| [ ] | hardware_clock | Start hardware clock on supported GPIO |\n| [ ] | hardware_PWM | Start hardware PWM on supported GPIO |\n| [x] | set_glitch_filter | Set a glitch filter on a GPIO |\n| [x] | set_noise_filter | Set a noise filter on a GPIO |\n\n| | SCRIPTS | |\n| --- | --- | --- |\n| [ ] | store_script | Store a script |\n| [ ] | run_script | Run a stored script |\n| [ ] | script_status | Get script status and parameters |\n| [ ] | stop_script | Stop a running script |\n| [ ] | delete_script | Delete a stored script |\n\n| | WAVES | |\n| --- | --- | --- |\n| [ ] | wave_clear | Deletes all waveforms |\n| [ ] | wave_add_new | Starts a new waveform |\n| [ ] | wave_add_generic | Adds a series of pulses to the waveform |\n| [ ] | wave_add_serial | Adds serial data to the waveform |\n| [ ] | wave_create | Creates a waveform from added data |\n| [ ] | wave_delete | Deletes one or more waveforms |\n| [ ] | wave_send_once | Transmits a waveform once |\n| [ ] | wave_send_repeat | Transmits a waveform repeatedly |\n| [ ] | wave_send_using_mode | Transmits a waveform in the chosen mode |\n| [ ] | wave_chain | Transmits a chain of waveforms |\n| [ ] | wave_tx_at | Returns the current transmitting waveform |\n| [ ] | wave_tx_busy | Checks to see if the waveform has ended |\n| [ ] | wave_tx_stop | Aborts the current waveform |\n| [ ] | wave_get_micros | Length in microseconds of the current waveform |\n| [ ] | wave_get_high_micros | Length of longest waveform so far |\n| [ ] | wave_get_max_micros | Absolute maximum allowed micros |\n| [ ] | wave_get_pulses | Length in pulses of the current waveform |\n| [ ] | wave_get_high_pulses | Length of longest waveform so far |\n| [ ] | wave_get_max_pulses | Absolute maximum allowed pulses |\n| [ ] | wave_get_cbs | Length in cbs of the current waveform |\n| [ ] | wave_get_high_cbs | Length of longest waveform so far |\n| [ ] | wave_get_max_cbs | Absolute maximum allowed cbs |\n\n| | I2C | |\n| --- | --- | --- |\n| [ ] | i2c_open | Opens an I2C device |\n| [ ] | i2c_close | Closes an I2C device |\n| [ ] | i2c_write_quick | smbus write quick |\n| [ ] | i2c_write_byte | smbus write byte |\n| [ ] | i2c_read_byte | smbus read byte |\n| [ ] | i2c_write_byte_data | smbus write byte data |\n| [ ] | i2c_write_word_data | smbus write word data |\n| [ ] | i2c_read_byte_data | smbus read byte data |\n| [ ] | i2c_read_word_data | smbus read word data |\n| [ ] | i2c_process_call | smbus process call |\n| [ ] | i2c_write_block_data | smbus write block data |\n| [ ] | i2c_read_block_data | smbus read block data |\n| [ ] | i2c_block_process_call | smbus block process call |\n| [ ] | i2c_write_i2c_block_data | smbus write I2C block data |\n| [ ] | i2c_read_i2c_block_data | smbus read I2C block data |\n| [ ] | i2c_read_device | Reads the raw I2C device |\n| [ ] | i2c_write_device | Writes the raw I2C device |\n| [ ] | i2c_zip | Performs multiple I2C transactions |\n| [ ] | bb_i2c_open | Opens GPIO for bit banging I2C |\n| [ ] | bb_i2c_close | Closes GPIO for bit banging I2C |\n| [ ] | bb_i2c_zip | Performs multiple bit banged I2C transactions |\n\n| | SPI | |\n| --- | --- | --- |\n| [x] | spi_open | Opens a SPI device |\n| [x] | spi_close | Closes a SPI device |\n| [ ] | spi_read | Reads bytes from a SPI device |\n| [ ] | spi_write | Writes bytes to a SPI device |\n| [x] | spi_xfer | Transfers bytes with a SPI device |\n\n| | SERIAL |\n| --- | --- | --- |\n| [x] | serial_open | Opens a serial device (/dev/tty*) |\n| [x] | serial_close | Closes a serial device |\n| [x] | serial_write_byte | Writes a byte to a serial device |\n| [x] | serial_read_byte | Reads a byte from a serial device |\n| [x] | serial_write | Writes bytes to a serial device |\n| [x] | serial_read | Reads bytes from a serial device |\n| [x] | serial_data_available | Returns number of bytes ready to be read |\n\n| | CUSTOM | |\n| --- | --- | --- |\n| [ ] | custom_1 | User custom function 1 |\n| [ ] | custom_2 | User custom function 2 |\n\n| | UTILITIES | |\n| --- | --- | --- |\n| [x] | get_current_tick | Get current tick (microseconds) |\n| [x] | get_hardware_revision | Get hardware revision |\n| [x] | get_pigpio_version | Get the pigpio version |\n| [ ] | pigpiod_if_version | Get the pigpiod_if2 version |\n| [ ] | pigpio_error | Get a text description of an error code. |\n| [1] | time_sleep | Sleeps for a float number of seconds |\n| [2] | time_time | Float number of seconds since the epoch |\n\n1: use js setTimeout() instead.\n\n2: use moment() or Date() instead.\n\n## API documentation\n\n## Thanks\n\n[pigpio library and pigpiod](http://abyz.co.uk/rpi/pigpio/) Thanks to _joan2937_ for the development and documentation of the pigpio C library.\n\n[pigpio](https://github.com/fivdi/pigpio) Thanks for _fivdi_ for his work on the pigpio module for Node.js. I used this as the base for my development and got additional development help.\n\n# Breaking change\n\n## 1.0.0\n\nThe `dht22` call has been switched to an asynchronous implementation, returning a promise.\n\n## 2.0.0\n\nI have to revert the changes released in 1.0.0, as the async `dht22` API works fine in a standalone example,\nbut causes intermittent process hangs in a project using additional API calls.\n","created":"2016-08-10T19:12:40.835Z","modified":"2017-06-04T14:04:41.022Z","lastPublisher":{"name":"stheine","email":"stheine@arcor.de"},"owners":[{"name":"stheine","email":"stheine@arcor.de"}],"other":{"_attachments":{},"_from":".","_id":"@stheine/pigpiod","_nodeVersion":"6.10.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pigpiod-2.0.1.tgz_1496585080033_0.7095598357263952"},"_npmUser":{"name":"stheine","email":"stheine@arcor.de"},"_npmVersion":"3.10.10","_rev":"5-f74b5b9a9330054e6932704c49704738","_shasum":"b114e70d726d8a631367005f681d583d2987f684","author":{"name":"stheine"},"contributors":[{"name":"Stefan Heine","email":"stheine@arcor.de"}],"directories":{"example":"example","test":"test"},"dist-tags":{"latest":"2.0.1"},"dist":{"shasum":"b114e70d726d8a631367005f681d583d2987f684","tarball":"https://registry.npmjs.org/@stheine/pigpiod/-/pigpiod-2.0.1.tgz"},"maintainers":[{"name":"stheine","email":"stheine@arcor.de"}],"readmeFilename":"README.md","time":{"modified":"2017-06-04T14:04:41.022Z","created":"2016-08-10T19:12:40.835Z","0.1.0":"2016-08-10T19:12:40.835Z","0.1.1":"2016-08-11T19:00:00.428Z","0.1.2":"2016-10-01T14:22:00.580Z","1.0.0":"2017-02-25T16:46:02.563Z","1.0.1":"2017-02-27T07:00:17.317Z","2.0.0":"2017-02-28T19:07:24.517Z","2.0.1":"2017-06-04T14:04:41.022Z"}}}