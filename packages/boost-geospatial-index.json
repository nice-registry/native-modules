{"name":"boost-geospatial-index","main":"index.js","version":"1.0.3","description":"A bridge to the C++ boost::geometry library, allowing to index and query geospatial shapes","keywords":["rtree","rstar","geospatial","geoshape","kuzzle"],"scripts":{"configure":"node-gyp configure","build":"node-gyp build","install":"node-gyp rebuild"},"repository":"https://github.com/kuzzleio/boost-geospatial-index","dependencies":{"bindings":"^1.2.1","nan":"^2.4.0"},"devDependencies":{"node-gyp":"^3.4.0"},"engines":{"node":">= 4.4.5","npm":">= 2.14.4"},"license":"Apache-2.0","gypfile":true,"gitHead":"b57cd190cca77181abd58ac086d4255aab8fd5da","homepage":"https://github.com/kuzzleio/boost-geospatial-index#readme","versions":[{"number":"1.0.0","date":"2016-10-26T09:03:07.525Z"},{"number":"1.0.1","date":"2016-10-26T09:08:48.414Z"},{"number":"1.0.2","date":"2016-10-26T09:47:18.073Z"},{"number":"1.0.3","date":"2017-02-07T08:33:37.412Z"}],"readme":"# boost-geospatial-index\n\nStores and indexes geospatial shapes and exposes query methods.  \nShapes can overlap.\n\nThis library is used by [Kuzzle](http://kuzzle.io)'s real-time engine and is focused on query performances:\n\n* shapes are indexed using a [R* tree](https://en.wikipedia.org/wiki/R*_tree) (\"slow\" insertion, very fast query time)\n* based on the C++ [boost::geometry](http://www.boost.org/doc/libs/1_62_0/libs/geometry/doc/html/geometry/spatial_indexes/introduction.html) library\n* pure C++ module\n* no dependencies\n\n# Table of content\n\n- [Install](#install)\n- [API](#api)\n  - [Creating a new index](#creating-a-new-index)\n  - [Adding shapes to the index](#adding-shapes-to-the-index)\n      - [addBoundingBox(id, min_lat, min_lon, max_lat, max_lon)](#addboundingboxid-min_lat-min_lon-max_lat-max_lon)\n      - [addCircle(id, lat, lon, radius)](#addcircleid-lat-lon-radius)\n      - [addAnnulus(id, lat, lon, outer, inner)](#addannulusid-lat-lon-outer-inner)\n      - [addPolygon(id, points)](#addpolygonid-points)\n- [Querying the index](#querying-the-index)\n    - [queryPoint(lat, lon)](#querypointlat-lon)\n- [Removing a shape from the index](#removing-a-shape-from-the-index)\n    - [remove(id)](#removeid)\n- [Example](#example)\n- [TODO](#todo)\n- [License](#license)\n\n\n# Install\n\n```\nnpm install --save boost-geospatial-index\n```\n\n# API\n\n## Creating a new index\n\n```js\nvar BoostSpatialIndex = require('boost-geospatial-index');\n\nvar bsi = new BoostSpatialIndex();\n```\n\n## Adding shapes to the index\n\n##### addBoundingBox(id, min_lat, min_lon, max_lat, max_lon)\n\n**Returns:** `boolean`\n\n| Argument | Type | Description |\n|----------|------|-------------|\n| `id` | string | shape unique identifier |\n| `min_lat` | number | bottom side of the bounding box |\n| `min_lon` | number |  left side of the bounding box |\n| `max_lat` | number |  top side of the bounding box |\n| `max_lon` | number |  right side of the bounding box |\n\n\n\n##### addCircle(id, lat, lon, radius)\n\n**Returns:** `boolean`\n\n| Argument | Type | Description |\n|----------|------|-------------|\n| `id` | string | shape unique identifier |\n| `lat` | number | y coordinate of the circle's center |\n| `lon` | number | x coordinate of the circle's center |\n| `radius` | number | radius of the circle, in meters |\n\n##### addAnnulus(id, lat, lon, outer, inner)\n\n**Returns:** `boolean`\n\n| Argument | Type | Description |\n|----------|------|-------------|\n| `id` | string | shape unique identifier |\n| `lat` | number | y coordinate of the annulus' center |\n| `lon` | number | x coordinate of the annulus' center |\n| `outer` | number | outer radius of the annulus, in meters |\n| `inner` | number | inner radius of the annulus, in meters |\n\n##### addPolygon(id, points)\n\nCreates an open polygon (automatically closed by the library).\n\n**Returns:** `boolean`\n\n| Argument | Type | Description |\n|----------|------|-------------|\n| `id` | string | shape unique identifier |\n| `points` | array | array of arrays of [lat, lon] points |\n\n# Querying the index\n\n##### queryPoint(lat, lon)\n\nGets all shapes containing the provided point coordinates. Shapes matching the provided point exactly on their borders or corners are also returned.\n\nIf no shape match, an empty array is returned.\n\n**Returns:** `array of shape ids`\n\n| Argument | Type | Description |\n|----------|------|-------------|\n| `lat` | number | y coordinate |\n| `lon` | number | x coordinate |\n\n# Removing a shape from the index\n\n##### remove(id)\n\n**Returns:** `boolean`\n\n| Argument | Type | Description |\n|----------|------|-------------|\n| `id` | string | shape unique identifier |\n\n# Example\n\n```js\nvar BoostSpatialIndex = require('boost-geospatial-index');\n\nvar bsi = new BoostSpatialIndex();\n\nbsi.addBoundingBox('Montpellier, France', 43.5810609, 3.8433703, 43.6331979, 3.9282093);\nbsi.addPolygon('Montpellier Millenaire', [\n  [43.6021299, 3.8989713],\n  [43.6057389, 3.8968173],\n  [43.6092889, 3.8970423],\n  [43.6100359, 3.9040853],\n  [43.6069619, 3.9170343],\n  [43.6076479, 3.9230133],\n  [43.6038779, 3.9239153],\n  [43.6019189, 3.9152403],\n  [43.6036049, 3.9092313]\n]);\nbsi.addAnnulus('Around Kuzzle HQ', 43.6073913, 3.9109057, 1500, 1);\nbsi.addCircle('Montpellier Airport', 43.5764455, 3.948711, 2000);\n\nconsole.log('Querying Kuzzle HQ: ', bsi.queryPoint(43.6073913, 3.9109057));\nconsole.log('Kuzzle team favorite pub:', bsi.queryPoint(43.6002203, 3.897105));\n```\n\nResult:\n\n```\nQuerying Kuzzle HQ:  [ 'Montpellier, France', 'Montpellier Millenaire' ]\nKuzzle team favorite pub: [ 'Montpellier, France', 'Around Kuzzle HQ' ]\n```\n\n# TODO\n\nHere are some features we might add in the future:\n\n* add a `queryIntersect` method, allowing to retrieve shapes intersecting a given polygon\n* add support for polygons with inner holes\n\n# License\n\nThis library is published under [Apache 2 License](LICENSE.md).\n","starsCount":1,"created":"2016-10-26T09:03:07.525Z","modified":"2017-02-07T08:33:37.412Z","lastPublisher":{"name":"kuzzle","email":"support@kuzzle.io"},"owners":[{"name":"kuzzle","email":"support@kuzzle.io"}],"other":{"_attachments":{},"_from":".","_id":"boost-geospatial-index","_nodeVersion":"4.7.3","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/boost-geospatial-index-1.0.3.tgz_1486456416826_0.691653321031481"},"_npmUser":{"name":"kuzzle","email":"support@kuzzle.io"},"_npmVersion":"2.15.11","_rev":"5-c51bfc9dfbc46674a1122ad60fad7f28","_shasum":"218a504975ca841982c1f4c412360d1728845063","author":{"name":"The Kuzzle Team","email":"support@kuzzle.io"},"bugs":{"url":"https://github.com/kuzzleio/boost-geospatial-index/issues"},"directories":{},"dist-tags":{"latest":"1.0.3"},"dist":{"shasum":"218a504975ca841982c1f4c412360d1728845063","tarball":"https://registry.npmjs.org/boost-geospatial-index/-/boost-geospatial-index-1.0.3.tgz"},"maintainers":[{"name":"kuzzle","email":"support@kuzzle.io"}],"readmeFilename":"README.md","time":{"modified":"2017-02-07T08:33:37.412Z","created":"2016-10-26T09:03:07.525Z","1.0.0":"2016-10-26T09:03:07.525Z","1.0.1":"2016-10-26T09:08:48.414Z","1.0.2":"2016-10-26T09:47:18.073Z","1.0.3":"2017-02-07T08:33:37.412Z"},"users":{"dbengsch":true}}}