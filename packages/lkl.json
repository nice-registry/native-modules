{"name":"lkl","version":"0.2.5","description":"NodeJS native bindings to the Linux Kernel Library project","license":"Apache-2.0","main":"index.js","homepage":"https://github.com/resin-io/node-lkl","scripts":{"configure":"node-gyp configure","build":"node-gyp build","pretest":"eslint lib test","test":"mocha","publish-please":"publish-please","prepublish":"publish-please guard","install":"node-gyp rebuild"},"devDependencies":{"bluebird":"^3.4.7","eslint":"^3.19.0","mocha":"^2.2.5","publish-please":"^2.2.0"},"dependencies":{"async":"^2.1.5","bindings":"^1.2.1","bluebird":"3.5.0","file-disk":"0.0.10","nan":"^2.5.1"},"gypfile":true,"gitHead":"15f400cf664bdf73251af61f2c22151f57bf53a6","versions":[{"number":"0.1.0","date":"2017-03-07T17:55:51.567Z"},{"number":"0.1.6","date":"2017-04-07T12:04:48.154Z"},{"number":"0.2.0","date":"2017-04-25T17:54:41.620Z"},{"number":"0.2.3","date":"2017-04-25T18:53:55.804Z"},{"number":"0.2.4","date":"2017-04-28T10:18:31.220Z"},{"number":"0.2.5","date":"2017-06-09T16:22:06.443Z"}],"readme":"node-lkl\n=========\n### NodeJS native bindings to the Linux Kernel Library project\n[![Build Status](https://travis-ci.org/resin-io/node-lkl.svg?branch=master)](https://travis-ci.org/resin-io/node-lkl)\n\nnode-lkl uses the [Linux Kernel Library project](https://github.com/lkl/linux) to provide access to filesystem drivers\nfrom NodeJS in a cross-platform way.\n\nSome things you can do with this module:\n\n* Read/write files in a filesystem image directly without mounting\n* Use familiar APIs, node-lkl has the exact same interface as node's `fs` module (except that only async methods work).\n* Combine lkl filesystem streams with host filesystem streams (e.g copy files)\n* Create a tar archive from a filesystem image\n\nCheck the [How it works](#how-it-works) section to learn how it works.\n\n**Warning: The API exposed by this library is still forming and can change at\nany time!**\n\nInstallation\n------------\n\n`node-lkl` includes a stripped down copy of the linux source code so\nthere's no need to have it available on your system.\n\nSimply compile and install `node-lkl` using `npm`:\n\n``` bash\n$ npm install lkl\n```\n\nExample\n-------\n\nHere's an example of using `node-lkl` to read a file inside a disk image of\na ext4 partition and pipe it to `process.stdout`:\n\n``` javascript\nconst Promise = require('bluebird');\nconst filedisk = Promise.promisifyAll(require('file-disk'), { multiArgs: true });\nconst lkl = Promise.promisifyAll(require('lkl'))\nlkl.fs = Promise.promisifyAll(lkl.fs);\n\nlkl.startKernelSync(10 * 1024 * 1024);\n\nPromise.using(filedisk.openFile('ext4', 'r'), function(fd) {\n\tconst disk = new filedisk.FileDisk(fd, true, false);\n\treturn Promise.using(lkl.utils.attachDisk(disk), function(diskId) {\n\t\tconst options = { filesystem: 'ext4', readOnly: true};\n\t\treturn Promise.using(lkl.utils.mountPartition(diskId, options), function(mountpoint) {\n\t\t\tconst file = lkl.fs.createReadStream(mountpoint + '/some_file');\n\t\t\tfile.pipe(process.stdout);\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tfile.on(\"close\", resolve).on(\"error\", reject);\n\t\t\t});\n\t\t});\n\t});\n})\n.then(function() {\n\tlkl.haltKernelSync();\n});\n```\n\nS3 Example\n----------\n\n```javascript\nconst Promise = require('bluebird');\nconst aws = require('aws-sdk');\nconst filedisk = Promise.promisifyAll(require('file-disk'));\nconst lkl = Promise.promisifyAll(require('lkl'));\n\nlkl.startKernelSync(10 * 1024 * 1024);\n\nconst s3 = new aws.S3('access_key', 'secret_key');\nconst disk = new filedisk.S3Disk(s3, 'some-bucket', 'some-object-key');\n\nPromise.using(lkl.utils.attachDisk(disk), function(diskId) {\n\tconst options = { partition: 1, filesystem: 'vfat' };\n\treturn Promise.using(lkl.utils.mountPartition(diskId, options), function(mountpoint) {\n\t\tdoSomething(mountpoint);\n\t});\n})\n.then(function() {\n\treturn disk.getStreamAsync();\n}\n.then(function(stream) {\n\tconst out = fs.createWriteStream('some-file')\n\tstream.pipe(out)\n\treturn new Promise(function(resolve, reject) {\n\t\tout.on('close', resolve);\n\t\tout.on('error', reject);\n\t});\n.then(function() {\n\tlkl.haltKernelSync();\n});\n```\n\nMore examples in [tests](test/index.js).\n\nHow it works\n------------\n\nnode-lkl is based on the LKL (Linux Kernel Library) project. node-lkl is\nfocused on the filesystem capabilities of lkl although future work could allow\nusage of the kernel networking stack as well. To understand how a userspace\nprocess can \"mount\" an image without actually mounting it, it helps to think\nabout the interface between an actual kernel and a block device.\n\n```\n +---------------+\n |  application  |\n +-------+-------+\n         | syscall interface\n+--------V---------+\n|      kernel      |\n| +-------------+  |\n| |  fs driver  |  |\n| +-------+-----+  |\n|         |        |\n| +-------V------+ |\n| | block driver | |\n| +-------+------+ |\n+---------|--------+\n          | block request interface\n   +------V-----+\n   | hard drive |\n   +------------+\n```\n\nEverything inside the box named `kernel` doesn't actually need the hardware\nto do its job. When an application instructs the kernel to read a file, the\nfilesystem driver issues some read requests to the block driver and the block\ndriver issues those to the hard drive. All of the high level filesystem\nsemantics like files, directories, permissions, etc. are \"compiled\" down to raw\nreads and writes at specific offsets.\n\nThis means that as long as we can provide a block request interface to the\nkernel, and find a way to run the kernel in userspace, we can use all of its\nfunctionality. This is how it looks like with node-lkl:\n\n```\n +----------------------------------------------------------+\n |  nodejs application                                      |\n |                                                          |\n | +-----------------------------------------------------+  |\n | | V8                                 +-----------+    |  |\n | |                                    | request() |-+  |  |\n | | fs.read();   lkl.fs.read();        +------^----+ |  |  |\n | +---|---------------|-----------------------|------|--+  |\n |     |               |                       |      |     |\n |     |       virtual | syscall interface     |      |     |\n |     |      +--------V---------+             |    async   |\n |     |      |     liblkl.so    |             |      |     |\n |     |      | +-------------+  |             |      |     |\n |     |      | |  fs driver  |  |           async    |     |\n |     |      | +-------+-----+  |             |      |     |\n |     |      |         |        |             |      |     |\n |     |      | +-------V------+ |             |      |     |\n |     |      | | block driver | |             |      |     |\n |     |      | +-------+------+ |             |      |     |\n |     |      +---------|--------+             |      |     |\n |     |  virtual block | request interface    |      |     |\n |     |        +-------V------+               |      |     |\n |     |        |  V8 adapter  |---------------+      |     |\n |     |        +--------------+                      |     |\n |     |                                              |     |\n |     |--------------------------------------------- +     |\n |     |                                                    |\n +-----|----------------------------------------------------+\n       | syscall interface\n +-----V------------+\n |      kernel      |\n | +-------------+  |\n | |  fs driver  |  |\n | +-------+-----+  |\n |         |        |\n | +-------V------+ |\n | | block driver | |\n | +-------+------+ |\n +---------|--------+\n           | block request interface\n    +------V-----+\n    | hard drive |\n    +------------+\n```\n\nSupport\n-------\n\nIf you're having any problems, please [raise an issue][github-issue] on GitHub.\n\nLicense\n-------\n\nnode-lkl is free software, and may be redistributed under the terms specified\nin the [license].\n\n[github-issue]: https://github.com/resin-io/node-lkl/issues/new\n[license]: https://github.com/resin-io/node-lkl/blob/master/LICENSE\n","created":"2017-03-07T17:55:51.567Z","modified":"2017-06-09T16:22:06.443Z","lastPublisher":{"name":"resin.io","email":"accounts@resin.io"},"owners":[{"name":"resin.io","email":"accounts@resin.io"}],"other":{"_attachments":{},"_from":".","_id":"lkl","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lkl-0.2.5.tgz_1497025275830_0.10179991251789033"},"_npmUser":{"name":"resin.io","email":"accounts@resin.io"},"_npmVersion":"3.10.10","_rev":"6-6a11bf72687b61b4240550903b5b1aa2","_shasum":"9c71989bf46c34b2d781b9b6bc679d6f8484e51e","author":{"name":"Petros Angelatos","email":"petrosagg@resin.io"},"directories":{},"dist-tags":{"latest":"0.2.5"},"dist":{"shasum":"9c71989bf46c34b2d781b9b6bc679d6f8484e51e","tarball":"https://registry.npmjs.org/lkl/-/lkl-0.2.5.tgz"},"maintainers":[{"name":"resin.io","email":"accounts@resin.io"}],"readmeFilename":"README.md","time":{"modified":"2017-06-09T16:22:06.443Z","created":"2017-03-07T17:55:51.567Z","0.1.0":"2017-03-07T17:55:51.567Z","0.1.6":"2017-04-07T12:04:48.154Z","0.2.0":"2017-04-25T17:54:41.620Z","0.2.3":"2017-04-25T18:53:55.804Z","0.2.4":"2017-04-28T10:18:31.220Z","0.2.5":"2017-06-09T16:22:06.443Z"}}}