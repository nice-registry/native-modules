{"name":"fuzzy-native","version":"0.6.3","description":"Native C++ implementation of a fuzzy string matcher.","main":"lib/main.js","scripts":{"test":"jasmine-node --captureExceptions spec","build":"node-pre-gyp configure build","rebuild":"node-pre-gyp rebuild","install":"node-pre-gyp install --fallback-to-build","prepublish":"node tools/prepublish.js"},"files":["binding.gyp","build/fuzzy-native","lib","src"],"keywords":["fuzzy","native","matcher","string"],"repository":"https://github.com/hansonw/fuzzy-native","license":"MIT","dependencies":{"nan":"^2.0.0","node-pre-gyp":"^0.6.30","semver":"^5.0.0"},"devDependencies":{"jasmine-node":"^1.14.5","rimraf":"^2.5.2"},"binary":{"module_name":"fuzzy-native","module_path":"./build/{module_name}/v{version}/{node_abi}-{platform}-{arch}/","host":"https://github.com/","remote_path":"./hansonw/{module_name}/releases/download/v{version}/","package_name":"{node_abi}-{platform}-{arch}.tar.gz"},"gitHead":"ea4b28c33b4405beb5810caad7d4b583eeaf74e5","homepage":"https://github.com/hansonw/fuzzy-native#readme","bundleDependencies":["node-pre-gyp"],"versions":[{"number":"0.1.1","date":"2016-02-22T07:09:25.068Z"},{"number":"0.1.2","date":"2016-02-22T07:26:20.544Z"},{"number":"0.1.3","date":"2016-02-23T04:29:52.081Z"},{"number":"0.2.0","date":"2016-02-25T20:02:56.566Z"},{"number":"0.2.1","date":"2016-02-26T06:02:16.811Z"},{"number":"0.2.2","date":"2016-02-29T05:36:38.850Z"},{"number":"0.3.1","date":"2016-03-09T23:34:02.183Z"},{"number":"0.4.1","date":"2016-03-10T08:40:44.915Z"},{"number":"0.5.0","date":"2016-05-11T23:03:26.056Z"},{"number":"0.5.1","date":"2016-05-12T00:15:30.012Z"},{"number":"0.6.1","date":"2016-10-15T20:24:07.642Z"},{"number":"0.6.2","date":"2016-10-17T00:50:27.140Z"},{"number":"0.6.3","date":"2016-11-17T06:38:48.243Z"}],"readme":"# fuzzy-native\n\n[![Build Status](https://travis-ci.org/hansonw/fuzzy-native.svg?branch=master)](https://travis-ci.org/hansonw/fuzzy-native)\n\nFuzzy string matching library package for Node. Implemented natively in C++ for speed with support for multithreading.\n\nThe scoring algorithm is heavily tuned for file paths, but should work for general strings.\n\n## API\n\n(from [main.js.flow](lib/main.js.flow))\n\n```\nexport type MatcherOptions = {\n  // Default: false\n  caseSensitive?: boolean,\n\n  // Default: infinite\n  maxResults?: number,\n\n  // Maximum gap to allow between consecutive letters in a match.\n  // Provide a smaller maxGap to speed up query results.\n  // Default: unlimited\n  maxGap?: number;\n\n  // Default: 1\n  numThreads?: number,\n\n  // Default: false\n  recordMatchIndexes?: boolean,\n}\n\nexport type MatchResult = {\n  value: string,\n\n  // A number in the range (0-1]. Higher scores are more relevant.\n  // 0 denotes \"no match\" and will never be returned.\n  score: number,\n\n  // Matching character index in `value` for each character in `query`.\n  // This can be costly, so this is only returned if `recordMatchIndexes` was set in `options`.\n  matchIndexes?: Array<number>,\n}\n\nexport class Matcher {\n  constructor(candidates: Array<string>) {}\n\n  // Returns all matching candidates (subject to `options`).\n  // Will be ordered by score, descending.\n  match: (query: string, options?: MatcherOptions) => Array<MatchResult>;\n\n  addCandidates: (candidates: Array<string>) => void;\n  removeCandidates: (candidates: Array<string>) => void;\n  setCandidates: (candidates: Array<string>) => void;\n}\n```\n\nSee also the [spec](spec/fuzzy-native-spec.js) for basic usage.\n\n## Scoring algorithm\n\nThe scoring algorithm is mostly borrowed from @wincent's excellent [command-t](https://github.com/wincent/command-t) vim plugin; most of the code is from [his implementation in  match.c](https://github.com/wincent/command-t/blob/master/ruby/command-t/match.c).\n\nRead [the source code](src/score_match.cpp) for a quick overview of how it works (the function `recursive_match`).\n\nNB: [score_match.cpp](src/score_match.cpp) and [score_match.h](src/score_match.h) have no dependencies besides the C/C++ stdlib and can easily be reused for other purposes.\n\nThere are a few notable additional optimizations:\n\n- Before running the recursive matcher, we first do a backwards scan through the haystack to see if the needle exists at all. At the same time, we compute the right-most match for each character in the needle to prune the search space.\n- For each candidate string, we pre-compute and store a bitmask of its letters in `MatcherBase`. We then compare this the \"letter bitmask\" of the query to quickly prune out non-matches.\n","created":"2016-02-22T07:09:25.068Z","modified":"2016-11-17T06:38:48.243Z","lastPublisher":{"name":"hansonw","email":"hanson.wng@gmail.com"},"owners":[{"name":"hansonw","email":"hanson.wng@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"fuzzy-native","_nodeVersion":"6.8.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/fuzzy-native-0.6.3.tgz_1479364727992_0.2275480111129582"},"_npmUser":{"name":"hansonw","email":"hanson.wng@gmail.com"},"_npmVersion":"3.10.8","_rev":"2-f8fbb72382f7b9434a1cf13f2c11d4e1","_shasum":"34bfcb18ac1644417824c3087b6f5eca3a25673f","author":{"name":"Hanson Wang","url":"hanson.wng@gmail.com"},"bugs":{"url":"https://github.com/hansonw/fuzzy-native/issues"},"directories":{},"dist-tags":{"latest":"0.6.3"},"dist":{"shasum":"34bfcb18ac1644417824c3087b6f5eca3a25673f","tarball":"http://registry.npmjs.org/fuzzy-native/-/fuzzy-native-0.6.3.tgz"},"maintainers":[{"name":"hansonw","email":"hanson.wng@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-17T06:38:48.243Z","created":"2016-02-22T07:09:25.068Z","0.1.1":"2016-02-22T07:09:25.068Z","0.1.2":"2016-02-22T07:26:20.544Z","0.1.3":"2016-02-23T04:29:52.081Z","0.2.0":"2016-02-25T20:02:56.566Z","0.2.1":"2016-02-26T06:02:16.811Z","0.2.2":"2016-02-29T05:36:38.850Z","0.3.1":"2016-03-09T23:34:02.183Z","0.4.1":"2016-03-10T08:40:44.915Z","0.5.0":"2016-05-11T23:03:26.056Z","0.5.1":"2016-05-12T00:15:30.012Z","0.6.1":"2016-10-15T20:24:07.642Z","0.6.2":"2016-10-17T00:50:27.140Z","0.6.3":"2016-11-17T06:38:48.243Z"}}}