{"name":"node-gf","version":"1.0.2","description":"This is a native Node.js module (C/C++) that wraps James S. Plank's GF-Complete code","main":"index.js","repository":"https://github.com/lamphamsy/node-gf","keywords":["gf-complete"],"license":"ISC","gypfile":true,"homepage":"https://github.com/scality/dpclient#readme","dependencies":{"nan":"^2.1.0"},"devDependencies":{"eslint":"^2.4.0","eslint-config-airbnb":"^6.0.0","eslint-config-scality":"github:scality/Guidelines","mocha":"^3.2.0"},"scripts":{"ft_test":"mocha tests/functional/*.js","lint":"eslint $(git ls-files '*.js')","lint_md":"mdlint $(git ls-files '*.md')","perf":"mocha tests/performance/*.js","install":"node-gyp rebuild"},"gitHead":"5ef5afa0ab2920d0e3bf48e7ff76ce963ba2b1bd","versions":[{"number":"0.0.1","date":"2016-12-08T11:45:21.233Z"},{"number":"1.0.0","date":"2017-02-20T22:59:40.606Z"},{"number":"1.0.1","date":"2017-02-28T11:08:16.908Z"},{"number":"1.0.2","date":"2017-03-30T12:27:58.486Z"}],"readme":"# node-gf\n\n[![CircleCI](https://circleci.com/gh/lamphamsy/node-gf.svg?style=svg)](https://circleci.com/gh/lamphamsy/node-gf)\n\nThis is a native Node.js module (C/C++) that wraps James S. Plank's GF-Complete\n code\n\nGF-complete's source codes (`gf-complete` directory) are originally from\n[Jerasure Library](http://lab.jerasure.org/jerasure/gf-complete)\n\nThe main target of GF-complete is to enhance the multiplication of a region\nof data (buffer) and a symbol of the Galois field. We introduce APIs to\nfacilitate the use of `node-gf` library:\n\n- Multiplication of a buffer with an array of symbols. Each result is\n    stored or XORed to a buffer of destination array.\n- Multiplication of a array of buffers with an matrix of symbols. Results are\n    stored or XORed to another array of buffers.\n- Same as the above case but the matrix of symbols are stored a-prior as a\n    context. Only arrays of buffers are given for each operation. It is useful\n    for encoding operations.\n\nMoreover, multi-threads can be enable in such operations so that each\nmultiplication of a buffer with a symbol is performed in a thread.\n\n## API\n\n### Import library\n\n```javascript\nconst NodeGF = require('node-gf');\n```\n\n### Initialization\n\n```javascript\nconst gf = new NodeGF(opts);\n```\n\nwhere [opts] is optional parameters for generating GF-complete\n\n- [opts.gfDim] - Galois field dimension\n- [opts.multType] - multiplication type\n- [opts.divType] - division type\n- [opts.regionType] - multiplication region type\n- [opts.primPoly] - primitive polynomial\n- [opts.arg1] - argument1\n- [opts.arg2] - argument2\n\nAvailable types of multiplication, division, region operations are the same as\nof the original GF-complete Library and shown as below.\n\n`node-gf` | origin `GF-complete`\n---|---|\nMultiplication |\n`default` | `GF_MULT_DEFAULT`\n`shift` | `GF_MULT_SHIFT`\n`carray_free` | `GF_MULT_CARRY_FREE`\n`carry_free_gk` | `GF_MULT_CARRY_FREE_GK`\n`group` | `GF_MULT_GROUP`\n`bytwo_p` | `GF_MULT_BYTWO_p`\n`table` | `GF_MULT_TABLE`\n`log_table` | `GF_MULT_LOG_TABLE`\n`log_zero` | `GF_MULT_LOG_ZERO`\n`log_zero_ext` | `GF_MULT_LOG_ZERO_EXT`\n`split` | `GF_MULT_SPLIT_TABLE`\n`composite` | `GF_MULT_COMPOSITE`\n|\nDivision |\n`default` | `GF_DIVIDE_DEFAULT`\n`matrix` | `GF_DIVIDE_MATRIX`\n`euclid` | `GF_DIVIDE_EUCLID`\n|\nRegion |\n`default` | `GF_REGION_DEFAULT`\n`double` | `GF_REGION_DOUBLE_TABLE`\n`quad` | `GF_REGION_QUAD_TABLE`\n`lazy` | `GF_REGION_LAZY`\n`simd` | `GF_REGION_SIMD`\n`sse` | `GF_REGION_SSE`\n`noSimd` | `GF_REGION_NOSIMD`\n`noSse` | `GF_REGION_NOSSE`\n`altmap` | `GF_REGION_ALTMAP`\n`cauchy` | `GF_REGION_CAUCHY`\n\nNote that not all combinations of multiplication/division/region types are\ncorrect. Please see\n[manual](http://lab.jerasure.org/jerasure/gf-complete/tree/9f9f005a3fda204b4e4dadb6e27fc97708aa0afb/manual)\nfor more details.\n\nWithout specific requirements, we recommend to generate GF-complete with the\nfollowing options:\n\n```javascript\n{\n    gfDim: 8,\n    multType: 'split',\n    divType: 'default',\n    regionType: 'default',\n    arg1: 4,\n    arg2: 8,\n}\n```\n\n### Addition\n\n```javascript\nadd(num1, num2)\n```\n\n### Multiplication\n\n```javascript\nmultiply(num1, num2)\n```\n\n### Division\n\n```javascript\ndivide(num1, num2)\n```\n\n### Inversion\n\n```javascript\ninverse(num)\n```\n\n### Multiplication of a region with a GF symbol\n\n```javascript\nmultRegion(coef, src, dest, len, flag)\n```\n\nwhere\n\n- `coef`: a GF symbol\n- `src`: the source buffer\n- `dest`: the destination buffer\n- `len`: buffer length (bytes)\n- `flag`: operation flag indicating that the result: stored in `dest`\n    (flag = 0) or XORed to actual `dest` (flag = 1)\n\n### Multiplication of a region with an array of GF symbols\n\n```javascript\nmultRegionArr(coefs, src, dest, destsNb, len, flag, offset)\n```\n\nFor multi-thread operations:\n\n```javascript\nmultRegionArrThreads(coefs, src, dest, destsNb, len, flag, offset)\n```\n\nwhere\n\n- `coefs`: array of GF symbols\n- `src`: the source buffer\n- `dest`: the destination buffers\n- `destsNb`: number of destination buffers\n- `len`: buffer length (bytes)\n- `flag`: operation flag indicating that the result is stored in `dest`\n    (flag = 0) or XORed to actual `dest` (flag = 1)\n- `offset`: offset of `dest` (bytes)\n\n### Multiplication of an array of regions with a matrix of GF symbols\n\n```javascript\nmultRegionMatrix(coefs, rowsNb, colsNb, src, dest, len, offset)\n```\n\nFor multi-thread operations:\n\n```javascript\nmultRegionMatrixThreads(coefs, rowsNb, colsNb, src, dest, len, offset)\n```\n\nwhere\n\n- `coefs`: array of `rowsNb x colsNb` GF symbols\n- `rowsNb`: number of input regions\n- `colsNb`: number of output regions\n- `src`: the source buffers\n- `dest`: the destination buffers\n- `len`: buffer length (bytes)\n- `offset`: offset of `dest` (bytes)\n\n### Multiplication of an array of regions with a given context\n\n```javascript\nmultRegionMatrixContext(contextId, src, dest, len, offset)\n```\n\nFor multi-thread operations:\n\n```javascript\nmultRegionMatrixThreadsContext(contextId, src, dest, len, offset)\n```\n\nwhere\n\n- `contextId`: identity of a context\n- `src`: the source buffers\n- `dest`: the destination buffers\n- `len`: buffer length (bytes) (optional)\n- `offset`: offset of `dest` (bytes) (optional)\n\nA context identity is return from\n\n```javascript\ninitContext(coefs, rowsNb, colsNb, len)\n```\n\nwhere\n\n- `coefs`: array of `rowsNb x colsNb` GF symbols\n- `rowsNb`: number of input regions\n- `colsNb`: number of output regions\n- `len`: buffer length (bytes)\n\nA context is deleted by\n\n```javascript\nremoveContext(contextId)\n```\n\nwhere\n\n- `contextId`: identity of a context\n","starsCount":2,"created":"2016-12-08T11:45:21.233Z","modified":"2017-03-30T12:27:58.486Z","lastPublisher":{"name":"lamphamsy","email":"lam.pham-sy@scality.com"},"owners":[{"name":"lamphamsy","email":"lam.pham-sy@scality.com"}],"other":{"_attachments":{},"_from":".","_id":"node-gf","_nodeVersion":"4.5.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/node-gf-1.0.2.tgz_1490876877687_0.6613187431357801"},"_npmUser":{"name":"lamphamsy","email":"lam.pham-sy@scality.com"},"_npmVersion":"2.15.9","_rev":"6-1a20e31fce88ae9d4c0b5b03bc52cc10","_shasum":"2fcebea348c46f820a4b1ef2aa26a74260bfcd26","author":{"name":"Lam Pham Sy","email":"lam.pham-sy@scality.com","url":"http://www.scality.com"},"bugs":{"url":"https://github.com/scality/dpclient/issues"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"2fcebea348c46f820a4b1ef2aa26a74260bfcd26","tarball":"https://registry.npmjs.org/node-gf/-/node-gf-1.0.2.tgz"},"maintainers":[{"name":"lamphamsy","email":"lam.pham-sy@scality.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-30T12:27:58.486Z","created":"2016-12-08T11:45:21.233Z","0.0.1":"2016-12-08T11:45:21.233Z","1.0.0":"2017-02-20T22:59:40.606Z","1.0.1":"2017-02-28T11:08:16.908Z","1.0.2":"2017-03-30T12:27:58.486Z"},"users":{"co84":true,"lamphamsy":true}}}