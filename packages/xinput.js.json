{"name":"xinput.js","version":"1.0.0","description":"xinput wrapper. Access xinput based controllers.","main":"index.js","scripts":{"configure":"node-gyp configure","build":"node-gyp build","install":"node-gyp rebuild"},"license":"MIT","dependencies":{"bindings":"^1.2.1","nan":"^2.2.0"},"os":["win32"],"gypfile":true,"repository":"https://github.com/thraaawn/xinputjs","keywords":["gamepad","joystick","xinput"],"homepage":"https://github.com/thraaawn/xinputjs","gitHead":"4dee4106a3109565495bfcb5fc126f6d5c66a749","versions":[{"number":"1.0.0","date":"2016-02-27T13:57:07.374Z"}],"readme":"> Node.js xinput wrapper. Access xinput based controllers\r\n\r\nxinput.js wraps the xinput game controller API. Besides allowing raw access to the xinput device, it also provides a small wrapper class which emits events based on controller input.\r\n\r\n## Contents\r\n\r\n- [Requirements](#requirements)\r\n- [Building](#building)\r\n- [Examples](#examples)\r\n- [License](#license)\r\n\r\n## Requirements\r\n\r\n[xinput](https://en.wikipedia.org/wiki/DirectInput#XInput) is only available on Windows. Please ensure you have the [required dependencies](https://github.com/nodejs/node-gyp#installation) as well as Visual Studio installed.\r\n\r\n## Building\r\n\r\nnode-gyp is required to build xinput.js.\r\n\r\nInstall node-gyp using npm:\r\n\r\n```\r\nnpm install -g node-gyp\r\n```\r\n\r\nThen configure and build:\r\n\r\n```\r\nnode-gyp configure\r\nnode-gyp build\r\n```\r\n\r\n## Examples\r\n\r\n### Simple\r\n```JavaScript\r\nvar xinput = require('../');\r\n\r\n[0, 1, 2, 3]\r\n.filter(n => xinput.IsConnected(n))\r\n.map(n => xinput.WrapController(n, {\r\n\tinterval: 20,\r\n\tdeadzone: {\r\n\t\tx: 0.20,\r\n\t\ty: 0.15\r\n\t},\r\n\tholdtime: 500\r\n}))\r\n.forEach(gamepad => {\r\n\tvar n = gamepad.deviceNumber;\r\n\r\n\tgamepad.addListener(\"button-long\", (button, elapsed) => {\r\n\t\tconsole.log(\"[%d] Hold button %s for %dms\", n, button, elapsed);\r\n\t\t/* After holding the button for a while ->\r\n\t\t[1] Button buttons.a changed: true\r\n\t\t[1] Hold button buttons.a for 501ms\r\n\t\t[1] Button buttons.a changed: false\r\n\t\t*/\r\n\t});\r\n\r\n\tgamepad.addListener(\"button-short\", (button, elapsed) => {\r\n\t\tconsole.log(\"[%d] Pressed button %s for %dms\", n, button, elapsed);\r\n\t\t/* After tapping the button for a short moment ->\r\n\t\t[1] Button control.start changed: true\r\n\t\t[1] Button control.start changed: false\r\n\t\t[1] Pressed button control.start for 101ms\r\n\t\t*/\r\n\t});\r\n\r\n\tgamepad.addListener(\"button-changed\", (button, state) => {\r\n\t\tconsole.log(\"[%d] Button %s changed: %s\", n, button, state);\r\n\t\t/* Find example output in both listeners above */\r\n\t});\r\n\r\n\tgamepad.addListener(\"analog-input\", (input, data) => {\r\n\t\tconsole.log(\"[%d] Holding %s at:\", n, input, data);\r\n\t\t/* Moving the left stick to the left ->\r\n\t\t[1] Holding leftstick at: { x: -0.04042176580095827, y: 0 }\r\n\t\t[1] Holding leftstick at: { x: -0.17329172643208102, y: 0 }\r\n\t\t[1] Holding leftstick at: { x: -0.532532731101413, y: 0 }\r\n\t\t[1] Holding leftstick at: { x: -0.8130359813226723, y: 0 }\r\n\t\t[1] Holding leftstick at: { x: -0.9705114902188178, y: 0 }\r\n\t\t[1] Holding leftstick at: { x: -1, y: 0 }\r\n\t\t*/\r\n\r\n\t\t/* Holding both triggers for a short moment ->\r\n\t\t[1] Holding trigger at: { left: 0.2235294133424759, right: 0 }\r\n\t\t[1] Holding trigger at: { left: 0.658823549747467, right: 0.16078431904315948 }\r\n\t\t[1] Holding trigger at: { left: 1, right: 0.5098039507865906 }\r\n\t\t[1] Holding trigger at: { left: 1, right: 0.9960784316062927 }\r\n\t\t[1] Holding trigger at: { left: 1, right: 1 }\r\n\t\t[1] Holding trigger at: { left: 1, right: 1 }\r\n\t\t[1] Holding trigger at: { left: 1, right: 1 }\r\n\t\t[1] Holding trigger at: { left: 1, right: 1 }\r\n\t\t[1] Holding trigger at: { left: 1, right: 0.9960784316062927 }\r\n\t\t[1] Holding trigger at: { left: 0.4313725531101227, right: 0.37254902720451355 }\r\n\t\t*/\r\n\t});\r\n\r\n\tgamepad.addListener(\"connection-changed\", (isConnected) => {\r\n\t\tconsole.log(\"[%d] Connection state changed: %s\", n, isConnected ? \"Connected!\" : \"Disconnected!\");\r\n\t\t/* Pulling out the batteries + plugging them back in ->\r\n\t\t[1] Connection state changed: Disconnected!\r\n\t\t[1] Connection state changed: Connected!\r\n\t\t*/\r\n\t});\r\n});\r\n```\r\n\r\n### Raw\r\n```JavaScript\r\nvar xinput = require('../');\r\n\r\n// Test all controllers 0-3\r\n[0, 1, 2, 3].forEach(controllerNum => {\r\n\tconsole.log(\"Controller %d connected:\", controllerNum, xinput.IsConnected(controllerNum));\r\n\t// -> Connected: true\r\n\r\n\tif(xinput.IsConnected(controllerNum)) {\r\n\t\t// Dump the current state\r\n\t\tconsole.log(\"Controller %d state:\", controllerNum, xinput.GetState(controllerNum));\r\n\t\t/* -> {\r\n\t\t  // Digital inputs\r\n\t\t  buttons: { a: false, b: false, x: false, y: false },\r\n\t\t  dpad: { left: false, right: false, up: false, down: false },\r\n\t\t  shoulder: { left: false, right: false },\r\n\t\t  thumb: { left: false, right: false },\r\n\t\t  control: { back: false, start: false },\r\n\r\n\t\t  // Analog inputs\r\n\t\t  trigger: { left: 0, right: 0 },\r\n\t\t  leftstick: { x: -1679, y: 1514 },\r\n\t\t  rightstick: { x: -296, y: -3893 }\r\n\t\t} */\r\n\r\n\t\t// Vibrate and stop after 1s\r\n\t\txinput.Vibrate(controllerNum, 0.5, 0.5);\r\n\t\tsetTimeout(() => xinput.Vibrate(controllerNum, 0.0, 0.0), 1000);\r\n\t}\r\n});\r\n```\r\n\r\n## License\r\n\r\nMIT","created":"2016-02-27T13:57:07.374Z","modified":"2016-02-27T13:57:07.374Z","lastPublisher":{"name":"davenonymous","email":"david.hilberath@gmail.com"},"owners":[{"name":"davenonymous","email":"david.hilberath@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"xinput.js","_nodeVersion":"5.1.0","_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/xinput.js-1.0.0.tgz_1456581426028_0.46621088683605194"},"_npmUser":{"name":"davenonymous","email":"david.hilberath@gmail.com"},"_npmVersion":"3.3.12","_rev":"1-b426dc3e2ee8270bc500c67f90a93542","_shasum":"6bf584434e72f05da582da2d161266156109c00c","author":{"name":"davenonymous"},"bugs":{"url":"https://github.com/thraaawn/xinputjs/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"6bf584434e72f05da582da2d161266156109c00c","tarball":"http://registry.npmjs.org/xinput.js/-/xinput.js-1.0.0.tgz"},"maintainers":[{"name":"davenonymous","email":"david.hilberath@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-02-27T13:57:07.374Z","created":"2016-02-27T13:57:07.374Z","1.0.0":"2016-02-27T13:57:07.374Z"}}}