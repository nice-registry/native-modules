{"name":"tripwire","version":"4.1.0","description":"Break out from scripts blocking node.js event loop","tags":["event loop","hang"],"main":"./lib/tripwire.js","engines":{"node":"0.10.x || 0.12.x || 4.x"},"licenses":[{"type":"Apache","url":"http://www.apache.org/licenses/LICENSE-2.0"}],"homepage":"https://github.com/tjanczuk/tripwire","dependencies":{"nan":"^2.0.8"},"repository":"https://github.com/tjanczuk/tripwire","scripts":{"install":"node install.js"},"gitHead":"49f61fce6acfebea91888badb7566e8694922c99","versions":[{"number":"0.1.0","date":"2012-07-11T01:34:18.405Z"},{"number":"0.2.0","date":"2012-07-12T00:15:49.664Z"},{"number":"0.3.0","date":"2012-07-12T17:59:11.252Z"},{"number":"0.4.0","date":"2012-07-24T00:29:11.115Z"},{"number":"0.5.0","date":"2012-07-26T23:11:26.554Z"},{"number":"0.6.0","date":"2012-07-26T23:23:41.529Z"},{"number":"0.7.0","date":"2013-09-25T05:47:22.065Z"},{"number":"0.8.0","date":"2014-09-21T13:56:15.132Z"},{"number":"0.9.0","date":"2014-11-22T00:29:39.331Z"},{"number":"0.10.0","date":"2015-04-13T23:58:53.602Z"},{"number":"4.0.0","date":"2015-09-09T00:28:43.846Z"},{"number":"4.1.0","date":"2016-02-04T01:20:05.250Z"}],"readme":"Tripwire\r\n========\r\n\r\nTripwire allows node.js applications to termiante execution of scripts that block the node.js event loop. For example, you can break out from infinite loops like `while(true)`. This functionality is useful if you are executing untrusted code within your node.js process. \r\n\r\nTripwire contains a native extension of node.js and currently supports Windows, Mac, and Linux. I do take contributions. \r\n\r\nInstall with:\r\n\r\n```\r\nnpm install tripwire\r\n```\r\n\r\nThen in your application, you can put a limit on the total amout of CPU time (kernel and user mode combined) the event loop is blocked before the execution of the script is terminated:\r\n\r\n```javascript\r\nvar tripwire = require('tripwire');\r\n\r\nprocess.on('uncaughtException', function (e) {\r\n  console.log('The event loop was blocked for longer than 2000 milliseconds');\r\n  process.exit(1);\r\n});\r\n\r\n// set the limit of execution time to 2000 milliseconds\r\ntripwire.resetTripwire(2000);\r\n\r\n// execute code that will block the event loop for longer\r\nwhile(true);\r\n\r\n// clear the tripwire (in this case this code is never reached)\r\ntripwire.clearTripwire();\r\n```\r\n\r\nWhen the event loop is blocked for longer than the time specified in the call to `resetTripwire`, tripwire will terminate execution of the script. Node.js will subsequently execute the `uncaughtException` handler if one is registered. The exception passed to `uncaughtException` handler will be `null` in that case. In order to determine whether the exception was indeed caused by tripwire, an optional context can be established during a call to `resetTripwire` and retrtieved with a call to `getContext`. The `getContext` will return `undefined` if the tripwire had not been triggered. \r\n\r\n```javascript\r\nvar tripwire = require('tripwire');\r\n\r\nprocess.on('uncaughtException', function (e) {\r\n  if (undefined === tripwire.getContext())\r\n    console.log('The exception was not caused by tripwire.');\r\n  else\r\n    console.log('The event loop was blocked for longer than 2000 milliseconds');\r\n  process.exit(1);\r\n});\r\n\r\n// set the limit of execution time to 2000 milliseconds\r\nvar context = { someData: \"foobar\" };\r\ntripwire.resetTripwire(2000, context);\r\n```\r\n\r\nFor more samples, see [here](https://github.com/tjanczuk/tripwire/tree/master/samples).\r\n\r\n#### Running tests\r\n\r\nThere are a few mocha tests included that you can run with\r\n\r\n```\r\nmocha -R list\r\n```\r\n\r\n#### Building\r\n\r\nOn OSX and Linux, the native component is built at installation time.\r\n\r\nOn Windows, the native component is included in the repository and not built during `npm install tripwire`.\r\n\r\nYou can rebuild the native component using [node-gyp](https://github.com/TooTallNate/node-gyp/). Currently the native component can be compiled on Windows, Mac, and Linux (I do take contributions).\r\n\r\nOn Windows:\r\n\r\n```\r\nnode-gyp configure build\r\ncopy build\\Release\\tripwire.node lib\\native\\win32\\4.0\\ia32\\\r\n```\r\n","starsCount":5,"created":"2012-07-11T01:34:17.890Z","modified":"2016-02-04T01:20:05.250Z","lastPublisher":{"name":"tjanczuk","email":"tomasz@janczuk.org"},"owners":[{"name":"tjanczuk","email":"tomasz@janczuk.org"}],"other":{"_attachments":{},"_from":".","_id":"tripwire","_nodeVersion":"0.12.9","_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/tripwire-4.1.0.tgz_1454548802462_0.15932226786389947"},"_npmUser":{"name":"tjanczuk","email":"tomasz@janczuk.org"},"_npmVersion":"2.14.9","_rev":"1-5b2e501070838154786734920f18687c","_shasum":"1821b6061fc1f51cc82d4dbacd8333da9e538dd5","author":{"name":"Tomasz Janczuk","email":"tomasz@janczuk.org","url":"http://tomasz.janczuk.org"},"bugs":{"url":"http://github.com/tjanczuk/tripwire/issues"},"directories":{},"dist-tags":{"latest":"4.1.0"},"dist":{"shasum":"1821b6061fc1f51cc82d4dbacd8333da9e538dd5","tarball":"http://registry.npmjs.org/tripwire/-/tripwire-4.1.0.tgz"},"maintainers":[{"name":"tjanczuk","email":"tomasz@janczuk.org"}],"readmeFilename":"README.md","time":{"modified":"2016-02-04T01:20:05.250Z","created":"2012-07-11T01:34:17.890Z","0.1.0":"2012-07-11T01:34:18.405Z","0.2.0":"2012-07-12T00:15:49.664Z","0.3.0":"2012-07-12T17:59:11.252Z","0.4.0":"2012-07-24T00:29:11.115Z","0.5.0":"2012-07-26T23:11:26.554Z","0.6.0":"2012-07-26T23:23:41.529Z","0.7.0":"2013-09-25T05:47:22.065Z","0.8.0":"2014-09-21T13:56:15.132Z","0.9.0":"2014-11-22T00:29:39.331Z","0.10.0":"2015-04-13T23:58:53.602Z","4.0.0":"2015-09-09T00:28:43.846Z","4.1.0":"2016-02-04T01:20:05.250Z"},"users":{"fgribreau":true,"jazzhuang":true,"larwin":true,"foreigner":true,"shanewholloway":true}}}