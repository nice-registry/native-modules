{"name":"firebird-cc","version":"0.2.0","description":"Firebird binding to node, uses libfbclient.","main":"./firebird","licenses":[{"type":"MIT","url":"https://raw.githubusercontent.com/xdenser/node-firebird-libfbclient/master/LICENSE"}],"engines":{"node":">=0.10"},"repository":"https://github.com/spirale-tech/node-firebird-libfbclient","dependencies":{"nan":"^2.0.9"},"scripts":{"test":"nodeunit tests/def","install":"node-gyp rebuild"},"gypfile":true,"gitHead":"4e53d5672e1a0952e3cb6674e801490537949b32","homepage":"https://github.com/spirale-tech/node-firebird-libfbclient#readme","versions":[{"number":"0.2.0","date":"2017-07-27T13:59:11.313Z"}],"readme":"C++ NodeJS module to work with Firebird SQL Server. Uses fbclient library and with a few tweaks it can use libfbembedded\r\n\r\n![Firebird Logo](https://www.totaljs.com/exports/firebird-logo.png)\r\n\r\n[![NPM version][npm-version-image]][npm-url] [![NPM downloads][npm-downloads-image]][npm-url] [![Mozilla License][license-image]][license-url]\r\n[![Build Status](https://travis-ci.org/xdenser/node-firebird-libfbclient.svg?branch=master)](https://travis-ci.org/xdenser/node-firebird-libfbclient)\r\n[![Build status](https://ci.appveyor.com/api/projects/status/5do2fyjn6vx5yeci/branch/master?svg=true)](https://ci.appveyor.com/project/xdenser/node-firebird-libfbclient/branch/master)\r\n\r\n[![NPM](https://nodei.co/npm/firebird.png?downloads=true&downloadRank=true)](https://nodei.co/npm/firebird/) [![NPM](https://nodei.co/npm-dl/firebird.png?months=6&height=3)](https://nodei.co/npm/firebird/)\r\n\r\n\r\n# Features\r\n\r\n* Synchronous and Asynchronous methods for connection, query and fetch data\r\n* Support of Firebird Events (post_event statement)\r\n* Covered with tests in nodeunit\r\n* blob field support\r\n* blob stream compatible to node stream class\r\n* prepared statements\r\n\r\nAs for now in plans are:\r\n\r\n* connection pool support\r\n* prepared statements pool\r\n* continous refactoring\r\n* more tests\r\n* services api\r\n\r\n# Getting Started\r\n\r\n\r\n##Under Linux, Windows and MacOS X\r\nYou will need:\r\n NodeJS (tested with v4.x or more)\r\n Firebird (tested with v2.5.x and v3.x)\r\n \r\n On Windows you need the [same requirements](https://github.com/atom/atom/blob/master/docs/build-instructions/windows.md) like Atom editor for building native C++ extensions \r\n\r\nGet Firebird.\r\n\r\nUpdate your path: \r\n    export PATH=$PATH:/opt/firebird/bin\r\n\r\nCreate some Database: \r\n\r\n    isql -user sysdba -password masterkey\r\n    CREATE DATABASE 'test.fdb';\r\n    CONNECT 'test.fdb';\r\n    CREATE TABLE TEST (id integer, name varchar(50));\r\n    exit;\r\n\r\nClone repository and build module\r\n\r\n    git clone git://github.com/xdenser/node-firebird-libfbclient.git\r\n    npm install\r\n\r\nAlternate way is to install directly from github\r\n\r\n    npm install xdenser/node-firebird-libfbclient\r\n \r\nor use the version from npmjs:\r\n\r\n    npm install firebird\r\n\r\nTo run tests update ./tests/config.js with your test database connection parameters and\r\n\r\n    npm install nodeunit\r\n    ./node_modules/.bin/nodeunit tests/def\r\n     \r\nPlay with it from node:\r\n\r\n    var fb  = require(\"./firebird\");\r\n    sys = require(\"sys\"); \r\n    var con = fb.createConnection();\r\n    con.connectSync('test.fdb','sysdba','masterkey','');\r\n    con.querySync(\"insert into test (id,name) values (5, 'new one')\");\r\n    var res = con.querySync(\"select * from test\");\r\n    con.commitSync();\r\n    var rows = res.fetchSync(\"all\",true);\r\n    console.log(sys.inspect(rows));\r\n\r\nCheck also samples directory and [this sample application](https://github.com/xdenser/node-fb-sample).    \r\n\r\n\r\n# Links\r\n\r\n- [node.js and firebird installing on Amazon EC2 instance](http://mapopa.blogspot.com/2011/01/nodejs-and-firebird-installing-on.html) on Mariuz's Blog\r\n- [Catch Firebird events with Node.js](http://www.king-foo.be/2011/07/catch-firebird-events-with-node-js) on www.king-foo.be \r\n- [NodeJS home](http://nodejs.org)\r\n- [Collection of NodeJS modules](https://npmjs.org/)\r\n \r\n# Reference\r\n\r\n createConnection() method will create Firebird Connection object for you\r\n \r\n## Connection object\r\n\r\nHandles database connection and queries. Supports Synchronous and Asynchronous operation.\r\n\r\n### Connection object members\r\n* * *\r\n    function connectSync(database, username, password, role);\r\n\r\nwhere \r\n\r\n* `database` - string, a database name in Firebird notation, i.e. `<hostname>:<path to database file | alias>`\r\n* `username` - string, user name\r\n* `pasword` - string,\r\n* `role` - string;\r\n\r\nConnects you to database, raises exception on error (try to catch it).\r\nReturns undefined.\r\n\r\n* * *\r\n    function connect(database, username, password, role, callback);\r\n    \r\nwhere first four parameters same as in connectSync()\r\n\r\n* `callback` - function(err), where err is error object in case of error.\r\n\r\nAsynchronously connects you to Database.\r\nReturns udefined.\r\n\r\n* * *\r\n    connected;\r\nA boolean readonly property indicating if Connection object is connected to database\r\n\r\n* * *\r\n    function querySync(sql);\r\n* `sql` - string, an SQL query to execute.\r\n\r\nExecutes SQL query.\r\nReturns FBResult object in case of success. Raises error otherwise.\r\n\r\n* * *\r\n    function query(sql, callback);\r\n\r\n* `sql` - string, an SQL query to execute;\r\n* `callback` - function(err,res), err - is error object or null, res - FBResult object.\r\n\r\nAsynchronously executes query.\r\nReturns undefined. \r\n\r\n* * *\r\n    function addFBevent(name);\r\n* `name` - string, Firebird Event Name.\r\n\r\nRegisters connection to listen for firebird event `name`, called from PL\\SQL (in stored procedures or triggers) with post_event '`name`'.\r\nYou may set callback for event with `connection.on('fbevent', function(name, count){ <your code>));`. \r\nWhere name is event name, and count is number of times event were posted.\r\n    \r\n* * *\r\n    function deleteFBevent(name);\r\n* `name` - string, Firebird Event Name.\r\n\r\nUnsubscribes connection from getting events for name.\r\n     \r\n* * *\r\n    function commitSync();\r\n    \r\nSynchronously commits current transaction. \r\n\r\nNotes:\r\nThere is only one transaction associated with connection. \r\nTransacation is automatically started before any query if connection does not have active transaction (check `inTransaction` property).\r\nYou also should note that DDL statements (altering database structure) are commited automatically.\r\nTo run quieries in context of other transaction use Transaction object.\r\n\r\n* * *\r\n    function commit(callback);\r\n* `callback` - function(err), where err is error object in case of error.    \r\n\r\nAsynchronous commit transaction.Read notes in `commitSync();`.\r\n\r\n* * *\r\n    function rollbackSync();\r\n    \r\nSynchronously rollbacks current transaction. Read notes in `commitSync();`.\r\n\r\n* * *\r\n    function rollback(callback);\r\n* `callback` - function(err), where err is error object in case of error.    \r\n    \r\nAsynchronously rollbacks current transaction. Read notes in `commitSync();`.\r\n\r\n* * *\r\n    function startSync();\r\n    \r\nSynchronously starts new default transaction. The default transaction should be not in started state before call to this method. Read notes in `commitSync();`.\r\n\r\n* * *\r\n    function start(callback);\r\n* `callback` - function(err), where err is error object in case of error.    \r\n    \r\nAsynchronously starts new default transaction.. Read notes in `commitSync();`.\r\n\r\n* * *\r\n    function prepareSync(sql);\r\n* `sql` - string, an SQL query to prepare.\r\n\r\nSynchronously prepares SQL statement and returns FBStatement object.\r\n    \r\n* * *\r\n    inTransaction;\r\n\r\nA boolean readonly property indicating if connection is in started transaction state.\r\n    \r\n* * *\r\n\r\n    function newBlobSync();\r\n\r\nCreates new FBblob object and opens it for write. After finishing write operation and closing blob\r\none may insert it in database passing as parameter to exec, execSync methods of FBStatement object.\r\n\r\n* * *    \r\n\r\n    function startNewTransactionSync();\r\n\r\nCreates new Transaction object and starts new transaction. Returns created object.\r\n\r\n* * *    \r\n\r\n    function startNewTransaction(callback);\r\n * `callback` - function(err, transaction), where err is error object in case of error, transaction - newly created transaction.\r\n\r\nCreates new Transaction object and starts new transaction. Returns created transaction object in callback.\r\n\r\n* * *    \r\n\r\n## Transaction object \r\n\r\nRepresents SQL transaction. To get instance of this object call `startNewTransactionSync` or `startNewTransaction` methods of Connection object. Transaction objects may be reused after commit or rollback.\r\n\r\n* * *\r\n    function querySync(sql);\r\n* `sql` - string, an SQL query to execute.\r\n\r\nExecutes SQL query in context of this transaction.\r\nReturns FBResult object in case of success. Raises error otherwise.\r\n\r\n* * *\r\n    function query(sql, callback);\r\n\r\n* `sql` - string, an SQL query to execute;\r\n* `callback` - function(err,res), err - is error object or null, res - FBResult object.\r\n\r\nAsynchronously executes query in context of this transaction.\r\nReturns undefined. \r\n\r\n* * *\r\n    function commitSync();\r\n    \r\nSynchronously commits this transaction. \r\n\r\nNotes:\r\nTransacation is automatically started before any  query in context of this object if this object does not have active transaction (check `inTransaction` property).\r\nYou also should note that DDL statements (altering database structure) are commited automatically.\r\n\r\n* * *\r\n    function commit(callback);\r\n* `callback` - function(err), where err is error object in case of error.    \r\n\r\nAsynchronous commit transaction.Read notes in `commitSync();`.\r\n\r\n* * *\r\n    function rollbackSync();\r\n    \r\nSynchronously rollbacks transaction. Read notes in `commitSync();`.\r\n\r\n* * *\r\n    function rollback(callback);\r\n* `callback` - function(err), where err is error object in case of error.    \r\n    \r\nAsynchronously rollbacks transaction. Read notes in `commitSync();`.\r\n\r\n* * *\r\n    function startSync();\r\n    \r\nSynchronously starts transaction. The transaction should be not in started state before call to this method. Read notes in `commitSync();`. See `inTransaction` property.\r\n\r\n* * *\r\n    function start(callback);\r\n* `callback` - function(err), where err is error object in case of error.    \r\n    \r\nAsynchronously starts new transaction. Read notes in `commitSync();`.\r\n\r\n* * *\r\n    function prepareSync(sql);\r\n* `sql` - string, an SQL query to prepare.\r\n\r\nSynchronously prepares SQL statement and returns FBStatement object in context of this transaction.\r\n    \r\n* * *\r\n    inTransaction;\r\n\r\nA boolean readonly property indicating if this transaction is in started state.\r\n    \r\n* * *\r\n## FBResult object\r\n\r\nRepresents results of SQL query if any. You should use this object to fetch rows from database.\r\nEach row may be represented as array of field values or as object with named fields.\r\n\r\n### Data types\r\nHere is Firebird to Node data type accordance:\r\n\r\nFirebird\t\tNode  \r\nDATE\t->\tDate  \r\nTIME\t->\tDate  \r\nTIMESTAMP\t->\tDate  \r\nCHAR\t->\tString  \r\nVARCHAR\t->\tString  \r\nSMALLINT\t->\tInteger  \r\nINTEGER\t->\tInteger  \r\nNUMERIC\t->\tNumber  \r\nDECIMAL\t->\tNumber  \r\nFLOAT\t->\tNumber  \r\nDOUBLE\t->\tNumber  \r\nBLOB\t->\tFBblob  \r\n  \r\n      \r\n### FBResult object members\r\n\r\n* * *\r\n    function fetchSync(rowCount, asObject);\r\n    \r\n* `rowCount` - integer|\"all\", number of rows to fetch from results;\r\n* `asObject` - true|false, format of returned rows. When false - methods returns array of array, when true - array of objects.\r\n\r\nSynchronously fetches result rows. If you pass \"all\" as rowCount - it will fetch all result rows. \r\nIf you pass less rowCount than are actually in result, it will return specified number of rows. \r\nYou may call fetchSync multiple times until all rows will be fetched. \r\nIf you specify more rowCount than available it will return only actual number of rows.\r\n\r\n* * *\r\n    function fetch(rowCount, asObject, rowCallback, eofCallback);\r\n    \r\n* `rowCount` - integer|\"all\", number of rows to fetch from results;\r\n* `asObject` - true|false, format of returned rows. When false - methods returns array of array, when true - array of objects;\r\n* `rowCallback` - function(row), row - Array or Object (depends on asObject parameter) representing single row from result;\r\n* `eofCallback` - function(err,eof), err - Error object in case of error, or null; eof - true | false.\r\n\r\nAsynchronously fetches rows one by one. \r\nrowCallback is called for each fetched row. \r\neofCallback is called when whole operation is complete. eof indicates if end of result set was met.\r\n\r\n* * *\r\n## FBStatement object\r\n\r\nRepresents prepared SQL query (returned by `Connection.prepare()` and `Connection.prepareSync()`). \r\nFBStatement is derived form FBResult class. So it can fetch rows just like FBresult object after call to execSync, exec methods.\r\n    \r\n### FBStatement object members\r\n\r\n* * *\r\n    function execSync(param1, param2, ..., paramN);\r\n* `param1, param2, ..., paramN` - parameters of prepared statement in the same order as in SQL and with appropriate types.\r\n\r\nSynchronously executes prepared statement with given parameters. You may fetch rows with methods inherited from FBResult.\r\nStatement is executed in context of default connection transaction.\r\n\r\n* * *\r\n    function execInTransSync(transaction, param1, param2, ..., paramN);\r\n\r\nSame as `execSync` but executes statement in context of given Transaction obejct.\r\n\r\n* * *\r\n    function exec(param1, param2, ..., paramN);\r\n* `param1, param2, ..., paramN` - parameters of prepared statement in the same order as in SQL and with appropriate types.\r\n\r\nAsynchronously executes prepared statement with given parameters. FBStatement emits 'result' or 'error' event. \r\nYou may fetch rows with methods inherited from FBResult after 'result' event emitted.\r\nStatement is executed in context of default connection transaction.\r\n\r\n* * *\r\n    function execInTrans(transaction, param1, param2, ..., paramN);\r\n\r\nSame as `exec` but executes statement in context of given Transaction obejct.\r\n\r\n* * *\r\n\r\n## FBblob object\r\n\r\nRepresents BLOB data type.\r\n\r\n### FBblob object members\r\n\r\n* * *\r\n    function _openSync();\r\n    \r\nSynchronously opens blob for reading.\r\n\r\n* * *\r\n    function _closeSync();\r\n    \r\nSynchronously closes previously opened blob.\r\n\r\n* * *\r\n    function _readSync(buffer);\r\n\r\n* `buffer` - Node buffer to fill with data.\r\n\r\nSynchronously reads BLOB segment (chunk) into buffer. Tries to fill whole buffer with data. \r\nReturns actual number of bytes read. \r\n\r\n* * *\r\n    function _read(buffer, callback);\r\n\r\n* `buffer` - Node buffer to fill with data.\r\n* `callback` - function(err,buffer,len), err - Error object in case of error, or null;buffer - buffer filled with data; len - actual data length.\r\n\r\nAsynchronously reads BLOB segment (chunk) into buffer. Tries to fill whole buffer with data. \r\n\r\n* * *\r\n    function _readAll([[initialSize], [[chunkSize], [callback]]]);\r\n\r\n* `initialSize` - optional, initial result buffer to allocate, default = 0;\r\n* `chunkSize` - optional, size of chunk used to read data, default = 1024;\r\n* `callback` - optional, function (err, buffer, len), err - Error object in case of error, or null;buffer - buffer filled with data; len - actual data length. \r\n\r\nAsynchronously reads all data from BLOB field. Object emits events while reading data `error`, `drain', `end`.\r\n\r\n* * *\r\n    function _writeSync(buffer,[len]);\r\n\r\n* `buffer` - Node buffer to write from to blob;\r\n* `len` - optional length parameter, if specified only len bytes from buffer will be writen.\r\n\r\nSynchronously writes BLOB segment (chunk) from buffer.\r\nReturns number of bytes actually writen.\r\n\r\n* * *\r\n    function _write(buffer,[len],[callback]);\r\n\r\n* `buffer` - Node buffer to write from to blob;\r\n* `len` - optional length parameter, if specified only len bytes from buffer will be writen.\r\n* `callback` - function(err), err - Error object in case of error, or null;\r\n\r\nAsynchronously writes BLOB segment (chunk) from buffer and calls callback function if any.\r\n\r\n* * *\r\n\r\n## Stream object\r\n\r\nRepresents BLOB stream. Create BLOB stream using `var strm = new fb.Stream(FBblob);`. \r\nYou may pipe strm to/from NodeJS Stream objects (fs or socket). \r\nYou may also look at [NodeJS Streams reference](http://nodejs.org/api/stream.html).\r\n\r\n\r\n[license-image]: http://img.shields.io/badge/license-MIT-blue.svg?style=flat\r\n[license-url]: LICENSE\r\n\r\n[npm-url]: https://npmjs.org/package/firebird\r\n[npm-version-image]: http://img.shields.io/npm/v/firebird.svg?style=flat\r\n[npm-downloads-image]: http://img.shields.io/npm/dm/firebird.svg?style=flat\r\n\r\n\r\n\r\n","created":"2017-07-27T13:59:11.313Z","modified":"2017-07-27T13:59:11.313Z","lastPublisher":{"name":"spirale-technologies","email":"jonneve@gmail.com"},"owners":[{"name":"spirale-technologies","email":"jonneve@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"firebird-cc","_nodeVersion":"6.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/firebird-cc-0.2.0.tgz_1501163949443_0.40957080223597586"},"_npmUser":{"name":"spirale-technologies","email":"jonneve@gmail.com"},"_npmVersion":"3.10.10","_rev":"1-275cd3c0fe460c2db4e697fdbc1cb220","_shasum":"1615dfa0a958198426d1a27befdc12d0098273e8","author":{"name":"Denys Khanzhiyev"},"bugs":{"url":"https://github.com/spirale-tech/node-firebird-libfbclient/issues"},"directories":{},"dist-tags":{"latest":"0.2.0"},"dist":{"shasum":"1615dfa0a958198426d1a27befdc12d0098273e8","tarball":"https://registry.npmjs.org/firebird-cc/-/firebird-cc-0.2.0.tgz"},"maintainers":[{"name":"spirale-technologies","email":"jonneve@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-07-27T13:59:11.313Z","created":"2017-07-27T13:59:11.313Z","0.2.0":"2017-07-27T13:59:11.313Z"}}}