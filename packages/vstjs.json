{"dependencies":{"boost-lib":"^0.11.3","cmake-js":"3.4.1","nan":"2.5.1","underscore":"^1.8.3"},"devDependencies":{"eslint":"^3.14.1","eslint-config-airbnb-base":"^11.0.1","eslint-plugin-import":"^2.2.0","speaker":"^0.3.0","wav":"^1.0.1","web-audio-api":"^0.2.2"},"license":"ISC","main":"index.js","name":"vstjs","scripts":{"install":"cmake-js compile"},"version":"0.0.4","gitHead":"780e2aaa562edb18f863bd84eb7b03d4db62dcf8","description":"<p align=\"center\">   <img width=\"200\" src=\"https://raw.githubusercontent.com/ramirezd42/vst-js/master/logo.png\"> </p>","versions":[{"number":"0.0.0","date":"2017-07-23T17:17:03.442Z"},{"number":"0.0.1","date":"2017-07-23T17:23:01.647Z"},{"number":"0.0.2","date":"2017-07-23T17:31:55.331Z"},{"number":"0.0.3","date":"2017-07-23T18:11:48.990Z"},{"number":"0.0.4","date":"2017-07-23T19:14:34.929Z"}],"readme":"<p align=\"center\">\n  <img width=\"200\" src=\"https://raw.githubusercontent.com/ramirezd42/vst-js/master/logo.png\">\n</p>\n\n## What Is It?\n**vst.js** is a native NodeJS addon that can be used to launch VST3 plugins (including GUI interface) in a separate process.\n \n\n## WARNING:\nThis library is in an extremely experimental state. Large portions of functionally have yet to be implemented and it is currently only buildable for OSX devices, although since everything is built with crossplatform libraries, building for other operating systems shouldn't be too difficult.\n\nAdditionally, I'm learning C++ by developing this project. If you have any criticisms on my approach or code quality I'd love to hear them.\n\n---\n\n## Installation\n\n### Install CMake\nvst.js uses CMake as its build system and requires it be present on your system before installing. On a Mac the easiest way to install CMake is via homebrew:\n```\n> brew install cmake\n```\n\n### Install Boost 3.6+\nvst.js makes use of the popular [Boost C++ Framework](http://boost.org). It expects that version 3.6 or higher is available on your system prior to installation. The easiset way to install the Boost framework on a Mac is via homebrew:\n```\n> brew install boost\n```\n\n### Acquire the Steinberg VST3 SDK (3.6.7+)\nDue to licensing concerns I am currently not bundling the VST3 SDK along with this project. You will need to download the SDK from [Steinbergs's Website](http://www.steinberg.net/en/company/developers.html) and place it at `~/SDKs/VST3` \n\nYou can also specify the installed location of the VST3 SDK by setting a the `VST3_SDK_PATH` environment variable prior to installation\n\n### NPM Install\nOnce all the above dependencies have been satisfied you can install via npm:\n\n```\n> npm install vstjs\n```\n---\n## Usage Examples\nThe example below will play back an audio file via [node-web-audio-api](https://github.com/sebpiq/node-web-audio-api), and manipulate the audio via a VST3 plugin\n\n```javascript\nconst { AudioContext } = require('web-audio-api')\nconst Speaker = require('speaker')\nconst fs = require('fs')\nconst path = require('path')\nconst vstjs = require('vstjs')\n\nconst bufferSize = 512\nconst numChannels = 2\nconst pluginPath = process.argv[2]\nconst filePath = process.argv[3]\n\nconst pluginHost = vstjs.launchPlugin(pluginPath)\npluginHost.start()\n\n// setup webaudio stuff\nconst audioContext = new AudioContext()\nconst sourceNode = audioContext.createBufferSource()\nconst scriptNode = audioContext.createScriptProcessor(bufferSize, numChannels, numChannels)\n\n\naudioContext.outStream = new Speaker({\n  channels: audioContext.format.numberOfChannels,\n  bitDepth: audioContext.format.bitDepth,\n  sampleRate: audioContext.sampleRate,\n})\n\nsourceNode.connect(scriptNode)\nscriptNode.connect(audioContext.destination)\n\n\nscriptNode.onaudioprocess = function onaudioprocess(audioProcessingEvent) {\n  const inputBuffer = audioProcessingEvent.inputBuffer\n  const channels = [...Array(numChannels).keys()]\n    .map(i => audioProcessingEvent.inputBuffer.getChannelData(i))\n\n  // process audio block via pluginHost\n  pluginHost.processAudioBlock(numChannels, bufferSize, channels)\n  audioProcessingEvent.outputBuffer = inputBuffer\n}\n\nfs.readFile(filePath, (err, fileBuf) => {\n  console.log('reading file..')\n  if (err) throw err\n  audioContext.decodeAudioData(fileBuf, (audioBuffer) => {\n    sourceNode.buffer = audioBuffer\n    sourceNode.start(0)\n  }, (e) => { throw e })\n})\n```\n","created":"2017-07-23T17:17:03.442Z","modified":"2017-07-23T19:14:34.929Z","lastPublisher":{"name":"daveramirez","email":"ramirezd42@gmail.com"},"owners":[{"name":"daveramirez","email":"ramirezd42@gmail.com"}],"other":{"_attachments":{},"_id":"vstjs","_nodeVersion":"8.0.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vstjs-0.0.4.tgz_1500837272826_0.6040277651045471"},"_npmUser":{"name":"daveramirez","email":"ramirezd42@gmail.com"},"_npmVersion":"5.0.0","_rev":"5-839562bb0a3c5a916249cab678e38052","author":{"name":"Dave Ramirez","email":"ramirezd42@gmail.com"},"directories":{},"dist-tags":{"latest":"0.0.4"},"dist":{"integrity":"sha512-BVrr6QgD10WbRx9+bF9yzJp1FNOZdv0UpblVYmZXsa+dvwrlAS0BpHCI/8H1OeWtJBhh2UJIQCRw87DaTT1lOg==","shasum":"8871e0db1518750364477775407a527ae6171988","tarball":"https://registry.npmjs.org/vstjs/-/vstjs-0.0.4.tgz"},"maintainers":[{"name":"daveramirez","email":"ramirezd42@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2017-07-23T19:14:34.929Z","created":"2017-07-23T17:17:03.442Z","0.0.0":"2017-07-23T17:17:03.442Z","0.0.1":"2017-07-23T17:23:01.647Z","0.0.2":"2017-07-23T17:31:55.331Z","0.0.3":"2017-07-23T18:11:48.990Z","0.0.4":"2017-07-23T19:14:34.929Z"}}}