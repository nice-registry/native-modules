{"name":"@pokusew/buffertools","main":"buffertools","version":"2.1.11","keywords":["buffer","buffers"],"description":"Working with node.js buffers made easy.","homepage":"https://github.com/pokusew/node-buffertools","repository":"https://github.com/pokusew/node-buffertools","scripts":{"prepublish":"npm ls","preinstall":"npm install node-pre-gyp","install":"node-pre-gyp install --fallback-to-build","test":"mocha"},"bin":{"node-pre-gyp":"./node_modules/.bin/node-pre-gyp"},"binary":{"module_name":"buffertools","module_path":"./lib/binding/{configuration}/{node_abi}-{platform}-{arch}/","remote_path":"./node-{module_name}/releases/download/v{version}/","package_name":"{module_name}-v{version}-{node_abi}-{platform}-{arch}.tar.gz","host":"https://github.com/pokusew"},"dependencies":{"nan":"2.x","node-pre-gyp":"0.6.x"},"devDependencies":{"aws-sdk":"2.x"},"gitHead":"a472dae16fa9ad3263c43f26c8be41e1f1c3102d","versions":[{"number":"2.1.6","date":"2016-05-20T16:54:15.165Z"},{"number":"2.1.7","date":"2016-05-20T16:57:38.616Z"},{"number":"2.1.8","date":"2016-05-20T18:53:38.191Z"},{"number":"2.1.10","date":"2016-05-20T19:05:59.902Z"},{"number":"2.1.11","date":"2016-05-20T19:20:23.649Z"}],"readme":"# node-buffertools\n\nUtilities for manipulating buffers.\n\n## Installing the module\n\nEasy! With [npm](http://npmjs.org/):\n\n\tnpm install buffertools\n\nFrom source:\n\n\tnode-gyp configure\n\tnode-gyp build\n\nNow you can include the module in your project.\n\n\trequire('buffertools').extend();  // extend Buffer.prototype\n\tvar buf = new Buffer(42);         // create a 42 byte buffer\n\tbuf.clear();                      // clear it!\n\nIf you don't want to extend the Buffer class's prototype (recommended):\n\n\tvar buffertools = require('buffertools');\n\tvar buf = new Buffer(42);\n\tbuffertools.clear(buf);\n\n## Methods\n\nNote that most methods that take a buffer as an argument, will also accept a string.\n\n### buffertools.extend([object], [object...])\n\nExtend the arguments with the buffertools methods.  If called without arguments,\ndefaults to `[Buffer.prototype, SlowBuffer.prototype]`.  Extending prototypes\nonly makes sense for classes that derive from `Buffer`.\n\nbuffertools v1.x extended the `Buffer` prototype by default.  In v2.x, it is\nopt-in.  The reason for that is that buffertools was originally developed for\nnode.js v0.3 (or maybe v0.2, I don't remember exactly when buffers were added)\nwhere the `Buffer` class was devoid of any useful methods.  Over the years, it\nhas grown a number of utility methods, some of which conflict with the\nbuffertools methods of the same name, like `Buffer#fill()`.\n\n### Buffer#clear()\n### buffertools.clear(buffer)\n\nClear the buffer. This is equivalent to `Buffer#fill(0)`.\nReturns the buffer object so you can chain method calls.\n\n### Buffer#compare(buffer|string)\n### buffertools.compare(buffer, buffer|string)\n\nLexicographically compare two buffers. Returns a number less than zero\nif a < b, zero if a == b or greater than zero if a > b.\n\nBuffers are considered equal when they are of the same length and contain\nthe same binary data.\n\nSmaller buffers are considered to be less than larger ones. Some buffers\nfind this hurtful.\n\n### Buffer#concat(a, b, c, ...)\n### buffertools.concat(a, b, c, ...)\n\nConcatenate two or more buffers/strings and return the result. Example:\n\n\t// identical to new Buffer('foobarbaz')\n\ta = new Buffer('foo');\n\tb = new Buffer('bar');\n\tc = a.concat(b, 'baz');\n\tconsole.log(a, b, c); // \"foo bar foobarbaz\"\n\n\t// static variant\n\tbuffertools.concat('foo', new Buffer('bar'), 'baz');\n\n### Buffer#equals(buffer|string)\n### buffertools.equals(buffer, buffer|string)\n\nReturns true if this buffer equals the argument, false otherwise.\n\nBuffers are considered equal when they are of the same length and contain\nthe same binary data.\n\nCaveat emptor: If your buffers contain strings with different character encodings,\nthey will most likely *not* be equal.\n\n### Buffer#fill(integer|string|buffer)\n### buffertools.fill(buffer, integer|string|buffer)\n\nFill the buffer (repeatedly if necessary) with the argument.\nReturns the buffer object so you can chain method calls.\n\n### Buffer#fromHex()\n### buffertools.fromHex(buffer)\n\nAssumes this buffer contains hexadecimal data (packed, no whitespace)\nand decodes it into binary data. Returns a new buffer with the decoded\ncontent. Throws an exception if non-hexadecimal data is encountered.\n\n### Buffer#indexOf(buffer|string, [start=0])\n### buffertools.indexOf(buffer, buffer|string, [start=0])\n\nSearch this buffer for the first occurrence of the argument, starting at\noffset `start`. Returns the zero-based index or -1 if there is no match.\n\n### Buffer#reverse()\n### buffertools.reverse(buffer)\n\nReverse the content of the buffer in place. Example:\n\n\tb = new Buffer('live');\n\tb.reverse();\n\tconsole.log(b); // \"evil\"\n\n### Buffer#toHex()\n### buffertools.toHex(buffer)\n\nReturns the contents of this buffer encoded as a hexadecimal string.\n\n## Classes\n\nSingular, actually. To wit:\n\n## WritableBufferStream\n\nThis is a regular node.js [writable stream](http://nodejs.org/docs/v0.3.4/api/streams.html#writable_Stream)\nthat accumulates the data it receives into a buffer.\n\nExample usage:\n\n\t// slurp stdin into a buffer\n\tprocess.stdin.resume();\n\tostream = new WritableBufferStream();\n\tutil.pump(process.stdin, ostream);\n\tconsole.log(ostream.getBuffer());\n\nThe stream never emits 'error' or 'drain' events.\n\n### WritableBufferStream.getBuffer()\n\nReturn the data accumulated so far as a buffer.\n\n## TODO\n\n* Logical operations on buffers (AND, OR, XOR).\n* Add lastIndexOf() functions.\n\n## License\n\nCopyright (c) 2010, Ben Noordhuis <info@bnoordhuis.nl>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n","created":"2016-05-20T16:54:15.165Z","modified":"2016-05-20T19:20:23.649Z","lastPublisher":{"name":"pokusew","email":"pokusew@seznam.cz"},"owners":[{"name":"pokusew","email":"pokusew@seznam.cz"}],"other":{"_attachments":{},"_from":".","_id":"@pokusew/buffertools","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/buffertools-2.1.11.tgz_1463772022661_0.7380987431388348"},"_npmUser":{"name":"pokusew","email":"pokusew@seznam.cz"},"_npmVersion":"3.3.12","_rev":"1-aeb5da15d06697516648ea8f6e4de89a","_shasum":"ef7a8a2f6aa3619142b31529d0ffab1d728a0f9e","author":{"name":"Ben Noordhuis","email":"info@bnoordhuis.nl","url":"http://bnoordhuis.nl/"},"bugs":{"url":"https://github.com/pokusew/node-buffertools/issues"},"contributors":[{"name":"Ben Noordhuis","email":"info@bnoordhuis.nl"},{"name":"Stefan Thomas","email":"justmoon@members.fsf.org"},{"name":"Nathan Rajlich","email":"nathan@tootallnate.net"},{"name":"Dane Springmeyer","email":"dane@dbsgeo.com"},{"name":"Barret Schloerke","email":"schloerke@gmail.com"}],"directories":{},"dist-tags":{"latest":"2.1.11"},"dist":{"shasum":"ef7a8a2f6aa3619142b31529d0ffab1d728a0f9e","tarball":"http://registry.npmjs.org/@pokusew/buffertools/-/buffertools-2.1.11.tgz"},"maintainers":[{"name":"pokusew","email":"pokusew@seznam.cz"}],"readmeFilename":"README.md","time":{"modified":"2016-05-20T19:20:23.649Z","created":"2016-05-20T16:54:15.165Z","2.1.6":"2016-05-20T16:54:15.165Z","2.1.7":"2016-05-20T16:57:38.616Z","2.1.8":"2016-05-20T18:53:38.191Z","2.1.10":"2016-05-20T19:05:59.902Z","2.1.11":"2016-05-20T19:20:23.649Z"}}}