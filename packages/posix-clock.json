{"name":"posix-clock","version":"1.0.0","description":"POSIX clock_gettime(), clock_getres() and clock_nanosleep() for NodeJS","keywords":["posix","clock","clock_gettime","clock_getres","clock_nanosleep","monotonic","time","nanosleep"],"homepage":"https://github.com/avz/node-posix-clock","repository":"https://github.com/avz/node-posix-clock","license":"BSD","main":"./main.js","engines":{"node":">=0.10"},"os":["linux","freebsd","darwin"],"dependencies":{"nan":"^2.5.1"},"devDependencies":{"nodeunit":">=0.8"},"scripts":{"test":"./node_modules/nodeunit/bin/nodeunit tests","install":"node-gyp rebuild"},"gypfile":true,"gitHead":"667ebda99de41bc572ec97195b8c7f11842f9ccf","versions":[{"number":"0.0.1","date":"2014-01-18T12:24:08.603Z"},{"number":"0.0.2","date":"2014-01-18T13:13:18.648Z"},{"number":"0.2.1","date":"2014-01-23T18:07:09.575Z"},{"number":"0.2.2","date":"2014-01-24T19:28:41.512Z"},{"number":"1.0.0","date":"2017-01-30T08:44:43.409Z"}],"readme":"# POSIX `clock_*()` for NodeJS [![Build Status](https://secure.travis-ci.org/avz/node-posix-clock.png?branch=master)](http://travis-ci.org/avz/node-posix-clock)\n\n## Installation\n```\nnpm install posix-clock\n```\n\n## Examples\n### clock_getres()\n```javascript\nvar clock = require('posix-clock');\n\nvar clockResolution = clock.getres(clock.MONOTONIC);\nconsole.log(\n\t'Resolution of CLOCK_MONOTONIC: '\n\t\t+ clockResolution.sec + ' sec and '\n\t\t+ clockResolution.nsec + ' nanosec.'\n\t, clockResolution\n);\n```\n\n```\nResolution of CLOCK_MONOTONIC: 0 sec and 1 nanosec. { sec: 0, nsec: 1 }\n```\n\n### clock_gettime()\n```javascript\nvar clock = require('posix-clock');\n\nvar clockTime = clock.gettime(clock.MONOTONIC);\nconsole.log(\n\t'Time from CLOCK_MONOTONIC: '\n\t\t+ clockTime.sec + ' sec and '\n\t\t+ clockTime.nsec + ' nanosec.'\n\t, clockTime\n);\n```\n\n```\nTime from CLOCK_MONOTONIC: 15224 sec and 557776233 nanosec. { sec: 15224, nsec: 557776233 }\n```\n\n### clock_nanosleep()\n```javascript\nvar clock = require('posix-clock');\n\n// sleep until 13 Feb 2009 23:31:30 UTC (Unix Timestamp = 1234567890)\nclock.nanosleep(\n\tclock.REALTIME,\n\tclock.TIMER_ABSTIME,\n\t{\n\t\tsec: 1234567890,\n\t\tnsec: 0\n\t}\n);\n\n// sleep at least 10 seconds and 123 nanoseconds\nclock.nanosleep(\n\tclock.REALTIME,\n\t0,\n\t{\n\t\tsec: 10,\n\t\tnsec: 123\n\t}\n);\n```\n\n## API\n\n### Methods\n\n * `gettime(clockId)` - the function retrieve the time from the specified clock clockId.\nSee [man 2 clock_gettime](http://man7.org/linux/man-pages/man2/clock_gettime.2.html) for more details.\n * `getres(clockId)` - the function return the resolution (precision) of the\nspecified clock clockId. The resolution of clocks depends on the implementation and cannot be\nconfigured by a particular process.\nSee [man 2 clock_getres](http://man7.org/linux/man-pages/man2/clock_getres.2.html) for more details.\n * `nanosleep(clockId, flags, sleepTime)` - high resolution sleep with specifiable clock.\nIf the flag `TIMER_ABSTIME` is not set in the `flags` argument, the `nanosleep()`\nfunction shall cause the current thread to be suspended from execution until\neither the time interval specified by the `sleepTime` argument has elapsed,\nor a signal is delivered to the calling thread and its action is to invoke a\nsignal-catching function, or the process is terminated.\nThe clock used to measure the time shall be the clock specified by clockId.\nSee [man 2 clock_nanosleep](http://man7.org/linux/man-pages/man2/clock_nanosleep.2.html) for more details.\n**On non-linux OS only `nanosleep(REALTIME, 0, {...})` is supported**.\n\n### Clocks\n\n * `REALTIME` - system-wide clock that measures real (i.e., wall-clock) time.\nThis clock is affected by discontinuous jumps in\nthe system time (e.g., if the system administrator\nmanually changes the clock), and by the incremental adjustments\nperformed by adjtime(3) and NTP.\n\n * `MONOTONIC` - clock that cannot be set and represents monotonic time since some\nunspecified starting point. This clock is not affected by discontinuous\njumps in the system time (e.g., if the system administrator\nmanually changes the clock), but is affected by the incremental adjustments\nperformed by adjtime(3) and NTP.\n\n#### Linux-specific\n\n * `PROCESS_CPUTIME_ID` - *since Linux 2.6.12*.\nHigh-resolution per-process timer from the CPU.\n\n * `THREAD_CPUTIME_ID` - *since Linux 2.6.12*.\nThread-specific CPU-time clock.\n\n * `REALTIME_COARSE` - *since Linux 2.6.32; Linux-specific*.\nA faster but less precise version of `REALTIME`.\nUse when you need very fast, but not fine-grained timestamps.\n\n * `MONOTONIC_COARSE` - *since Linux 2.6.32; Linux-specific*.\nA faster but less precise version of `MONOTONIC`.\nUse when you need very fast, but not fine-grained timestamps.\n\n * `MONOTONIC_RAW` - *since Linux 2.6.28; Linux-specific*.\nSimilar to `MONOTONIC`, but provides access to a raw hardware-based time\nthat is not subject to NTP adjustments or the incremental adjustments\nperformed by adjtime(3).\n\n * `BOOTTIME` - *since Linux 2.6.39; Linux-specific*\nIdentical to `MONOTONIC`, except it also includes\nany time that the system is suspended.  This allows applications to get\na suspend-aware monotonic clock without having to deal with\nthe complications of `REALTIME`, which may have discontinuities\nif the time is changed using settimeofday(2).\n\n#### FreeBSD-specific\n\n * `REALTIME_FAST` - analog of `REALTIME` but do not perform a full time\ncounter query, so their accuracy is one timer tick\n * `REALTIME_PRECISE` - analog of `REALTIME` but get the most exact value\nas possible, at the expense of execution time\n * `MONOTONIC_FAST` - analog of `MONOTONIC` but do not perform a full time\ncounter query, so their accuracy is one timer tick\n * `MONOTONIC_PRECISE` - analog of `MONOTONIC` but get the most exact value\nas possible, at the expense of execution time\n * `UPTIME` - which starts at zero when the kernel boots and increments\nmonotonically in SI seconds while the machine is running\n * `UPTIME_FAST` - analog of `UPTIME` but do not perform a full time\ncounter query, so their accuracy is one timer tick\n * `UPTIME_PRECISE` - analog of `UPTIME` but get the most exact value\nas possible, at the expense of execution time\n * `SECOND` - returns the current second without performing a full\ntime counter query, using in-kernel cached value of current second.\n * `PROF` - for time that increments when the CPU is running in user or kernel mode\n","created":"2014-01-18T12:24:08.603Z","modified":"2017-01-30T08:44:43.409Z","lastPublisher":{"name":"avz","email":"avz@nologin.ru"},"owners":[{"name":"avz","email":"arepo@nologin.ru"}],"other":{"_attachments":{},"_from":".","_id":"posix-clock","_nodeVersion":"7.4.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/posix-clock-1.0.0.tgz_1485765882782_0.06721327872946858"},"_npmUser":{"name":"avz","email":"avz@nologin.ru"},"_npmVersion":"4.0.5","_rev":"2-00a1ad04ab3dd05d6db6dbe9a7681b54","_shasum":"eac3714f450880b99a046ee4d1577eec01855b72","author":{"name":"Artem Zaytsev","email":"arepo@nologin.ru"},"bugs":{"url":"https://github.com/avz/node-posix-clock/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"eac3714f450880b99a046ee4d1577eec01855b72","tarball":"https://registry.npmjs.org/posix-clock/-/posix-clock-1.0.0.tgz"},"maintainers":[{"name":"avz","email":"arepo@nologin.ru"}],"readmeFilename":"README.md","time":{"modified":"2017-01-30T08:44:43.409Z","created":"2014-01-18T12:24:08.603Z","0.0.1":"2014-01-18T12:24:08.603Z","0.0.2":"2014-01-18T13:13:18.648Z","0.2.1":"2014-01-23T18:07:09.575Z","0.2.2":"2014-01-24T19:28:41.512Z","1.0.0":"2017-01-30T08:44:43.409Z"}}}