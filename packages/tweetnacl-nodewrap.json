{"name":"tweetnacl-nodewrap","version":"0.1.9","description":"Nodejs wraper for TweetNaCl cryptographic library","main":"src/js/nacl.js","repository":"https://github.com/bitmark-inc/tweetnacl-nodewrap","keywords":["crypto","cryptography","curve25519","ed25519","encrypt","hash","key","nacl","poly1305","public","salsa20","signatures"],"license":"Public domain","engines":{"node":">=0.12.0"},"dependencies":{"bindings":"~1.2.0","debug":"2","ffi":"^2.1.0","nan":"2","ref":"1","ref-struct":"1"},"devDependencies":{"mocha":"*","tape":"^4.0.0"},"browser":{"buffer":false,"crypto":false},"scripts":{"install":"node scripts/install_dependencies.js"},"gitHead":"c5128526bad875af877b9af5643e9cd249cf5a46","homepage":"https://github.com/bitmark-inc/tweetnacl-nodewrap#readme","versions":[{"number":"0.1.0","date":"2015-09-08T09:14:33.628Z"},{"number":"0.1.1","date":"2015-09-09T07:47:50.269Z"},{"number":"0.1.2","date":"2015-09-14T10:12:38.629Z"},{"number":"0.1.3","date":"2015-09-17T02:34:42.151Z"},{"number":"0.1.4","date":"2015-10-29T07:00:37.781Z"},{"number":"0.1.5","date":"2015-11-03T09:20:18.491Z"},{"number":"0.1.6","date":"2015-11-16T05:04:57.315Z"},{"number":"0.1.7","date":"2015-11-23T03:19:08.360Z"},{"number":"0.1.8","date":"2016-10-06T04:34:24.482Z"},{"number":"0.1.9","date":"2016-10-27T04:36:25.528Z"}],"readme":"TweetNaCl-nodewraper.js\n============\n\nPort of [TweetNaCl](http://tweetnacl.cr.yp.to) / [NaCl](http://nacl.cr.yp.to/)\nto javascript Node.js.\n\nDocumentation\n=============\n\n* [Overview](#overview)\n* [Installation](#installation)\n* [Usage](#usage)\n  * [Public-key authenticated encryption (box)](#public-key-authenticated-encryption-box)\n  * [Secret-key authenticated encryption (secretbox)](#secret-key-authenticated-encryption-secretbox)\n  * [Scalar multiplication](#scalar-multiplication)\n  * [Signatures](#signatures)\n  * [Hashing](#hashing)\n  * [Random bytes generation](#random-bytes-generation)\n  * [Constant-time comparison](#constant-time-comparison)\n  * [Utilities](#utilities)\n* [Examples](#examples)\n* [System requirements](#system-requirements)\n* [Development and testing](#development-and-testing)\n* [Contributors](#contributors)\n* [Who uses it](#who-uses-it)\n\n\nOverview\n--------\n\nThe primary goal of this project is to compile and wrap all of function of TweetNaCl to into the Node.js library with node-ffi and node-ref.Plus\na thin layer of idiomatic high-level API on top of it.\n\nThere are two main classes, you can use both of it:\n\n* `tweetnacl_wrapper.js` is wraper class of TweetNaCl.\n* `nacl.js` the original + high-level API.\n\n\nSystem requirements\n-------------------\n\nTweetnacl-nodewrap.js supports for all of devices:\n\nOther systems:\n\n* [Node.js](https://nodejs.org/en/) (we test on 0.10 and later)\n* g++: Install g++ to compile C++ code\n* [node-gyp](https://github.com/nodejs/node-gyp): native addon build tool\n\nInstallation\n------------\n\nYou can install tweetnacl_wrapper.is via a package manager:\n\n[NPM](https://www.npmjs.org/):\n\n    $ npm install tweetnacl-nodewrap\n\nor [download source code](https://github.com/bitmark-inc/tweetnacl-nodewrap).\n\n* NOTE: When you want to use with node-webkit version, please follow these steps bellow\n\n\t* Install [nw-gyp](https://github.com/nwjs/nw.js): native addon build tool for node-webkit.\n\t* Rebuild `node-ref` with `nw-gyp`\n\n\t\t```\n\t\t$ cd node_modules/ref\n\t\t$ nw-gyp rebuild --target=xxx (xxx: your nw-gyp version)\n\t\t\n\t\t```\n\t* Rebuild `tweetnacl-nodewrap` with `nw-gyp`\n\t\n\t\t```\n\t\t$ cd <root folder of tweetnacl-nodewrap>\n\t\t$ nw-gyp rebuild --target=xxx (xxx: your nw-gyp version)\n\t\t```\n\n\nUsage\n------\n\nAll API functions accept and return Buffer as `base64`.  You can easy to decode by `nacl.util.encodeBase64(value)` or `toString('base64')`.\n\n### Public-key authenticated encryption (box)\n\nImplements *curve25519-xsalsa20-poly1305*.\n\n#### nacl.box.keyPair()\n\nGenerates a new random key pair for box and returns it as an object with\n`publicKey` and `secretKey` members:\n\n    {\n       publicKey: ...,  // Buffer with 32-byte public key\n       secretKey: ...   // Buffer with 32-byte secret key\n    }\n\n\n#### nacl.box.keyPair.fromSecretKey(secretKey)\n\nReturns a key pair for box with public key corresponding to the given secret\nkey.\n\n#### nacl.box(message, nonce, theirPublicKey, mySecretKey)\n\nEncrypt and authenticates message using peer's public key, our secret key, and\nthe given nonce, which must be unique for each distinct message for a key pair.\n\nReturns an encrypted and authenticated message, which is\n`nacl.box.overheadLength` longer than the original message.\n\n#### nacl.box.open(box, nonce, theirPublicKey, mySecretKey)\n\nAuthenticates and decrypts the given box with peer's public key, our secret\nkey, and the given nonce.\n\nReturns the original message, or `false` if authentication fails.\n\n#### nacl.box.before(theirPublicKey, mySecretKey)\n\nReturns a precomputed shared key which can be used in `nacl.box.after` and\n`nacl.box.open.after`.\n\n#### nacl.box.after(message, nonce, sharedKey)\n\nSame as `nacl.box`, but uses a shared key precomputed with `nacl.box.before`.\n\n#### nacl.box.open.after(box, nonce, sharedKey)\n\nSame as `nacl.box.open`, but uses a shared key precomputed with `nacl.box.before`.\n\n#### nacl.box.publicKeyLength = 32\n\nLength of public key in bytes.\n\n#### nacl.box.secretKeyLength = 32\n\nLength of secret key in bytes.\n\n#### nacl.box.sharedKeyLength = 32\n\nLength of precomputed shared key in bytes.\n\n#### nacl.box.nonceLength = 24\n\nLength of nonce in bytes.\n\n#### nacl.box.overheadLength = 16\n\nLength of overhead added to box compared to original message.\n\n\n### Secret-key authenticated encryption (secretbox)\n\nImplements *xsalsa20-poly1305*.\n\n#### nacl.secretbox(message, nonce, key)\n\nEncrypt and authenticates message using the key and the nonce. The nonce must\nbe unique for each distinct message for this key.\n\nReturns an encrypted and authenticated message, which is\n`nacl.secretbox.overheadLength` longer than the original message.\n\n#### nacl.secretbox.open(box, nonce, key)\n\nAuthenticates and decrypts the given secret box using the key and the nonce.\n\nReturns the original message, or `false` if authentication fails.\n\n#### nacl.secretbox.keyLength = 32\n\nLength of key in bytes.\n\n#### nacl.secretbox.nonceLength = 24\n\nLength of nonce in bytes.\n\n#### nacl.secretbox.overheadLength = 16\n\nLength of overhead added to secret box compared to original message.\n\n\n### Scalar multiplication\n\nImplements [e25519](http://ed25519.cr.yp.to).\n\n#### nacl.scalarMult(n, p)\n\nMultiplies an integer `n` by a group element `p` and returns the resulting\ngroup element.\n\n#### nacl.scalarMult.base(n)\n\nMultiplies an integer `n` by a standard group element and returns the resulting\ngroup element.\n\n#### nacl.scalarMult.scalarLength = 32\n\nLength of scalar in bytes.\n\n#### nacl.scalarMult.groupElementLength = 32\n\nLength of group element in bytes.\n\n\n### Signatures\n\nImplements [ed25519](http://ed25519.cr.yp.to).\n\n#### nacl.sign.keyPair()\n\nGenerates new random key pair for signing and returns it as an object with\n`publicKey` and `secretKey` members:\n\n    {\n       publicKey: ...,  // Buffer with 32-byte public key\n       secretKey: ...   // Buffer with 64-byte secret key\n    }\n\n#### nacl.sign.keyPair.fromSecretKey(secretKey)\n\nReturns a signing key pair with public key corresponding to the given\n64-byte secret key. The secret key must have been generated by\n`nacl.sign.keyPair` or `nacl.sign.keyPair.fromSeed`.\n\n#### nacl.sign.keyPair.fromSeed(seed)\n\nReturns a new signing key pair generated deterministically from a 32-byte seed.\nThe seed must contain enough entropy to be secure. This method is not\nrecommended for general use: instead, use `nacl.sign.keyPair` to generate a new\nkey pair from a random seed.\n\n#### nacl.sign(message, secretKey)\n\nSigns the message using the secret key and returns a signed message.\n\n#### nacl.sign.open(signedMessage, publicKey)\n\nVerifies the signed message and returns the message without signature.\n\nReturns `null` if verification failed.\n\n#### nacl.sign.detached(message, secretKey)\n\nSigns the message using the secret key and returns a signature.\n\n#### nacl.sign.detached.verify(message, signature, publicKey)\n\nVerifies the signature for the message and returns `true` if verification\nsucceeded or `false` if it failed.\n\n#### nacl.sign.publicKeyLength = 32\n\nLength of signing public key in bytes.\n\n#### nacl.sign.secretKeyLength = 64\n\nLength of signing secret key in bytes.\n\n#### nacl.sign.seedLength = 32\n\nLength of seed for `nacl.sign.keyPair.fromSeed` in bytes.\n\n#### nacl.sign.signatureLength = 64\n\nLength of signature in bytes.\n\n\n### Hashing\n\nImplements *SHA-512*.\n\n#### nacl.hash(message)\n\nReturns SHA-512 hash of the message.\n\n#### nacl.hash.hashLength = 64\n\nLength of hash in bytes.\n\n\n### Random bytes generation\n\n#### nacl.randomBytes(length)\nImplements *RAND_bytes openSSL*.\n\nReturns a Buffer of `base64` of the given length containing random bytes of\ncryptographic quality.\n\n**Implementation note**\n\nTweetnacl-nodewrap.js uses the RAND_bytes methods of [openSSL](https://www.openssl.org/docs/manmaster/crypto/RAND_bytes.html). \n\n### Constant-time comparison\n\n#### nacl.verify(x, y)\n\nCompares `x` and `y` in constant time and returns `true` if their lengths are\nnon-zero and equal, and their contents are equal.\n\nReturns `false` if either of the arguments has zero length, or arguments have\ndifferent lengths, or their contents differ.\n\n### Thanks\n\nSpecial thanks to @TooTallNate who is owner of node-ffi and node-ref, and also help us quickly resolve some issues.\n\n\n# License\n\nCopyright (c) 2014-2015 Bitmark Inc (support@bitmark.com).\n\nPermission to use, copy, modify, and distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","created":"2015-09-08T09:14:33.628Z","modified":"2016-10-27T04:36:25.528Z","lastPublisher":{"name":"bitmark-inc","email":"support@bitmark.com"},"owners":[{"name":"bitmark-inc","email":"support@bitmark.com"}],"other":{"_attachments":{},"_from":".","_id":"tweetnacl-nodewrap","_nodeVersion":"6.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/tweetnacl-nodewrap-0.1.9.tgz_1477542985267_0.09039159212261438"},"_npmUser":{"name":"bitmark-inc","email":"support@bitmark.com"},"_npmVersion":"3.10.3","_rev":"2-927d1827ce7dafd5e06685230d681459","_shasum":"00d3b10f04073294ae8aa35c97fc510c791e1b3e","author":{"name":"bitmark-inc"},"bugs":{"url":"https://github.com/bitmark-inc/tweetnacl-nodewrap/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.1.9"},"dist":{"shasum":"00d3b10f04073294ae8aa35c97fc510c791e1b3e","tarball":"http://registry.npmjs.org/tweetnacl-nodewrap/-/tweetnacl-nodewrap-0.1.9.tgz"},"maintainers":[{"name":"bitmark-inc","email":"support@bitmark.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-27T04:36:25.528Z","created":"2015-09-08T09:14:33.628Z","0.1.0":"2015-09-08T09:14:33.628Z","0.1.1":"2015-09-09T07:47:50.269Z","0.1.2":"2015-09-14T10:12:38.629Z","0.1.3":"2015-09-17T02:34:42.151Z","0.1.4":"2015-10-29T07:00:37.781Z","0.1.5":"2015-11-03T09:20:18.491Z","0.1.6":"2015-11-16T05:04:57.315Z","0.1.7":"2015-11-23T03:19:08.360Z","0.1.8":"2016-10-06T04:34:24.482Z","0.1.9":"2016-10-27T04:36:25.528Z"}}}