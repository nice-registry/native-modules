{"name":"cbind","version":"0.0.10","description":"Streamlined C/C++ v8 bindings generator for Node.JS inspired by tolua++ (requires C++11)","main":"index.js","scripts":{"test":"node-gyp build -d && mocha tests","install":"node-gyp rebuild"},"license":"MIT","dependencies":{"extend":"~1.2.1","fire-ts":"0.0.7","glob-expand":"0.0.2","nan":"1.1.2","nid-parser":"0.0.5","pegjs":"~0.8.0"},"devDependencies":{"chai":"^1.9.1","mocha":"^1.18.2"},"gypfile":true,"versions":[{"number":"0.0.3","date":"2014-05-13T11:23:36.793Z"},{"number":"0.0.4","date":"2014-05-13T12:11:49.673Z"},{"number":"0.0.5","date":"2014-05-13T21:02:09.698Z"},{"number":"0.0.8","date":"2014-05-15T10:44:33.439Z"},{"number":"0.0.9","date":"2014-05-29T21:11:16.700Z"},{"number":"0.0.10","date":"2014-05-29T22:54:16.423Z"}],"readme":"node-![cbind](https://raw.githubusercontent.com/CodeCharmLtd/node-cbind/master/cbind.png)\n==============\n[![Build Status](https://travis-ci.org/CodeCharmLtd/node-cbind.svg?branch=master)](https://travis-ci.org/CodeCharmLtd/node-cbind)\n[![Package version](https://img.shields.io/npm/v/cbind.svg)](https://www.npmjs.org/package/cbind)\n[![Package version](https://img.shields.io/npm/dm/cbind.svg)](https://www.npmjs.org/package/cbind)\n[![Dependcies status](http://img.shields.io/gemnasium/CodeCharmLtd/node-cbind.svg)](https://gemnasium.com/CodeCharmLtd/node-cbind)\n\nStreamlined automatic C/C++ v8 bindings generator for Node.JS inspired by tolua++ (requires C++11)\n\nCore idea is the ability to easily bind to C/C++ by providing a header-like description of the native interface that is a subset of C++ (format is called Native Interface Description https://github.com/CodeCharmLtd/NID):\n\nSimple things:\n```c++\n\nint global_variable;\n\nstd::string global_function(int a, float b);\n\nstruct Rect {\n  int x;\n  int y;\n  int w;\n  int h;\n};\nbool rectangles_intersect(Rect a, Rect b);\n\n```\n\nMore complex things:\n```c++\n#include <stdio.h>\n\nint errno; // make errno available as getter and setter\n\n// make fopen available and mark FILE* pointers for automatic closing when gced\nFILE * [[free(fclose)]] fopen(const char* filename, const char* mode);\n\n// make fread available and automatically set one of its arguments\nsize_t fread(void* ptr [[buffer]], size_t size, size_t nmemb [[set(ptr.length / size)]], FILE* stream [[handle]]);\n\n// tell cbind to mark the object containing pointer as invalid\nint fclose(FILE* f [[clear_free,unref]]);\n```\n\n\n<a name=\"complex_weird_cases_function_pointer_handling\">\n## Complex weird cases function pointer handling\nConsider this declaration (valid C and valid NID):\n```c++\nvoid (*catch_and_return(void (*callback)(char* a, char* b, int* c), char *name_one, char* name_two, int* number))(char* a, char * b, int c); \n```\nDo you know what it does? Actually it is a declaration of function taking 4 arguments:\n* `callback` - pointer to function `void(char* a, char* b, int* c)`\n* `name_one` - string\n* `name_two` - string\n* `number` - pointer to number\n\nThis function returns another function pointer `void(char* a, char* b, int)`\n\nIt turns out cbind can generate bindings for this that fully work:\n```js\nbindings.catch_and_return(function(a, b, c) {\n  console.log(a, b, cBind.derefInt(c));\n}, \"str1\", \"str2\", cBind.createInt(30))(\"FINAL\", \"TEST\", 44);\n```\n\n\n## Supported and tested features\n\n* Handling basic types int, float, double, char*, const char*, std::string\n* Handling pointers to basic types. Contains functions to create pointer values and dereference them.\n* Binding to global variables with getter/setter.\n* Binding to global functions.\n* Type checking that throws exception to javascript in case of unmatched types.\n* Attributes for specifying automatic free of returned arguments.\n* Attributes for handling input buffer automatically and passing it to javascript as a return value.\n\n## Implemented and initially tested\n\n* Handle binary buffers as Buffer.\n* Handling function pointer types. Function pointers are automatically converted to javascript functions and vice-versa. Function pointer variables as getter/setters and function pointers as arguments are equally handled.\n* Handling constructors of structs/classes and binding them to javascript new.\n* Handling class/struct variables and methods.\n* Passing struct and class pointers to arbitrary functions.\n\n## Planned features / Not supported yet\n\n* Function overloading.\n* Attributes for calling native code asynchronously and returning values as promises (bluebird).\n* Attributes for automatically handling native callbacks that have returned from a separate thread.\n\n## Requirements\n\n* C++11 support (GCC 4.8 or clang 3.3)\n* Node 0.8, 0.10 or 0.11.13+\n\n## How-to use\n\n* `npm install --save cbind`\n* Create `example.nid` file\nPut your native interface definition there, for example:\n\n```\nvoid hello(int b);\n```\n\n* Have your `binding.gyp` follow this example:\n```\n{\n  \"targets\": [\n    {\n      \"target_name\": \"cbind_example\",\n      \"sources\": [\n        \"src/addon.cc\"\n      ],\n      \"include_dirs\"  : [\n          \"<!(node -e \\\"require('nan')\\\" 2> /dev/null)\",\n          \"<!(node -e \\\"require('cbind')('example.nid')\\\" 2> /dev/null)\"\n      ],\n      \"cflags\": [\"-g\", \"-std=c++11\"],\n\t\t\t\"cflags_cc!\": [ '-fno-exceptions' ]\n    }\n  ]\n}\n```\n* Have your `addon.cc` the following content\n```c++\n\n#include <cstdio>\n\nvoid hello(int a) {\n  printf(\"Hello world: %i\\n\", a);\n}\n\n#include <cbind_example.h>\n\nvoid init(v8::Handle<v8::Object> exports) {\n  \n  cbind::init_example(exports);\n}\n\nNODE_MODULE(tov8_example, init);\n```\n\n* Run `node-gyp rebuild`\n\n* With hello.js having the following content:\n```\nvar bindings = require('./build/Release/cbind_example.node');\nbindings = hello(42);\n```\n\n* `node hello.js` should print \"Hello world 42`\n\nThe above is in the repository https://github.com/CodeCharmLtd/cbind-example\n\n\nPlease open issues or follow example tests. README will be gradually expanded.\n\n\n## Special thanks\n\nhttps://github.com/celer/fire-ts - awesome templates for code generation\n\n\n<a name=\"authors\"/>\n## Authors\n* Damian Kaczmarek <damian@codecharm.co.uk> <rush@rushbase.net>\n\n<a name=\"sponsors\"/>\n## Sponsors\nPlease open an issue if you would like a specific feature to be implemented and sponsored.\n\n<a name=\"license\"/>\n## License\nCopyright (c) 2013-2014 [Code Charm Ltd](http://codecharm.co.uk)\n\nLicensed under the MIT license, see `LICENSE` for details.\n\n\n\n","created":"2014-05-13T11:23:36.793Z","modified":"2016-04-04T16:47:16.199Z","lastPublisher":{"name":"RushPL","email":"rush@rushbase.net"},"owners":[{"name":"rush","email":"rush@rushbase.net"}],"other":{"_attachments":{},"_from":".","_id":"cbind","_npmUser":{"name":"RushPL","email":"rush@rushbase.net"},"_npmVersion":"1.4.9","_rev":"1-bef438387d7c14b02c282da4d0f2372b","_shasum":"493a712e07f2256f0f3ce533c5e6c99b2e02fe2e","author":{"name":"Damian Kaczmarek","email":"damian@codecharm.co.uk"},"directories":{},"dist-tags":{"latest":"0.0.10"},"dist":{"shasum":"493a712e07f2256f0f3ce533c5e6c99b2e02fe2e","tarball":"http://registry.npmjs.org/cbind/-/cbind-0.0.10.tgz"},"maintainers":[{"name":"rush","email":"rush@rushbase.net"}],"readmeFilename":"README.md","time":{"modified":"2016-04-04T16:47:16.199Z","created":"2014-05-13T11:23:36.793Z","0.0.3":"2014-05-13T11:23:36.793Z","0.0.4":"2014-05-13T12:11:49.673Z","0.0.5":"2014-05-13T21:02:09.698Z","0.0.8":"2014-05-15T10:44:33.439Z","0.0.9":"2014-05-29T21:11:16.700Z","0.0.10":"2014-05-29T22:54:16.423Z"}}}