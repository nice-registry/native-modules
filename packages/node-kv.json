{"name":"node-kv","version":"0.3.2","repository":"https://github.com/talrasha007/node-kv","description":"An embeded key-value store for node.js, extremely fast.","readmeFile":"README.md","keywords":["key","value","lmdb","leveldb","db","store","kv"],"main":"./lib","dependencies":{"debug":"^2.1.0","lodash":"^2.4.1","mkdirp":"^0.5.0","nan":"~1.5.0"},"devDependencies":{"expect.js":"^0.3.1","matcha":"^0.5.0","mocha":"^1.21.5"},"scripts":{"install":"node-gyp rebuild"},"gypfile":true,"gitHead":"667f21436f04c26d3ca73121185495aeb02b4e41","homepage":"https://github.com/talrasha007/node-kv","versions":[{"number":"0.1.0","date":"2014-10-28T10:02:10.575Z"},{"number":"0.2.0","date":"2014-10-31T14:43:37.838Z"},{"number":"0.2.1","date":"2014-10-31T14:51:18.714Z"},{"number":"0.2.2","date":"2014-11-05T10:55:23.419Z"},{"number":"0.2.2-1","date":"2014-11-05T11:50:19.110Z"},{"number":"0.2.2-2","date":"2014-11-05T11:58:19.179Z"},{"number":"0.3.0","date":"2014-11-19T15:27:01.390Z"},{"number":"0.3.1","date":"2014-12-08T07:50:52.651Z"},{"number":"0.3.2","date":"2015-01-15T03:03:40.026Z"}],"readme":"#node-kv\nAn embeded key-value store for node.js, extremely fast.\n```\nBecause rocksdb uses a lot of C++11 features, your compiler should support C++11 to compile it.\nI test it on:\n  Windows + VS2013\n  CentOS 6.5 + gcc 4.8.1\n  MacOS\n  \nIf your compiler doesn't support C++11, you can install 0.2.x (without rocksdb) instead.\n```\n\n[中文文档猛戳此处](https://github.com/talrasha007/node-kv/blob/master/README.zhcn.md)\n\n## Features\n- Multiple kv engine support. (LMDB / LevelDB / RocksDB).\n- High speed. (> 80% speed of c++ version.)\n- Compressed bit-vector support, a good choice for bitmap index. (Coming soon.)\n- Embeded, easy to use.\n\n## Install\n```\nnpm install node-kv\n```\n\n## Test & Benchmark\n```\ngit clone https://github.com/talrasha007/node-kv.git\nnpm install\nnpm install -g matcha mocha\nmocha   # Run unit test.\nmatcha  # Run benchmark.\n```\n\n## Usage\n\n### - LMDB\nIt's a lmdb wrapper, for more information about lmdb, [click here](http://symas.com/mdb/) & [documents](http://symas.com/mdb/doc/index.html)\n```js\n// This example shows how to use lmdb apis.\nvar path = require('path'),\n    lmdb = require('node-kv').lmdb;\n\nvar env = new lmdb.Env({\n    dir: path.join(__dirname, 'testdb'),\n    mapSize: 8 * 1024 * 1024, // 128M by default\n    maxDbs: 64 // 32 by default\n});\n\n(function () {\n    /* Date type can be:\n     * string\n     * hex - hex string, will convert to binary data equivalent to Buffer(str, 'hex') for storage.\n     * int32\n     * uint32\n     * int64\n     * number\n     * binary - Buffer object\n     */\n    var db = env.openDb({\n        name: 'test',\n        keyType: 'int32',\n        valType: 'int32' // or valveType\n    });\n\n    db.put(1, 1);\n    console.log(db.get(1));\n    db.del(1);\n    console.log(db.get(1));\n\n    db.batchPut(6, 6);\n    console.log(db.get(6));\n    env.flushBatchOps(); // Data will be flushed automatically after 1ms, if you want to query immediately, do this.\n    console.log(db.get(6));\n})();\n\n(function () {\n    var db = env.openDb({\n        name: 'str-test',\n        keyType: 'string',\n        valType: 'string' // or valveType\n    });\n\n    var txn = env.beginTxn();\n    db.put('Hello', 'world', txn);\n    console.log(db.get('Hello', txn));\n    txn.abort();\n    console.log(db.get('Hello'));\n})();\n\n(function () {\n    var db = env.openDb({\n        name: 'testdup',\n        keyType: 'int32',\n        valType: 'int32',\n        allowDup: true\n    });\n\n    db.put(1, 1);\n    console.log(db.exists(1, 1));\n    console.log(db.exists(1, 2));\n    db.put(1, 2);\n    console.log(db.exists(1, 1));\n    console.log(db.exists(1, 2));\n\n    // Cursor\n    var txn = env.beginTxn(true),\n        cur = db.cursor(txn);\n\n    for (var ok = cur.first(); ok; ok = cur.next()) {\n        console.log(\"Cursor scan: \", cur.key(), cur.val());\n    }\n\n    console.log(cur.seek(1));\n    console.log(cur.key(), cur.val());\n    console.log(cur.gte(0));\n    console.log(cur.key(), cur.val());\n\n    txn.abort();\n})();\n\nenv.close();\n```\n\n### - Cache\n```js\n// This example shows how to use cache apis.\n// Cache is used for caching hot data, it is a wrapper of lmdb, it holds 2 lmdb envs(current & old), when current env is full,\n// it will close old env, set current env as old, and then open a new env as current.\nvar path = require('path'),\n    cache = require('node-kv').cache;\n\nvar cenv = new cache.Env({\n    dir: path.join(__dirname, 'testdb', 'cache'),\n    cacheSize: 128 * 1024 * 1024,   // 256M by default\n    batchSize: 128                  // 64 by default\n});\n\nvar cdb = cenv.openDb({\n    name: 'testdb',\n    keyType: 'int32',\n    valType: 'int32'\n});\n\ncdb.put(1, 2);\ncdb.put(2, 3);\ncenv.flushBatchOps(); // Data will be flushed automatically after 1ms, if you want to query immediately, do this.\nconsole.log(cdb.get(1));\n\ncdb.put(3, 3);\nsetTimeout(function () {\n    console.log(cdb.get(3));\n    cenv.close();\n}, 50);\n```\n\n### - LevelDB\nGoogle [leveldb](https://github.com/google/leveldb) wrapper.\n```js\nvar path = require('path'),\n    lvldb = require('node-kv').leveldb;\n\nvar env = new lvldb.Env({\n    dir: path.join(__dirname, 'testdb', 'level'),\n    cacheSize: 256 * 1024 * 1024 // 8MB by default.\n});\n\nvar db = env.openDb({\n    name: 'test',\n    keyType: 'int32',\n    valType: 'int32'\n});\n\ndb.put(1, 1);\nconsole.log(db.get(1));\ndb.del(1);\nconsole.log(db.get(1));\n\ndb.del(3);\ndb.batchPut(3, 4);\nconsole.log(db.get(3));\ndb.flushBatchOps();\nconsole.log(db.get(3));\n\nvar cur = db.cursor();\nfor (var i = cur.first(); i; i = cur.next()) {\n    console.log([cur.key(), cur.val()]);\n}\n```\n\n### - RocksDB\nFacebook [rocksdb](http://rocksdb.org/) wrapper.\n```js\nvar path = require('path'),\n    rocksdb = require('node-kv').rocksdb;\n\nvar env = new rocksdb.Env({\n    dir: path.join(__dirname, 'testdb', 'rocks'),\n    cacheSize: 256 * 1024 * 1024 // 4MB by default.\n});\n\nvar db = env.registerDb({\n    name: 'test',\n    keyType: 'int32',\n    valType: 'int32'\n});\n\nenv.open();\n\ndb.put(1, 1);\nconsole.log(db.get(1));\ndb.del(1);\nconsole.log(db.get(1));\n\ndb.del(3);\ndb.batchPut(3, 4);\nconsole.log(db.get(3));\ndb.flushBatchOps();\nconsole.log(db.get(3));\n\nvar cur = db.cursor();\nfor (var i = cur.first(); i; i = cur.next()) {\n    console.log([cur.key(), cur.val()]);\n}\n```\n","created":"2014-10-28T10:02:10.575Z","modified":"2015-01-15T03:03:40.026Z","lastPublisher":{"name":"talrasha007","email":"talrasha007@gmail.com"},"owners":[{"name":"talrasha007","email":"talrasha007@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-kv","_nodeVersion":"1.0.1","_npmUser":{"name":"talrasha007","email":"talrasha007@gmail.com"},"_npmVersion":"2.1.18","_rev":"1-9786442fb5240937b531ed26d3759138","_shasum":"0951777bde6cb26d42f2e5b34e931d74b9f0ce06","bugs":{"url":"https://github.com/talrasha007/node-kv/issues"},"directories":{},"dist-tags":{"latest":"0.3.2"},"dist":{"shasum":"0951777bde6cb26d42f2e5b34e931d74b9f0ce06","tarball":"http://registry.npmjs.org/node-kv/-/node-kv-0.3.2.tgz"},"maintainers":[{"name":"talrasha007","email":"talrasha007@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-01-15T03:03:40.026Z","created":"2014-10-28T10:02:10.575Z","0.1.0":"2014-10-28T10:02:10.575Z","0.2.0":"2014-10-31T14:43:37.838Z","0.2.1":"2014-10-31T14:51:18.714Z","0.2.2":"2014-11-05T10:55:23.419Z","0.2.2-1":"2014-11-05T11:50:19.110Z","0.2.2-2":"2014-11-05T11:58:19.179Z","0.3.0":"2014-11-19T15:27:01.390Z","0.3.1":"2014-12-08T07:50:52.651Z","0.3.2":"2015-01-15T03:03:40.026Z"}}}