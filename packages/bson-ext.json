{"name":"bson-ext","description":"The C++ bson parser for the node.js mongodb driver.","keywords":["mongodb","bson","parser"],"version":"1.0.5","repository":"https://github.com/christkv/bson-ext","dependencies":{"bindings":"^1.2.1","nan":"~2.4.0"},"devDependencies":{"nodeunit":"~0.9.0"},"main":"./index","engines":{"node":">=0.8.19"},"scripts":{"install":"(node-gyp rebuild 2> builderror.log) || (exit 0)","test":"nodeunit ./test/node"},"licenses":[{"type":"Apache License, Version 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0"}],"binary":{"module_name":"bson","module_path":"build/Release","host":"https://bin.mongodb.org","remote_path":"/js/bson-ext/v{version}","bucket":"mongodb-dx-public"},"gitHead":"4c7d8cb1d8430ae688415d49924476381db0aa1b","homepage":"https://github.com/christkv/bson-ext#readme","versions":[{"number":"0.1.0","date":"2015-03-26T12:04:14.080Z"},{"number":"0.1.1","date":"2015-04-20T10:34:39.038Z"},{"number":"0.1.2","date":"2015-04-20T16:22:50.116Z"},{"number":"0.1.3","date":"2015-04-23T15:32:25.020Z"},{"number":"0.1.4","date":"2015-05-05T07:47:11.436Z"},{"number":"0.1.5","date":"2015-05-07T14:54:47.822Z"},{"number":"0.1.6","date":"2015-05-07T15:00:27.417Z"},{"number":"0.1.7","date":"2015-05-15T13:59:12.573Z"},{"number":"0.1.8","date":"2015-06-12T10:48:45.648Z"},{"number":"0.1.9","date":"2015-06-17T17:00:40.148Z"},{"number":"0.1.10","date":"2015-06-22T15:35:57.017Z"},{"number":"0.1.11","date":"2015-08-06T07:59:00.042Z"},{"number":"0.1.12","date":"2015-08-06T08:17:52.942Z"},{"number":"0.1.13","date":"2015-10-05T13:27:50.969Z"},{"number":"1.0.0","date":"2016-12-05T11:28:18.001Z"},{"number":"1.0.1","date":"2016-12-07T12:57:45.591Z"},{"number":"1.0.2","date":"2017-01-02T15:44:27.009Z"},{"number":"1.0.3","date":"2017-01-03T13:18:21.259Z"},{"number":"1.0.4","date":"2017-01-11T10:30:36.712Z"},{"number":"1.0.5","date":"2017-01-20T11:26:37.183Z"}],"readme":"# BSON parser\n\nIf you don't yet know what BSON actually is, read [the spec](http://bsonspec.org).\n\nTo build a new version perform the following operation.\n\n```\nnpm install\nnpm run build\n```\n\nA simple example of how to use BSON in `node.js`:\n\n```js\n// Get BSON parser class\nvar BSON = require('bson-ext')\n// Get the Long type\nvar Long = BSON.Long;\n// Create a bson parser instance, passing in all the types\n// This is needed so the C++ parser has references to the classes and can\n// use them to serialize and deserialize the types.\nvar bson = new BSON(new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]));\n\n// Serialize document\nvar doc = { long: Long.fromNumber(100) }\n\n// Serialize a document\nvar data = bson.serialize(doc)\nconsole.log('data:', data)\n\n// Deserialize the resulting Buffer\nvar doc_2 = bson.deserialize(data)\nconsole.log('doc_2:', doc_2)\n```\n\n## Installation\n\n`npm install bson-ext`\n\n## API\n\n### BSON types\n\nFor all BSON types documentation, please refer to the documentation for the mongodb driver.\n\nhttps://github.com/mongodb/node-mongodb-native\n\n### BSON serialization and deserialiation\n\n**`new BSON()`** - Creates a new BSON seralizer/deserializer you can use to serialize and deserialize BSON.\n\n#### BSON.serialize\n\nThe BSON serialize method takes a javascript object and an optional options object and returns a Node.js Buffer.\n\n  * BSON.serialize(object, options)\n    * @param {Object} object the Javascript object to serialize.\n    * @param {Boolean} [options.checkKeys=false] the serializer will check if keys are valid.\n    * @param {Boolean} [options.serializeFunctions=false] serialize the javascript. functions.\n    * @param {Boolean} [options.ignoreUndefined=true]\n    * @return {Buffer} returns a Buffer instance.\n\n#### BSON.serializeWithBufferAndIndex\n\nThe BSON serializeWithBufferAndIndex method takes an object, a target buffer instance and an optional options object and returns the end serialization index in the final buffer.\n\n  * BSON.serializeWithBufferAndIndex(object, buffer, options)\n    * @param {Object} object the Javascript object to serialize.\n    * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n    * @param {Boolean} [options.checkKeys=false] the serializer will check if keys are valid.\n    * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions.\n    * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields.\n    * @param {Number} [options.index=0] the index in the buffer where we wish to start serializing into.\n    * @return {Number} returns the index pointing to the last written byte in the buffer.\n\n#### BSON.calculateObjectSize\n\nThe BSON calculateObjectSize method takes a javascript object and an optional options object and returns the size of the BSON object.\n\n  * BSON.calculateObjectSize(object, options)\n    * @param {Object} object the Javascript object to serialize.\n    * @param {Boolean} [options.serializeFunctions=false] serialize the javascript. functions.\n    * @param {Boolean} [options.ignoreUndefined=true]\n    * @return {Buffer} returns a Buffer instance.\n\n#### BSON.deserialize\n\nThe BSON deserialize method takes a node.js Buffer and an optional options object and returns a deserialized Javascript object.\n\n  * BSON.deserialize(buffer, options)\n    * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n    * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n    * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n    * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n    * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n    * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n    * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n    * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n    * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n\n#### BSON.deserializeStream\n\nThe BSON deserializeStream method takes a node.js Buffer, startIndex and allow more control over deserialization of a Buffer containing concatenated BSON documents.\n\n  * BSON.deserializeStream(buffer, startIndex, numberOfDocuments, documents, docStartIndex, options)\n    * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n    * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n    * @param {Number} numberOfDocuments number of documents to deserialize.\n    * @param {Array} documents an array where to store the deserialized documents.\n    * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n    * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n    * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n    * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n    * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n    * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n    * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n    * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n    * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n    * @return {Object} returns the deserialized Javascript Object.\n","starsCount":1,"created":"2015-03-26T12:04:14.080Z","modified":"2017-01-20T11:26:37.183Z","lastPublisher":{"name":"christkv","email":"christkv@gmail.com"},"owners":[{"name":"christkv","email":"christkv@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"bson-ext","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/bson-ext-1.0.5.tgz_1484911596494_0.8069230373948812"},"_npmUser":{"name":"christkv","email":"christkv@gmail.com"},"_npmVersion":"3.10.8","_rev":"7-487c035d2295c1f21b3dd3fce169ceea","_shasum":"4957ed397711bd72f76c3ab033933624f2eb6a40","author":{"name":"Christian Amor Kvalheim","email":"christkv@gmail.com"},"bugs":{"url":"https://github.com/christkv/bson-ext/issues"},"contributors":[],"directories":{"lib":"./lib/bson"},"dist-tags":{"latest":"1.0.5"},"dist":{"shasum":"4957ed397711bd72f76c3ab033933624f2eb6a40","tarball":"https://registry.npmjs.org/bson-ext/-/bson-ext-1.0.5.tgz"},"maintainers":[{"name":"christkv","email":"christkv@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-20T11:26:37.183Z","created":"2015-03-26T12:04:14.080Z","0.1.0":"2015-03-26T12:04:14.080Z","0.1.1":"2015-04-20T10:34:39.038Z","0.1.2":"2015-04-20T16:22:50.116Z","0.1.3":"2015-04-23T15:32:25.020Z","0.1.4":"2015-05-05T07:47:11.436Z","0.1.5":"2015-05-07T14:54:47.822Z","0.1.6":"2015-05-07T15:00:27.417Z","0.1.7":"2015-05-15T13:59:12.573Z","0.1.8":"2015-06-12T10:48:45.648Z","0.1.9":"2015-06-17T17:00:40.148Z","0.1.10":"2015-06-22T15:35:57.017Z","0.1.11":"2015-08-06T07:59:00.042Z","0.1.12":"2015-08-06T08:17:52.942Z","0.1.13":"2015-10-05T13:27:50.969Z","1.0.0":"2016-12-05T11:28:18.001Z","1.0.1":"2016-12-07T12:57:45.591Z","1.0.2":"2017-01-02T15:44:27.009Z","1.0.3":"2017-01-03T13:18:21.259Z","1.0.4":"2017-01-11T10:30:36.712Z","1.0.5":"2017-01-20T11:26:37.183Z"},"users":{"ziink":true}}}