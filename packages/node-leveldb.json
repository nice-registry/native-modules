{"name":"node-leveldb","description":"Node.js bindings for LevelDB","version":"1.0.1","homepage":"https://github.com/sharvil/node-leveldb","main":"src/leveldb.js","gypfile":true,"repository":"https://github.com/sharvil/node-leveldb","licenses":[{"type":"Apache 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0"}],"keywords":["leveldb","node","nosql","database"],"dependencies":{"bindings":"~1.2.1","nan":"^1.3.0"},"scripts":{"install":"node-gyp rebuild"},"gitHead":"fc204fda6405747885e120f2c98eb2b7b7ffd24f","versions":[{"number":"1.0.0","date":"2015-03-02T08:53:23.771Z"},{"number":"1.0.1","date":"2015-03-03T10:49:07.569Z"}],"readme":"# node-leveldb\nThis package provides a simple, lightweight binding for [LevelDB](https://github.com/google/leveldb) to [Node.js](http://www.nodejs.org). LevelDB is an implementation of a [log-structured merge-tree](http://en.wikipedia.org/wiki/Log-structured_merge-tree) that provides fast key-value storage and lookup.\n\n## Installation\n```\n$ npm install node-leveldb\n```\n\n## Documentation\n### LevelDB\nA LevelDB object is constructed and returned when you `require('node-leveldb')`. This object can be used for all operations on a single LevelDB database.\n```js\n    var LevelDB = require('node-leveldb');\n```\n\n### LevelDB.open(databasePath)\nBefore operating on a LevelDB object, you have to specify which database those operations apply to. If the specified database doesn't already exist, a new one will be created. If your process doesn't have the necessary permissions to create or open the database, this function will throw an exception.\n```js\n    LevelDB.open('path/to/my/database');\n```\n\n### LevelDB.close()\nCloses the database opened by a previous successful call to `LevelDB.open(...)`.\n```js\n    LevelDB.close();\n```\n\n### LevelDB.get(key)\nReturns the value associated with `key`. If `key` doesn't exist in the database, this function returns `null`.\n```js\n    console.log(LevelDB.get('myKey'));\n```\n\n### LevelDB.set(key, value)\nInserts data into the database. If there isn't already a value for `key` in the database, this function creates a new entry and maps `key` to `value`. If `key` already exists, it replaces the old value with `value`.\n```js\n    LevelDB.set('Ann Leckie', 'Ancillary Justice');\n```\n\n### LevelDB.list([start], [end], callback)\nEnumerates data stored in the database. This function takes two optional arguments, the `start` and `end` of the range of keys to enumerate. If `start` is not specified, it is assumed to be from the first item. If `end` is not specified, it is assumed to be until the last item. Both `start` and `end` are inclusive. It's not possible to specify `end` without first specifying `start`.\n```js\n    LevelDB.list('a', 'z', function(key, value) {\n        console.log('key: ' + key + ', value: ' + value);\n    });\n```\n\n### LevelDB.delete(key)\nRemoves data from the database. If `key` is found in the database, this function deletes the mapping from `key` to its value. This function returns `true` if `key` was found and a mapping was deleted, `false` otherwise.\n```js\n    LevelDB.delete('Ann Leckie');\n```\n\n## Example\n```js\n    var LevelDB = require('node-leveldb');\n    LevelDB.open('authors_database');\n\n    LevelDB.set('Frank Herbert', 'Dune');\n    LevelDB.set('Ursula K. Le Guin', 'The Left Hand of Darkness');\n    LevelDB.set('Larry Niven', 'Ringworld');\n    LevelDB.set('Isaac Asimov', 'The Gods Themselves');\n\n    // Print the value associated with 'Frank Herbert'.\n    console.log(LevelDB.get('Frank Herbert'));\n\n    LeveLDB.delete('Frank Herbert');\n\n    // Print all items stored in the database.\n    LevelDB.list(function(key, value) {\n        console.log(key + ': ' + value);\n    });\n\n    // Print all items with 'F' <= key <= 'T'.\n    LevelDB.list('F', 'T', function(key, value) {\n        console.log(key + ': ' + value);\n    });\n\n    LevelDB.close();\n```\n\n## License\nApache 2.0\n","created":"2015-03-02T08:53:23.771Z","modified":"2017-01-21T08:23:46.170Z","lastPublisher":{"name":"sharvil","email":"sharvil.nanavati@gmail.com"},"owners":[{"name":"sharvil","email":"sharvil.nanavati@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-leveldb","_nodeVersion":"0.10.33","_npmUser":{"name":"sharvil","email":"sharvil.nanavati@gmail.com"},"_npmVersion":"2.6.1","_rev":"3-b8a5426884b22fc8d8228d95db777f7d","_shasum":"9cc5e6cf84c3e76c6c743509a738e86357cd3e46","author":{"name":"Sharvil Nanavati","email":"sharvil.nanavati@gmail.com"},"bugs":{"url":"https://github.com/sharvil/node-leveldb/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"9cc5e6cf84c3e76c6c743509a738e86357cd3e46","tarball":"http://registry.npmjs.org/node-leveldb/-/node-leveldb-1.0.1.tgz"},"maintainers":[{"name":"sharvil","email":"sharvil.nanavati@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-21T08:23:46.170Z","created":"2015-03-02T08:53:23.771Z","1.0.0":"2015-03-02T08:53:23.771Z","1.0.1":"2015-03-03T10:49:07.569Z"}}}