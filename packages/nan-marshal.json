{"name":"nan-marshal","version":"0.0.5","description":"Data type marshalling for NAN module","main":"include_dirs.js","scripts":{"test":"tap --gc test/js/*-test.js","rebuild-tests":"node-gyp rebuild --directory test","docs":"doc/.build.sh"},"repository":"https://github.com/BloodAxe/nan-marshal","keywords":["nodejs","node","c++"],"license":"MIT","homepage":"https://github.com/BloodAxe/nan-marshal#readme","dependencies":{"nan":"^2.0.9"},"devDependencies":{"bindings":"~1.2.1","commander":"^2.8.1","glob":"^5.0.14","node-gyp":"~3.0.1","tap":"~0.7.1","xtend":"~4.0.0"},"gitHead":"84984def9d773d9adb06dab371305341e55aef38","versions":[{"number":"0.0.1","date":"2015-10-10T13:53:15.061Z"},{"number":"0.0.2","date":"2015-10-11T06:40:05.433Z"},{"number":"0.0.3","date":"2015-10-11T11:01:57.985Z"},{"number":"0.0.4","date":"2015-10-11T11:21:12.517Z"},{"number":"0.0.5","date":"2015-10-18T08:13:14.030Z"}],"readme":"Data type marshalling for C++ addons in Nodejs\n===============================\n\n[![Build Status](https://travis-ci.org/BloodAxe/nan-marshal.png?branch=master)](https://travis-ci.org/BloodAxe/nan-marshal)\n\nThis project contains some helper utilities that make native addon development a bit more easier.\n\n * **[Example](#example)**\n * **[Usage](#usage)**\n * **[API](#api)**\n * **[Tests](#tests)**\n\n<a name=\"example\"></a>\n## Example\n\n```cpp\nNAN_METHOD(GetFirstNPrimes) {\n    \n    int numberOfPrimes = Nan::Marshal<int>(info[0]);\n    std::vector<int> primes = computeNPrimes(numberOfPrimes);\n    info.GetReturnValue().Set(Nan::Marshal(primes));\n}\n```\n\nOk, enough words, gimme the code! All source code is available on GitHub: [nan-marshal][nan-marshal]. \n\n<span class=\"more\"></more>\n\n<a name=\"requirements\"></a>\n## Requirements\n\nBy tradition, native add-ons for Node are built with GYP build system. So you should install node-gyp package: ``npm install -g node-gyp``.\nThis module requires [Nan][nan] package. If you are not using [Nan][nan] already for writing C++ add-ons for Nodejs I strongly advise you to start doing that. Anyway, ``npm install --save nan`` is a right way to start.\n\n<a name=\"usage\"></a>\n## Usage\n\nSimply add **nan-marshal** as a dependency module to *package.json* of your Node add-on:\n\n``` bash\n$ npm install --save nan-marshal\n```\n\nAdd include directories for **NAN** and **NAN-Marshal** in your *binding.gyp* so that you can use `#include <nan-marshal.h>` in your *.cpp* files:\n\n```python\n\"include_dirs\" : [\n    \"<!(node -e \\\"require('nan')\\\")\",\n    \"<!(node -e \\\"require('nan-marshal')\\\")\"\n]\n```\n\nThis works like a `-I<path-to-nan-marshal>` when compiling your add-on.\n\n<a name=\"api\"></a>\n## API\n\nThere is a single all-purpose function: ``Nan::Marshal``. To convert from V8 object to C++ type, use it as follows: ``Nan::Marshal<Dst>(V8 object)``. \nTo convert from C++ to V8 object: ``Nan::Marshal(..)``. \n\n``Nan::Marshal`` supports following types out of the box:\n- Built-in C++ types\n- std::string\n- std::vector\n- std::map\n- std::shared_ptr\n- Marshalling of used-defined types (There are intrusive and non-intrusive options available)\n\nFor built-in and STL types, use is straightforward:\n\n```cpp\nLocal<Value> arg1 = info[0];\n// Marshal from V8 to C++ type\nstd::string msg = Nan::Marshal<std::string>(arg1);\n\n// Marshal from C++ to V8\ninfo.GetReturnValue().Set(Nan::Marshal(msg));\n```\n\nUser-defined serialization inspired by boost::serialization approach and you will find it similar and easy-to-use. Here's quick example of non-intrusive serialization of the OpenCV data type:\n\n```cpp\nnamespace Nan\n{\n    namespace marshal\n    {\n        template<typename T>\n        struct Serializer < cv::Rect_<T> >\n        {\n            template<typename InputArchive>\n            static inline void load(InputArchive& ar, cv::Rect_<T>& val)\n            {\n                ar & make_nvp(\"x\", val.x);\n                ar & make_nvp(\"y\", val.y);\n                ar & make_nvp(\"width\", val.width);\n                ar & make_nvp(\"height\", val.height);\n            }\n\n            template<typename OutputArchive>\n            static inline void save(OutputArchive& ar, const cv::Rect_<T>& val)\n            {\n                ar & make_nvp(\"x\", val.x);\n                ar & make_nvp(\"y\", val.y);\n                ar & make_nvp(\"width\", val.width);\n                ar & make_nvp(\"height\", val.height);\n            }\n        };\n    }\n}\n```\n\nHaving a snippet above in your code lets you to return JavaScript object like ``{ x:12, y:13, width:124, height: 144 }`` from C++ code. The same is true for V8 -> C++ marshalling. Nan::Marshal will convert V8 object to desired object type.\n\n<a name=\"tests\"></a>\n## Tests\n\nTo run the tests do:\n\n``` sh\nnpm install\nnpm run-script rebuild-tests\nnpm test\n```\n\nOr just:\n\n``` sh\nnpm install\nnpm test\n```\n<a name=\"limitations\"></a>\n## Limitations\n\nThis library does not perform strict checking of V8 types during conversion. There is [nan-check][nan-check] module that serves this purpose.\n\n## Licence &amp; copyright\n\nCopyright (c) 2015 Ievgen Khvedchenia.\n\nNative Abstractions for Node.js is licensed under an MIT license. \nAll rights not explicitly granted in the MIT license are reserved. \nSee the included LICENSE file for more details.\n\n\n[nan]: https://github.com/nodejs/nan\n[nan-marshal]: https://github.com/BloodAxe/nan-marshal\n[nan-check]: https://github.com/BloodAxe/nan-check\n[cloudcv]: https://cloudcv.io\n\n","created":"2015-10-10T13:53:15.061Z","modified":"2015-10-18T08:13:14.030Z","lastPublisher":{"name":"bloodaxe","email":"ekhvedchenya@gmail.com"},"owners":[{"name":"bloodaxe","email":"ekhvedchenya@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"nan-marshal","_nodeVersion":"0.12.7","_npmUser":{"name":"bloodaxe","email":"ekhvedchenya@gmail.com"},"_npmVersion":"2.14.2","_rev":"1-0c139102c1b8a349de1b522a50d9c5a1","_shasum":"0d4a035e93f45ac7f23613d966367f42fb182cf6","author":{"name":"ekhvedchenya@gmail.com"},"bugs":{"url":"https://github.com/BloodAxe/nan-marshal/issues"},"directories":{},"dist-tags":{"latest":"0.0.5"},"dist":{"shasum":"0d4a035e93f45ac7f23613d966367f42fb182cf6","tarball":"http://registry.npmjs.org/nan-marshal/-/nan-marshal-0.0.5.tgz"},"maintainers":[{"name":"bloodaxe","email":"ekhvedchenya@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-10-18T08:13:14.030Z","created":"2015-10-10T13:53:15.061Z","0.0.1":"2015-10-10T13:53:15.061Z","0.0.2":"2015-10-11T06:40:05.433Z","0.0.3":"2015-10-11T11:01:57.985Z","0.0.4":"2015-10-11T11:21:12.517Z","0.0.5":"2015-10-18T08:13:14.030Z"}}}