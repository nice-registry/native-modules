{"name":"picha","version":"0.4.10","description":"image format codec and simple image processing","main":"index.js","scripts":{"test":"mocha -R spec","install":"node-gyp rebuild"},"repository":"https://github.com/jhs67/picha","keywords":["jpeg","png","tiff","webp","image","resize","crop"],"dependencies":{"nan":"^2.0.5"},"devDependencies":{"mocha":">=1.9"},"license":"MIT","gypfile":true,"gitHead":"84c23fecc2c2657ccf240101eded77f1e4215ad8","homepage":"https://github.com/jhs67/picha#readme","versions":[{"number":"0.1.0","date":"2013-08-24T21:59:33.876Z"},{"number":"0.2.0","date":"2013-09-09T21:43:12.494Z"},{"number":"0.3.0","date":"2013-09-17T06:04:24.353Z"},{"number":"0.4.0","date":"2013-12-17T17:42:28.891Z"},{"number":"0.4.1","date":"2014-01-01T22:23:10.296Z"},{"number":"0.4.2","date":"2014-02-22T05:49:01.163Z"},{"number":"0.4.3","date":"2014-06-02T02:32:04.320Z"},{"number":"0.4.4","date":"2014-06-06T06:14:23.663Z"},{"number":"0.4.5","date":"2015-01-16T22:03:29.092Z"},{"number":"0.4.6","date":"2015-03-18T03:52:31.810Z"},{"number":"0.4.7","date":"2015-03-20T23:06:39.333Z"},{"number":"0.4.8","date":"2015-08-05T18:22:10.293Z"},{"number":"0.4.9","date":"2015-09-02T20:10:04.830Z"},{"number":"0.4.10","date":"2016-11-12T08:12:34.381Z"}],"readme":"picha\n======\n\npicha (swahili): photo\n\nI couldn't find a library or libraries to encode and decode jpeg and png images and also\nallow raw access to the pixel data - so I wrote one. There is also optional support\nfor tiff and webp images. Color conversion, cropping, and resizing are also supported.\n\n## Install\nThe image format support requires the supporting libraries (libjpeg, libpng, etc.) to be installed on your system. There is a hard dependency on libjpeg. The other formats will be enabled if the requisite library is available at install time (as determined by pkg-config).\n\nOn Ubuntu and other debian variants this should install the required packages:\n```\nsudo apt-get install libjpeg-dev libpng-dev libwebp-dev libtiff-dev\n```\nOn Red Had and CentOS this is likely to get what you need:\n```\nyum install libjpeg-devel libpng-devel libtiff-devel\n```\nOn MacOS using [MacPorts](http://www.macports.org/):\n```\nsudo port install jpeg libpng tiff webp\n```\nOnce the dependencies are installed use [npm](http://npmjs.org):\n```\nnpm install picha\n```\n\n## Usage\n```\nvar fs = require('fs');\nvar picha = require('picha');\n\nvar image = picha.decodeSync(fs.readFileSync(\"test.jpeg\"));\nvar resized = picha.resizeSync(image, { width: 100, height: 100 });\nvar cropped = resized.subView(20, 20, 60, 60);\nvar compressed = picha.encodePngSync(cropped);\nfs.writeFileSync('tested.png', compressed);\n```\n\n## API\n\n### Image\n### `new picha.Image(opt)`\nConstruct a new image object from the options opt\n```\n{\n\twidth: width of the image in pixels,\n\theight: height of the image in pixels,\n\tpixel: pixel format (rgb, rgba, grey, greya),\n\tstride: row stride in bytes - defaults to 4 byte aligned rows,\n\tdata: buffer object of pixel data, if missing a buffer is allocated,\n}\n```\n\n### `Image.subView(x, y, w, h)`\nReturn a new image that is a rectangular view into this image defined by the supplied pixel coordinates.\n\n### `Image.copy(targetImage)`\nCopy the pixels from this image to the target Image. The pixel format must match.\nIf the sizes don't match the overlapping sub-view will be copied.\n\n### `Image.pixelSize()`\nThe size, in bytes, of this images pixel format.\n\n### `Image.row(y)`\nReturn a slice of buffer for a row of the image.\n\n### `Image.equalPixels(o)`\nReturn true if this image and another image 'o' are pixel for pixel equal.\n\n### `Image.avgChannelDiff(o)`\nReturn the average channel by channel difference between this and another image 'o'.\n\n### Image codec\n\n### `picha.catalog`\nThe set of codec's available is determined at install time based on the availability of the\ncorresponding native libraries. This is a map of the codec's available. The keys will be a\nsub-set of the supported codec's `[image/png, image/jpeg, image/tiff, image/webp]`. The values\nwill be objects with members `[stat, decode, decodeSync, encode, encodeSync]` referring to\nthe corresponding codec functions.\n\n### `picha.stat(buf)`\nDecode the image header and grab the image vitals. For most formats (not tiff) only the first\nhandful of bytes of the image data is required. The function returns null or\n```\n{\n    width: the width of the image\n    height: the height of the image\n    pixel: pixel format\n    mimetype: one of the supported mime types\n}\n```\n\n### `picha.decode(buf, cb)`\nDecodes the supplied image data on a libuv thread and calls cb with (err, image).\n\n### `picha.decodeSync(buf)`\nDecodes the supplied image data on the v8 thread and returns the image.\n\n### `picha.encodePng(image, cb)`\nEncode the supplied image into png format on a libuv thread. The cb receives (err, buffer).\n\n### `picha.encodeJpeg(image, opt, cb)`\nEncode the supplied image into jpeg format on a libuv thread. The cb receives (err, buffer).\nThe optional opt object may specify:\n```\n{\n\tquality: (0-100) default is 85,\n}\n```\n\n### `picha.encodeTiff(image, opt, cb)`\nEncode the supplied image into tiff format on a libuv thread. The cb receives (err, buffer).\nThe optional opt object may specify:\n```\n{\n\tcompression: compression mode ('lzw' (default), 'deflate', 'none'),\n}\n```\n\n### `picha.encodeWebP(image, opt, cb)`\nEncode the supplied image into webp format on a libuv thread. The cb receives (err, buffer).\nThe optional opt object may specify:\n```\n{\n\tquality: (0-100) default is 85,\n\talphaQuality: (0-100) quality for the alpha channel, default is 100,\n\tpreset: WebP compression preset\n\t\t\t('default', 'lossless', 'picture', 'photo', 'drawing', 'icon', 'text'),\n}\n```\n\n### `picha.statPng(buf)`\n### `picha.statJpeg(buf)`\n### `picha.statTiff(buf)`\n### `picha.statWebP(buf)`\nDecode the header of the respective image formats and returns null or an object containing the\nwidth, height and pixel format.\n\n### `picha.decodePng(buf, cb)`\n### `picha.decodeJpeg(buf, cb)`\n### `picha.decodeTiff(buf, cb)`\n### `picha.decodeWebP(buf, cb)`\nDecode the respective image format data on a libuv thread and call cb with (err, image).\n\n### `picha.decodePngSync(buf)`\n### `picha.decodeJpegSync(buf)`\n### `picha.decodeTiffSync(buf)`\n### `picha.decodeWebPSync(buf)`\nDecode the respective image format data on the v8 thread and return the image. Tiff has a dizzying number of\noptions and internal formats, hence all tiff images are decoded to 'rgba'.\n\n### Image manipulation\n\n### `picha.resize(image, opt, cb)`\nResize the image with the provided options. The computation is performed on a libuv thread and cb receives (err, image).\nThe optional opt parameter accepts the following options.\n```\n{\n\twidth: the width to resize,\n\theight: the height to resize,\n\tfilter: optional resize filter\n\t\t\t(cubic (default), lanczos, catmulrom, mitchel, box, or triangle),\n\tfilterScale: optional scale to apply to the filter (0.70),\n}\n```\n\n### `picha.resizeSync(image, opt)`\nResize an image on the v8 thread. The resize image is returned.\n\n### `picha.colorConvert(image, opt, cb)`\nConvert the color format of the image. The computation is on the a libuv thread and cb receives (err, image).\nThe optional opt parameter accepts the following options.\n```\n{\n\tpixel: the pixel format to convert to (rgb, rgba, grey, greya),\n\tredWeight: optional weight of the red channel for rgb->grey conversion (0.299),\n\tgreenWeight: optional weight of the green channel for rgb->grey conversion (0.587),\n\tblueWeight: optional weight of the blue channel for rgb->grey conversion (0.114),\n}\n```\n\n### `picha.colorConvertSync(image, opt)`\nConvert the color format of the image. The computation is on the v8 thread and the resulting image is returned.\n\n\n## License\n\n  MIT\n","starsCount":2,"created":"2013-08-24T21:59:31.909Z","modified":"2016-12-07T05:48:38.537Z","lastPublisher":{"name":"jhs67","email":"jon@jonspencer.ca"},"owners":[{"name":"jhs67","email":"jon@jonspencer.ca"}],"other":{"_attachments":{},"_from":".","_id":"picha","_nodeVersion":"7.1.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/picha-0.4.10.tgz_1478938352067_0.5919654171448201"},"_npmUser":{"name":"jhs67","email":"jon@jonspencer.ca"},"_npmVersion":"3.10.9","_rev":"4-4be7481e659f8678e4ef3a472480b0ba","_shasum":"cfc2e7cfa3a3fe9e7f570ae308ce086ac0e27dc0","author":{"name":"Jon Spencer","email":"jon@jonspencer.ca"},"bugs":{"url":"https://github.com/jhs67/picha/issues"},"directories":{},"dist-tags":{"latest":"0.4.10"},"dist":{"shasum":"cfc2e7cfa3a3fe9e7f570ae308ce086ac0e27dc0","tarball":"http://registry.npmjs.org/picha/-/picha-0.4.10.tgz"},"maintainers":[{"name":"jhs67","email":"jon@jonspencer.ca"}],"readmeFilename":"README.md","time":{"modified":"2016-12-07T05:48:38.537Z","created":"2013-08-24T21:59:31.909Z","0.1.0":"2013-08-24T21:59:33.876Z","0.2.0":"2013-09-09T21:43:12.494Z","0.3.0":"2013-09-17T06:04:24.353Z","0.4.0":"2013-12-17T17:42:28.891Z","0.4.1":"2014-01-01T22:23:10.296Z","0.4.2":"2014-02-22T05:49:01.163Z","0.4.3":"2014-06-02T02:32:04.320Z","0.4.4":"2014-06-06T06:14:23.663Z","0.4.5":"2015-01-16T22:03:29.092Z","0.4.6":"2015-03-18T03:52:31.810Z","0.4.7":"2015-03-20T23:06:39.333Z","0.4.8":"2015-08-05T18:22:10.293Z","0.4.9":"2015-09-02T20:10:04.830Z","0.4.10":"2016-11-12T08:12:34.381Z"},"users":{"ee":true,"nguru":true}}}