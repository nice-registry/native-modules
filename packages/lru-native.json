{"name":"lru-native","version":"0.4.0","description":"a native LRU cache implementation","devDependencies":{"chai":"latest","coffee-script":"1.7.1","mocha":"latest","nan":"^2.2.0"},"scripts":{"valgrind":"valgrind --leak-check=full --show-possibly-lost=no node --expose-gc --trace-gc node_modules/mocha/bin/_mocha -R spec --compilers coffee:coffee-script","install":"node-gyp rebuild"},"gypfile":true,"gitHead":"225100192d4d2813b78978731bccbb36a7e69ce7","versions":[{"number":"0.1.0","date":"2013-08-25T13:28:10.085Z"},{"number":"0.2.0","date":"2013-08-27T01:11:39.831Z"},{"number":"0.3.0","date":"2013-08-27T17:49:29.827Z"},{"number":"0.3.1","date":"2015-11-23T17:53:39.700Z"},{"number":"0.4.0","date":"2016-05-22T15:54:11.820Z"}],"readme":"node-lru-native\n===============\n\nThis is an implementation of a simple in-memory cache for node.js, supporting LRU (least-recently-used) eviction\nand TTL expirations.\n\nIt was developed as an alternative to the (excellent) [node-lru-cache](https://github.com/isaacs/node-lru-cache)\nlibrary for use with hashes with a very large number of items. V8 normally does a good job of optimizing the\nin-memory representation of objects, but it isn't optimized for an object that holds a huge amount of data.\nWhen you add a very large number of properties (particularly with non-integer keys) to an object, performance\nbegins to suffer.\n\nRather than rely on V8 to figure out what we're trying to do, `node-lru-native` is a light wrapper around\n`std::unordered_map` from C++11. A `std::list` is used to track accesses so we can evict the least-recently-used\nitem when necessary.\n\nBased on the [node-hashtable](https://github.com/isaacbwagner/node-hashtable) library by Issac Wagner.\n\n# Usage\n\nInstall via npm:\n\n```\n$ npm install lru-native\n```\n\nThen:\n\n```javascript\nvar LRUCache = require('lru-native');\nvar cache = new LRUCache({ maxElements: 1000 });\ncache.set('some-key', 42);\nvar value = cache.get('some-key');\n```\n\nIf you'd like to tinker, you can build the extension using [node-gyp](https://github.com/TooTallNate/node-gyp):\n\n```\n$ npm install -g node-gyp\n$ node-gyp configure\n$ node-gyp build\n```\n\n# Configuration\n\nTo configure the cache, you can pass a hash to the `LRUCache` constructor with the following options:\n\n```\nvar cache = new LRUCache({\n\n  // The maximum number of items to add to the cache before evicting the least-recently-used item.\n  // Default: 0, meaning there is no maximum.\n  maxElements: 10000,\n\n  // The maximum age (in milliseconds) of an item.\n  // The item will be removed if get() is called and the item is too old.\n  // Default: 0, meaning items will never expire.\n  maxAge: 60000,\n\n  // The initial number of items for which space should be allocated.\n  // The cache will resize dynamically if necessary.\n  size: 1000,\n\n  // The maximum load factor for buckets in the unordered_map.\n  // Typically you won't need to change this.\n  maxLoadFactor: 2.0\n\n});\n```\n\n# API\n\n## set(key, value)\n\nAdds the specified item to the cache with the specified key.\n\n## get(key)\n\nReturns the item with the specified key, or `undefined` if no item exists with that key.\n\n## remove(key)\n\nRemoves the item with the specified key if it exists.\n\n## clear()\n\nRemoves all items from the cache.\n\n## size()\n\nReturns the number of items in the cache.\n\n## stats()\n\nReturns a hash containing internal information about the cache.\n\n# Changelog\n\n- 0.4.0 -- Added support for newer versions of Node via NAN\n- 0.3.0 -- Changed memory allocation strategy, fixed issue where remove() would do a seek through the LRU list, code cleanup\n- 0.2.0 -- Fixed issue where maxAge-based removal would result in a seek through the LRU list\n- 0.1.0 -- Initial release\n","starsCount":4,"created":"2013-08-25T13:28:09.437Z","modified":"2016-10-02T08:26:48.080Z","lastPublisher":{"name":"micha","email":"micha.niskin@gmail.com"},"owners":[{"name":"averyj","email":"javery@adzerk.com"},{"name":"micha","email":"micha.niskin@gmail.com"},{"name":"nkohari","email":"nkohari@gmail.com"},{"name":"skrblr","email":"vchwalowski@adzerk.com"}],"other":{"_attachments":{},"_from":".","_id":"lru-native","_nodeVersion":"5.0.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/lru-native-0.4.0.tgz_1463932449529_0.8754623206332326"},"_npmUser":{"name":"micha","email":"micha.niskin@gmail.com"},"_npmVersion":"3.3.6","_rev":"1-3254f06ebfb40ab968cb17968e61a25b","_shasum":"bc13c32dfbd1719c02f1a0392a54e7e5c6114654","directories":{},"dist-tags":{"latest":"0.4.0"},"dist":{"shasum":"bc13c32dfbd1719c02f1a0392a54e7e5c6114654","tarball":"http://registry.npmjs.org/lru-native/-/lru-native-0.4.0.tgz"},"maintainers":[{"name":"averyj","email":"javery@adzerk.com"},{"name":"micha","email":"micha.niskin@gmail.com"},{"name":"nkohari","email":"nkohari@gmail.com"},{"name":"skrblr","email":"vchwalowski@adzerk.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-02T08:26:48.080Z","created":"2013-08-25T13:28:09.437Z","0.1.0":"2013-08-25T13:28:10.085Z","0.2.0":"2013-08-27T01:11:39.831Z","0.3.0":"2013-08-27T17:49:29.827Z","0.3.1":"2015-11-23T17:53:39.700Z","0.4.0":"2016-05-22T15:54:11.820Z"},"users":{"allain":true,"makay":true,"phaibin":true,"fanazhe":true}}}